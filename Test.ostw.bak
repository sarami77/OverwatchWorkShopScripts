import "Test.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/Regeneration.del";
import "Lib/Revive.del";

// Builtin -----------------------------------------------
globalvar define playerTeam;
globalvar define enemyTeam;
globalvar define initCompleted!;

rule: "BuiltinGlobal"
Event.OngoingGlobal
if(
    true
){
    Wait(15);

    // reviveEnableTeams = [Team.Team1];

    SetMatchTime(900);

    while(true){
        if(TeamOf(HostPlayer()) == Team.Team1){
            playerTeam = Team.Team1;
            enemyTeam = Team.Team2;
        }
        else if(TeamOf(HostPlayer()) == Team.Team2){
            playerTeam = Team.Team2;
            enemyTeam = Team.Team1;
        }
        else{
            playerTeam = Team.Team2;
            enemyTeam = Team.Team1;    
        }

        initCompleted = true;

        SetRespawnMaxTime(AllPlayers(), 15);
        Wait(5, WaitBehavior.IgnoreCondition);
    }
}

// TAG Buddy ----------
import "Lib/Bot.del";

define playerRespawnTime: 15;

rule: "Buddy/BuddyContorl"
Event.OngoingGlobal
if(
    initCompleted
){
    DisableInspectorRecording();

    define assetE! = [
            [EnemyType.None,    Hero.Hanzo, 3]
        ];
    CreateBotsByAsset(assetE, enemyTeam, 24);

    define assetP! = [
            [EnemyType.None,    Hero.Hanzo, 3]
        ];
    CreateBotsByAsset(assetP, playerTeam, 24);


}

// Test Code -----------------------------------------------



// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
    dbgMsg(<"setSlow <0>", slow>);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}

rule: "Debug/TuneVal/debugTrigger"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.PrimaryFire)
    )
){
    SetUltimateCharge(AllPlayers(enemyTeam), 100);
    PressButton(AllPlayers(enemyTeam), Button.Ultimate);
}