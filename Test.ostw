import "Lib/Utility.ostw";
import "Lib/PerkCore.ostw";
import "Lib/Debug.ostw";

// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 100);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 100);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    SetRespawnMaxTime(AllPlayers(), 5);
    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Debug/spawnBotAndUsePerk"
Event.OngoingPlayer
if(
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    WaitLongPressConfirm();
    // make bot
    CreateDummyBot(
        Hero.Reinhardt,
        Team.Team1, 5,
        NearestWalkablePosition(AimingPosition()), -FacingDirectionOf(EventPlayer()));
    define player = PlayersInSlot(5, Team.Team1);

    player.perkType = PerkType.Non;
    player.perkState = PerkState.Non;
    WaitChangeState();
    player.perkType = PerkType.Titan;
    player.perkState = PerkState.Using;
}

rule: "Debug/overridePerk"
Event.OngoingPlayer
Team.Team1
if(
    perkState == PerkState.Using
){
    perkType = PerkType.Titan;
}

rule: "Debug/startButtonHold"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    EventPlayer() != HostPlayer() &&
    (DistanceBetween(EventPlayer(), HostPlayer()) <= 6)
){
    dbgMsg("StartHoldingButton");
    StartHoldingButton(EventPlayer(), Button.Jump);
}

rule: "Debug/stopButtonHold"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    EventPlayer() != HostPlayer() &&
    !(DistanceBetween(EventPlayer(), HostPlayer()) <= 5)
){
    dbgMsg("StopHoldingButton");
    StopHoldingButton(EventPlayer(), Button.Jump);
}

// Test Code -----------------------------------------------
// TAG Titan ----------
playervar define titanHealthPoolID;

rule: "Perk/Player/Titan/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = 0;
    rider = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(
        rider != 0 ?
            <"<0> <1> riding on your back.", rider, HeroIconString(HeroOf(rider))> :
            "Teammate can ride your back.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold crouch or crouch button <0> to get smaller.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[1] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Reinhardt;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 200;
    perkHero.healingReceived = 10.0;
    perkHero.damageDealt = 300;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // set pool health
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 1500, true, false);
    titanHealthPoolID = LastCreatedHealthPool();

    // start grow big
    PressButton(EventPlayer(), Button.Crouch);
}

rule: "Perk/Player/Titan/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Non
){
    // set param
    perkEffectStatus = 0;
    DetachPlayers(rider);
    Teleport(rider, EventPlayer());
    rider.ridingTitan = 0;
    rider = 0;
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset status
    RemoveHealthPoolFromPlayer(titanHealthPoolID);
    StopScalingPlayer(EventPlayer());
    StopModifyingHeroVoiceLines(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Titan/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Titan/growBig"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    !(IsCrouching() || IsButtonHeld(EventPlayer(), Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);

    if(!( 0 <= perkEffectStatus && perkEffectStatus <= 1)) perkEffectStatus = 0;
    while(perkEffectStatus < 1){
        StartScalingPlayer(EventPlayer(), 1 + (perkEffectStatus * 1.25), false);
        perkEffectStatus += 0.1;
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
    StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);
}

rule: "Perk/Player/Titan/getSmall"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    (IsCrouching() || IsButtonHeld(EventPlayer(), Button.Crouch))
){
    DetachPlayers(rider);
    Teleport(rider, EventPlayer());
    rider.ridingTitan = 0;
    rider = 0;

    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);

    if(!( 0 <= perkEffectStatus && perkEffectStatus <= 1)) perkEffectStatus = 1;
    while(perkEffectStatus > 0){
        StartScalingPlayer(EventPlayer(), 1 + (perkEffectStatus * 1.25), false);
        perkEffectStatus -= 0.1;
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
    StartModifyingHeroVoiceLines(EventPlayer(), 1.0, false);
}

rule: "Perk/Player/Titan/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

define canRideRange : 6.0;
define nearTitan:
    FilteredArray(
        AllPlayers(Team.Team1),
        (
            ArrayElement() != EventPlayer() &&
            ArrayElement().perkType == PerkType.Titan &&
            ArrayElement().perkState == PerkState.Using &&
            ArrayElement().rider == 0 &&
            ArrayElement().perkEffectStatus == 1 &&
            DistanceBetween(EventPlayer(), ArrayElement()) <= canRideRange
        )
    );
define canRide:
    IsAlive() &&
    EventPlayer().ridingTitan == 0 &&
    CountOf(nearTitan) > 0;

playervar define rider;

rule: "Perk/Player/Titan/showOperationGetOn"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    canRide
){
    WaitChangeState();
    // set hud
    CreatePerkEffectHud(<"Hold jump button <0> to get on titan.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[200] = LastTextID();
}

rule: "Perk/Player/Titan/hideOperationGetOn"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !canRide
){
    WaitChangeState();
    DestroyHudText(perkEffectAndText[200]);
}

playervar define ridingTitan;

rule: "Perk/Player/Titan/getOnTitan"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    canRide &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();

    SmallMessage(EventPlayer(), "Killed enemy on riding Titan, can add Titan's activity time.");
    ridingTitan = FirstOf(nearTitan);
    AttachPlayers(EventPlayer(), ridingTitan, (Up() * 4.0));
    ridingTitan.rider = EventPlayer();
}

rule: "Perk/Player/Titan/showOperationGetOff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    ridingTitan != 0
){
    WaitChangeState();
    // set hud
    CreatePerkEffectHud(<"Press crouch button <0> to get off titan.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[201] = LastTextID();
}

rule: "Perk/Player/Titan/hideOperationGetOff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    ridingTitan == 0
){
    WaitChangeState();
    DestroyHudText(perkEffectAndText[201]);
}

rule: "Perk/Player/Titan/addActivityTime"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    ridingTitan.perkType == PerkType.Titan &&
    ridingTitan.perkState == PerkState.Using
){
    SmallMessage(EventPlayer(), "Added 8 seconds of titan's activity time.");
    ridingTitan.perkTimeLimit += 8;
}

rule: "Perk/Player/Titan/getOffTitan"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    ridingTitan != 0 &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    DetachPlayers(ridingTitan.rider);
    Teleport(EventPlayer(), ridingTitan);
    ridingTitan.rider = 0;
    ridingTitan = 0;
}

// Debug -----------------------------------------------
globalvar define param = 1;
define tuneUnit: 10;

rule: "showParam"
Event.OngoingGlobal
{
     CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "param", param>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

        CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        
}

rule: "increaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    param += tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "decreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    param -= tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}
