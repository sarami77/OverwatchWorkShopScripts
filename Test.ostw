import "Lib/Utility.ostw";
import "Lib/Debug.ostw";

// Common -----------------------------------------------
playervar define perkTimeLimit;

playervar define perkType;
enum PerkType{  // TAG perk type
    Non,
    HighJump,
    GrapplingBeam,
    Sprinter,
    Adrenaline,
    Savior,
    Fearless,
    SteelFormation,
    PersonalShelter,
    BioticStation,
    TrapBeam,
    BattleFlag,
    ChainExplosion,
    AimHack,
    Vampire,
    ShotCaller,
    SupportArtillery,
    CruisingMissile,
    CarePackage,
    GrudgeFireBall,
    DeathFromAbove,
    LegendalyNinja,
    MachDelivery,
    Juggernaut,
    BeamSniper,
    DragonStorm,
    Titan,
    Annihilator
}
playervar define perkState;
enum PerkState{
    Non,
    Ready,
    Using
}
playervar define perkEffectAndText;
playervar define perkEffectStatus;
playervar define aimPosition;
playervar define aimPosition2;
playervar define perkPosition;
playervar define perkPosition2;
playervar define landPosition;
playervar define landPosition2;
playervar define perkTargets;


// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 100);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 10);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    SetRespawnMaxTime(AllPlayers(), 5);
    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Perk/Player/usePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    WaitLongPressConfirm();
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);
    PlayEffect(
        EventPlayer(), PlayEffect.BuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkType = PerkType.SupportArtillery;    
    perkState = PerkState.Using;
}

rule: "Perk/Player/countDownTimeLimit"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit > 0
){
    // count down perk active limit time
    WaitUpdateMediumCycle();
    perkTimeLimit -= 1;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/timeLimitOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    // lose perk by active limit time out
    WaitConditionConfirmed();
    perkState = PerkState.Non;
}

rule: "Perk/Player/cancelPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    // lose perk by cancel operation of interact key hold
    WaitCancelPressConfirm();
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkState = PerkState.Non;
}

disabled rule: "Debug/forceUsePerk // for bot"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive()
){
    if(
        DistanceBetween(
            EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team2)) <= 10 &&
        RandomInteger(1, 100) <= 50
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodPickupEffect,
            Color.White, EventPlayer(), 1);
        PlayEffect(
            EventPlayer(), PlayEffect.BuffImpactSound,
            Color.White, EventPlayer(), MaxLength());
        perkType = PerkType.SupportArtillery;  
        perkState = PerkState.Using;
    }
    Wait(5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();    
}

// Test Code -----------------------------------------------
rule: "global_TEST"
Event.OngoingPlayer
if(
    true
){
    SetMatchTime(15);
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "player_TEST"
Event.OngoingPlayer
if(
    !IsCrouching()
){
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        EventPlayer()
    );
}

define fireBallSpeed: 50;
playervar define fireBallPower;
playervar define fireBallSize;
playervar define fireBallDamageRange;

rule: "Perk/Player/GrudgeFireBall/init"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    HostPlayer()
){
    perkEffectStatus = 100;
}

rule: "Perk/Player/GrudgeFireBall/chargeByTakenDamage"
Event.OnDamageTaken
Team.Team1
Player.All
if(
    HostPlayer() &&
    EventDamage() > 0
){
    fireBallPower += EventDamage();
}

rule: "Perk/Player/GrudgeFireBall/shot"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    HostPlayer() &&
    perkEffectStatus == 100 &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    fireBallPower += param;

    AbortIf(fireBallPower < 0);
    WaitLongPressConfirm();

    perkPosition = EyePosition();
    landPosition = AimingPositionIgnorePlayer();
    // start movement
    UpdateEveryFrame(perkPosition);
    ChaseVariableAtRate(
        perkPosition, landPosition, fireBallSpeed,
        RateChaseReevaluation.DestinationAndRate);

    fireBallSize = fireBallPower * 0.01;
    fireBallDamageRange = fireBallSize * 2;
    // show ball
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Orange,
        perkPosition, fireBallSize, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[0] = LastCreatedEntity();
    // show aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Orange,
        perkPosition, fireBallSize * 1.5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition + (FacingDirectionOf() * 1), fireBallSize);
    // play shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.DebuffImpactSound,
        Color.White, AllPlayers(), fireBallSize * 30);

    perkEffectStatus = 1;
}

rule: "Perk/Player/GrudgeFireBall/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkEffectStatus == 1
){
    Wait(DistanceBetween(perkPosition, landPosition) / fireBallSpeed,
        WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/hitToPlyer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkEffectStatus == 1 &&
    IsAlive(ClosestPlayerTo(perkPosition, Team.Team2)) &&
    DistanceBetween(
        perkPosition,
        ClosestPlayerTo(perkPosition, Team.Team2))
    <= fireBallSize * 0.5
){
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/timeOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkEffectStatus == 1
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

void ExplodeFireBall()"Subroutine/ExplodeFireBall"{
    perkEffectStatus = 2;

    // stop movement
    StopChasingVariable(perkPosition);
    // hide ball
    DestroyEffect(perkEffectAndText[0]);
    // hide aura
    DestroyEffect(perkEffectAndText[1]);
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition, fireBallDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply Impulse
    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        ApplyImpulse(perkTargets[pLoopIndex],
            VectorTowards(perkPosition, perkTargets[pLoopIndex] + Up()),
            fireBallSize * 10, Relative.ToWorld, ContraryMotion.Cancel);
    }
    // show impulse
    WaitEntityImpulse();
    // damage
    Damage(perkTargets, EventPlayer(), fireBallPower);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(), fireBallSize * 30);
    // play blast effect
    PlayContinuousBlast(perkPosition,
        fireBallDamageRange,
        fireBallSize < 7 ? fireBallSize : 7,
        Color.Orange);

    fireBallPower = 0;
    Wait(1, WaitBehavior.IgnoreCondition);
    perkEffectStatus = 100;
}

// Debug -----------------------------------------------
globalvar define param = 1;
define tuneUnit: 10;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "fire Ball Power", HostPlayer().fireBallPower>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "param", param>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

        CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        
}

rule: "increaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    param += tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "decreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    param -= tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}
