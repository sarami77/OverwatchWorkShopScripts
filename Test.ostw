import "Lib/Utility.ostw";
import "Lib/Debug.ostw";
//import "Lib/PerkCore.ostw";

// Builtin -----------------------------------------------

rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 600);
    SetDamageReceived(EventPlayer(), 1);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 7);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    define others = FilteredArray(AllPlayers(), ArrayElement() != EventPlayer());
    SetMoveSpeed(others, 1000);

    SetRespawnMaxTime(AllPlayers(Team.Team2), 1);

    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Debug/spawnBot"
Event.OngoingPlayer
if(
    intaractDoublePressed
){
    // delete bot
    if(NumberOfPlayers(Team.Team2) >=  NumberOfSlots(Team.Team2)){
        define player = FarthestPlayerFrom(AimingPosition(), Team.Team2);
        DestroyDummyBot(Team.Team2, SlotOf(player));
    }
    WaitUntil(NumberOfPlayers(Team.Team2) <  NumberOfSlots(Team.Team2), 3);
    // search empty slot
    for(gLoopIndex = 0; gLoopIndex < NumberOfSlots(Team.Team2); gLoopIndex++){
        if(null == PlayersInSlot(gLoopIndex, Team.Team2)){
            break;
        }
    }
    // add bot
    if(gLoopIndex < NumberOfSlots(Team.Team2)){
        CreateDummyBot(
            RandomValueInArray(AllHeroes()),
            Team.Team2, gLoopIndex,
            AimingPosition() + Up(),
            FacingDirectionOf()
        );
    }
}

// disabled rule: "Debug/overridePerk"
// Event.OngoingPlayer
// Team.Team1
// if(
//     perkState == PerkState.Using
// ){
//     perkType = PerkType.GrudgeThunderStrike;
// }


// Test Code -----------------------------------------------
class AutoBot{
    public define hero = null;
    public define actionState = null;
    public define combatRange = null;
    public define primaryWeaponButton = null;
    public define primaryWeaponBehaivor = null;
    public define primaryWeaponRange = null;
    public define primaryWeaponTarget = null;
    public define secondaryWeaponButton = null;
    public define secondaryWeaponBehaivor = null;
    public define secondaryWeaponRange = null;
    public define secondaryWeaponTarget = null;

    public AutoBot(Hero setHero){
        // set hero
        hero = setHero;
        // set combatRange
        switch(setHero){
            case Hero.Reinhardt:
            case Hero.Brigitte:
            combatRange = CombatRange.Melee; 
            break;

            case Hero.Doomfist:
            case Hero.Dva:
            case Hero.Genji:
            case Hero.Mei:
            case Hero.Reaper:
            case Hero.Roadhog:
            case Hero.Sigma:
            case Hero.Winston:
            case Hero.Zarya:
            combatRange = CombatRange.Close; 
            break;

            case Hero.Baptiste:
            case Hero.Bastion:
            case Hero.Echo:
            case Hero.Junkrat:
            case Hero.Lucio:        
            case Hero.Mccree:
            case Hero.Moira:
            case Hero.Orisa:
            case Hero.Pharah:
            case Hero.Soldier76:
            case Hero.Sombra:
            case Hero.Symmetra:
            case Hero.Torbjorn:
            case Hero.Tracer:
            case Hero.WreckingBall:
            case Hero.Zenyatta:
            combatRange = CombatRange.Middle; 
            break;

            case Hero.Ana:
            case Hero.Ashe:
            case Hero.Hanzo:
            case Hero.Mercy:
            case Hero.Widowmaker:
            combatRange = CombatRange.Far; 
            break;

            default:
            break;
        }
        // set primaryWeaponButton
        switch(setHero){
            case Hero.Ana:
            case Hero.Ashe:
            case Hero.Baptiste:
            case Hero.Bastion:
            case Hero.Brigitte:
            case Hero.Doomfist:
            case Hero.Dva:
            case Hero.Echo:
            case Hero.Genji:
            case Hero.Hanzo:
            case Hero.Junkrat:
            case Hero.Lucio:        
            case Hero.Mccree:
            case Hero.Mei:
            case Hero.Mercy:
            case Hero.Orisa:
            case Hero.Pharah:
            case Hero.Reaper:
            case Hero.Reinhardt:
            case Hero.Roadhog:
            case Hero.Sigma:
            case Hero.Soldier76:
            case Hero.Sombra:
            case Hero.Symmetra:
            case Hero.Torbjorn:
            case Hero.Tracer:
            case Hero.Widowmaker:
            case Hero.Winston:
            case Hero.WreckingBall:
            case Hero.Zarya:
            case Hero.Zenyatta:
            primaryWeaponButton = Button.PrimaryFire; 
            break;

            case Hero.Moira:
            primaryWeaponButton = Button.SecondaryFire; 
            break;

            default:
            break;
        }
        // set primaryWeaponBehaivor
        switch(setHero){
            case Hero.Baptiste:
            case Hero.Bastion:
            case Hero.Brigitte:
            case Hero.Doomfist:
            case Hero.Dva:
            case Hero.Echo:
            case Hero.Genji:
            case Hero.Junkrat:
            case Hero.Lucio:        
            case Hero.Mccree:
            case Hero.Mei:
            case Hero.Mercy:
            case Hero.Moira:
            case Hero.Orisa:
            case Hero.Pharah:
            case Hero.Reaper:
            case Hero.Reinhardt:
            case Hero.Roadhog:
            case Hero.Sigma:
            case Hero.Soldier76:
            case Hero.Sombra:
            case Hero.Symmetra:
            case Hero.Torbjorn:
            case Hero.Tracer:
            case Hero.Winston:
            case Hero.WreckingBall:
            case Hero.Zarya:
            case Hero.Zenyatta:
            primaryWeaponBehaivor = WeaponBehaivor.Hold; 
            
            case Hero.Hanzo:
            primaryWeaponBehaivor = WeaponBehaivor.HoldAndRelease; 
            break;
            
            case Hero.Ana:
            case Hero.Ashe:
            case Hero.Widowmaker:
            primaryWeaponBehaivor = WeaponBehaivor.ADS; 
            break;

            default:
            break;
        }
        // set primaryWeaponBehaivor
        switch(setHero){
            case Hero.Ana:
            case Hero.Ashe:
            case Hero.Baptiste:
            case Hero.Bastion:
            case Hero.Brigitte:
            case Hero.Doomfist:
            case Hero.Dva:
            case Hero.Echo:
            case Hero.Genji:
            case Hero.Hanzo:
            case Hero.Junkrat:
            case Hero.Lucio:        
            case Hero.Mccree:
            case Hero.Mei:
            case Hero.Moira:
            case Hero.Orisa:
            case Hero.Pharah:
            case Hero.Reaper:
            case Hero.Reinhardt:
            case Hero.Roadhog:
            case Hero.Sigma:
            case Hero.Soldier76:
            case Hero.Sombra:
            case Hero.Symmetra:
            case Hero.Torbjorn:
            case Hero.Tracer:
            case Hero.Widowmaker:
            case Hero.Winston:
            case Hero.WreckingBall:
            case Hero.Zarya:
            case Hero.Zenyatta:
            primaryWeaponTarget = WeaponTarget.Enemy; 
            break;

            case Hero.Mercy:
            primaryWeaponTarget = WeaponTarget.Friend; 
            break;

            default:
            break;
        }
    }
}

enum RoleType{
    Non,
    Minion,
    Elete,
    Boss
}

enum ActionState{
    Non,
    Wandering,
    Combat,
    Searching
}

enum CombatRange{
    Non,
    Melee,
    Close,
    Middle,
    Far
}

enum WeaponBehaivor{
    Non,
    Hold,
    HoldAndRelease,
    ADS
}

enum WeaponTarget{
    Non,
    Enemy,
    Friend,
    Both
}

playervar define statusText;
playervar define eyesPos;
playervar define upperSensor;
playervar define frontSensor;
playervar define underSensor;
playervar define tuneDir;
playervar define target;
playervar define watchUpdateRate;
define watchEnemyAroundAngle: 100;
define watchEnemyAroundDist: 10;

rule: "Enemy/Debug/positionMarker"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    // show frontSensor distance
    CreateBeamEffect(
        HostPlayer(), BeamType.GoodBeam,
        eyesPos, frontSensor,
        Color.White,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show upperSensor distance
    CreateBeamEffect(
        HostPlayer(), BeamType.GoodBeam,
        eyesPos, upperSensor,
        Color.Blue,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show underSensor distance
    CreateBeamEffect(
        HostPlayer(), BeamType.GoodBeam,
        frontSensor, underSensor,
        Color.Red,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show status text
    CreateInWorldText(
        HostPlayer(), statusText,
        ep, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
}

define isContactPlayer: 
    IsInLineOfSight(ep, ClosestPlayerTo(ep, Team.Team1)) &&
    !(
        HeroOf(target) == Hero.Sombra && IsUsingAbility1(target) &&
        DistanceBetween(ep, ClosestPlayerTo(ep, Team.Team1)) >= 2
    );

define upperSensorLength : 3;
define frontSensorLength : 6;
define underSensorLength : 6;

enum SensedObject{
    None,
    Wall,
    Criff,
    DownStair,
    UpStair
}
Boolean getSensedObject()"getSensedObject"{
    SensedObject object = SensedObject.None;
    define moveDir = Vector(
        XOf(FacingDirectionOf()),
        0,
        ZOf(FacingDirectionOf())
    );
    moveDir = Normalize(moveDir);
    eyesPos = EyePosition();
    frontSensor = ShiftedPosition(eyesPos, moveDir, frontSensorLength);
    upperSensor = ShiftedPosition(frontSensor, Up(), upperSensorLength);
    underSensor = ShiftedPosition(frontSensor, Down(), underSensorLength);
    define isFrontSensorBlocked = IsBlockedBetween(eyesPos, frontSensor);
    define isUpperSensorBlocked = IsBlockedBetween(eyesPos, upperSensor);
    define isUnderSensorBlocked = IsBlockedBetween(frontSensor, underSensor);
    if(isFrontSensorBlocked){
        if(isUpperSensorBlocked){
            object = SensedObject.Wall;
        }
        else{
            object = SensedObject.UpStair;
        }
    }
    else{
        if(isUnderSensorBlocked){
            object = SensedObject.DownStair;
        }
        else{
            object = SensedObject.Criff;
        }
    }
    return object;
}

define isStacked:
    SpeedOf() <= 2.0;

playervar define actionState;

rule: "Enemy/State/StateControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    if(isContactPlayer){
        // combat by contact player
        actionState = ActionState.Combat; 
    }
    else{
        // near targetPos
        if(
            isStacked ||  // stacked
            DistanceBetween(ep, targetPos) < 1
        ){
            // start wardering by target lost
            actionState = ActionState.Wandering;    
        }
        else{
            // start searching by target lost
            actionState = ActionState.Searching;
        }
        
    }
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Enemy/State/Wandering"
Event.OngoingPlayer
if(
    actionState == ActionState.Wandering
){
    statusText = <"Wandering">;

    // set initial status
    targetPos = 0;
    StopFacing(ep);
    SetMoveSpeed(ep, 100);

    // action loop
    while(true){
        SensedObject object = getSensedObject();
        // blocked by cliff
        if(object == SensedObject.Criff){
            statusText = <"isBlockedByCliff">;
            // not set turn direction
            if(tuneDir == 0){
                // set turn direction
                if(RandomInteger(0, 100) <= 50){
                    tuneDir = Right();
                }
                else{
                    tuneDir = Left();
                }
            }
            // set curve to left/right direction
            SetFacing(ep, Forward() + (tuneDir * 1), Relative.ToPlayer);
            // shorten watch update rate
            watchUpdateRate = 0.1;
        }
        // blocked by wall
        else if(object == SensedObject.Wall){
            statusText = <"isBlockedByWall">;
            if(tuneDir == 0){
                if(RandomInteger(0, 100) <= 50){
                    tuneDir = Right();
                }
                else{
                    tuneDir = Left();
                }
            }
            SetFacing(ep, Forward() + (tuneDir * 0.25), Relative.ToPlayer);
            watchUpdateRate = 0.1;
        }
        // not blocked
        else{
            statusText = <"Walking">;
            tuneDir = 0;    // reset turn direction
            StartThrottleInDirection(
                ep, Forward(), 1,
                Relative.ToPlayer,
                ThrottleBehavior.ReplaceExistingThrottle,
                ThrottleRev.DirectionAndMagnitude);
            watchUpdateRate = 0.5;
        }

        if(isStacked){
            PressButton(ep, Button.Jump);
            Wait(1, WaitBehavior.AbortWhenFalse);
            if(isStacked){
                SetFacing(ep, Backward(), Relative.ToPlayer);
            }
        }

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

playervar define primaryWeaponButton;
playervar define primaryWeaponBehavor;
playervar define targetPos;
playervar define ownPos;
playervar define combatMinRange;
playervar define combatMaxRange;
playervar define combatMoveDir;
playervar define sideStepDir;
playervar define sideStepKeepSecond;
playervar define waitJumpSecond;

rule: "Enemy/State/Combat"
Event.OngoingPlayer
if(
    actionState == ActionState.Combat
){
    statusText = <"Combat">;
    SetRespawnMaxTime(ep, 1);

    AutoBot bot = new AutoBot(HeroOf(ep));
    primaryWeaponButton = bot.primaryWeaponButton;
    primaryWeaponBehavor = bot.primaryWeaponBehaivor;

    // set initial status
    watchUpdateRate = 0.5;
    combatMoveDir = 0;
    sideStepDir = 0;
    StartFacing(
            ep,
            DirectionTowards(
                EyePosition(),
                target + (Up() * 1.0)),
            MaxValue(),
            Relative.ToWorld, FacingRev.DirectionAndTurnRate
        );   
    SetMoveSpeed(ep, 100);

    // set combat range
    switch(bot.combatRange){
        case CombatRange.Melee:
            combatMinRange = 1;
            combatMaxRange = 3;
            break;
        case CombatRange.Close:
            combatMinRange = 1;
            combatMaxRange = 8;
            break;
        case CombatRange.Middle:
            combatMinRange = 8;
            combatMaxRange = 16;
            break;
        case CombatRange.Far:
            combatMinRange = 16;
            combatMaxRange = 24;
            break;
    }
    
    // action loop
    while(true){
        // set target
        target = ClosestPlayerTo(ep, Team.Team1);
        targetPos = PositionOf(target);
        ownPos = PositionOf();
        // change combat distance
        SensedObject object = getSensedObject();
        define distToTarget = DistanceBetween(ep, target);
        if(object == SensedObject.Criff){
            combatMoveDir = 0;
            statusText = <"Combat Stop by Cliff">;
        }
        else if(distToTarget > combatMaxRange){
            combatMoveDir = Forward();
            statusText = <"Combat Forward">;
        }
        else if(distToTarget < combatMinRange){
            combatMoveDir = Backward();
            statusText = <"Combat Backward">;
        }
        else{
            combatMoveDir = 0;
            statusText = <"Combat Stop">;
        }
        // change side step
        if(
            sideStepKeepSecond == 0  || // not keep side step
            isStacked
        ){
            if(RandomInteger(0, 100) <= 70){
                sideStepDir = RandomValueInArray([Right(),Left()]);
                sideStepKeepSecond = RandomInteger(1, 3);
            }
            else{
                sideStepDir = 0;
                sideStepKeepSecond = RandomInteger(0, 1);
            }
        }
        // set move direction
        if(combatMoveDir != 0 && sideStepDir != 0){
            StartThrottleInDirection(
                ep, (combatMoveDir + sideStepDir), 1,
                Relative.ToPlayer,
                ThrottleBehavior.ReplaceExistingThrottle,
                ThrottleRev.DirectionAndMagnitude);
        }
        else if(combatMoveDir == 0 && sideStepDir != 0){
            StartThrottleInDirection(
                ep, sideStepDir, 1,
                Relative.ToPlayer,
                ThrottleBehavior.ReplaceExistingThrottle,
                ThrottleRev.DirectionAndMagnitude);
        }
        else if(combatMoveDir != 0 && sideStepDir == 0){
            StartThrottleInDirection(
                ep, combatMoveDir, 1,
                Relative.ToPlayer,
                ThrottleBehavior.ReplaceExistingThrottle,
                ThrottleRev.DirectionAndMagnitude);
        }
        else{
            StopThrottleInDirection();
        }

        // jump
        if(
            waitJumpSecond == 0 // not keep side step
        ){
            waitJumpSecond = RandomInteger(1, 3);
            PressButton(ep, Button.Jump);
        }
                
        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

rule: "Enemy/State/Searching"
Event.OngoingPlayer
if(
    actionState == ActionState.Searching
){
    statusText = <"Searching">;

    // set initial status
    StopFacing(ep); 
    SetMoveSpeed(ep, 100);

    if(sideStepDir == 0){
        sideStepDir = RandomValueInArray([Right(),Left()]);
    }
    else{
        // set reverse side step for find player
        sideStepDir = -sideStepDir;
    }
    StartThrottleInDirection(
        ep, (Forward() + sideStepDir), 1,
        Relative.ToPlayer,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude);

    SetFacing(ep, DirectionTowards(ep, targetPos), Relative.ToWorld);
}

rule: "Enemy/sideStepKeepSecond"
Event.OngoingPlayer
if(
    0 < sideStepKeepSecond
){
    while(1){
        Wait(1, WaitBehavior.AbortWhenFalse);
        sideStepKeepSecond--;
    }
}

rule: "Enemy/waitJumpSecond"
Event.OngoingPlayer
if(
    0 < waitJumpSecond
){
    while(1){
        Wait(1, WaitBehavior.AbortWhenFalse);
        waitJumpSecond--;
    }
}

rule: "Enemy/FireButton/ReleaseButton"
Event.OngoingPlayer
if(
    actionState != ActionState.Combat
){
    StopHoldingButton(ep, primaryWeaponButton);
    StopHoldingButton(ep, Button.SecondaryFire);
}

rule: "Enemy/FireButton/HoldingButton"
Event.OngoingPlayer
if(
    actionState == ActionState.Combat
){
    if(primaryWeaponBehavor == WeaponBehaivor.Hold){
        StartHoldingButton(ep, primaryWeaponButton);
    }
    else if(primaryWeaponBehavor == WeaponBehaivor.HoldAndRelease){
        while(1){
            StartHoldingButton(ep, primaryWeaponButton);
            Wait(2, WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, primaryWeaponButton);
        }
    }
    else if(primaryWeaponBehavor == WeaponBehaivor.ADS){
        StartHoldingButton(ep, Button.SecondaryFire);
        while(1){
            Wait(2, WaitBehavior.AbortWhenFalse);
            PressButton(ep, primaryWeaponButton);
        }
    }
}

playervar define teleportPosition;

disabled rule: "Enemy/Teleport/teleportToPlayerAroundOnSpawn"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    IsAlive() &&
    IsInSpawnRoom()
){
    SetTeleportPositionToPlayer();
    Teleport(ep, teleportPosition);
}

rule: "Enemy/Teleport/teleportByNotPlayerFound"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    IsAlive() &&
    actionState != ActionState.Non &&
    actionState != ActionState.Combat
){
    if(actionState == ActionState.Searching){
        Wait(3, WaitBehavior.AbortWhenFalse);
    }
    else{
        Wait(3, WaitBehavior.AbortWhenFalse);
    }
    SetTeleportPositionToPlayer();
    Teleport(ep, teleportPosition);
    LoopIfConditionIsTrue();
}

void SetTeleportPositionToPlayer()"SetTeleportPositionToPlayer"{
    // set teleport position by blind spot from player
    // find place that will be a blind spot up to 10 times
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        teleportPosition =
            NearestWalkablePosition(
                target
                    +
                RandomPosition(20, 20, 20)
            ) + Up();
        
        if(
            DistanceBetween(    // Not too close to player
                target, teleportPosition)
            > 5
                    &&
            IsInLineOfSight(   // can line from player 
                target,
                teleportPosition + Up(),
                BarrierLOS.NoBarriersBlock)
                    &&
            !IsInViewAngle(   // not see from player 
                target,
                teleportPosition + Up(),
                90)
        ){
            break;
        }
    }
}

// Debug -----------------------------------------------
define changeTimeInterval: 0.2;
globalvar define tuneVal = 1;
globalvar define consecutiveChangeCount = 0;
define initialTuneUnit : 0.1;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);       
}

rule: "startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else
        tuneUnit = initialTuneUnit * 100;
}