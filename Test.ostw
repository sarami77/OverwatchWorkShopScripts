import "Lib/Utility.del";
import "Lib/Debug.del";
import "Lib/DamageText.del" ;

// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == ep &&
    HasSpawned()
){
    // SetStatus(ep, null, Status.PhasedOut, 99999);
    SetMaxHealth(ep, 10000);
    SetDamageDealt(ep, 100);
    SetDamageReceived(ep, 100);
    SetHealingDealt(ep, 100);
    SetHealingReceived(ep, 100);
    SetJumpVerticalSpeed(ep, 100);
    SetMoveSpeed(ep, 1000);
    SetGravity(ep, 10);
    SetProjectileSpeed(ep, 100);
    SetProjectileGravity(ep, 100);
    StartScalingPlayer(ep, 1);
    StartScalingBarriers(ep, 1);
    SetUltimateCharge(ep, 0);

    damageTextEnableTeam = Team.Team2;
    // SetMoveSpeed(others, 1000);
    SetMaxHealth(AllPlayers(Team.Team2), 10000);
    SetRespawnMaxTime(AllPlayers(Team.Team2), 1);
    StartScalingPlayer(AllPlayers(Team.Team2), 1);

    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(ep, Hero.Widowmaker);

    // CreateEffect(ep, Effect.Ring, Color.Red,
    //     ep, 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(ep, Effect.Ring, Color.Orange,
    //     ep, 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(ep, Effect.Ring, Color.Yellow,
    //     ep, 30, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(ep, Effect.Ring, Color.SkyBlue,
    //     ep, 40, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(ep, Effect.Ring, Color.Blue,
    //     ep, 50, EffectRev.VisibleToPositionAndRadius);

    while(true){
        //SetMoveSpeed(ep, 1000);
        Wait(1, WaitBehavior.AbortWhenFalse);
    }    

    
}

globalvar define slow = 100;

rule: "Debug/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Jump) &&
    intaractDoublePressed
){ 
    // 100 -> 50 -> 25 -> 10
    if(slow == 100)
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = 100;
    else
        slow = 100;
    SetSlowMotion(slow);
    dbgMsg(<"setSlow <0>", slow>);
}

rule: "Debug/getPerk"
Event.OngoingPlayer
Team.Team1
if(
    IsButtonHeld(ep, Button.Interact) &&
    perkState == PerkState.Non &&
    perkType == PerkType.Non
){ 
    WaitLongPressConfirm();
    perkState = PerkState.Ready;
    perkType = PerkType.GrudgeFireBall;
}

// Test Code -----------------------------------------------
import "Lib/Perk/GrudgeFireBall.del";

rule: "debug_global"
Event.OngoingGlobal
{
}

rule: "debug_player"
Event.OngoingPlayer
{
}


// Debug -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);   
}

rule: "testAcrion"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact)
    )
){
    //
}

rule: "startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}