import "Lib/Utility.ostw";
import "Lib/PerkCore.ostw";
import "Lib/Debug.ostw";

// Builtin -----------------------------------------------

rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 0);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 7);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);
    SetRespawnMaxTime(AllPlayers(), 5);

    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

disabled rule: "Debug/startButtonHold"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    EventPlayer() != HostPlayer() &&
    (DistanceBetween(EventPlayer(), HostPlayer()) <= 6)
){
    dbgMsg("StartHoldingButton");
    StartHoldingButton(EventPlayer(), Button.Jump);
}

disabled rule: "Debug/stopButtonHold"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    EventPlayer() != HostPlayer() &&
    !(DistanceBetween(EventPlayer(), HostPlayer()) <= 5)
){
    dbgMsg("StopHoldingButton");
    StopHoldingButton(EventPlayer(), Button.Jump);
}

disabled rule: "Debug/spawnBotAndUsePerk"
Event.OngoingPlayer
if(
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    WaitLongPressConfirm();
    // make bot
    CreateDummyBot(
        Hero.Reinhardt,
        Team.Team1, 5,
        NearestWalkablePosition(AimingPosition()),
        FacingDirectionOf(
            EventPlayer()
        )
    );
    define player = PlayersInSlot(5, Team.Team1);

    player.perkType = PerkType.Non;
    player.perkState = PerkState.Non;
    WaitChangeState();
    player.perkType = PerkType.Titan;
    player.perkState = PerkState.Using;
}

rule: "Debug/overridePerk"
Event.OngoingPlayer
Team.Team1
if(
    perkState == PerkState.Using
){
    perkType = PerkType.AimHack;
}


// Test Code -----------------------------------------------


// TAG AimHack ----------
//playervar define autoAimingTarget;
rule: "Perk/Player/AimHack/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set status
    perkTargets = 0;
    autoAimingTarget = 0;
    perkEffectStatus = PerkEffectStatus.Triggered;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(perkEffectStatus == PerkEffectStatus.Triggered ?
        "Aim hack Enable." : "Aim hack Disable.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to toggle aim hack.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[1] = LastTextID();
}

rule: "Perk/Player/AimHack/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Non
){
    // reset status
    StopFacing();
    perkTargets = 0;
    autoAimingTarget = 0;
    perkEffectStatus = PerkEffectStatus.Disabled;
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/AimHack/toggleAimHack"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus == PerkEffectStatus.Triggered){
        perkEffectStatus = PerkEffectStatus.Ready;
    }
    else{
        perkEffectStatus = PerkEffectStatus.Triggered;
    }
    // play change sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());
}

rule: "Perk/Player/AimHack/startAutoAim"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    WaitUpdateShortCycle();
    AutoAim();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/AimHack/stopAutoAim"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready
){
    WaitConditionConfirmed();
    StopFacing(EventPlayer());
    autoAimingTarget = 0;
    perkTargets = 0;
}

rule: "Perk/Player/AimHack/setTargetByDangerTarget"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    Health() <= MaxHealth() / 2
){
    perkTargets = ClosestPlayerTo(EventPlayer(), Team.Team2);
    if(IsInLineOfSight(EventPlayer(), perkTargets)){
        dbgMsg("change target by danger");
        autoAimingTarget = perkTargets;
    }
}

void AutoAim()"AutoAim"{
    if(
        autoAimingTarget == 0 ||    // has not target
        IsDead(autoAimingTarget) || // target dead
        !IsInLineOfSight(           // target hidden
            EventPlayer(),
            autoAimingTarget,
            BarrierLOS.NoBarriersBlock
        )
    ){
        dbgMsg("search target");
        // get near target in sight
        perkTargets = FirstOf(
            SortedArray(
                FilteredArray(
                    PlayersInViewAngle(EventPlayer(), Team.Team2, 90),
                    (
                        IsAlive(ArrayElement()) &&
                        IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock) &&
                        !HasStatus(ArrayElement(), Status.Asleep)
                    )
                ),
                DistanceBetween(EventPlayer(), ArrayElement())
            )
        );
        // has new target and sighted
        if(
            perkTargets != 0 &&
            IsInLineOfSight(EventPlayer(), perkTargets)
        ){
            // start auto aim
            autoAimingTarget = perkTargets;
            StartAutoAiming();
        }
        // has not target
        else{
            // stop auto aim
            autoAimingTarget = 0;
            StopFacing(EventPlayer()); dbgMsg("has not target");
        }
    }


}

// Debug -----------------------------------------------
define changeTimeInterval: 0.2;
globalvar define tuneVal = 1;
globalvar define consecutiveChangeCount = 0;
define initialTuneUnit : 0.1;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);       
}

rule: "startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit = initialTuneUnit;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = (initialTuneUnit * 5);
    else
        tuneUnit = (initialTuneUnit * 10);
}