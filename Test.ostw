import "Test.setting.json";
import "Lib/Utility.del";
import "Lib/Debug.del";

// Builtin -----------------------------------------------
globalvar define playerTeam;
globalvar define enemyTeam;
globalvar define initCompleted!;

rule: "BuiltinGlobal"
Event.OngoingGlobal
{
    Wait(3, WaitBehavior.AbortWhenFalse);

    while(true){
        if(TeamOf(HostPlayer()) == Team.Team1){
            playerTeam = Team.Team1;
            enemyTeam = Team.Team2;
        }
        else if(TeamOf(HostPlayer()) == Team.Team2){
            playerTeam = Team.Team2;
            enemyTeam = Team.Team1;
        }

        // SetRespawnMaxTime(AllPlayers(), 0);
        // SetMaxHealth(AllPlayers(), MaxValue());

        // SetMoveSpeed(HostPlayer(), DefaultPercentage());
        SetStatus(HostPlayer(), null, Status.Invincible, MaxValue());

        initCompleted = true;
        Wait(1, WaitBehavior.AbortWhenFalse);
    }
}

// Test Code -----------------------------------------------
rule: "debug_global"
Event.OngoingGlobal
if(
    HasSpawned(HostPlayer())
){
    Wait(1);
}

rule: "debug_player"
Event.OngoingPlayer
if(
    HasSpawned(HostPlayer()) &&
    IsButtonHeld(HostPlayer(), Button.Crouch)
){
    SetUltimateCharge(AllPlayers(enemyTeam), 100);
    PressButton(AllPlayers(enemyTeam), Button.Ultimate);
}


// TAG Perk ----------
/*
rule: "Debug/getPerk"
Event.OngoingPlayer
Team.Team1
if(
    IsButtonHeld(ep, Button.Interact) &&
    perkState == PerkState.Non &&
    perkType == PerkType.Non
){
    WaitLongPressConfirm();
    perkState = PerkState.Ready;
    perkType = PerkType.Behemoth;
}
*/

// TAG Buddy ----------
import "Lib/Buddy.del";

// TAG Buddy ----------
define IDX_ROLE_TANK: 0;
define IDX_ROLE_DAMAGE: 1;
define IDX_ROLE_SUPPORT: 2;

rule: "Buddy/BuddyContorl"
Event.OngoingGlobal
if(
    initCompleted
){
    define buddyAssetList! = 
    WorkshopSettingToggle("Follower AI Settings(Join on behalf of absent player)", "Random Hero", true) ?
        // random list
        [
            RandomSupportHero,
            RandomTankHero,
            RandomDamageHero,
            RandomSupportHero,
            RandomTankHero,
            RandomDamageHero,
            RandomSupportHero,
            RandomDamageHero
        ]
    :
        // fix list
        [
            Hero.Mercy,
            Hero.Genji,
            Hero.Reinhardt,
            Hero.Ana,
            Hero.Hanzo,
            Hero.Orisa,
            Hero.Baptiste,
            Hero.Soldier76
        ];

    // slice buddy list by setting
    buddyAssetList = ArraySlice(buddyAssetList, 0,
        WorkshopSettingInteger(
            "Follower AI Settings(Join on behalf of absent player)",
            "Follower Max Num", 8, 0, 8, 1)
    );

    define prevPlayerNum! = -1;
    define maxSlotNum! = NumberOfSlots(playerTeam);
    define maxBuddyNum! = CountOf(buddyAssetList);

    while(true){
        define playerNum! =
            CountOf(
                FilteredArray(
                    AllPlayers(playerTeam),
                    !IsDummyBot(ae)
                )
            );
        define buddyNum! =
            CountOf(
                FilteredArray(
                    AllPlayers(playerTeam),
                    IsDummyBot(ae)
                )
            );
        define needBuddyNum! = 
            Min(
                maxSlotNum - playerNum,
                maxBuddyNum
            );

        if(
            // not filed by need buddy number
            buddyNum != needBuddyNum ||
            // player number changed
            prevPlayerNum != playerNum
        ){
            // save player num
            prevPlayerNum = playerNum;
            // relaod buddy list
            DestroyBots(playerTeam);
            // get empty slot num
            define emptySlotNum! = maxSlotNum - playerNum;
            // build add hero list
            define addList! = ArraySlice(buddyAssetList, 0, emptySlotNum);
            for(define buddyAddIndex! = 0; buddyAddIndex < CountOf(addList); buddyAddIndex++){
                CreateBotsByHeroInput(addList[buddyAddIndex], 1, playerTeam);
            }
        }
    
        Wait(10, WaitBehavior.IgnoreCondition);
    }
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
    dbgMsg(<"setSlow <0>", slow>);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);   
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}