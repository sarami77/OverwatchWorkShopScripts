import "Test.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ServerOverLoadMeasures.del";
import "Lib/Bot.del";

// Builtin -----------------------------------------------
globalvar define playerTeam = Team.Team1;
globalvar define enemyTeam =  Team.Team2;
globalvar define initCompleted!;

rule: "BuiltinGlobal"
Event.OngoingGlobal
{
    // DisableInspectorRecording();
    Wait(6);
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;
    initCompleted = true;
    dbgHudTxt("initCompleted");
}

rule: "TriggerAction"
Event.OngoingGlobal
if(
    initCompleted
){
    startCyclicAction = true;
}

// Test Code -----------------------------------------------
globalvar define startCyclicAction;

rule: "CyclicBotAction"
Event.OngoingGlobal
if(
    startCyclicAction
){
    while(true){
        define pList = [
            RandomHero,
            RandomHero,
            RandomHero,
            RandomHero,
            RandomHero,
            RandomHero
        ];
        define eList = [
            RandomHero,
            RandomHero,
            RandomHero,
            RandomHero,
            RandomHero,
            RandomHero
        ];
        DestroyBots(playerTeam);
        DestroyBots(enemyTeam);
        CreateBotsByHeroList(pList, playerTeam);
        CreateBotsByHeroList(eList, enemyTeam);

        
        // SetDamageDealt(AllPlayers(), 10);
        SetStatus(hp, null, Status.Unkillable, MaxValue());
        SetRespawnMaxTime(ap, 0);
        SetGravity(hp, 10);

        Wait(120);
    }
}

rule: "CyclicPlayerAction"
Event.OngoingPlayer
if(
    startCyclicAction &&
    IsAlive()
){
    while(true){
        Wait(1, WaitBehavior.AbortWhenFalse);
    }
}

disabled rule: "RestartTeamFormation"
Event.OngoingPlayer
if(
    startCyclicAction &&
    ep != hp
){
    while(true){
        WaitUntil(
            (
                NumberOfLivingPlayers(playerTeam) <= 0 ||
                NumberOfLivingPlayers(enemyTeam)  <= 0
            ),
            MaxValue()
        );
        Wait(3);
        Respawn(ap);
        Wait(1);
    }
}

playervar define power!;

define maxPower: 500;

rule: "ChargePower"
Event.OnHealingDealt
if(
    TeamOf() == playerTeam &&
    Healee() != ep &&
    maxPower > power
){
    define gainPower = (EventHealing() * 0.5);
    if(power + gainPower > maxPower){
        power = maxPower;
    }
    else{
        power = RoundToInteger(power +gainPower, Rounding.Down);
    }
}


rule: "ReleasePower"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsMeleeing()
){
    define ballSize! = power / 200;
    define ballSpeed! = 30 - (power / 50);
    define ballDamage! = power;
    define ballBlastRange! = ballSize * 2.5;
    define ballBlastCount! = ballSize <= 3 ? ballSize : 3;
    power = 0;

    define ballPos = BodyPosition(ep);
    define aimPos! = AimingPositionWithLimit(40);

    define effects = CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        ballPos, ballSize, EffectRev.PositionAndRadius);
    ChaseVariableAtRate(
        ballPos, aimPos, ballSpeed,
        RateChaseReevaluation.DestinationAndRate);

    while(
        // not
        !(
            // hit surface
            DistanceBetween(ballPos, aimPos) <= (ballSize * 0.5) ||
            // hit enemy
            DistanceBetween(ballPos, ClosestPlayerTo(ballPos, enemyTeam)) <= (ballSize * 0.75)

        )
    ){
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Yellow, ballPos, ballSize * 1.5);
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }
    StopChasingVariable(ballPos);
    DestroyEffect(effects);
    
    define targets! = PlayersWithinRadius(ballPos, ballBlastRange, enemyTeam, RadiusLOS.Off);
    ApplyBlastImpulse(targets, ballPos, ballBlastRange);
    Damage(targets, ep, ballDamage);
    PlayContinuousBlast(Color.Yellow, ballPos, ballBlastRange, ballBlastCount, ballBlastCount);

}

// killCount -----------------------------------------------
globalvar define killCountTeam1;
globalvar define killCountTeam2;

rule: "killCount/countUp"
Event.OnFinalBlow
{
    if(TeamOf() == Team.Team1)
        killCountTeam1 ++;
    else if(TeamOf() == Team.Team2)        
        killCountTeam2 ++;
    
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
    dbgMsg(<"setSlow <0>", slow>);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

// TAG Debug ----------
globalvar define debugHuds!;

define Last():
    CountOf(debugHuds);

define AimingPositonOf(define player):
    RayCastHitPosition(
        EyePosition(player),
        EyePosition(player) +
            (FacingDirectionOf(player) * MaxLength()),
        null,
        null,
        false
    );

rule: "showParam"
Event.OngoingGlobal
{
    debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("count Wait Random For Distribute Server Load", countWaitRandomForDistributeServerLoad, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("Distance to aim pos", DistanceBetween(HostPlayer(), AimingPositonOf(HostPlayer())), Color.Orange);
    debugHuds[Last()] = CreateDebugHud("player team player num", <"<0> / <1>", NumberOfLivingPlayers(playerTeam), NumberOfPlayers(playerTeam)>, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("enemy team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("killCountTeam1", killCountTeam1, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("killCountTeam2", killCountTeam2, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("power", hp.power, Color.Orange);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}
