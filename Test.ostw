import "Lib/Utility.ostw";
import "Lib/Debug.ostw";

// Common -----------------------------------------------
playervar define perkTimeLimit;

playervar define perkType;
enum PerkType{  // TAG perk type
    Non,
    HighJump,
    GrapplingBeam,
    Sprinter,
    Adrenaline,
    Savior,
    Fearless,
    SteelFormation,
    PersonalShelter,
    BioticStation,
    TrapBeam,
    BattleFlag,
    ChainExplosion,
    AimHack,
    Vampire,
    ShotCaller,
    SupportArtillery,
    CruisingMissile,
    CarePackage,
    DeathFromAbove,
    LegendalyNinja,
    MachDelivery,
    Juggernaut,
    BeamSniper,
    DragonStorm,
    Titan,
    Annihilator
}
playervar define perkState;
enum PerkState{
    Non,
    Ready,
    Using
}
playervar define perkEffectAndText;
playervar define perkEffectStatus;
playervar define aimPosition;
playervar define aimPosition2;
playervar define perkPosition;
playervar define perkPosition2;
playervar define landPosition;
playervar define landPosition2;
playervar define perkTargets;


// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 0);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 100);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    SetRespawnMaxTime(AllPlayers(), 0);
    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Perk/Player/usePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    WaitLongPressConfirm();
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);
    PlayEffect(
        EventPlayer(), PlayEffect.BuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkType = PerkType.SupportArtillery;    
    perkState = PerkState.Using;
}

rule: "Perk/Player/countDownTimeLimit"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit > 0
){
    // count down perk active limit time
    WaitUpdateMediumCycle();
    perkTimeLimit -= 1;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/timeLimitOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    // lose perk by active limit time out
    WaitConditionConfirmed();
    perkState = PerkState.Non;
}

rule: "Perk/Player/cancelPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    // lose perk by cancel operation of interact key hold
    WaitCancelPressConfirm();
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkState = PerkState.Non;
}

disabled rule: "Debug/forceUsePerk // for bot"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive()
){
    if(
        DistanceBetween(
            EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team2)) <= 10 &&
        RandomInteger(1, 100) <= 50
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodPickupEffect,
            Color.White, EventPlayer(), 1);
        PlayEffect(
            EventPlayer(), PlayEffect.BuffImpactSound,
            Color.White, EventPlayer(), MaxLength());
        perkType = PerkType.SupportArtillery;  
        perkState = PerkState.Using;
    }
    Wait(5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();    
}

// Test Code -----------------------------------------------
// TAG SupportArtillery ----------
define artilleryLandingRange: 20;
define artilleryDamageRange: 5;
playervar define landZonePosition;

rule: "Perk/Player/SupportArtillery/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkType == PerkType.SupportArtillery
){
    AttachPlayers(EventPlayer(), PlayersInSlot(2, Team.Team1), Vector(0,2,0));
    // set time limit
    perkTimeLimit = 13;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    landPosition2 = -1;  
    perkEffectStatus = 0; 
    // show text
    // landing zone text
    CreateInWorldText(
        AllPlayers(), "Support artillery incoming.",
        landZonePosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    // shell body1
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // shell body2
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landZonePosition, artilleryLandingRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
}
rule: "Perk/Player/SupportArtillery/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Non &&
    perkType == PerkType.SupportArtillery
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/SupportArtillery/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkType == PerkType.SupportArtillery
){
    // set shell land position to aiming position
    landZonePosition = AimingPosition();
    Wait(3, WaitBehavior.AbortWhenFalse);
    DestroyEffect(perkEffectAndText[3]);
    perkEffectStatus = 40;
}

rule: "Perk/Player/SupportArtillery/launchShell"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkType == PerkType.SupportArtillery &&
    perkEffectStatus > 0
){
    // set shell at random horizontal positions over 50
    perkPosition = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(10, 0, 10);
    // start shell move
    landPosition = landZonePosition + RandomPosition(artilleryLandingRange/2, 0, artilleryLandingRange/2);
    ChaseVariableOverTime(
        perkPosition, landPosition, 0.25,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    perkEffectStatus -- ;

    // set shell at random horizontal positions over 50
    perkPosition2 = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(10, 0, 10);
    // start shell move
    landPosition2 = landZonePosition + RandomPosition(artilleryLandingRange/2, 0, artilleryLandingRange/2);
    ChaseVariableOverTime(
        perkPosition2, landPosition2, 0.25,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    perkEffectStatus -- ;

    LoopIfConditionIsTrue();
    
}

rule: "Perk/Player/SupportArtillery/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkType == PerkType.SupportArtillery &&
    perkPosition == landPosition
){
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition, artilleryDamageRange,
            Team.All, RadiusLOS.Off);
    // damage
    Damage(
        PlayersWithinRadius(
            landPosition, artilleryDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), 300);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, landPosition, 300);
    // play blast effect
    PlayContinuousBlast(landPosition, artilleryDamageRange,
        2, Color.Yellow);
}

rule: "Perk/Player/SupportArtillery/landedToPoint2"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkType == PerkType.SupportArtillery &&
    perkPosition2 == landPosition2
){
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition2, artilleryDamageRange,
            Team.All, RadiusLOS.Off);
    // damage
    Damage(
        PlayersWithinRadius(
            landPosition2, artilleryDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), 300);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, landPosition2, 300);
    // play blast effect
    PlayContinuousBlast(landPosition2, artilleryDamageRange,
        2, Color.Yellow);
}

// Debug -----------------------------------------------
globalvar define param = 1;
define tuneUnit: 0.1;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "param", param>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
}

rule: "increaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    param += tuneUnit;
}

rule: "decreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    param -= tuneUnit;
}
