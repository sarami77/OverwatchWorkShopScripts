import "Lib/Utility.ostw";
import "Lib/PerkCore.ostw";
import "Lib/Debug.ostw";

// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 100);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 10);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    SetRespawnMaxTime(AllPlayers(), 5);
    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

// Test Code -----------------------------------------------
rule: "Perk/Player/overridePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using
){
        perkType = PerkType.OrbitalLaser;
}

// TAG OrbitalLaser ----------
define lazerDamageRange: 3;
rule: "Perk/Player/OrbitalLaser/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 60;
    // set status
    perkTargets = 0;
    perkEffectStatus = PerkEffectStatus.Ready;
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Orbital Laser">,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    CreateInWorldText(
        AllPlayers(), <"Irradiating until <0> seconds.", perkTimeLimit>,
        landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // lazer body
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
        perkPosition, landPosition,
        Color.Red, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // lazer aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
        landPosition, 4, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // lazer sound
    CreateEffect(AllPlayers(), Effect.EnergySound, Color.White,
        landPosition, MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // lazer shell
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.Red,
        landPosition, 0.3, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity();  
    // above lazer aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
        perkPosition2, 30, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[6] = LastCreatedEntity();
    // set hud
    CreatePerkEffectHud(perkEffectStatus == PerkEffectStatus.Triggered ? "locked irradiation point." : "guiding irradiation point.");
    perkEffectAndText[7] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to lock irradiation point.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[8] = LastTextID();  
}
rule: "Perk/Player/OrbitalLaser/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    DestroyEffect(perkEffectAndText[6]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);
    // reset hud
    DestroyHudText(perkEffectAndText[7]);
    DestroyHudText(perkEffectAndText[8]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/OrbitalLaser/toggleLockPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus == PerkEffectStatus.Triggered){
        perkEffectStatus = PerkEffectStatus.Ready;
    }
    else{
        perkEffectStatus = PerkEffectStatus.Triggered;
    }
    // play change sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());
}

rule: "Perk/Player/OrbitalLaser/launchLazer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using
){
    // set lazer at above positions over 500m
    perkPosition = AimingPosition() +
        Vector(0, 1000, 0);
    perkPosition2 = perkPosition;
    // set lazer land position to aiming position
    landPosition = BelowPosition(AimingPosition());
}

rule: "Perk/Player/OrbitalLaser/aimLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready
){
    // chase lazer land position to aiming position
    WaitUpdateShortCycle();
    aimPosition = BelowPosition(AimingPosition());
    define distanceBetween = DistanceBetween(landPosition, aimPosition) * 3.0;
    UpdateEveryFrame(landPosition);
    ChaseVariableAtRate(
        landPosition, aimPosition,
        distanceBetween,
        RateChaseReevaluation.DestinationAndRate);
    ChaseVariableAtRate(
        perkPosition, aimPosition + Vector(0, 1000, 0),
        distanceBetween,
        RateChaseReevaluation.DestinationAndRate);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/OrbitalLaser/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using
){
    // damage
    Damage(
        PlayersWithinRadius(
            landPosition, lazerDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), 50);

    // play blast effect
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Red, landPosition, lazerDamageRange);

    WaitContinuousBlastCycle();
    LoopIfConditionIsTrue();
}


// Debug -----------------------------------------------
globalvar define param = 1;
define tuneUnit: 10;

rule: "showParam"
Event.OngoingGlobal
{
     CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "param", param>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

        CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        
}

rule: "increaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    param += tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "decreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    param -= tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}
