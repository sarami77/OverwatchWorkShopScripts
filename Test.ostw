import "Test.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ServerOverLoadMeasures.del";
import "Lib/Bot.del";

// Builtin -----------------------------------------------
globalvar define playerTeam = Team.Team1;
globalvar define enemyTeam =  Team.Team2;
globalvar define initCompleted!;

rule: "BuiltinGlobal"
Event.OngoingGlobal
{
    // DisableInspectorRecording();
    Wait(6);
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;
    initCompleted = true;
    dbgHudTxt("initCompleted");
}

globalvar define waitTime = 1;

rule: "DebugCode"
Event.OngoingGlobal
if(
    initCompleted
){
    dbgHudTxt("DebugCode");   

    CreateHudText(ap,
        null, <"<0>", InputBindingString(Button.Reload)>, null,
        Location.Left, 1,
        Color.White, Color.Yellow, Color.White,
        HudTextRev.String, Spectators.DefaultVisibility);

    

    define pList = [
        Hero.Widowmaker,
        Hero.Widowmaker,
        Hero.Widowmaker,
        Hero.Widowmaker,
        Hero.Widowmaker,
        Hero.Widowmaker
    ];
    
    // CreateBotsByHeroList(pList, playerTeam);
    CreateBotsByHeroList(pList, enemyTeam);
    Wait(0.5);

    SetRespawnMaxTime(ap, 5);
    SetDamageDealt(ap, 0);
    startCyclicAction = true;
}


// Test Code -----------------------------------------------
globalvar define startCyclicAction;

rule: "CyclicAction"
Event.OngoingGlobal
if(
    startCyclicAction
){
    define pos = Vector(0,3,0);
    while(true){
        define playes = ap;
        for(define idx = 0; idx < CountOf(playes); idx++){
            ApplyImpulse(playes[idx],
                VectorTowards(playes[idx], pos),
                DistanceBetween(playes[idx], pos) * 2,
                Relative.ToWorld, ContraryMotion.Cancel);
        }
        Wait(15);
    }
}

rule: "CyclicAction"
Event.OngoingGlobal
if(
    startCyclicAction
){
    while(true){
        SetAbilityCooldown(ap, Button.Ability1,0);


        Wait(1);
    }
}

// killCount -----------------------------------------------
globalvar define killCountTeam1;
globalvar define killCountTeam2;

rule: "killCount/countUp"
Event.OnFinalBlow
{
    if(TeamOf() == Team.Team1)
        killCountTeam1 ++;
    else if(TeamOf() == Team.Team2)        
        killCountTeam2 ++;
    
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
    dbgMsg(<"setSlow <0>", slow>);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

// TAG Debug ----------
globalvar define debugHuds!;

define Last():
    CountOf(debugHuds);

define AimingPositonOf(define player):
    RayCastHitPosition(
        EyePosition(player),
        EyePosition(player) +
            (FacingDirectionOf(player) * MaxLength()),
        null,
        null,
        false
    );

rule: "showParam"
Event.OngoingGlobal
{
    debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("count Wait Random For Distribute Server Load", countWaitRandomForDistributeServerLoad, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("Distance to aim pos", DistanceBetween(HostPlayer(), AimingPositonOf(HostPlayer())), Color.Orange);
    debugHuds[Last()] = CreateDebugHud("player team player num", <"<0> / <1>", NumberOfLivingPlayers(playerTeam), NumberOfPlayers(playerTeam)>, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("enemy team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("killCountTeam1", killCountTeam1, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("killCountTeam2", killCountTeam2, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("waitTime", waitTime, Color.Orange);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}
