import "Lib/Utility.ostw";
import "Lib/Debug.ostw";
import "Lib/PerkCore.ostw";

// Builtin -----------------------------------------------
define parallelAnimationNum: 2;

rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 600);
    SetDamageReceived(EventPlayer(), 1);

    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);

    SetMaxHealth(EventPlayer(), 100);

    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 7);

    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);

    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);

    SetUltimateCharge(EventPlayer(), 0);

    define others = FilteredArray(AllPlayers(), ArrayElement() != EventPlayer());
//    SetMoveSpeed(others, 1000);

    SetRespawnMaxTime(AllPlayers(Team.Team2), 5);

    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Debug/overridePerk"
Event.OngoingPlayer
Team.Team1
if(
    perk[Perk.perkState] == PerkState.Using
){
    perk[Perk.perkType] = PerkType.MissileBarrage;
}

// Test Code -----------------------------------------------

// TAG MissileBarrage ----------
//define missileLandingRange: 4;
define missileDamageRange: 4;
define missileAttackTime: 12;
define missileAttackCount: 24;
define missleReloadTime: 3;

rule: "Perk/Player/MissileBarrage/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 300;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    landPosition2 = -1;  
    perk[Perk.perkEffectStatus] = 0; 
    // set hud
    perk[Perk.perkEffectAndText] = [];
    CreatePerkEffectHud(
        perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready ?
            <"Hold melee button <0> to call Missile Barrage.", ButtonGuide(Button.Melee)> :
            perk[Perk.perkEffectStatus]  == PerkEffectStatus.Reloading ?
                <"Missile barrage in preparation until <0> seconds.", perk[Perk.perkEffectCoolTime]> :
                "Missile incoming!"
        );
    perk[Perk.perkEffectAndText] [0] = LastTextID();

    // first use
    StartHoldingButton(EventPlayer(), Button.Melee);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopHoldingButton(EventPlayer(), Button.Melee);
}
rule: "Perk/Player/MissileBarrage/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Non
){
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [0]);
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    StopChasingVariable(landZonePosition);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // reset type
    perk[Perk.perkType] = PerkType.Non;
}

rule: "Perk/Player/MissileBarrage/remindMissileBarrage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    SmallMessage(EventPlayer(), <"Forgotten Missile Barrage?"> );
    SmallMessage(EventPlayer(), <"Hold melee button <0> to call Missile Barrage.", ButtonGuide(Button.Melee)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/startMissile"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    StopChasingVariable(landZonePosition);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);

    // shell body1
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [2] = LastCreatedEntity();
    // shell body2
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [3] = LastCreatedEntity();
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/MissileBarrage/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered
){
    // play set sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());

    aimPosition = AimingPosition();
    perkPosition = InvalidPosition();
    perkPosition2 = InvalidPosition();

    // set missile land position to aiming position
    landZonePosition = AimingPosition();

   // landing zone text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\r<3> Missles incoming!", EventPlayer(), HeroIconString(HeroOf()), "Missile Barrage", perk[Perk.perkEffectCount]>,
        landZonePosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    perk[Perk.perkEffectCount] = missileAttackCount;

    // set effect
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landZonePosition, missileDamageRange, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [4] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        landZonePosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [5] = LastCreatedEntity();

    Wait(2, WaitBehavior.AbortWhenFalse);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);

    perk[Perk.firstAnimationDelay] = true;
    perk[Perk.perkEffectStatus] = PerkEffectStatus.SecondTriggered;
}

rule: "Perk/Player/MissileBarrage/aimLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    (perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered || perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered)
){
    // chase missile land position to aiming position
    Wait(0.3, WaitBehavior.AbortWhenFalse);
    aimPosition = AimingPosition();
    UpdateEveryFrame(landZonePosition);
    ChaseVariableAtRate(
        landZonePosition, aimPosition,
        DistanceBetween(landZonePosition, aimPosition) * 3.0,
        RateChaseReevaluation.DestinationAndRate);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/playMissleBooster"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] > 0
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 1.5);
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition2, 1.5);

    WaitUpdateVeryShortCycle();
    LoopIfConditionIsTrue();
}

define missleAttackSpeeed:
    (missileAttackTime / missileAttackCount) * parallelAnimationNum;

rule: "Perk/Player/MissileBarrage/launchMissile"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] > 0
){
    // set missle at random
    perkPosition = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(25, 0, 25);
    // start missle move
    // landPosition = 
    //     landZonePosition + 
    //     RandomPosition(
    //         missileLandingRange / 1.5,
    //         0,
    //         missileLandingRange / 1.5
    //     );
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landZonePosition, missleAttackSpeeed,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(missleAttackSpeeed, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(perkPosition);
    // hide missle
    perkPosition = InvalidPosition();
    // on landed play blast
    async ExplodeMissile(landZonePosition);
    perk[Perk.perkEffectCount] -- ;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/launchMissle2"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using && 
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] > 0
){
    if(perk[Perk.firstAnimationDelay]){
        perk[Perk.firstAnimationDelay] = false;
        Wait(missleAttackSpeeed / 2, WaitBehavior.AbortWhenFalse);
    }

    // set missle at random
    perkPosition2 = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(25, 0, 25);
    // start missle move
    // landPosition2 = 
    //     landZonePosition + 
    //     RandomPosition(
    //         missileLandingRange / 1.5,
    //         0,
    //         missileLandingRange / 1.5
    //     );
    UpdateEveryFrame(perkPosition2);
    ChaseVariableOverTime(
        perkPosition2, landZonePosition, missleAttackSpeeed,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(missleAttackSpeeed, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(perkPosition2);
    // hide missle
    perkPosition2 = InvalidPosition();
    // on landed play blast
    async ExplodeMissile(landZonePosition);
    perk[Perk.perkEffectCount] -- ;
    LoopIfConditionIsTrue();
}

void ExplodeMissile(define position)"ExplodeMissile"{
    // get target
    perk[Perk.perkTargets] = 
        PlayersWithinRadius(
            position, missileDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perk[Perk.perkTargets], position, missileDamageRange);
    // damage
    Damage(perk[Perk.perkTargets], EventPlayer(), 300);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, position, 300);
    // play blast effect
    PlayContinuousBlast(
        Color.Orange,
        position,
        missileDamageRange,
        2);
}

rule: "Perk/Player/MissileBarrage/endMissile"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] <= 0
){
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    StopChasingVariable(landZonePosition);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // start reload
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Reloading;
    perk[Perk.perkEffectCoolTime] = missleReloadTime;
}

rule: "Perk/Player/MissileBarrage/countDownTimeLimit"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Reloading &&
    perk[Perk.perkEffectCoolTime] > 0
){
    // count down perk cooldown time
    WaitUpdateMediumCycle();
    perk[Perk.perkEffectCoolTime] -= 1;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/coolDownComplete"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.MissileBarrage &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Reloading &&
    perk[Perk.perkEffectCoolTime] <= 0
){
    // play ready sound
    PlayEffect(
        EventPlayer(), PlayEffect.BuffImpactSound,
        Color.White, EventPlayer(), 100);
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
}

// TAG CruisingMissile ----------
define crusingMissileDamageRange: 20;
rule: "Perk/Player/CruisingMissile/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 7;
    // set status
    perk[Perk.perkTargets] = 0;
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
    // show text
    // landing zone text
    perk[Perk.perkEffectAndText] = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rLanding at <3> second. Brace for impact!", EventPlayer(), HeroIconString(HeroOf()), "Cruising Missile", perk[Perk.perkTimeLimit] >,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perk[Perk.perkEffectAndText] [0] = LastTextID();
    // CreateInWorldText(
    //     AllPlayers(), <"Landing at <0> second. Brace for impact!", perk[Perk.perkTimeLimit] >,
    //     landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
    //     Color.White, Spectators.DefaultVisibility);
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    // set effect
    // missile body
    CreateEffect(AllPlayers(), Effect.Orb, Color.Red,
        perkPosition, 10, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [2] = LastCreatedEntity();
    // missile flare
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.White,
        perkPosition, 20, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [3] = LastCreatedEntity();
    // missle sound
    CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White,
        perkPosition, MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [4] = LastCreatedEntity();
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, crusingMissileDamageRange, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [5] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        landPosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [6] = LastCreatedEntity();  
    // landing zone warning icon
    CreateIcon(AllPlayers(), landPosition + (Up() * 2), Icon.Warning,
        IconRev.VisibleToAndPosition, Color.Yellow, true);
    perk[Perk.perkEffectAndText] [7] = LastCreatedEntity();
    // set hud
    CreatePerkEffectHud(perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered ? "locked landing point." : "guiding landing point.");
    perk[Perk.perkEffectAndText] [8] = LastTextID();
    CreatePerkEffectHud(perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered ? <"Hold melee button <0> to guide landing point.", ButtonGuide(Button.Melee)> : <"Hold melee button <0> to lock landing point.", ButtonGuide(Button.Melee)>);
    perk[Perk.perkEffectAndText] [9] = LastTextID();  
}
rule: "Perk/Player/CruisingMissile/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Non
){
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [0]);
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    DestroyEffect(perk[Perk.perkEffectAndText] [6]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);
    // reset icon
    DestroyIcon(perk[Perk.perkEffectAndText] [7]);
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [8]);
    DestroyHudText(perk[Perk.perkEffectAndText] [9]);
    // reset type
    perk[Perk.perkType] = PerkType.Non;
}

rule: "Perk/Player/CruisingMissile/toggleLockPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered){
        perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
    }
    else{
        perk[Perk.perkEffectStatus] = PerkEffectStatus.Triggered;
    }
    // play change sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());
}

rule: "Perk/Player/CruisingMissile/playMissleBooster"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 3.0);

    WaitUpdateVeryShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CruisingMissile/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using
){
    // set missiles at random horizontal positions over 500m
    perkPosition = EventPlayer() +
        Vector(0, 500, 0) + RandomPosition(250, 0, 250);
    // set missile land position to aiming position
    landPosition = AimingPosition();
    // start missile move
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, perk[Perk.perkTimeLimit] ,
        TimeChaseReevaluation.DestinationAndDuration);
}

rule: "Perk/Player/CruisingMissile/aimLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready
){
    // chase missile land position to aiming position
    Wait(0.3, WaitBehavior.AbortWhenFalse);
    aimPosition = AimingPosition();
    UpdateEveryFrame(landPosition);
    ChaseVariableAtRate(
        landPosition, aimPosition,
        DistanceBetween(landPosition, aimPosition) * 3.0,
        RateChaseReevaluation.DestinationAndRate);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CruisingMissile/hideBlastRange"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkTimeLimit]  <= 1
){
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
}

rule: "Perk/Player/CruisingMissile/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perk[Perk.perkType] == PerkType.CruisingMissile &&
    perk[Perk.perkState]  == PerkState.Using &&
    perk[Perk.perkTimeLimit]  <= 0
){
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);

    // apply knockout
    SetStatus(
        PlayersWithinRadius(
            landPosition, crusingMissileDamageRange,
            Team.Team1, RadiusLOS.Off
        ), null, Status.KnockedDown, 3);
    // get target
    perk[Perk.perkTargets] = 
        PlayersWithinRadius(
            landPosition, crusingMissileDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perk[Perk.perkTargets], landPosition, crusingMissileDamageRange);
    // damage
    Damage(perk[Perk.perkTargets], EventPlayer(), MaxValue());
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, landPosition, MaxLength());
    // play blast effect
    PlayContinuousBlast(
        Color.Orange,
        landPosition,
        crusingMissileDamageRange,
        7);

    perk[Perk.perkState] = PerkState.Non;
}

// Debug -----------------------------------------------
define changeTimeInterval: 0.2;
globalvar define tuneVal = 1;
globalvar define consecutiveChangeCount = 0;
define initialTuneUnit : 0.01;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);       
}

rule: "startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}