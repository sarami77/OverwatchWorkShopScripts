import "Lib/Utility.ostw";
import "Lib/Debug.ostw";

// Common -----------------------------------------------
playervar define perkEffectAndText;
playervar define perkEffectStatus;
playervar define aimPosition;
playervar define aimPosition2;
playervar define landPosition;
playervar define perkPosition;
playervar define perkPosition2;
playervar define perkTargets;


// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 0);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 100);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    SetRespawnMaxTime(AllPlayers(), 0);
    SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    ForcePlayerHero(EventPlayer(), Hero.Widowmaker);
    CreateEffect(EventPlayer(), Effect.Ring, Color.White,
        EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    CreateEffect(EventPlayer(), Effect.Ring, Color.White,
        EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    CreateEffect(EventPlayer(), Effect.Ring, Color.White,
        EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

// Test Code -----------------------------------------------
rule: "Perk/Player/BeamSniper/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    true
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper
){
    // set time limit
    // perkTimeLimit = 300;
    // set param
    perkEffectStatus = 0;
    // set hud
    perkEffectAndText = [];
    // CreatePerkEffectHud("Critical damage chance when blinking blue");
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    // PerkHero perkHero = new PerkHero();
    // perkHero.hero = Hero.Widowmaker;
    // perkHero.statusUnkillable = true;
    // perkHero.damageDealt = 200;
    // perkHero.ultimateCharge = 100;
    // ForcePlayerPerkHero(EventPlayer(), perkHero);
    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/BeamSniper/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    true
    // perkState == PerkState.Non &&
    // perkType == PerkType.BeamSniper
){
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    StopChasingVariable(perkEffectStatus);
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset perk hero
    // StopForcingPerkHero(EventPlayer());
    // reset type
    // perkType = PerkType.Non;
}

rule: "Perk/Player/BeamSniper/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    // perkState = PerkState.Non;
}

rule: "Perk/Player/BeamSniper/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 6));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BeamSniper/startCharge"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire) &&
    IsFiringSecondary()
){
    perkEffectStatus = 0;
    ChaseVariableOverTime(perkEffectStatus, 100, 1.3,
        TimeChaseReevaluation.DestinationAndDuration);
}

rule: "Perk/Player/BeamSniper/cancelCharge"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper &&
    !IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    StopChasingVariable(perkEffectStatus);
    perkEffectStatus = 0;
}

rule: "Perk/Player/BeamSniper/markTarget"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper &&
    perkEffectStatus == 100
){
    perkTargets = FilteredArray(
        PlayersInViewAngle(EventPlayer(), Team.Team2, 3.2),
        (
            IsAlive(ArrayElement()) &&
            DistanceBetween(ArrayElement(), EventPlayer()) > 0 &&
            DistanceBetween(ArrayElement(), EventPlayer()) <= 10
        )
    );

    if(perkTargets != []){
        PlayEffect(
            EventPlayer(), PlayEffect.GoodPickupEffect,
            Color.Blue, perkTargets, 1.0);
        PlayEffect(
            EventPlayer(), PlayEffect.GoodExplosion,
            Color.Blue, AimingPosition(), 0.01);
    }

    perkTargets += FilteredArray(
        PlayersInViewAngle(EventPlayer(), Team.Team2, 1.8),
        (
            IsAlive(ArrayElement()) &&
            DistanceBetween(ArrayElement(), EventPlayer()) > 10 &&
            DistanceBetween(ArrayElement(), EventPlayer()) <= 20
        )
    );

    if(perkTargets != []){
        PlayEffect(
            EventPlayer(), PlayEffect.GoodPickupEffect,
            Color.Yellow, perkTargets, 1.0);
        PlayEffect(
            EventPlayer(), PlayEffect.GoodExplosion,
            Color.Yellow, AimingPosition(), 0.01);
    }

    perkTargets += FilteredArray(
        PlayersInViewAngle(EventPlayer(), Team.Team2, 1.1),
        (
            IsAlive(ArrayElement()) &&
            DistanceBetween(ArrayElement(), EventPlayer()) > 20 &&
            DistanceBetween(ArrayElement(), EventPlayer()) <= 99999
        )
    );
    if(perkTargets != []){
        PlayEffect(
            EventPlayer(), PlayEffect.GoodPickupEffect,
            Color.Red, perkTargets, 1.0);
        PlayEffect(
            EventPlayer(), PlayEffect.GoodExplosion,
            Color.Red, AimingPosition(), 0.01);
    }


    // Since the impact point will shift due to the recoil when shooting, get the position before shooting
    aimPosition = AimingPosition();     

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BeamSniper/shotSniperBeam"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    // perkState == PerkState.Using &&
    // perkType == PerkType.BeamSniper &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    if(perkEffectStatus < 100){
        perkEffectStatus = 0;
        Abort();
    }

    perkEffectStatus = 0;

    // give hit damage of penetration ballistic
    if(perkTargets != []){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Aqua, perkTargets, 4.0);
        Damage(perkTargets, EventPlayer(), 300);
    }

    // give splash damage of landed position
    perkTargets = FilteredArray(
        PlayersWithinRadius(aimPosition, 4, Team.Team2, RadiusLOS.Off),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        Damage(perkTargets, EventPlayer(), 100);
    }

    perkPosition = EyePosition() + 
        -PositionOffset();  // Offset to gun sight
    landPosition = EyePosition() +
        (FacingDirectionOf() * MaxLength());

    // Ballistics for aiming
    CreateBeamEffect(AllPlayers(),
        BeamType.GoodBeam, perkPosition, aimPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // Ballistic for penetration
    CreateBeamEffect(AllPlayers(),
        BeamType.GoodBeam, aimPosition, landPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();

    // shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.Aqua, EventPlayer(), 100);
    // shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Aqua, perkPosition + (FacingDirectionOf() * 0.5), 1.0);
    // landed position blast
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Aqua, aimPosition, 4.0);

    WaitPlayEffect();
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
}


// Debug -----------------------------------------------
globalvar define param = 1;
define tuneUnit: 0.1;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "param", param>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
}

rule: "increaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    param += tuneUnit;
}

rule: "decreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    param -= tuneUnit;
}
