import "Lib/Utility.ostw";
import "Lib/PerkCore.ostw";
import "Lib/Debug.ostw";

// Builtin -----------------------------------------------
rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 0);
    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);
    SetMaxHealth(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 5);
    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);
    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);
    SetUltimateCharge(EventPlayer(), 0);

    SetRespawnMaxTime(AllPlayers(), 5);
    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Debug/overridePerk"
Event.OngoingPlayer
Team.Team1
if(
    perkState == PerkState.Using
){
    //perkType = PerkType.ArtilleryFireRequest;
    perkType = PerkType.StrafingRequest;
}

disabled rule: "Debug/startButtonHold"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    EventPlayer() != HostPlayer() &&
    (DistanceBetween(EventPlayer(), HostPlayer()) <= 6)
){
    dbgMsg("StartHoldingButton");
    StartHoldingButton(EventPlayer(), Button.Jump);
}

disabled rule: "Debug/stopButtonHold"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    EventPlayer() != HostPlayer() &&
    !(DistanceBetween(EventPlayer(), HostPlayer()) <= 5)
){
    dbgMsg("StopHoldingButton");
    StopHoldingButton(EventPlayer(), Button.Jump);
}

disabled rule: "Debug/spawnBotAndUsePerk"
Event.OngoingPlayer
if(
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    WaitLongPressConfirm();
    // make bot
    CreateDummyBot(
        Hero.Reinhardt,
        Team.Team1, 5,
        NearestWalkablePosition(AimingPosition()),
        FacingDirectionOf(
            EventPlayer()
        )
    );
    define player = PlayersInSlot(5, Team.Team1);

    player.perkType = PerkType.Non;
    player.perkState = PerkState.Non;
    WaitChangeState();
    player.perkType = PerkType.Titan;
    player.perkState = PerkState.Using;
}

// Test Code -----------------------------------------------
// TAG StrafingRequest ----------
define casLandingRange: 4;
define casDamageRange: 3.5;
define casAttackTime: 1.5;
define casAttackDistance: 25;
define casReloadTime: 4;

rule: "Perk/Player/StrafingRequest/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    perkEffectStatus = PerkEffectStatus.Ready;
    perkEffectAndText = [];
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(
        perkEffectStatus == PerkEffectStatus.Ready ?
            <"Hold melee button <0> to call Strafing Request.", ButtonGuide(Button.Melee)> :
            perkEffectStatus == PerkEffectStatus.Reloading ?
                "Strafing Request in preparation..." :
                "Strafing incoming!"
        );
    perkEffectAndText[3] = LastTextID();
}
rule: "Perk/Player/StrafingRequest/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[3]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    StopChasingVariable(landPosition);
    // reset type
    perkType = PerkType.Non;
}


rule: "Perk/Player/StrafingRequest/startCas"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    perkEffectStatus = PerkEffectStatus.Triggered;
}

playervar define approachingAngle;

rule: "Perk/Player/StrafingRequest/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    // play set sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());

    aimPosition = AimingPosition();
    approachingAngle = DirectionFromAngles(
                RandomReal(0, 360), 0);
    // set start point
    perkPosition = 
        aimPosition + 
            // add random direction
            approachingAngle *
            // add static distance
            casAttackDistance;
    // set end point
    perkPosition2 = 
        aimPosition + 
            // add random direction
            -approachingAngle *
            // add static distance
            casAttackDistance;

    // landing zone text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rStrafing incoming!", EventPlayer(), HeroIconString(HeroOf()), "Strafing Request">,
        aimPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();

    // set effect
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, casLandingRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        aimPosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity(); 

    // play landing animation
    landPosition = perkPosition;
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        casAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(casAttackTime, WaitBehavior.AbortWhenFalse);

    StopChasingVariable(landPosition);
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    Wait(0.1, WaitBehavior.AbortWhenFalse);

    // start attack
    perkEffectStatus = PerkEffectStatus.SecondTriggered;
}


rule: "Perk/Player/StrafingRequest/moveLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.SecondTriggered
){
    // chase landing position
    landPosition = perkPosition;
    UpdateEveryFrame(landPosition);
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        casAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(casAttackTime, WaitBehavior.IgnoreCondition);

    StopChasingVariable(landPosition);
    DestroyInWorldText(perkEffectAndText[0]);

    // start reload
    perkEffectStatus = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/StrafingRequest/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.SecondTriggered
){
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    landPosition2 =
        landPosition + 
        RandomPosition(
            casLandingRange / 1.5,
            0,
            casLandingRange / 1.5
        );
    // splash damage
    Damage(
        PlayersWithinRadius(
            landPosition2, casDamageRange,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 200);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Red,
        landPosition2,
        casDamageRange);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White,
        landPosition2,
        100);
    Wait(0.05, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/StrafingRequest/coolDownCas"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    Wait(casReloadTime, WaitBehavior.AbortWhenFalse);
    // play ready sound
    PlayEffect(
        EventPlayer(), PlayEffect.BuffImpactSound,
        Color.White, EventPlayer(), 100);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/StrafingRequest/playAircraftAnimation"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    // set start point
    perkPosition =
        aimPosition +
        DirectionTowards(aimPosition, perkPosition) * 
        (casAttackDistance * 30) +
        Vector(0, 75 , 0); 
    // set end point
    perkPosition2 = 
        aimPosition +
        DirectionTowards(aimPosition, perkPosition2) *
        (casAttackDistance * 30) +
        Vector(0, 75 , 0); 
    // air craft
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        landPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // air craft aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.White,
        landPosition, 10, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();

    // play air craft animation
    landPosition = perkPosition;
    UpdateEveryFrame(landPosition);
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        casAttackTime * 1.5,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(casAttackTime * 1.5, WaitBehavior.IgnoreCondition);
    StopChasingVariable(landPosition);

    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
}

// Debug -----------------------------------------------
globalvar define param = 1;
define tuneUnit: 10;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "param", param>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

        CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        
}

rule: "increaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    param += tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "decreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    param -= tuneUnit;
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}
