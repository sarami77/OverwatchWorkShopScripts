import "Test.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ServerOverLoadMeasures.del";

// Builtin -----------------------------------------------
globalvar define playerTeam = Team.Team1;
globalvar define enemyTeam =  Team.Team2;
globalvar define initCompleted!;

rule: "BuiltinGlobal"
Event.OngoingGlobal
{
    Wait(5);
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;
    initCompleted = true;
}

// TAG Buddy ----------
define playerRespawnTime: 15;

define CreateBotByArray(define array, define team){
    for(define idx = 0; idx < CountOf(array); idx ++){
        // create bot
        CreateDummyBot(
            array[idx],
            team,
            GetEmptySlotNo(team),
            SpawnPoints(team)[0],
            RandomDirection()
        );
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }
}

define stagePosition: Vector(0, 0, 0);
define stageRange: 3;

rule: "Main"
Event.OngoingGlobal
if(
    initCompleted
){
    DisableInspectorRecording();

    define assetE! = [
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog,
            Hero.Roadhog
        ];
    CreateBotByArray(assetE, enemyTeam);

    define assetP! = [
            Hero.Kiriko,
            Hero.Ana,
            Hero.Mercy,
            Hero.Baptiste
        ];
    CreateBotByArray(assetP, playerTeam);

    CreateEffect(AllPlayers(), Effect.Ring, Color.Aqua, stagePosition, stageRange, EffectRev.VisibleTo);

        CreateDummyBot(
            Hero.Bastion,
            playerTeam,
            GetEmptySlotNo(playerTeam),
            SpawnPoints(playerTeam)[0],
            RandomDirection()
        );
    
    Wait(1);
        define bastion = FirstOf(FilteredArray(AllPlayers(playerTeam), IsDummyBot(ae) && HeroOf(ae) == Hero.Bastion));
    Teleport(bastion, stagePosition);
}

globalvar define stagedPlayer;

rule: "setStagedPlayer"
Event.OngoingPlayer
if(
    stagedPlayer == 0 &&
    DistanceBetween(ep, stagePosition) <= stageRange
){
    Wait(0.1,WaitBehavior.AbortWhenFalse);
    stagedPlayer = ep;
}

rule: "unsetStagedPlayer"
Event.OngoingPlayer
if(
    stagedPlayer == ep &&
    DistanceBetween(ep, stagePosition) > stageRange
){
    Wait(0.1,WaitBehavior.AbortWhenFalse);
    stagedPlayer = 0;
}

rule: "startMaxPower"
Event.OngoingPlayer
if(
    stagedPlayer == ep
){

    define enemys = AllPlayers(enemyTeam);

    for(define idx = 0; idx < CountOf(enemys); idx ++){
        Teleport(enemys[idx], Vector(0,0, 10 + idx));
    }

    define friends = FilteredArray(AllPlayers(playerTeam), IsDummyBot(ae) && HeroOf(ae) != Hero.Bastion);

    for(define idx = 0; idx < CountOf(friends); idx ++){
        define friend = friends[idx];       
        

        Teleport(friend, Vector(-(CountOf(friends)/2) + idx, 0, -5));

        SetUltimateCharge(friend, 100);

        if(
            HeroOf(friend) == Hero.Mercy
        ){
            SetFacing(friend, DirectionTowards(EyePosition(friend), EyePosition(stagedPlayer)), Relative.ToWorld);
            SetWeapon(friend, 0);
            Wait(1);
            StartHoldingButton(friend, Button.SecondaryFire);
            PressButton(friend, Button.Ultimate);
        }
        else if(
            HeroOf(friend) == Hero.Ana
        ){
            SetFacing(friend, DirectionTowards(EyePosition(friend), EyePosition(stagedPlayer)), Relative.ToWorld);
            StartHoldingButton(friend, Button.SecondaryFire);
            Wait(5);
            StartHoldingButton(friend, Button.Ultimate);
        }
        else if(
            HeroOf(friend) == Hero.Baptiste
        ){
            SetFacing(friend, DirectionTowards(EyePosition(friend), Vector(0,0,5)), Relative.ToWorld);
            Wait(1);
            PressButton(friend, Button.Ultimate);
            PressButton(friend, Button.PrimaryFire);
        }
        else if(
            HeroOf(friend) == Hero.Kiriko
        ){
            SetFacing(friend, DirectionTowards(EyePosition(friend), EyePosition(stagedPlayer)), Relative.ToWorld);
            Wait(1);
            PressButton(friend, Button.Ultimate);
        }
    }

    Wait(10);
    LoopIfConditionIsTrue();
}


// Test Code -----------------------------------------------
rule: "debug"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Melee)
){

}

// killCount -----------------------------------------------
globalvar define killCountTeam1;
globalvar define killCountTeam2;

rule: "killCount/countUp"
Event.OnFinalBlow
{
    if(TeamOf() == Team.Team1)
        killCountTeam1 ++;
    else if(TeamOf() == Team.Team2)        
        killCountTeam2 ++;
    
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
    dbgMsg(<"setSlow <0>", slow>);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

// TAG Debug ----------
globalvar define debugHuds!;

define Last():
    CountOf(debugHuds);

rule: "showParam"
Event.OngoingGlobal
{
    debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("player team player num", <"<0> / <1>", NumberOfLivingPlayers(playerTeam), NumberOfPlayers(playerTeam)>, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("enemy team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("killCountTeam1", killCountTeam1, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("killCountTeam2", killCountTeam2, Color.Team2);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}
