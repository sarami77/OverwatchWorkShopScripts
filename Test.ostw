import "Lib/Utility.ostw";
import "Lib/Debug.ostw";
import "Lib/PerkCore.ostw";

// Builtin -----------------------------------------------

rule: "Builtin"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageDealt(EventPlayer(), 600);
    SetDamageReceived(EventPlayer(), 1);

    SetHealingDealt(EventPlayer(), 100);
    SetHealingReceived(EventPlayer(), 100);

    SetMaxHealth(EventPlayer(), 100);

    SetJumpVerticalSpeed(EventPlayer(), 100);
//    SetMoveSpeed(EventPlayer(), 1000);
//    SetGravity(EventPlayer(), 7);

    SetProjectileSpeed(EventPlayer(), 100);
    SetProjectileGravity(EventPlayer(), 100);

    StartScalingPlayer(EventPlayer(), 1);
    StartScalingBarriers(EventPlayer(), 1);

    SetUltimateCharge(EventPlayer(), 0);

    define others = FilteredArray(AllPlayers(), ArrayElement() != EventPlayer());
//    SetMoveSpeed(others, 1000);

    SetRespawnMaxTime(AllPlayers(Team.Team2), 1);

    // SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, 99999);
    // ForcePlayerHero(EventPlayer(), Hero.Widowmaker);

    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 20, EffectRev.VisibleToPositionAndRadius);
    // CreateEffect(EventPlayer(), Effect.Ring, Color.White,
    //     EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
}

rule: "Debug/spawnBot"
Event.OngoingPlayer
if(
    IsButtonHeld(ep, Button.Interact)
){
    WaitLongPressConfirm();
    // delete bot
    if(NumberOfPlayers(Team.Team2) >=  NumberOfSlots(Team.Team2)){
        define player = FarthestPlayerFrom(AimingPosition(), Team.Team2);
        DestroyDummyBot(Team.Team2, SlotOf(player));
    }
    WaitUntil(NumberOfPlayers(Team.Team2) <  NumberOfSlots(Team.Team2), 3);
    // search empty slot
    for(gLoopIndex = 0; gLoopIndex < NumberOfSlots(Team.Team2); gLoopIndex++){
        if(null == PlayersInSlot(gLoopIndex, Team.Team2)){
            break;
        }
    }
    // add bot
    if(gLoopIndex < NumberOfSlots(Team.Team2)){
        CreateDummyBot(
            RandomValueInArray(AllHeroes()),
            Team.Team2, gLoopIndex,
            AimingPosition() + Up(),
            FacingDirectionOf()
        );
    }
}

rule: "Debug/overridePerk"
Event.OngoingPlayer
Team.Team1
if(
    perkState == PerkState.Using
){
    perkType = PerkType.SuperLanding;
}

// Test Code -----------------------------------------------

// TAG SuperLanding ----------
rule: "Perk/Player/SuperLanding/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold crouch button <0> to landing attack.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"More hold jump button <0> to hovering.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[1] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to high jump.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[2] = LastTextID();
}

rule: "Perk/Player/SuperLanding/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    DestroyHudText(perkEffectAndText[2]);
    // reset status
    StopHoldingButton(EventPlayer(), Button.Crouch);
    SetMoveSpeed(EventPlayer(), 100);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/SuperLanding/highJump"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();
    ApplyImpulse(EventPlayer(), Up(), 18,
        Relative.ToPlayer, ContraryMotion.Cancel);
    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/SuperLanding/hover"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    Wait(1, WaitBehavior.AbortWhenFalse);
    for(define hovringCount = 0; hovringCount < 50; hovringCount++){
        ApplyImpulse(EventPlayer(), (Up() * 0.1), 1,
            Relative.ToPlayer, ContraryMotion.Cancel);
        WaitApplyImpulseCycle();
    }
}

rule: "Perk/Player/SuperLanding/descent"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    AbortIf(6 > DistanceBetween(EventPlayer(), BelowPosition(EventPlayer())));
    WaitLongPressConfirm();
    ApplyImpulse(EventPlayer(), Down(), MaxValue(),
        Relative.ToPlayer, ContraryMotion.Cancel);
    perkEffectStatus = PerkEffectStatus.SecondTriggered;
}

define superLandingRange: 8;

rule: "Perk/Player/SuperLanding/landing"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.SecondTriggered &&
    IsOnGround()
){
    StartHoldingButton(EventPlayer(), Button.Crouch);
    SetMoveSpeed(EventPlayer(), 0);

    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.White, PositionOf(), superLandingRange);
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosion,
        Color.White, PositionOf(), superLandingRange);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, PositionOf(), 200);
    // apply blast impulse
    perkTargets = PlayersWithinRadius(
        PositionOf(EventPlayer()), 
        superLandingRange, Team.Team2, RadiusLOS.Off);
    ApplyBlastImpulse(perkTargets, PositionOf(), superLandingRange);
    // splash damage
    Damage(perkTargets, EventPlayer(), 100);

    Wait(1.0, WaitBehavior.IgnoreCondition);
    StopHoldingButton(EventPlayer(), Button.Crouch);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Perk/Player/SuperLanding/resetUsedFlag"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SuperLanding &&
    perkState == PerkState.Using &&
    IsOnGround()
)
{
    WaitConditionConfirmed();
    perkEffectStatus = PerkEffectStatus.Ready;
}


// Debug -----------------------------------------------
define changeTimeInterval: 0.2;
globalvar define tuneVal = 1;
globalvar define consecutiveChangeCount = 0;
define initialTuneUnit : 0.01;
globalvar define tuneUnit = initialTuneUnit;

rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "tune Val", tuneVal>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);       
}

rule: "startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(EventPlayer(), Button.Interact) &&
        IsButtonHeld(EventPlayer(), Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}