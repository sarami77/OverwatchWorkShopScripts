import "Test.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ServerOverLoadMeasures.del";
import "Lib/Bot.del";

// Builtin -----------------------------------------------
globalvar define playerTeam = Team.Team1;
globalvar define enemyTeam =  Team.Team2;
globalvar define initCompleted!;

rule: "Builtin"
Event.OngoingGlobal
{
    // DisableInspectorRecording();
    Wait(5);
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;

    // define list = [
    //     Hero.Zarya,
    //     Hero.Reinhardt,
    //     Hero.Reaper,
    //     Hero.Sombra,
    //     Hero.Illari,
    //     Hero.Baptiste,
    //     Hero.Ana,
    //     Hero.Mercy
    // ];
    
    // DestroyBots(playerTeam);
    // DestroyBots(enemyTeam);

    // CreateBotsByHeroList(list, playerTeam);
    // CreateBotsByHeroList(list, enemyTeam);

    // SetRespawnMaxTime(ap(Team.All), 0);
    // SetDamageDealt(ap(Team.All), 50);
    // SetStatus(ap(Team.All), null, Status.Unkillable, MaxValue());

    initCompleted = true;

    // while(true){
    //     Wait(1);
    // }
}

// TestCode -----------------------------------------------
rule: "TestCode"
Event.OngoingPlayer
if(
    hp == ep &&
    HasSpawned()
){
    while(true){
        dbgWldTxt(ObjectivePosition(-1), "OBJ-1");
        dbgWldTxt(ObjectivePosition(0), "OBJ0");
        dbgWldTxt(ObjectivePosition(1), "OBJ1");
        dbgWldTxt(ObjectivePosition(2), "OBJ2");
        dbgWldTxt(ObjectivePosition(3), "OBJ3");
        dbgWldTxt(ObjectivePosition(4), "OBJ4");
        dbgWldTxt(PayloadPosition(), "PLD");

        dbgHudTxt(<"PointCapturePercentage() = <0>", PointCapturePercentage()>);
        dbgHudTxt(<"PayloadProgressPercentage() = <0>", PayloadProgressPercentage()>);
        dbgHudTxt(<"ControlModeScoringPercentage() = <0>", ControlModeScoringPercentage()>);
        Wait(0.5);
    }
}

// TeamFormation -----------------------------------------------
// rule: "TeamFormation/restart"
// Event.OngoingGlobal
// if(
//     initCompleted
// ){
//     while(true){
//         WaitUntil(
//             (
//                 NumberOfLivingPlayers(playerTeam) <= 0 ||
//                 NumberOfLivingPlayers(enemyTeam)  <= 0
//             ),
//             MaxValue()
//         );
//         Wait(3);
//         Respawn(ap(Team.All));
//         Wait(1);
//     }
// }

// Round -----------------------------------------------
rule: "Round/shortenAssemblePhase"
Event.OngoingGlobal
if(
    IsAssemblingHeroes()
){
    SetMatchTime(5);
}

rule: "Round/shortenSetupPhase"
Event.OngoingGlobal
if(
    IsInSetup()
){
    SetMatchTime(5);
}

// killCount -----------------------------------------------
globalvar define killCountTeam1;
globalvar define killCountTeam2;

rule: "killCount/countUp"
Event.OnFinalBlow
{
    if(TeamOf() == Team.Team1)
        killCountTeam1 ++;
    else if(TeamOf() == Team.Team2)        
        killCountTeam2 ++;
    
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

// TAG Debug ----------
globalvar define debugHuds!;

define Last():
    CountOf(debugHuds);

define AimingPositonOf(define player):
    RayCastHitPosition(
        EyePosition(player),
        EyePosition(player) +
            (FacingDirectionOf(player) * MaxLength()),
        null,
        null,
        false
    );

rule: "showParam"
Event.OngoingGlobal
{
    debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("count Detect Trigger Server Load", countDetectTriggerServerLoad, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("Distance to aim pos", DistanceBetween(HostPlayer(), AimingPositonOf(HostPlayer())), Color.Orange);
    debugHuds[Last()] = CreateDebugHud("player team player num", <"<0> / <1>", NumberOfLivingPlayers(playerTeam), NumberOfPlayers(playerTeam)>, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("enemy team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("killCountTeam1", killCountTeam1, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("killCountTeam2", killCountTeam2, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Orange);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount= 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}
