import "SkirmishWithBotHorde.setting.json";
import "../Lib/Bot.del";
import "../Lib/Regeneration.del";
import "../Lib/Utility.del";
import "../Lib/ServerOverloadMeasures.del";

// TAG Signature and infomation ----------
disabled rule: "Skirmish With 24 Bot Horde [ver 1.0] Share code [4B9NY]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated by [Overwatch-Script-To-Workshop] tools"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Bot/CreateBot ----------
rule: "SetDebugSetting"
Event.OngoingGlobal
{
    CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    CreateDebugHud("count Wait Random For Distribute Server Load", countGameLogicSpeedDecrease, Color.Orange);
}

globalvar define initCompleted!;

rule: "InitialSetting"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // debugMode = DebugMode.ShowParam;

    CreateEffect(AllPlayers(), Effect.Sphere, Color.White, combatAreaPos,
        combatAreaRange, EffectRev.VisibleToPositionRadiusAndColor);

    // set game HUD
    // show version and share code
    CreateHudText(AllPlayers(Team.Team1),
        null, "Skirmish With 24 Bot Horde [ver 1.0] Share code [4B9NY]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(5, WaitBehavior.AbortWhenFalse);

    // set bot num
    botNum = WorkshopSettingInteger("Enemy Bot Settings", "Bot Count", 12, 0, 24, 1);

    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

rule: "Player/ReturnSpawn/showReturnSpawnOperation"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    HasSpawned()
){
    // show hero change operation
    CreateHudText(ep,
        null, <"Long hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/returnSpawn"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Reload)
){
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

playervar define killCount = 0;
define topPlayer: LastOf(SortedArray(AllPlayers(), ae.killCount));

rule: "Player/KillCount/showText"
Event.OngoingPlayer
if(
    HasSpawned()
){
    CreateHudText(ep,
        <"[Your Score] <0> <1> : <2> Kills", ep, HeroIconString(HeroOf(ep)), ep.killCount>, null, null,
        Location.Top, 3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateHudText(ep,
        <"[Top Score] <0> <1> : <2> Kills", topPlayer, HeroIconString(HeroOf(topPlayer)), topPlayer.killCount>, null, null,
        Location.Top, 2,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateInWorldText(
        AllPlayers(),
        <"<0> Kills", killCount>,
        EyePosition(ep) + Vector(0,0.2,0), basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
}

rule: "Player/KillCount/countup"
Event.OnFinalBlow
if(
    HasSpawned()
){
    killCount ++;
}

globalvar define botNum;

define botAsset:
    [   // assetNo 0
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1],
        [EnemyType.Non,     RandomHero,         1]
    ];

rule: "ReloadBotList"
Event.OngoingGlobal
if(
    initCompleted
){
    // TAG BotList
    dbgMsg("Reload Bot List");

    DestroyBots(Team.Team1);
    CreateBotsByAsset(botAsset, Team.Team1, botNum / 2);

    DestroyBots(Team.Team2);
    CreateBotsByAsset(botAsset, Team.Team2, botNum / 2);
    
    Wait(180, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "ReloadTeleportPosition"
Event.OngoingGlobal
if(
    initCompleted
){
    SetCombatAreaPositionAtRandom();
    Wait(120, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "SetDummyBotSetting"
Event.OngoingPlayer
{
    StartForcingDummyBotName(ep, GetDummyName());
    watchUpdateRate = 4;
}

rule: "FastRespaw"
Event.OngoingPlayer
if(
    IsDead()
){
    Wait(1);
    Respawn(ep);
}

rule: "TeleortByRespawnForBot"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    IsInSpawnRoom()
){
    ExecTeleport();
}

define keepMovingSecondOfTeleportPlayer: 0.2;

rule: "TeleortByRespawnForPlayer"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    IsMoving()
){
    Wait(keepMovingSecondOfTeleportPlayer, WaitBehavior.AbortWhenFalse);
    ExecTeleport();
}

globalvar define combatAreaRange = WorkshopSettingReal("Game Settings", "Combat Area Range", 55, 0, 1000, 1);

globalvar define combatAreaPos;

rule: "PullCenterByOutBound"
Event.OngoingPlayer
if(
    !IsInSpawnRoom(ep) &&
    DistanceBetween(ep, combatAreaPos) > combatAreaRange
){
    if(DistanceBetween(ep, combatAreaPos) > combatAreaRange + 3){
        Wait(keepMovingSecondOfTeleportPlayer, WaitBehavior.AbortWhenFalse);
        ExecTeleport();
    }
    else{
        while(true){
            ApplyImpulse(ep, VectorTowards(ep, combatAreaPos),
                DistanceBetween(ep, combatAreaPos) * 0.5,
                Relative.ToWorld, ContraryMotion.Cancel);
            Wait(0.1, WaitBehavior.AbortWhenFalse);
            WaitUntilServerOverloadRelease();
        }
    }
}

rule: "TeleortByTargetNotFoundForBot"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Non
){
    Wait(RandomReal(1, 3), WaitBehavior.AbortWhenFalse);
    ExecTeleport();
    LoopIfConditionIsTrue();
}

rule: "TeleortByTargetNotFoundForPlayer"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    !IsInSpawnRoom(ep) &&
    !IsInLineOfSight(ep, ClosestPlayerTo(ep, EnemyTeamOf(ep)))
){
    Wait(5, WaitBehavior.AbortWhenFalse);
    ExecTeleport();
    LoopIfConditionIsTrue();
}

rule: "ShiftTeleportPositionBySpawnRoomKill"
Event.OnDeath
if(
    ep == Attacker()         // sucide
){
    if(
        IsInSpawnRoomPosition(PositionOf(ep), OppositeTeamOf(TeamOf(ep))) &&
        IsProbabilityTrue(25)
    ){
        dbgMsg("Shift Teleport Position By Spawn Room Kill");
        SetCombatAreaPositionAtRandom();
        ForceSpawnRoom(Team.Team1, RandomInteger(0, 2));
        ForceSpawnRoom(Team.Team2, RandomInteger(0, 2));
    }
}

globalvar define prev_teleportPos;

void SetCombatAreaPositionAtRandom()"SetCombatAreaPositionAtRandom"{
    prev_teleportPos = combatAreaPos;
    define temp_teleportAreaPos = combatAreaPos;
    define selectionAreaRange = combatAreaRange * 2.5;

    for(gLoopIndex = 0; gLoopIndex < 10; gLoopIndex++){

        temp_teleportAreaPos = NearestWalkablePosition(
            temp_teleportAreaPos +
            RandomPosition(selectionAreaRange, selectionAreaRange, selectionAreaRange)
        );

        if(
            // not inside ours spwan room
            !IsInSpawnRoomPosition(temp_teleportAreaPos, Team.Team1) 
                &&
            // not inside enemy spwan room
            !IsInSpawnRoomPosition(temp_teleportAreaPos, Team.Team2)
                &&
            // Not too close to prev_teleportPos
            DistanceBetween(    
                prev_teleportPos, temp_teleportAreaPos)
            >= 50
        ){
            break;
        }
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        WaitUntilServerOverloadRelease();
    }
    combatAreaPos = temp_teleportAreaPos;
}


playervar define guardEffectEntity;

globalvar define parallelCount;

void ExecTeleport()"ExecTeleport"{
    if(IsDummyBot()){
        while(parallelCount >= 1){
            Wait(RandomReal(0.5, 1), WaitBehavior.AbortWhenFalse);
        }
    }

    parallelCount ++;

    define teleportPos;
    for(define telLoopIndex = 0; telLoopIndex < 5; telLoopIndex++){ 

        teleportPos = NearestWalkablePosition(
            combatAreaPos +
            RandomPosition(combatAreaRange, combatAreaRange / 2, combatAreaRange)
        );

        if(
            // not inside ours spwan room
            !IsInSpawnRoomPosition(teleportPos, TeamOf()) 
                &&
            // not inside enemy spwan room
            !IsInSpawnRoomPosition(teleportPos, EnemyTeamOf(ep))
                &&
            (
                // ignore has line for seeding
                IsProbabilityTrue(50)
                    ||
                // has line to enemy
                IsInLineOfSight(
                    teleportPos + Up(),
                    PositionOf(
                        ClosestPlayerTo(
                            teleportPos,
                            EnemyTeamOf(ep)
                        )
                    ) + Up()
                )
            )
        ){
            break;
        }
        Wait(0.5, WaitBehavior.IgnoreCondition);
        WaitUntilServerOverloadRelease();
    }

    Teleport(ep, teleportPos);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SetStatus(ep, null, Status.Rooted, 1);
    SetStatus(ep, null, Status.Invincible, 2);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = CreateEffect(
        AllPlayers(), Effect.Sphere, Color.White,
        ep, 1.25, EffectRev.PositionAndRadius);

    Wait(0.1, WaitBehavior.IgnoreCondition);
    // set initial face direction
    SetFacing(
        ep,
        DirectionTowards(ep, ClosestPlayerTo(ep, EnemyTeamOf(ep))),
        Relative.ToWorld);

    parallelCount --;
}

rule: "hideGuardEffect"
Event.OngoingPlayer
Team.All
if(
    guardEffectEntity != 0
){
    Wait(2, WaitBehavior.IgnoreCondition);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = 0;
}

rule: "Debug/resetTeleportPos"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    WaitLongPressConfirm();
    SetCombatAreaPositionAtRandom();
}

rule: "Debug/reloadBotList"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Reload)
){
    WaitLongPressConfirm();
    dbgMsg("Reload Bot List");
    
    define teamAsset = AllHeroes();
    // define teamAsset = [Hero.Kiriko, Hero.JunkerQueen, Hero.Sojourn];
    parallelCount = 0;
    DestroyBots(Team.Team1);
    CreateBotsByAsset(botAsset, Team.Team1, botNum / 2);

    DestroyBots(Team.Team2);
    CreateBotsByAsset(botAsset, Team.Team2, botNum / 2);
}
