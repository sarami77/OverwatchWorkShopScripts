import "ZombieHorde.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ElapsedTimer.del";

// Builtin -----------------------------------------------
define maxDummyBotNum: 24;
define maxPlayerNum: 5;
define maxEnemyNum: maxDummyBotNum - maxPlayerNum;
define destEnemyKills: 500;
define playerRespawnTime: 15;

globalvar define playerTeam;
globalvar define enemyTeam;
globalvar define initCompleted!;
globalvar define enemyKills!;

rule: "BuiltinGlobal"
Event.OngoingGlobal
if(
    true
){
    DisableInspectorRecording();
    DisableCompletion();
    Wait(5);

    elapsedTimerEnable = true;
    
    // DisableAnnouncer();
    // DisableGameModeHud(AllPlayers());
    // DisableGameModeInworldUI(AllPlayers());

    while(true){
        if(TeamOf(HostPlayer()) == Team.Team1){
            playerTeam = Team.Team1;
            enemyTeam = Team.Team2;
        }
        else if(TeamOf(HostPlayer()) == Team.Team2){
            playerTeam = Team.Team2;
            enemyTeam = Team.Team1;
        }
        else{
            playerTeam = Team.Team2;
            enemyTeam = Team.Team1;    
        }

        SetObjectiveDescription(AllPlayers(playerTeam), <"Survive until <0> kills", (destEnemyKills - enemyKills)>);
        SetRespawnMaxTime(AllPlayers(playerTeam), playerRespawnTime);

        initCompleted = true;
        Wait(3, WaitBehavior.IgnoreCondition);
    }
}

// EnemyBot ----------
define needEneymNum: 16;
define enemyAssetList:
    [
        // random hero
        [
            [EnemyType.None,    Hero.Reinhardt, needEneymNum]
        ]
    ];

rule: "EnemyBot/EnemyBotControl"
Event.OngoingGlobal
if(
    initCompleted
){
    Wait(5);
    define asset! = RandomValueInArray(enemyAssetList);
    CreateBotsByAssetWithMutexLock(asset, enemyTeam, needEneymNum);

    while(true){
        Wait(1, WaitBehavior.IgnoreCondition);
        UpdateEnemySpawnPosition();
    }
}

define makeSpawnPosDistMax: ActionRange.Far;
define changeSpawnPosDist: makeSpawnPosDistMax / 3;
define changeSpawnPosProb: 3;
globalvar define spawnPosRootPlayer;
globalvar define spawnPos = 0;
globalvar define orbPos = 0;
globalvar define calcCount;
globalvar define initalHolDir;
globalvar define changeDir;

define maxCalcCount: 100;

void UpdateEnemySpawnPosition()"UpdateEnemySpawnPosition"{
    if(
        !IsInSpawnRoom(spawnPosRootPlayer) &&
        (
            spawnPos == 0 ||
            IsProbabilityTrue(changeSpawnPosProb) ||
            !IsInLineOfSight(spawnPosRootPlayer, spawnPos) ||
            DistanceBetween(ClosestPlayerTo(spawnPos, playerTeam), spawnPos) < changeSpawnPosDist
        )
    ){
        calcCount = 0;
        initalHolDir = DirectionFromAngles(RandomReal(0, 360), 0);
        changeDir = RandomValueInArray([-5, 5]);

        define posCand = getNewSpawnPosition();
        while(
            calcCount < maxCalcCount &&
            (
                posCand == 0 ||
                DistanceBetween(spawnPosRootPlayer, posCand) < makeSpawnPosDistMax * (1 - (calcCount / maxCalcCount)) ||
                !IsInLineOfSight(spawnPosRootPlayer, BelowPosition(posCand)) ||
                IsBelowAbyss(posCand)
            )
        ){
            Wait(0.01);
            WaitReleaseServerLoad();
            posCand = getNewSpawnPosition();
            calcCount ++;
        }
        spawnPos = posCand;
        ChaseVariableOverTime(orbPos, spawnPos, 1, TimeChaseReevaluation.DestinationAndDuration);

    }

    // spawn enemy
    if(
        !IsInSpawnRoom(spawnPosRootPlayer)
    ){
        define telepoTarget! = FilteredArray(
                AllPlayers(enemyTeam),
                (
                    !IsInLineOfSight(ae, ClosestPlayerTo(ae, playerTeam)) &&
                    IsAlive(ae)
                )
            );
        
        SetStatus(telepoTarget, null, Status.Rooted, 1.0);
        Teleport(
            telepoTarget,
            // spawnPos
            orbPos
        );
    }
}

define getNewSpawnPosition()"getNewSpawnPosition"{
    define pos! = BlockedPositon(
        spawnPosRootPlayer,
        DirectionFromAngles(
            initalHolDir + (changeDir * calcCount),
            RandomReal(30, -10),
        ),
        makeSpawnPosDistMax
    );
    pos += (DirectionTowards(pos, spawnPosRootPlayer) * 0.5);
    dbgPlyBemEft(pos, HostPlayer());
    return pos;
}

rule: "EnemyBot/UpdateSpawnPosRootPlayer"
Event.OngoingGlobal
if(
    NumberOfLivingPlayers(playerTeam) > 0
){
    while(true){
        spawnPosRootPlayer = RandomValueInArray(FilteredArray(AllLivingPlayers(playerTeam), !IsDummyBot(ae)));
        if(spawnPosRootPlayer == null){
            spawnPosRootPlayer = RandomValueInArray(FilteredArray(AllLivingPlayers(playerTeam), IsDummyBot(ae)));
        }
        Wait(10, WaitBehavior.IgnoreCondition);
    }
}

rule: "EnemyBot/ChangePosByAbyssDead"
Event.OnDeath
if(
    TeamOf(ep) == enemyTeam &&
    Attacker() == ep
){
    Wait(3, WaitBehavior.IgnoreCondition);
    spawnPos = 0;
}

rule: "EnemyBot/increaseEnemyBuff"
Event.OngoingGlobal
if(
    initCompleted
){
    enemyKills = 0;
    
    while(true){
        // SetStatus(AllPlayers(enemyTeam), null, Status.Unkillable, MaxValue());
        define killProg = enemyKills / destEnemyKills;
        AllPlayers(enemyTeam).enableHealingMove = false;
        AllPlayers(enemyTeam).enableCheckAbyss = false;

        if(killProg >= 0.2){
            SetSecondaryFireEnabled(AllPlayers(enemyTeam), true);
        }
        else{
            SetSecondaryFireEnabled(AllPlayers(enemyTeam), false);
        }

        if(killProg >= 0.4){
            SetAbility2Enabled(AllPlayers(enemyTeam), true);
        }
        else{
            SetAbility2Enabled(AllPlayers(enemyTeam), false);
        }
        
        if(killProg >= 0.6){
            SetAbility1Enabled(AllPlayers(enemyTeam), true);
        }
        else{
            SetAbility1Enabled(AllPlayers(enemyTeam), false);
        }

        if(killProg >= 0.8){
            SetUltimateAbilityEnabled(AllPlayers(enemyTeam), true);
        }
        else{
            SetUltimateAbilityEnabled(AllPlayers(enemyTeam), false);
        }

        applyEnemyStatus();
        Wait(5);
    }
}

rule: "EnemyBot/increaseEnemyBuff"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() != ep
){
    enemyKills += 1;
}

void applyEnemyStatus()"applyEnemyStatus"{
    SetRespawnMaxTime(AllPlayers(enemyTeam),    20 -  (enemyKills * 0.2));
    SetMoveSpeed(AllPlayers(enemyTeam),         50 +  (enemyKills * 0.2));    
    SetMaxHealth(AllPlayers(enemyTeam),         50 +  (enemyKills * 0.2));
    SetDamageDealt(AllPlayers(enemyTeam),       50 +  (enemyKills * 0.2));
}

rule: "EnemyBot/knockBack"
Event.OnDamageTaken
if(
    TeamOf() == enemyTeam &&
    Attacker() != ep
){
    ApplyImpulse(ep, 
        VectorTowards(Attacker(), ep + Vector(0, 0.1, 0)),
        EventDamage() * 1.0,
        Relative.ToWorld, ContraryMotion.Cancel);
}

define preDelay: 3;
define showMsgDelay: 7;

rule: "EnemyBot/playerRestand"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    IsDead()
){
    Wait(preDelay, WaitBehavior.AbortWhenFalse);

    BigMessage(ep, <"You will be revived in <0> seconds.", playerRespawnTime>);
    Wait(playerRespawnTime - (preDelay + 0.1), WaitBehavior.AbortWhenFalse);
    define pos = NearestWalkablePosition(ep);
    if(DistanceBetween(ep, pos) >= 5){
        Teleport(ep, pos);
    }
    if(!isDisableRespawning){
        Resurrect(ep);
        SetStatus(ep, null, Status.PhasedOut, 5);
    }
}

globalvar define isDisableRespawning;

rule: "EnemyBot/playerDefeat"
Event.OnDeath
if(    
    NumberOfLivingPlayers(playerTeam) <= 0
){
    Wait(1, WaitBehavior.AbortWhenFalse);

    isDisableRespawning = true;
    DisableRespawning(AllPlayers(playerTeam));
    Kill(AllPlayers(playerTeam), null);

    Wait(preDelay, WaitBehavior.IgnoreCondition);
    BigMessage(AllPlayers(playerTeam), "no survivor left...");
    Wait(showMsgDelay, WaitBehavior.IgnoreCondition);
    DeclareTeamVictory(enemyTeam);
}

rule: "EnemyBot/playerVictory"
Event.OngoingGlobal
if(
    destEnemyKills <= enemyKills
){
    DisableRespawning(AllPlayers(enemyTeam));
    Kill(AllPlayers(enemyTeam), null);

    Wait(preDelay, WaitBehavior.IgnoreCondition);
    BigMessage(AllPlayers(playerTeam), <"zombie <0> kills completed.", destEnemyKills>);
    Wait(showMsgDelay, WaitBehavior.IgnoreCondition);
    DeclareTeamVictory(playerTeam);
}

// TAG Buddy ----------
import "Lib/Buddy.del";

define buddyAssetList:
    [
        // random hero
        [   // assetNo 0 recommend
            [EnemyType.None,    Hero.Mercy, 1],
            [EnemyType.None,    Hero.Genji, 1],
            [EnemyType.None,    Hero.Reinhardt, 1],
            [EnemyType.None,    Hero.Kiriko, 1],
            [EnemyType.None,    Hero.Hanzo, 1],
            [EnemyType.None,    Hero.Zarya, 1],
            [EnemyType.None,    Hero.Zenyatta, 1],
            [EnemyType.None,    Hero.Soldier76, 1]
        ],
        [
            // assetNo 1 random with fix role
            [EnemyType.None,    RandomSupportHero, 1],
            [EnemyType.None,    RandomTankHero, 1],
            [EnemyType.None,    RandomDamageHero, 1],
            [EnemyType.None,    RandomSupportHero, 1],
            [EnemyType.None,    RandomTankHero, 1],
            [EnemyType.None,    RandomDamageHero, 1],
            [EnemyType.None,    RandomSupportHero, 1],
            [EnemyType.None,    RandomDamageHero, 1]
        ],
        [
            // assetNo 2 many hero
            [EnemyType.None,    FavoriteSupportHero(), 1],
            [EnemyType.None,    FavoriteSupportHero(), 1],
            [EnemyType.None,    FavoriteDamageHero(),  6]
        ]
    ];

define buddyAssetLotteryList: [
    0, 0, 0,
    1, 1, 1,
    2
];

globalvar define isLockedCreateBotsByAsset = false;

void CreateBotsByAssetWithMutexLock(define asset!, define team!, define addLimitNum!){ 
    // can't implement as subroutin for mutex  
    define forceReleaseCount = 0;
    while(isLockedCreateBotsByAsset){
        dbgHudTxt(<"isLockedCreateBotsByAsset <0>", team>);
        if(forceReleaseCount < 5){
            forceReleaseCount ++;
        }
        else{
            break;
        }
        Wait(1, WaitBehavior.IgnoreCondition);
    }
    isLockedCreateBotsByAsset = true;
    CreateBotsByAsset(asset, team, addLimitNum);
    isLockedCreateBotsByAsset = false;
}

define playerNum:
    CountOf(
        FilteredArray(
            AllPlayers(playerTeam),
            !IsDummyBot(ae)
        )
    );

define buddyNum:
    CountOf(
        FilteredArray(
            AllPlayers(playerTeam),
            IsDummyBot(ae)
        )
    );

define needBuddyNum:
    maxBuddyBotNum - playerNum;

globalvar define maxBuddyBotNum! =
    WorkshopSettingInteger("Follower AI Settings (Join as behalf when absent player)", "Max Fill AI Num", 8, 0, 8, 1);

globalvar define buddyAssetNo!;

rule: "Buddy/BuddyContorl"
Event.OngoingGlobal
if(
    initCompleted
){
    define prevPlayerNum! = -1;
    define prevAssetNo! = -1;
    // set initial asset no
    buddyAssetNo = RandomValueInArray(buddyAssetLotteryList);

    while(true){
        if(
            // choiced AssetNo changed
            prevAssetNo != buddyAssetNo ||
            // not filed by need buddy number
            buddyNum != needBuddyNum ||
            // playerNum changed
            prevPlayerNum != playerNum ||
            // entity num than over slot num
            playerNum + buddyNum > NumberOfSlots(playerTeam)
        ){
            // save prev value
            prevPlayerNum = playerNum;
            prevAssetNo = buddyAssetNo;
            // get avg ult charge of bots
            define ultCharge! = GetAvgUltChgOfDummyBot(playerTeam);
            // reload buddy list
            DestroyBots(playerTeam);
            // create bots by addAsset
            define asset! = buddyAssetList[buddyAssetNo];
            CreateBotsByAssetWithMutexLock(asset, playerTeam, needBuddyNum);
            // set avg ult charge of bots
            SetAvgUltChgOfDummyBot(playerTeam, ultCharge);

        }

        // show human player outline
        define players! = AllPlayers();
        players[CountOf(players)] = HostPlayer();
        StartForcingPlayerOutlines(
            FilteredArray(AllPlayers(playerTeam), !IsDummyBot(ae)),
            players,
            true,
            Color.Green,
            OutlineType.Always
        );

        // set max respawn time
        define respawnTime! = 10 * WorkshopSettingReal("Player Settings", "Max Respawn Time Scale", 1.0, 0, 100, 0);
        SetRespawnMaxTime(AllPlayers(playerTeam), respawnTime);

        // check timer
        Wait(10, WaitBehavior.IgnoreCondition);
    }
}

define assetChangeInterval: RandomInteger(180, 180);

rule: "Buddy/changeBuddyAssetNo"
Event.OngoingGlobal
if(
    initCompleted &&
    IsGameInProgress()
){
    // force reload buddy list timer
    Wait(assetChangeInterval, WaitBehavior.IgnoreCondition);
    buddyAssetNo = RandomValueInArray(buddyAssetLotteryList);
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    // set bot option
    watchUpdateRate = 2;

    if(IsGameInProgress()){
        // teleport to player near object
        Teleport(ep, ClosestPlayerTo(CurrentObjectPosition(), playerTeam));
    }
    else{
        // teleport to spawn point
        Teleport(ep, SpawnPoints(playerTeam)[0]);
    }
}

rule: "Buddy/fastRespawnBySucide"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    Attacker() == ep
){
    Respawn();
}

