import "Lib/Utility.ostw";
import "Lib/Debug.ostw";
//import "Lib/PerkCore.ostw";

// Builtin -----------------------------------------------

rule: "Builtin/HostOption"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    SetDamageReceived(EventPlayer(), 1);
    SetMoveSpeed(EventPlayer(), 1000);
    SetGravity(EventPlayer(), 10);
    // SetDamageDealt(EventPlayer(), 600);
    // SetHealingDealt(EventPlayer(), 100);
    // SetHealingReceived(EventPlayer(), 100);
    // SetMaxHealth(EventPlayer(), 100);
    // SetJumpVerticalSpeed(EventPlayer(), 100);
    // SetProjectileSpeed(EventPlayer(), 100);
    // SetProjectileGravity(EventPlayer(), 100);
    // StartScalingPlayer(EventPlayer(), 1);
    // StartScalingBarriers(EventPlayer(), 1);
    // SetUltimateCharge(EventPlayer(), 0);
}

rule: "Builtin/ShowOperationHUD"
Event.OngoingGlobal
{
    // show HUD of bot operation
    CreateHudText(AllPlayers(Team.Team1),
        null, <"hold intaract key <0> to spawn/destory all bot.\n\r  with crouch key <1> to random hero.",
            ButtonGuide(Button.Interact), ButtonGuide(Button.Crouch)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(AllPlayers(Team.Team1),
        null, <"double press intaract key <0> to spawn one bot.\n\r  with crouch key <1> to random hero.",
            ButtonGuide(Button.Interact), ButtonGuide(Button.Crouch)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(AllPlayers(Team.Team1),
        null, <"press intaract key <0> & jump key <1> to change spawn hero.",
            ButtonGuide(Button.Interact), ButtonGuide(Button.Jump)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);     
}

rule: "Builtin/AutoResurrectBot"
Event.OngoingPlayer
if(
    HostPlayer() == EventPlayer() &&
    HasSpawned()
){
    while(true){
        SetRespawnMaxTime(AllPlayers(), 5);
        Resurrect(AllDeadPlayers());
        Wait(5, WaitBehavior.AbortWhenFalse);
    }
}

// TAG Enemy/Debug ----------
rule: "Enemy/ShowDebugInfo"
Event.OngoingPlayer
if(
    HasSpawned() &&
    IsDummyBot() &&
    false
){  
    // show status text
    CreateInWorldText(
        HostPlayer(), statusText,
        ep + (Up() * 3), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    // show status2 text
    CreateInWorldText(
        HostPlayer(), statusText2,
        ep + (Up() * 2), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);

    // show frontDetector path
    CreateBeamEffect(
        ep.state == State.Wandering ? HostPlayer() : null, BeamType.GoodBeam,
        detectorRoot, frontDetector,
        Color.White,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show upperDetector path
    CreateBeamEffect(
        ep.state == State.Wandering ? HostPlayer() : null, BeamType.GoodBeam,
        detectorRoot, upperDetector,
        Color.Blue,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show underDetector path
    CreateBeamEffect(
        ep.state == State.Wandering ? HostPlayer() : null, BeamType.GoodBeam,
        frontDetector, underDetector,
        Color.Green,
        EffectRev.VisibleToPositionRadiusAndColor);

    // show targetPos path
    CreateBeamEffect(
        ep.state == State.Combat || ep.state == State.Searching ? HostPlayer() : null,
        BeamType.GoodBeam,
        EyePosition(), targetPos,
        Color.Red,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show targetPos
    CreateEffect(
        ep.state == State.Searching ? HostPlayer() : null,
        Effect.Ring, Color.Red,
        targetPos, targetPosRange, EffectRev.VisibleToPositionAndRadius);

    // show stackPos
    CreateEffect(
        ep.state == State.Stacked ? HostPlayer() : null,
        Effect.Ring, Color.White,
        stackPos, stackPosRange, EffectRev.VisibleToPositionAndRadius);
}

// TAG Enemy/SpawnControl ----------
define spawnHeroList: [
    Hero.Ana,
    Hero.Ashe,
    Hero.Baptiste,
    Hero.Bastion,
    Hero.Brigitte,
    Hero.Doomfist,
    Hero.Dva,
    Hero.Echo,
    Hero.Genji,
    Hero.Hanzo,
    Hero.Junkrat,
    Hero.Lucio,
    Hero.Mccree,
    Hero.Mei,
    Hero.Mercy,
    Hero.Moira,
    Hero.Orisa,
    Hero.Pharah,
    Hero.Reaper,
    Hero.Reinhardt,
    Hero.Roadhog,
    Hero.Sigma,
    Hero.Soldier76,
    Hero.Sombra,
    Hero.Symmetra,
    Hero.Torbjorn,
    Hero.Tracer,
    Hero.Widowmaker,
    Hero.Winston,
    Hero.WreckingBall,
    Hero.Zarya,
    Hero.Zenyatta
];

define heroNameList: [
    "Ana",
    "Ashe",
    "Baptiste",
    "Bastion",
    "Brigitte",
    "Doomfist",
    "Dva",
    "Echo",
    "Genji",
    "Hanzo",
    "Junkrat",
    "Lucio",
    "Mccree",
    "Mei",
    "Mercy",
    "Moira",
    "Orisa",
    "Pharah",
    "Reaper",
    "Reinhardt",
    "Roadhog",
    "Sigma",
    "Soldier76",
    "Sombra",
    "Symmetra",
    "Torbjorn",
    "Tracer",
    "Widowmaker",
    "Winston",
    "WreckingBall",
    "Zarya",
    "Zenyatta"
];

define maxBotNum: 24;
globalvar define spawnHero = 0;

rule: "Enemy/SpawnControl/changeBotHero"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Jump) &&
    IsButtonHeld(ep, Button.Crouch)
){
    if(true)
        spawnHero ++;
    else
        spawnHero --;

    if(spawnHero >= CountOf(spawnHeroList))
        spawnHero = 0;
    else if(spawnHero < 0)
        spawnHero = CountOf(spawnHeroList) - 1;
}

rule: "Enemy/SpawnControl/CreateOneBot"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    intaractDoublePressed
){
    isSpawnedBot = true;
    spawnPos = AimingPosition();
    CreateOneBot(
        spawnPos,
        IsButtonHeld(ep, Button.Crouch) ?
            AllHeroes() :
            spawnHeroList[spawnHero]);
}

globalvar define isSpawnedBot = false;
globalvar define spawnPos = 0;

rule: "Enemy/SpawnControl/CreateAllBot"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Interact) &&
    !isSpawnedBot
){
    WaitLongPressConfirm();
    isSpawnedBot = true;
    spawnPos = AimingPosition();
    CreateAllBot(
        spawnPos,
        FacingDirectionOf(),
        IsButtonHeld(ep, Button.Crouch) ?
            AllHeroes() :
            spawnHeroList[spawnHero]
    );
}

rule: "Enemy/SpawnControl/DestroyAllBot"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Interact) &&
    isSpawnedBot
){
    WaitLongPressConfirm();
    isSpawnedBot = false;
    DestroyAllBot();
}

define teamAsign: NumberOfPlayers() % 2 == 0 ? Team.Team1 : Team.Team2;

void CreateOneBot(define position, define heroList)"CreateOneBot"{
    CreateDummyBot(
        RandomValueInArray(heroList),
        teamAsign,
        NumberOfPlayers(teamAsign),
        position,
        FacingDirectionOf());
}

define tryLimit: 200;
void CreateAllBot(define position, define direction, define heroList)"CreateAllBot"{
    dbgMsg("Start Create All Bot");
    define tryCount = 0;
    while(
        NumberOfPlayers() < maxBotNum &&
        tryCount < tryLimit &&
        isSpawnedBot
    ){
        CreateDummyBot(
            RandomValueInArray(heroList),
            teamAsign,
            NumberOfPlayers(teamAsign),
            position,
            direction);
        tryCount ++;
        if(ServerLoad() >= 200)
            Wait(0.5);
        else
            Wait(0.1);
    }
    if(tryCount >= tryLimit){
        dbgMsg("Cancel Create All Bot By Try Limit");
    }
    else{
        dbgMsg("Finish Create All Bot");
    }
}

void DestroyAllBot()"DestroyAllBot"{
    dbgMsg("Start Destroy All Bot");
    for(define idx = 0; idx < maxBotNum; idx ++){
        DestroyDummyBot(
            Team.Team1, idx);
        if(ServerLoad() >= 200)
            Wait(0.05);
        else
            Wait(0.01);
    }
    for(define idx = 0; idx < maxBotNum; idx ++){
        DestroyDummyBot(
            Team.Team2, idx);
        if(ServerLoad() >= 200)
            Wait(0.05);
        else
            Wait(0.01);
    }
    dbgMsg("Finish Destroy All Bot"); 
}


// TAG Enemy/SetBotInfo ----------
playervar define heroName;
playervar define combatRange;
playervar define combatRangeMin;
playervar define combatRangeMax;

playervar define primaryFireButtonBehaivor;
playervar define primaryFireButtonWaitMin;
playervar define primaryFireButtonWaitMax;
playervar define primaryFireButtonHoldMin;
playervar define primaryFireButtonHoldMax;

playervar define secondaryFireButtonBehaivor;
playervar define secondaryFireButtonWaitMin;
playervar define secondaryFireButtonWaitMax;
playervar define secondaryFireButtonHoldMin;
playervar define secondaryFireButtonHoldMax;

playervar define ability1ButtonWaitMin;
playervar define ability1ButtonWaitMax;
playervar define ability1ButtonHoldMin;
playervar define ability1ButtonHoldMax;

playervar define ability2ButtonWaitMin;
playervar define ability2ButtonWaitMax;
playervar define ability2ButtonHoldMin;
playervar define ability2ButtonHoldMax;

rule: "Enemy/SetBotInfo"
Event.OngoingPlayer
if(
    HasSpawned() &&
    IsDummyBot()
){
        combatRange = CombatRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldOnly;
        primaryFireButtonWaitMin = 0;
        primaryFireButtonWaitMax = 10;
        primaryFireButtonHoldMin = 0;
        primaryFireButtonHoldMax = 10;

        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonWaitMin = 0;
        secondaryFireButtonWaitMax = 10;
        secondaryFireButtonHoldMin = 0;
        secondaryFireButtonHoldMax = 10;

        ability1ButtonWaitMin = 0;
        ability1ButtonWaitMax = 10;
        ability1ButtonHoldMin = 0;
        ability1ButtonHoldMax = 1;

        ability2ButtonWaitMin = 0;
        ability2ButtonWaitMax = 10;
        ability2ButtonHoldMin = 0;
        ability2ButtonHoldMax = 1;

    switch(HeroOf()){
        case Hero.Ana:
        heroName = "Ana";
        combatRange = CombatRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldOnly;
        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonWaitMin = 0;
        secondaryFireButtonWaitMax = 10;
        secondaryFireButtonHoldMin = 10;
        secondaryFireButtonHoldMax = 10;
        break;

        case Hero.Ashe:
        heroName = "Ashe";
        combatRange = CombatRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.Repeat;
        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonWaitMin = 0;
        secondaryFireButtonWaitMax = 10;
        secondaryFireButtonHoldMin = 10;
        secondaryFireButtonHoldMax = 10;
        break;

        case Hero.Baptiste:
        heroName = "Baptiste";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Bastion:
        heroName = "Bastion";
        combatRange = CombatRange.Far;
        break;

        case Hero.Brigitte:
        heroName = "Brigitte";
        combatRange = CombatRange.Melee;
        break;

        case Hero.Doomfist:
        heroName = "Doomfist";
        combatRange = CombatRange.Close;
        break;

        case Hero.Dva:
        heroName = "Doomfist";
        combatRange = CombatRange.Close;
        break;

        case Hero.Echo:
        heroName = "Echo";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Genji:
        heroName = "Genji";
        combatRange = CombatRange.Close;
        break;

        case Hero.Hanzo:
        heroName = "Hanzo";
        combatRange = CombatRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        primaryFireButtonWaitMin = 0;
        primaryFireButtonWaitMax = 0;
        primaryFireButtonHoldMin = 2;
        primaryFireButtonHoldMax = 4;
        secondaryFireButtonBehaivor = ButtonBehaivor.Non;
        break;

        case Hero.Junkrat:
        heroName = "Junkrat";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Lucio:
        heroName = "Lucio";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Mccree:
        heroName = "Mccree";
        combatRange = CombatRange.Close;
        break;

        case Hero.Mei:
        heroName = "Mei";
        combatRange = CombatRange.Close;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Mercy:
        heroName = "Mercy";
        combatRange = CombatRange.Far;
        break;

        case Hero.Moira:
        heroName = "Moira";
        combatRange = CombatRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonBehaivor = ButtonBehaivor.HoldOnly;
        break;

        case Hero.Orisa:
        heroName = "Orisa";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Pharah:
        heroName = "Pharah";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Reaper:
        heroName = "Reaper";
        combatRange = CombatRange.Close;
        break;

        case Hero.Reinhardt:
        heroName = "Reinhardt";
        combatRange = CombatRange.Melee;
        break;

        case Hero.Roadhog:
        heroName = "Reaper";
        combatRange = CombatRange.Close;
        break;

        case Hero.Sigma:
        heroName = "Sigma";
        combatRange = CombatRange.Middle;
        secondaryFireButtonWaitMin = 0;
        secondaryFireButtonWaitMax = 10;
        secondaryFireButtonHoldMin = 0;
        secondaryFireButtonHoldMax = 1;
        break;

        case Hero.Soldier76:
        heroName = "Soldier76";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Sombra:
        heroName = "Sombra";
        combatRange = CombatRange.Close;
        break;

        case Hero.Symmetra:
        heroName = "Symmetra";
        combatRange = CombatRange.Close;
        break;

        case Hero.Torbjorn:
        heroName = "Torbjorn";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Tracer:
        heroName = "Tracer";
        combatRange = CombatRange.Close;
        break;

        case Hero.Widowmaker:
        heroName = "Widowmaker";
        combatRange = CombatRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        primaryFireButtonWaitMin = 1;
        primaryFireButtonWaitMax = 2;
        primaryFireButtonHoldMin = 1;
        primaryFireButtonHoldMax = 2;

        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonWaitMin = 0;
        secondaryFireButtonWaitMax = 3;
        secondaryFireButtonHoldMin = 10;
        secondaryFireButtonHoldMax = 20;
        break;

        case Hero.Winston:
        heroName = "Winston";
        combatRange = CombatRange.Close;
        break;

        case Hero.WreckingBall:
        heroName = "WreckingBall";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Zarya:
        heroName = "Zarya";
        combatRange = CombatRange.Middle;
        break;

        case Hero.Zenyatta:
        heroName = "Zenyatta";
        combatRange = CombatRange.Far;
        break;
    }

    // set combat range
    switch(combatRange){
        case CombatRange.Melee:
            combatRangeMin = 1;
            combatRangeMax = 3;
            break;
        case CombatRange.Close:
            combatRangeMin = 1;
            combatRangeMax = 10;
            break;
        case CombatRange.Middle:
            combatRangeMin = 10;
            combatRangeMax = 18;
            break;
        case CombatRange.Far:
            combatRangeMin = 18;
            combatRangeMax = 26;
            break;
    }
}


enum State{
    Non,
    Wandering,
    Combat,
    Searching,
    Stacked
}

enum CombatRange{
    Non,
    Melee,
    Close,
    Middle,
    Far
}

enum ButtonBehaivor{
    Non,
    HoldOnly,
    HoldAndRelease,
    Repeat
}

enum WeaponTarget{
    Non,
    Enemy,
    Friend,
    Both
}

// TAG Enemy/ObjectDetector ----------
playervar define detectorRoot;
playervar define upperDetector;
playervar define frontDetector;
playervar define underDetector;
define upperDetectorLength : 4;
define frontDetectorLength : 8;
define underDetectorLength : 6;

enum DetectedObject{
    None,
    Wall,
    Criff,
    DownStair,
    UpStair
}

Boolean getDetectedObject()"getDetectedObject"{
    DetectedObject detecObj = DetectedObject.None;
    define moveDir = Vector(
        XOf(FacingDirectionOf()),
        0,
        ZOf(FacingDirectionOf())
    );
    moveDir = Normalize(moveDir);
    detectorRoot = EyePosition();
    frontDetector = ShiftedPosition(detectorRoot, moveDir, frontDetectorLength);
    upperDetector = ShiftedPosition(frontDetector, Up(), upperDetectorLength);
    underDetector = ShiftedPosition(frontDetector, Down(), underDetectorLength);
    define isFrontBlocked = IsBlockedBetween(detectorRoot, frontDetector);
    define isUpperBlocked = IsBlockedBetween(detectorRoot, upperDetector);
    define isUnderBlocked = IsBlockedBetween(frontDetector, underDetector);
    if(isFrontBlocked){
        if(isUpperBlocked){
            detecObj = DetectedObject.Wall;
        }
        else{
            detecObj = DetectedObject.UpStair;
        }
    }
    else{
        if(isUnderBlocked){
            detecObj = DetectedObject.DownStair;
        }
        else{
            detecObj = DetectedObject.Criff;
        }
    }
    return detecObj;
}

// TAG Enemy/State/StateControl ----------
playervar define statusText;
playervar define statusText2;
playervar define state;
playervar define tuneDir;
playervar define target;
playervar define watchUpdateRate;
define basicUpdateRate: 1.0;

define isStacking:
    SpeedOf() <= 3.0;

define isContactPlayer: 
    HasSpawned(ClosestPlayerTo(ep, OppositeTeamOf(TeamOf()))) &&
    IsAlive(ClosestPlayerTo(ep, OppositeTeamOf(TeamOf()))) &&
    IsInLineOfSight(ep, ClosestPlayerTo(ep, OppositeTeamOf(TeamOf()))) &&
    !(
        HeroOf(target) == Hero.Sombra && IsUsingAbility1(target) &&
        DistanceBetween(ep, ClosestPlayerTo(ep, OppositeTeamOf(TeamOf()))) >= 2
    );

rule: "Enemy/State/StateControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    if(IsDead()){
        // non by dead
        state = State.Non; 
    }
    else if(isContactPlayer){
        // combat by contact player
        state = State.Combat; 
    }
    else
    {
        if(
            targetPos != 0
        ){
            // start searching at target lost position
            state = State.Searching;
        }
        else{
            // start wardering by target lost
            state = State.Wandering;
        }
    }

    Wait(basicUpdateRate, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

// TAG Enemy/State/Non ----------
rule: "Enemy/State/Non"
Event.OngoingPlayer
if(
    state == State.Non
){
    statusText = <"Non">;
    targetPos = 0;
}

// TAG Enemy/State/Wandering ----------
define StartMove(define dir):
            StartThrottleInDirection(
                ep, dir, 1,
                Relative.ToPlayer,
                ThrottleBehavior.ReplaceExistingThrottle,
                ThrottleRev.DirectionAndMagnitude);

define StopMove(): StopThrottleInDirection();

rule: "Enemy/State/Wandering"
Event.OngoingPlayer
if(
    state == State.Wandering
){
    statusText = <"Wandering">;

    // set initial status
    watchUpdateRate = basicUpdateRate;
    targetPos = 0;
    StopFacing(ep);

    // action loop
    while(true){
        DetectedObject object = getDetectedObject();
        // blocked by cliff
        if(object == DetectedObject.Criff){
            statusText = <"Wandering/Blocked_By_Cliff">;

            // not set turn direction
            if(tuneDir == 0){
                // set turn direction
                if(RandomInteger(0, 100) <= 50){
                    tuneDir = Right();
                }
                else{
                    tuneDir = Left();
                }
            }
            // set curve to left/right direction
            SetFacing(ep, Forward() + (tuneDir * 2.0), Relative.ToPlayer);
            // shorten watch update rate
            watchUpdateRate = basicUpdateRate / 4;
        }
        // blocked by wall
        else if(object == DetectedObject.Wall){
            statusText = <"Wandering/Blocked_By_Wall">;

            if(tuneDir == 0){
                if(RandomInteger(0, 100) <= 50){
                    tuneDir = Right();
                }
                else{
                    tuneDir = Left();
                }
            }
            SetFacing(ep, Forward() + (tuneDir * 0.5), Relative.ToPlayer);
            watchUpdateRate = basicUpdateRate / 4;
        }
        // not blocked
        else{
            statusText = <"Wandering/Walking">;
            // reset turn direction
            tuneDir = 0;    
            StartMove(Forward());
            // sence near enemy
            if(RandomInteger(0, 100) <= 10){
                SetFacing(
                    ep,
                    DirectionTowards(
                        EyePosition(),
                        ClosestPlayerTo(ep, OppositeTeamOf(TeamOf()))),
                    Relative.ToWorld
                );   
            }
            watchUpdateRate = basicUpdateRate;
        }

        // check stack
        if(isStacking){
            while(RandomInteger(0, 100) <= 40){
                StartHoldingButton(ep, Button.Jump);
                Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
                StopHoldingButton(ep, Button.Jump);
            }
            if(isStacking){
                state = State.Stacked;
            }
        }

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

playervar define targetPos;
define targetPosRange: 5;
playervar define sideStepDir;
playervar define sideStepKeepSecond;

// TAG Enemy/State/Searching ----------
rule: "Enemy/State/Searching"
Event.OngoingPlayer
if(
    state == State.Searching
){
    statusText = <"Searching">;

    // set initial status
    watchUpdateRate = basicUpdateRate;
    StopFacing(ep); 

    if(sideStepDir == 0){
        //sideStepDir = RandomValueInArray([Right(),Left()]);
        sideStepDir = 0;
    }
    else{
        // set reverse side step for find player
        sideStepDir = -sideStepDir;
    }
    
    // action loop
    while(true){
        targetPos = BelowPosition(targetPos);
        SetFacing(ep, DirectionTowards(ep, targetPos), Relative.ToWorld);

        // blocked by cliff
        DetectedObject object = getDetectedObject();
        define distToTarget = DistanceBetween(ep, target);
        if(object == DetectedObject.Criff){
            moveDir = 0;
            statusText = <"Searching/Blocked_By_Cliff">;
        }
        else{
            moveDir = Forward();
            statusText = <"Searching/Walking">;
        }

        // set move direction
        if(moveDir != 0 && sideStepDir != 0){
            StartMove(moveDir + sideStepDir);
        }
        else if(moveDir == 0 && sideStepDir != 0){
            StartMove(sideStepDir);
        }
        else if(moveDir != 0 && sideStepDir == 0){
            StartMove(moveDir);
        }
        else{
            StopMove();
        }

        // check stack
        if(isStacking){
            StartMove(-sideStepDir + Forward());
            while(RandomInteger(0, 100) <= 40){
                StartHoldingButton(ep, Button.Jump);
                Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
                StopHoldingButton(ep, Button.Jump);
            }
            if(isStacking){
                state = State.Stacked;
            }
        }

        // arrival target lost position
        if(DistanceBetween(targetPos, ep) <= 5){
            statusText = <"Searching/Canceled">;
            Wait(1, WaitBehavior.IgnoreCondition);
            targetPos = 0;
            state = State.Wandering;
        }
 
        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

rule: "Enemy/SideStepKeepSecond"
Event.OngoingPlayer
if(
    0 < sideStepKeepSecond
){
    while(true){
        Wait(1, WaitBehavior.AbortWhenFalse);
        sideStepKeepSecond--;
    }
}

// TAG Enemy/State/Combat ----------
playervar define moveDir;

rule: "Enemy/State/Combat"
Event.OngoingPlayer
if(
    state == State.Combat
){
    statusText = <"Combat">;

    // set initial status
    watchUpdateRate = basicUpdateRate;
    moveDir = 0;
    sideStepDir = 0;
    StartFacing(
            ep,
            DirectionTowards(
                EyePosition(),
                target + (Up() * 1.0)),
            300,
            Relative.ToWorld, FacingRev.DirectionAndTurnRate
        );   
    
    // action loop
    while(true){
        // set target
        target = ClosestPlayerTo(ep, OppositeTeamOf(TeamOf()));
        targetPos = PositionOf(target);

        // change combat distance
        DetectedObject object = getDetectedObject();
        define distToTarget = DistanceBetween(ep, target);
        if(object == DetectedObject.Criff){
            moveDir = 0;
            statusText = <"Combat/Blocked_By_Cliff">;
        }
        else if(distToTarget > combatRangeMax){
            moveDir = Forward();
            statusText = <"Combat/Forward">;
        }
        else if(distToTarget < combatRangeMin){
            moveDir = Backward();
            statusText = <"Combat/Backward">;
        }
        else{
            moveDir = 0;
            statusText = <"Combat/Keep_Distance">;
        }

        // change side step
        if(
            sideStepKeepSecond == 0
        ){
            if(RandomInteger(0, 100) <= 70){
                sideStepDir = RandomValueInArray([Right(),Left()]);
                sideStepKeepSecond = RandomInteger(1, 3);
            }
            else{
                sideStepDir = 0;
                sideStepKeepSecond = RandomInteger(0, 2);
            }
        }

        // check stack
        if(isStacking){
            sideStepDir = -sideStepDir; 
        }

        // set move direction
        if(moveDir != 0 && sideStepDir != 0){
            StartMove(moveDir + sideStepDir);
        }
        else if(moveDir == 0 && sideStepDir != 0){
            StartMove(sideStepDir);
        }
        else if(moveDir != 0 && sideStepDir == 0){
            StartMove(moveDir);
        }
        else{
            StopMove();
        }

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

// TAG Enemy/State/Stacked ----------
playervar define stackPos;
define stackPosRange: 2;

rule: "Enemy/State/Stacked"
Event.OngoingPlayer
if(
    state == State.Stacked
){
    statusText = <"Stacked">;
    stackPos = PositionOf();
    Wait(2, WaitBehavior.RestartWhenTrue);

    if(DistanceBetween(stackPos, ep) <= stackPosRange){
        statusText = <"Stacked/Reset">;
        SetFacing(ep, Backward(), Relative.ToPlayer);
        state = State.Wandering;
    }
}

// TAG Enemy/CooldownControl
disabled rule: "Enemy/CooldownControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
    while(true){
        SetAbilityCooldown(ep, Button.Jump, 0);
        SetAbilityCooldown(ep, Button.Crouch, 0);
        SetAbilityCooldown(ep, Button.Ability1, 0);
        SetAbilityCooldown(ep, Button.Ability2, 0);
        SetAbilityCooldown(ep, Button.PrimaryFire, 0);
        SetAbilityCooldown(ep, Button.SecondaryFire, 0);
        SetUltimateCharge (ep, 100);
        Wait(1, WaitBehavior.AbortWhenFalse);
    }
}

// TAG Enemy/ButtonControl
// define waitPrimaryFireButton: RandomReal(0, 5);
// define holdPrimaryFireButton: RandomReal(0, 5);
// define holdPrimaryFireButtonForSniper: RandomReal(1, 2);

void StartButtonControl(
    define button, define buttonOperation,
    define waitDuringMin, define waitDuringMax,
    define holdDuringMin, define holdDuringMax
){
    if(buttonOperation == ButtonBehaivor.HoldOnly){
        while(true){
            StartHoldingButton(ep, button);
            Wait(RandomReal(holdDuringMin, holdDuringMax), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, button);
        }
    }
    else if(buttonOperation == ButtonBehaivor.HoldAndRelease){
        while(true){
            Wait(RandomReal(waitDuringMin, waitDuringMax), WaitBehavior.AbortWhenFalse);
            StartHoldingButton(ep, button);
            Wait(RandomReal(holdDuringMin, holdDuringMax), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, button);
        }
    }
    else if(buttonOperation == ButtonBehaivor.Repeat){
        repeatDuringMin = holdDuringMin;
        repeatDuringMax = holdDuringMax;
        while(true){
            Wait(RandomReal(waitDuringMin, waitDuringMax), WaitBehavior.AbortWhenFalse);
            isRepeating = true;
            while(isRepeating){
                PressButton(ep, button); 
                Wait(0.5, WaitBehavior.AbortWhenFalse);
            }
        }
    }
}

playervar define isRepeating;
playervar define repeatDuringMin;
playervar define repeatDuringMax;

rule: "Enemy/ButtonControl/isRepeating"
Event.OngoingPlayer
if(
    state == State.Combat &&
    isRepeating
){
    Wait(RandomReal(repeatDuringMin, repeatDuringMax), WaitBehavior.AbortWhenFalse);
    isRepeating = false;
}

rule: "Enemy/ButtonControl/PrimaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
    StartButtonControl(
        Button.PrimaryFire,
        primaryFireButtonBehaivor,
        primaryFireButtonWaitMin,
        primaryFireButtonWaitMax,
        primaryFireButtonHoldMin,
        primaryFireButtonHoldMax
    );
}

rule: "Enemy/ButtonControl/SeconaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
     StartButtonControl(
        Button.SecondaryFire,
        secondaryFireButtonBehaivor,
        secondaryFireButtonWaitMin,
        secondaryFireButtonWaitMax,
        secondaryFireButtonHoldMin,
        secondaryFireButtonHoldMax
    );
}

rule: "Enemy/ButtonControl/Ability1/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
     StartButtonControl(
        Button.Ability1,
        ButtonBehaivor.HoldAndRelease,
        ability1ButtonWaitMin,
        ability1ButtonWaitMax,
        ability1ButtonHoldMin,
        ability1ButtonHoldMax
    );
}

rule: "Enemy/ButtonControl/Ability2/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
     StartButtonControl(
        Button.Ability2,
        ButtonBehaivor.HoldAndRelease,
        ability2ButtonWaitMin,
        ability2ButtonWaitMax,
        ability2ButtonHoldMin,
        ability2ButtonHoldMax
    );
}

rule: "Enemy/ButtonControl/Ultimate/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat &&
    UltimateChargePercent() == 100
){
     StartButtonControl(
        Button.Ultimate,
        ButtonBehaivor.HoldAndRelease,
        0,
        5,
        0,
        1
    );
}

rule: "Enemy/ButtonControl/Jump/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
     StartButtonControl(
        Button.Jump, ButtonBehaivor.HoldAndRelease,
        0,
        5,
        0,
        5
    );
}

rule: "Enemy/ButtonControl/Crouch/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
     StartButtonControl(
        Button.Crouch, ButtonBehaivor.HoldAndRelease,
        0,
        5,
        0,
        3
    );
}

rule: "Enemy/ButtonControl/WeaponSwitch/StartButtonControl"
Event.OngoingPlayer
if(
    state == State.Combat
){
    while(true){
        Wait(RandomReal(0, 30), WaitBehavior.AbortWhenFalse);
        SetWeapon(ep, RandomInteger(0, 1));
    }
}

rule: "Enemy/ButtonControl/StopButtonControl"
Event.OngoingPlayer
if(
    state != State.Combat
){
    statusText2 = <"Not_Combat">;

    StopHoldingButton(ep, Button.PrimaryFire);
    StopHoldingButton(ep, Button.SecondaryFire);
    StopHoldingButton(ep, Button.Ability1);
    StopHoldingButton(ep, Button.Ability2);
    StopHoldingButton(ep, Button.Ultimate);
    StopHoldingButton(ep, Button.Jump);
    StopHoldingButton(ep, Button.Crouch);
}

// Debug -----------------------------------------------
rule: "showParam"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load Average", ServerLoadAverage()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load Peak", ServerLoadPeak()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "spawn hero name", heroNameList[spawnHero]>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);      
}
