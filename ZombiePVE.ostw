 import "Lib/Utility.ostw";
 import "Lib/Debug.ostw";

define ep: EventPlayer();

 rule: "Game/initGameSetting"
Event.OngoingGlobal
{
    # Stop records to reduce server load
    //DisableInspectorRecording();
    DisableScoring();
    DisableGameModeHud(AllPlayers());
    DisableGameModeInworldUI(AllPlayers());
    DisableCompletion();
}

playervar define playerState;
enum PlayerState{
    Survivor,
    Ghost,
    Zombie
}

playervar define hudEntity;
void SetRoleHud(define header, define text, define color){
    ResetRoleHud();
    CreateHudText(
        ep, header, text, "", Location.Top, 1,
        color, color, color,
        HudTextRev.VisibleToSortOrderStringAndColor, Spectators.DefaultVisibility);
    hudEntity = LastTextID();
}
void ResetRoleHud(){
    DestroyHudText(hudEntity);
}

playervar define operationHudEntity;
define SetOperationHud(define text):
    CreateHudText(
        ep, "", "", text, Location.Top, 2,
        Color.White, null, null,
        HudTextRev.VisibleToSortOrderStringAndColor, Spectators.DefaultVisibility);
void ResetAllOperationHud(){
    for(define idx = 0; idx < CountOf(operationHudEntity); idx++){
        DestroyHudText(operationHudEntity[idx]);
    }
    operationHudEntity = [];
}


playervar define floatTextEntity;
void SetFloatText(define text){
    ResetFloatText();
    CreateInWorldText(
        AllPlayers(), text,
        ep, 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionStringAndColor,
        Color.White, Spectators.DefaultVisibility);
    floatTextEntity = LastTextID();
}
void ResetFloatText(){
    DestroyInWorldText(floatTextEntity);
}

playervar define stateIconEntity;
void SetStateIcon(Icon icon, Color color){
    ResetStateIcon();
    CreateIcon(AllPlayers(), ep, icon,
        IconRev.VisibleToPositionAndColor, color, true);
    stateIconEntity = LastCreatedEntity();
}
void ResetStateIcon(){
    DestroyIcon(stateIconEntity);
}

void SetButtonEnable(define status){
    if(status == PlayerState.Survivor){
        SetPrimaryFireEnabled(ep, true);
        SetSecondaryFireEnabled(ep, true);
        SetAbility1Enabled(ep, true);
        SetAbility2Enabled(ep, true);
        SetUltimateAbilityEnabled(ep, true);
        SetMeleeEnabled(ep, true);
    }
    else if(status == PlayerState.Ghost){
        SetPrimaryFireEnabled(ep, false);
        SetSecondaryFireEnabled(ep, false);
        SetAbility1Enabled(ep, false);
        SetAbility2Enabled(ep, false);
        SetUltimateAbilityEnabled(ep, false);
        SetMeleeEnabled(ep, false);
    }
    else if(status == PlayerState.Zombie){
        SetPrimaryFireEnabled(ep, false);
        SetSecondaryFireEnabled(ep, false);
        SetAbility1Enabled(ep, false);
        SetAbility2Enabled(ep, false);
        SetUltimateAbilityEnabled(ep, false);
        SetMeleeEnabled(ep, true);
    }
}

rule: "Player/State/Survivor"
Event.OngoingPlayer
if(
    playerState == PlayerState.Survivor
){
    {
        SetDamageDealt(ep, 100);
        SetMoveSpeed(ep, 100);
        SetGravity(ep, 100);
        ClearStatus(ep, Status.PhasedOut);
        SetInvisible(ep, InvisibleTo.None);
        SetButtonEnable(PlayerState.Survivor);
        SetRoleHud(
            "you are survivor",
            "Survive from zombie attack until timeout.\n\rFind other survivors and unite.\n\rWatch out corners, Zombies come from blind spot.",
            Color.Blue);
        ResetAllOperationHud();
        SetOperationHud(
            <"Press <0> key to spot and share dangers.", ButtonGuide(Button.Interact)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetFloatText("Survivor");
    }
}

rule: "Player/State/Ghost"
Event.OngoingPlayer
if(
    playerState == PlayerState.Ghost
){
    {
        SetDamageDealt(ep, 0);
        SetMoveSpeed(ep, 800);
        SetGravity(ep, 10);
        SetStatus(ep, null, Status.PhasedOut, MaxValue());
        SetInvisible(ep, InvisibleTo.All);
        SetButtonEnable(PlayerState.Ghost);
        SetRoleHud(
            "you are ghost",
            "Not visible from survivors.\n\rUnite to other ghost.\n\rHide in blind spots of survivors, Wait chance of surprise attack.",
            Color.Yellow);
        ResetAllOperationHud();
        SetOperationHud(
            <"Press <0> key to call attack countdown.", ButtonGuide(Button.Ability2)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetOperationHud(
            <"Press <0> key to call acknowledge.", ButtonGuide(Button.Ability1)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetOperationHud(
            <"Press <0> key to mutate to zombie.", ButtonGuide(Button.PrimaryFire)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetFloatText("Ghost");
    }
}

rule: "Player/State/Zombie"
Event.OngoingPlayer
if(
    playerState == PlayerState.Zombie
){
    {
        SetDamageDealt(ep, MaxValue());
        SetMoveSpeed(ep, 75);
        SetGravity(ep, 100);
        ClearStatus(ep, Status.PhasedOut);
        SetInvisible(ep, InvisibleTo.None);
        SetButtonEnable(PlayerState.Zombie);
        SetRoleHud(
            "you are zombie",
            "Kill survivors by melee.\n\runite to other zombies.\n\rWell use blind spot and try surprise attack.",
            Color.Red);
        ResetAllOperationHud();
        SetOperationHud(
            <"Press <0> key to call attack countdown.", ButtonGuide(Button.Ability2)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetOperationHud(
            <"Press <0> key to call acknowledge.", ButtonGuide(Button.Ability1)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetOperationHud(
            <"Press <0> key to melee.", ButtonGuide(Button.PrimaryFire)>);
        operationHudEntity[CountOf(operationHudEntity)] = LastTextID();
        SetFloatText("Zombie");
    }
}

define eyewitnessList:
    FilteredArray(
        AllPlayers(),
        (
            ArrayElement().playerState == PlayerState.Survivor &&
            (
                DistanceBetween(ep, ArrayElement()) <= 10 ||
                (
                    IsInViewAngle(ArrayElement(), ep, 100) &&
                    IsInLineOfSight(EyePosition(ep), ArrayElement())
                )
            )
        )
    );

define IsNoEyewitness:
    0 == CountOf(
        eyewitnessList
    );

define IsNoCloser:
    0 == CountOf(
        FilteredArray(
            AllPlayers(),
            (
                ArrayElement().playerState == PlayerState.Survivor &&
                (
                    DistanceBetween(ep, ArrayElement()) <= 10
                )
            )
        )
    );

globalvar define numSurvivor;
globalvar define numGhost;
globalvar define numZombie;

// Common
rule: "Player/updateRelationship"
Event.OngoingPlayer
if(
    numSurvivor != CountOf(FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Survivor)) || 
    numGhost != CountOf(FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Ghost)) || 
    numZombie != CountOf(FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Zombie))
){
    numSurvivor = CountOf(FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Survivor));
    numGhost = CountOf(FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Ghost));
    numZombie = CountOf(FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Zombie));
    
    dbgMsg("updateRelationship");
    updateRelationship();
}

void updateRelationship()"updateRelationship"{
    define listSurvivor = FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Survivor);
    define listGhostZombie = FilteredArray(AllPlayers(), ArrayElement().playerState == PlayerState.Ghost || ArrayElement().playerState == PlayerState.Zombie);

    // Survivor -> GhostZombie
    StartDamageModification(listGhostZombie, listSurvivor,
        100,
        DamageModificationRev.ReceiversDamagersAndDamagePercent);
    StartForcingPlayerOutlines(listGhostZombie, listSurvivor, true, 
        Color.Red,
        OutlineType.Default);

    // GhostZombie -> Survivor
    StartDamageModification(listSurvivor, listGhostZombie,
        10000,
        DamageModificationRev.ReceiversDamagersAndDamagePercent);
    StartForcingPlayerOutlines(listSurvivor, listGhostZombie, true, 
        Color.Red,
        OutlineType.Always);

    // Survivor <-> Survivor
    StartDamageModification(listSurvivor, listSurvivor,
        0,
        DamageModificationRev.ReceiversDamagersAndDamagePercent);
    StartForcingPlayerOutlines(listSurvivor, listSurvivor, true, 
        Color.Blue,
        OutlineType.Always);

    // GhostZombie <-> GhostZombie
    StartDamageModification(listGhostZombie, listGhostZombie,
        0,
        DamageModificationRev.ReceiversDamagersAndDamagePercent);
    StartForcingPlayerOutlines(listGhostZombie, listGhostZombie, true, 
        Color.Blue,
        OutlineType.Always);
}

rule: "Player/returnGround"
Event.OngoingPlayer
if(
    IsDead() &&
    !IsOnGround()
){
    if(IsDeadByAbyss()){
        Teleport(EventPlayer(), NearestWalkablePosition(EventPlayer()));
    }
    else{
        WaitUpdateMediumCycle();
        LoopIfConditionIsTrue();
    }
}

// TAG Survivor
rule: "Player/Survivor/initToSurvivor"
Event.OngoingPlayer
if(
    HasSpawned()
){
    playerState = PlayerState.Survivor;
}

rule: "Player/Survivor/changeToZombieByDead"
Event.OngoingPlayer
if(
    IsDead()
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    playerState = PlayerState.Ghost;
    Resurrect();
}

// TAG Ghost
rule: "Player/Ghost/changeToZombieByAttackTriggerd"
Event.OngoingPlayer
if(
    playerState == PlayerState.Ghost &&
    IsButtonHeld(ep, Button.PrimaryFire)
){
    if(DistanceBetween(ep, NearestWalkablePosition(ep)) > 10){
        PlayEffect(ep, PlayEffect.BuffImpactSound, null, ep, 100);
        SmallMessage(ep, "Can't attack from here. Too far from map surface.");
    }
    else if(!IsNoEyewitness){
        PlayEffect(ep, PlayEffect.BuffImpactSound, null, ep, 100);
        SmallMessage(ep, "Can't attack from here. Not blind spot from survivor.");
    }
    else if(!IsNoCloser){
        PlayEffect(ep, PlayEffect.BuffImpactSound, null, ep, 100);
        SmallMessage(ep, "Can't attack from here. Too close to survivor.");
    }
    else{
        PlayEffect(ep, PlayEffect.RingExplosionSound, null, ep, 100);
        SmallMessage(ep, "Attack Survivor.");
        playerState = PlayerState.Zombie;
    }
}

rule: "Player/Ghost/float"
Event.OngoingPlayer
if(
    playerState == PlayerState.Ghost &&
    IsOnGround() &&
    IsMoving()
){
    ApplyImpulse(ep, Up(), 1.0, Relative.ToWorld, ContraryMotion.Cancel);
}

// TAG Zombie
rule: "Player/Zombie/changeToGhostByRespawn"
Event.OngoingPlayer
if(
    playerState == PlayerState.Zombie &&
    IsDead()
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    playerState = PlayerState.Ghost;
    Resurrect();
}

rule: "Player/Zombie/changeToGhostByHidden"
Event.OngoingPlayer
if(
    playerState == PlayerState.Zombie &&
    IsNoEyewitness
){
    Wait(5, WaitBehavior.AbortWhenFalse);
    playerState = PlayerState.Ghost;
}

rule: "Player/Zombie/primaryFireToMelee"
Event.OngoingPlayer
if(
    playerState == PlayerState.Zombie &&
    IsButtonHeld(ep, Button.PrimaryFire)
){
    CancelPrimaryAction();
    PressButton(ep, Button.Melee);
}

// TAG Debug
rule: "Debug/changeToGhost"
Event.OngoingPlayer
if(
    IsButtonHeld(ep, Button.Interact)
){
    playerState = PlayerState.Ghost;
}

