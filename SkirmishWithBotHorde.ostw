import "SkirmishWithBotHorde.setting.json";
import "Lib/Bot.del";
import "Lib/Regeneration.del";
import "Lib/DamageText.del";

// TAG Signature and infomation ----------
disabled rule: "Skirmish With 24 Bot Horde [ver 1.0] Share code [4B9NY]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated by [Overwatch-Script-To-Workshop] tools"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Bot/CreateBot ----------
rule: "SetDebugSetting"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateIcon(HostPlayer(), teleportAreaPos, Icon.ArrowDown,
            IconRev.VisibleToAndPosition, Color.White, true);

    while(true){
        //SetMaxHealth(AllPlayers(), 500);
        //SetDamageDealt(AllPlayers(), 1000);

        // SetStatus(AllPlayers(), null, Status.Unkillable, MaxValue());
        // Damage(AllPlayers(), null, MaxValue());
        Wait(1, WaitBehavior.AbortWhenFalse);
    }
}

rule: "InitialSetting"
Event.OngoingGlobal
{
    DisableInspectorRecording();

    // Regeneration.del
    regenerationEnableTeam = Team.All;
    define waitSecond = WorkshopSettingReal("Player Settings", "Wait Second Until Start Regeneration", 1, 0, 100, 1);
    regenerationStartWaitSecondTeam1 = waitSecond;
    regenerationStartWaitSecondTeam2 = waitSecond;
    define regRate = WorkshopSettingReal("Player Settings", "Regeneration Rate In Per Seconds", 25, 0, 1000, 2);
    regenerationHealthPerSecondTeam1 = regRate;
    regenerationHealthPerSecondTeam2 = regRate;
    // DamageText.del
    damageTextEnableTeam = Team.All;

    CreateEffect(AllPlayers(), Effect.Sphere, Color.White, teleportAreaPos,
        combatAreaRange, EffectRev.VisibleToPositionRadiusAndColor);

    // set game HUD
    // show version and share code
    CreateHudText(AllPlayers(Team.Team1),
        null, "Skirmish With 24 Bot Horde [ver 1.0] Share code [4B9NY]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/showReturnSpawnOperation"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    HasSpawned()
){
    // show hero change operation
    CreateHudText(ep,
        null, <"Long hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/returnSpawn"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Reload)
){
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

playervar define killCount = 0;
define topPlayer: LastOf(SortedArray(AllPlayers(), ae.killCount));

rule: "Player/KillCount/showText"
Event.OngoingPlayer
if(
    HasSpawned()
){
    CreateHudText(ep,
        <"<0> Kills", killCount>, null, null,
        Location.Top, 3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateHudText(ep,
        <"[Top Killer] <0> <1> : <2> Kills", topPlayer, HeroIconString(HeroOf(topPlayer)), topPlayer.killCount>, null, null,
        Location.Top, 2,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateInWorldText(
        AllPlayers(),
        <"<0> Kills", killCount>,
        ep, 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
}

rule: "Player/KillCount/countup"
Event.OnFinalBlow
if(
    HasSpawned()
){
    killCount ++;
}

rule: "ReloadBotList"
Event.OngoingGlobal
{
    // TAG BotList
    dbgMsg("Reload Bot List");
    define botNum = WorkshopSettingInteger("Enemy Bot Settings", "Bot Count", 24, 0, 24, 1);

    // CreateBothBotsByInput(AllHeroes(), botNum);
    // CreateBothBotsByInput(AllSupportHeroes(), botNum);
    CreateBothBotsByInput([Hero.Brigitte, Hero.Reaper], botNum);
    // CreateBothBotsByInput([Hero.WreckingBall, Hero.Reinhardt, Hero.Pharah, Hero.Echo, Hero.Reaper, Hero.Mercy, Hero.Baptiste], botNum);
    // CreateBothBotsByInput([Hero.Pharah, Hero.Echo, Hero.Mercy], botNum);

    Wait(180, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "ReloadTeleportPosition"
Event.OngoingGlobal
{
    SetTeleportAreaPositionAtRandom();
    Wait(120, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "FastRespaw"
Event.OngoingPlayer
if(
    IsDead()
){
    Wait(1);
    Respawn(ep);
}

disabled rule: "FastAbilityCooldown"
Event.OngoingPlayer
if(
    IsAlive()
){
    SetAbilityCooldown(ep, Button.Ability1, 0);
    SetAbilityCooldown(ep, Button.Ability2, 0);
    SetAbilityCooldown(ep, Button.SecondaryFire, 0);
    SetAbilityCooldown(ep, Button.Crouch, 0);
    SetAbilityCooldown(ep, Button.Jump, 0);
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}


rule: "TeleortByRespawn"
Event.OngoingPlayer
if(
    IsInSpawnRoom() &&
    (
        IsDummyBot() ||
        IsMoving()
    )
){
    if(!IsDummyBot()){
        Wait(0.15, WaitBehavior.AbortWhenFalse);
    }
    ExecTeleport();
}

globalvar define combatAreaRange = WorkshopSettingReal("Game Settings", "Combat Area Range", 50, 0, 1000, 1);

globalvar define teleportAreaPos;

rule: "PullCenterByOutBound"
Event.OngoingPlayer
if(
    !IsInSpawnRoom(ep) &&
    DistanceBetween(ep, teleportAreaPos) > combatAreaRange
){
    if(DistanceBetween(ep, teleportAreaPos) > combatAreaRange + 3){
        ExecTeleport();
    }
    else{
        ApplyImpulse(ep, VectorTowards(ep, teleportAreaPos),
            DistanceBetween(ep, teleportAreaPos) * 0.5,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    WaitUntil(!isServerOverLoading, RandomReal(3, 5));
    LoopIfConditionIsTrue();
}

rule: "TeleortByTargetNotFoundForBot"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Non
){
    Wait(1.5, WaitBehavior.AbortWhenFalse);
    ExecTeleport();
    LoopIfConditionIsTrue();
}

rule: "TeleortByTargetNotFoundForPlayer"
Event.OngoingPlayer
if(
    !IsInSpawnRoom(ep) &&
    !IsDummyBot() &&
    !IsInLineOfSight(ep, ClosestPlayerTo(ep, EnemyTeamOf()))
){
    Wait(10, WaitBehavior.AbortWhenFalse);
    ExecTeleport();
    LoopIfConditionIsTrue();
}

rule: "ShiftTeleportPositionBySpawnRoomKill"
Event.OnDeath
if(
    ep == Attacker()         // sucide
){
    if(
        IsInSpawnRoomPosition(PositionOf(ep), OppositeTeamOf(TeamOf(ep))) &&
        ProbabilityTrue(25)
    ){
        dbgMsg("Shift Teleport Position By Spawn Room Kill");
        SetTeleportAreaPositionAtRandom();
        ForceSpawnRoom(Team.Team1, RandomInteger(0, 2));
        ForceSpawnRoom(Team.Team2, RandomInteger(0, 2));
    }
}

globalvar define prev_teleportPos;

void SetTeleportAreaPositionAtRandom()"SetTeleportAreaPositionAtRandom"{
    prev_teleportPos = teleportAreaPos;

    define selectionAreaRange = combatAreaRange * 2.5;

    for(gLoopIndex = 0; gLoopIndex < 30; gLoopIndex++){

        teleportAreaPos = NearestWalkablePosition(
            teleportAreaPos +
            RandomPosition(selectionAreaRange, selectionAreaRange, selectionAreaRange));

        teleportAreaPos = NearestWalkablePosition(
            teleportAreaPos +
            (DirectionTowards(teleportAreaPos, RandomValueInArray(AllPlayers())) * RandomReal(1, 5))
        );

        if(
            // not inside ours spwan room
            !IsInSpawnRoomPosition(teleportAreaPos, Team.Team1) 
                &&
            // not inside enemy spwan room
            !IsInSpawnRoomPosition(teleportAreaPos, Team.Team2)
                &&
            // Not too close to prev_teleportPos
            DistanceBetween(    
                prev_teleportPos, teleportAreaPos)
            >= 50
        ){
            break;
        }
        Wait(0.1, WaitBehavior.AbortWhenFalse);
        WaitUntil(!isServerOverLoading, RandomReal(3, 5));
    }
}


playervar define guardEffectEntity;

void ExecTeleport()"ExecTeleport"{
    define teleportPos;
    for(pLoopIndex = 0; pLoopIndex < 30; pLoopIndex++){ 

        teleportPos = NearestWalkablePosition(
            teleportAreaPos +
            RandomPosition(combatAreaRange, combatAreaRange, combatAreaRange)); 

        teleportPos = NearestWalkablePosition(
            teleportPos +
            DirectionTowards(teleportPos, teleportAreaPos) * RandomReal(1, 5)
        );

        if(
            // not inside ours spwan room
            !IsInSpawnRoomPosition(teleportPos, TeamOf()) 
                &&
            // not inside enemy spwan room
            !IsInSpawnRoomPosition(teleportPos, OppositeTeamOf(TeamOf()))
                &&
            // not too close to enemy
            DistanceBetween(
                teleportPos, 
                ClosestPlayerTo(
                    teleportPos,
                    EnemyTeamOf()))
            >= 10
                &&
            // has line to enemy
            IsInLineOfSight(
                teleportPos + Up(),
                ClosestPlayerTo(
                    teleportPos,
                    EnemyTeamOf()))
        ){
            break;
        }
        Wait(0.1, WaitBehavior.AbortWhenFalse);
        WaitUntil(!isServerOverLoading, RandomReal(3, 5));
    }
    if(IsDummyBot()){
        Wait(SlotOf() * 0.1, WaitBehavior.AbortWhenFalse);
    }
    Teleport(ep, teleportPos);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SetStatus(ep, null, Status.Rooted, 1);
    SetStatus(ep, null, Status.Invincible, 3);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = CreateEffect(
        AllPlayers(), Effect.Sphere, Color.Gray,
        ep, 1.25, EffectRev.PositionAndRadius);

    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            EyePosition(ClosestPlayerTo(ep, EnemyTeamOf())),
        ),
        MaxValue(),
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );
    Wait(0.1, WaitBehavior.IgnoreCondition);
    StopFacing();
}

rule: "hideGuardEffect"
Event.OngoingPlayer
Team.All
if(
    guardEffectEntity != 0
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = 0;
}

rule: "Debug/resetTeleportPos"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    WaitLongPressConfirm();
    SetTeleportAreaPositionAtRandom();
}

rule: "Debug/reloadBotList"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ultimate)
){
    WaitLongPressConfirm();
    CreateBothBotsByInput(AllHeroes(), 24);
}
