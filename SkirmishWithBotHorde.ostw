import "SkirmishWithBotHorde.setting.json";
import "Lib/Bot.del";
import "Lib/Regeneration.del";
import "Lib/DamageText.del";
import "Lib/Utility.del";

// TAG Signature and infomation ----------
disabled rule: "Skirmish With 24 Bot Horde [ver 1.0] Share code [4B9NY]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated by [Overwatch-Script-To-Workshop] tools"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Bot/CreateBot ----------
rule: "SetDebugSetting"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateIcon(HostPlayer(), teleportAreaPos, Icon.ArrowDown,
            IconRev.VisibleToAndPosition, Color.White, true);

    while(true){
        //SetMaxHealth(AllPlayers(), 500);
        //SetDamageDealt(AllPlayers(), 1000);

        // SetStatus(AllPlayers(), null, Status.Unkillable, MaxValue());
        // Damage(AllPlayers(), null, MaxValue());
        // SetUltimateCharge(AllPlayers(), 100);
        // SetAbilityCooldown(AllPlayers(), Button.Ability1, 0);
        // SetAbilityCooldown(AllPlayers(), Button.Ability2, 0);
        // SetAbilityCooldown(AllPlayers(), Button.SecondaryFire, 0);
        // SetAbilityResource(AllPlayers(), Button.Ability1, 100);
        // SetAbilityResource(AllPlayers(), Button.Ability2, 100);
        // SetAbilityResource(AllPlayers(), Button.SecondaryFire, 100);
        // SetAmmo(AllPlayers(), 0, 10000);
        // SetAmmo(AllPlayers(), 1, 10000);
        Wait(1.0, WaitBehavior.AbortWhenFalse);
    }
}

globalvar define initCompleted!;

rule: "InitialSetting"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // debugMode = DebugMode.ShowParam;

    // Regeneration.del
    regenerationEnableTeam = Team.All;
    define waitSecond = WorkshopSettingReal("Player Settings", "Wait Second Until Start Regeneration", 1, 0, 100, 1);
    regenerationStartWaitSecondTeam1 = waitSecond;
    regenerationStartWaitSecondTeam2 = waitSecond;
    define regRate = WorkshopSettingReal("Player Settings", "Regeneration Rate In Per Seconds", 25, 0, 1000, 2);
    regenerationHealthPerSecondTeam1 = regRate;
    regenerationHealthPerSecondTeam2 = regRate;
    // DamageText.del
    damageTextEnableTeam = Team.All;

    CreateEffect(AllPlayers(), Effect.Sphere, Color.White, teleportAreaPos,
        combatAreaRange, EffectRev.VisibleToPositionRadiusAndColor);

    // set game HUD
    // show version and share code
    CreateHudText(AllPlayers(Team.Team1),
        null, "Skirmish With 24 Bot Horde [ver 1.0] Share code [4B9NY]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(5, WaitBehavior.AbortWhenFalse);

    // set bot num
    botNum = WorkshopSettingInteger("Enemy Bot Settings", "Bot Count", 20, 0, 24, 1);

    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

rule: "Player/ReturnSpawn/showReturnSpawnOperation"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    HasSpawned()
){
    // show hero change operation
    CreateHudText(ep,
        null, <"Long hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/returnSpawn"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Reload)
){
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

playervar define killCount = 0;
define topPlayer: LastOf(SortedArray(AllPlayers(), ae.killCount));

rule: "Player/KillCount/showText"
Event.OngoingPlayer
if(
    HasSpawned()
){
    CreateHudText(ep,
        <"<0> Kills", killCount>, null, null,
        Location.Top, 3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateHudText(ep,
        <"[Top Scorer] <0> <1> : <2> Kills", topPlayer, HeroIconString(HeroOf(topPlayer)), topPlayer.killCount>, null, null,
        Location.Top, 2,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateInWorldText(
        AllPlayers(),
        <"<0> Kills", killCount>,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
}

rule: "Player/KillCount/countup"
Event.OnFinalBlow
if(
    HasSpawned()
){
    killCount ++;
}

globalvar define botNum;

define ActionRangeHeroes(define actionRange, define team):
    FilteredArray(AllPlayers(team), ae.actionRange == actionRange);

rule: "ReloadBotList"
Event.OngoingGlobal
if(
    initCompleted
){
    // TAG BotList
    dbgMsg("Reload Bot List");
    
    define teamAsset = AllHeroes();
    // define teamAsset = [Hero.Ashe];
    parallelCount = 0;
    CreateBotsByHeroList(teamAsset, botNum / 2, Team.Team1);
    CreateBotsByHeroList(teamAsset, botNum / 2, Team.Team2);

    Wait(180, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "ReloadTeleportPosition"
Event.OngoingGlobal
{
    SetTeleportAreaPositionAtRandom();
    Wait(120, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "FastRespaw"
Event.OngoingPlayer
if(
    IsDead()
){
    Wait(1);
    Respawn(ep);
}

rule: "TeleortByRespawnForBot"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    IsInSpawnRoom()
){
    ExecTeleport();
}

define keepMovingSecondOfTeleportPlayer: 0.2;

rule: "TeleortByRespawnForPlayer"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    IsMoving()
){
    Wait(keepMovingSecondOfTeleportPlayer, WaitBehavior.AbortWhenFalse);
    ExecTeleport();
}

globalvar define combatAreaRange = WorkshopSettingReal("Game Settings", "Combat Area Range", 50, 0, 1000, 1);

globalvar define teleportAreaPos;

rule: "PullCenterByOutBound"
Event.OngoingPlayer
if(
    !IsInSpawnRoom(ep) &&
    DistanceBetween(ep, teleportAreaPos) > combatAreaRange
){
    if(DistanceBetween(ep, teleportAreaPos) > combatAreaRange + 3){
        Wait(keepMovingSecondOfTeleportPlayer, WaitBehavior.AbortWhenFalse);
        ExecTeleport();
    }
    else{
        while(true){
            ApplyImpulse(ep, VectorTowards(ep, teleportAreaPos),
                DistanceBetween(ep, teleportAreaPos) * 0.5,
                Relative.ToWorld, ContraryMotion.Cancel);
            Wait(0.1, WaitBehavior.AbortWhenFalse);
            WaitUntilServerFree();
        }
    }
}

rule: "TeleortByTargetNotFoundForBot"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Non
){
    Wait(RandomReal(1, 3), WaitBehavior.AbortWhenFalse);
    ExecTeleport();
    LoopIfConditionIsTrue();
}

rule: "TeleortByTargetNotFoundForPlayer"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    !IsInSpawnRoom(ep) &&
    !IsInLineOfSight(ep, ClosestPlayerTo(ep, EnemyTeamOf()))
){
    Wait(5, WaitBehavior.AbortWhenFalse);
    ExecTeleport();
    LoopIfConditionIsTrue();
}

rule: "ShiftTeleportPositionBySpawnRoomKill"
Event.OnDeath
if(
    ep == Attacker()         // sucide
){
    if(
        IsInSpawnRoomPosition(PositionOf(ep), OppositeTeamOf(TeamOf(ep))) &&
        ProbabilityTrue(25)
    ){
        dbgMsg("Shift Teleport Position By Spawn Room Kill");
        SetTeleportAreaPositionAtRandom();
        ForceSpawnRoom(Team.Team1, RandomInteger(0, 2));
        ForceSpawnRoom(Team.Team2, RandomInteger(0, 2));
    }
}

globalvar define prev_teleportPos;

void SetTeleportAreaPositionAtRandom()"SetTeleportAreaPositionAtRandom"{
    prev_teleportPos = teleportAreaPos;
    define temp_teleportAreaPos = teleportAreaPos;
    define selectionAreaRange = combatAreaRange * 2.5;

    for(gLoopIndex = 0; gLoopIndex < 10; gLoopIndex++){

        temp_teleportAreaPos = NearestWalkablePosition(
            temp_teleportAreaPos +
            RandomPosition(selectionAreaRange, selectionAreaRange, selectionAreaRange));

        temp_teleportAreaPos += DirectionTowards(temp_teleportAreaPos, RandomValueInArray(AllLivingPlayers())) * RandomReal(1, 5);

        temp_teleportAreaPos = NearestWalkablePosition(temp_teleportAreaPos);

        if(
            // not inside ours spwan room
            !IsInSpawnRoomPosition(temp_teleportAreaPos, Team.Team1) 
                &&
            // not inside enemy spwan room
            !IsInSpawnRoomPosition(temp_teleportAreaPos, Team.Team2)
                &&
            // Not too close to prev_teleportPos
            DistanceBetween(    
                prev_teleportPos, temp_teleportAreaPos)
            >= 50
        ){
            break;
        }
        Wait(0.25, WaitBehavior.AbortWhenFalse);
        WaitUntilServerFree();
    }
    teleportAreaPos = temp_teleportAreaPos;
}


playervar define guardEffectEntity;

globalvar define parallelCount;

void ExecTeleport()"ExecTeleport"{
    if(IsDummyBot()){
        while(parallelCount >= 2){
            Wait(RandomReal(0.1, 1), WaitBehavior.AbortWhenFalse);
        }
    }

    parallelCount ++;

    define teleportPos;
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){ 

        teleportPos = NearestWalkablePosition(
            teleportAreaPos +
            RandomPosition(combatAreaRange, combatAreaRange, combatAreaRange));

        teleportPos += DirectionTowards(teleportPos, RandomValueInArray(AllLivingPlayers())) * RandomReal(1, 5);

        teleportPos = NearestWalkablePosition(teleportPos);

        if(
            // not inside ours spwan room
            !IsInSpawnRoomPosition(teleportPos, TeamOf()) 
                &&
            // not inside enemy spwan room
            !IsInSpawnRoomPosition(teleportPos, EnemyTeamOf())
                &&
            // not too close to enemy
            DistanceBetween(
                teleportPos, 
                ClosestPlayerTo(
                    teleportPos,
                    EnemyTeamOf()))
            >= 5
                &&
            (
                // ignore has line to enemy for seeding
                ProbabilityTrue(25)
                    ||
                // has line to enemy
                IsInLineOfSight(
                    teleportPos + Up(),
                    PositionOf(
                        ClosestPlayerTo(
                            teleportPos,
                            EnemyTeamOf()
                        )
                    ) + Up()
                )
            )
        ){
            break;
        }
        Wait(0.25, WaitBehavior.IgnoreCondition);
        WaitUntilServerFree();
    }

    parallelCount --;

    Teleport(ep, teleportPos);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SetStatus(ep, null, Status.Rooted, 1);
    SetStatus(ep, null, Status.Invincible, 2);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = CreateEffect(
        AllPlayers(), Effect.Sphere, Color.White,
        ep, 1.25, EffectRev.PositionAndRadius);

    Wait(0.1, WaitBehavior.IgnoreCondition);
    // set initial face direction
    SetFacing(
        ep,
        DirectionTowards(ep, ClosestPlayerTo(ep, EnemyTeamOf())),
        Relative.ToWorld);
}

rule: "hideGuardEffect"
Event.OngoingPlayer
Team.All
if(
    guardEffectEntity != 0
){
    Wait(2, WaitBehavior.IgnoreCondition);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = 0;
}

rule: "Debug/resetTeleportPos"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    WaitLongPressConfirm();
    SetTeleportAreaPositionAtRandom();
}

rule: "Debug/reloadBotList"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Reload)
){
    WaitLongPressConfirm();
    CreateBotsByHeroList(AllHeroes(), botNum / 2, Team.Team1);
    CreateBotsByHeroList(AllHeroes(), botNum / 2, Team.Team2);
}
