import "EnemyRush.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/Bot.del";

// TAG Signature and infomation ----------
disabled rule: "ENEMY RUSH [HORDE_PVE]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated by [Overwatch-Script-To-Workshop] tools"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Initialize ----------
define playerTeam: Team.Team1;
define enemyTeam: Team.Team2;

globalvar define initCompleted!;

rule: "Initialize/initialize"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(3, WaitBehavior.AbortWhenFalse);

    // Cancel unnecessary default settings

    // Start watch over load
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;

    // show version and share code
    CreateHudText(AllPlayers(playerTeam),
        null, "ENEMY RUSH [HORDE_PVE]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // Notify completion of init game setting and start game main logic
    initCompleted = true;

    while(true){
        dbgPlyEft(CurrentObjectPosition());
        Wait(1);
    }
}


rule: "Initialize/shortenAssemblingHeroes"
Event.OngoingGlobal
if(
    IsAssemblingHeroes()
){
    SetMatchTime(1);
}

rule: "Initialize/shortenSetup"
Event.OngoingGlobal
if(
    IsInSetup()
){
    SetMatchTime(1);
}

// TAG ServerOverLoadMeasures ----------
define WaitUntilServerFree(){ WaitUntil(!isServerOverLoading, 5); }

define slowLevel: [100, 90, 80, 70, 50];    // 0～4
globalvar define targetSlowLevel;
globalvar define currentSlowLevel;
globalvar define slowControlHandler;
enum SlowControlHandler{
    None,
    ServerOverLoadMeasures,
    PlayerJoin,
    GameEnd
}

rule: "ServerOverLoadMeasures/increaseSlowLevel"
Event.OngoingGlobal
if(
    initCompleted &&    
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    isServerOverLoading &&
    targetSlowLevel < (CountOf(slowLevel) - 1)
){
    // If the server is overloaded,
    //  apply slow motion every second
    //  to reduce the load to avoid shutting down due to server overload.
    Wait(1, WaitBehavior.AbortWhenFalse);
    // can increase slow level
    if(targetSlowLevel < (CountOf(slowLevel) - 1)){
        // increase slow level
        targetSlowLevel ++;
        // apply slow level
        ApplySlowLevel(targetSlowLevel);
    }
    LoopIfConditionIsTrue();
}

rule: "ServerOverLoadMeasures/decreaseSlowLevel"
Event.OngoingGlobal
if(
    initCompleted &&
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    !isServerOverLoading &&
    targetSlowLevel > 0
){
    // If the server is not overloaded,
    //  reset slow motion every second
    // can decrease slow level
    Wait(0.75, WaitBehavior.AbortWhenFalse);
    if(targetSlowLevel > 0){
        // decrease slow level
        targetSlowLevel --;
        // apply slow level
        ApplySlowLevel(targetSlowLevel);
    }
    LoopIfConditionIsTrue();
}

void ApplySlowLevel(define setSlowLevel)"ApplySlowLevel"{
    // if slow level changed
    if(currentSlowLevel != setSlowLevel){
        // apply slow motion
        currentSlowLevel = setSlowLevel;
        SetSlowMotion(slowLevel[setSlowLevel]);
    }
}

// TAG EnemBot ----------
define assetList:
    [

        [
            "tank boss",
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  3]
        ],
        [
            "support boss",
            [EnemyType.Boss,        RandomSupportHero,  1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   3]
        ],
        [
            "damage boss",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     3]
        ],
        [
            "damage boss",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Minion,      RandomSupportHero,  3]
        ],
        [
            "five minions",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Minion,      RandomDamageHero,   5]
        ],
        [
            "four elites",
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  1],
            [EnemyType.Minion,      RandomSupportHero,  1]
        ],
        [
            "four elites",
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   1],
            [EnemyType.Minion,      RandomDamageHero,   1]
        ],
        [
            "four elites",
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     1],
            [EnemyType.Minion,      RandomTankHero,     1]
        ],        
        [
            "double bosses",
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  4]
        ],
        [
            "double bosses",
            [EnemyType.Boss,        RandomSupportHero,  1],
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   4]
        ],
        [
            "double bosses",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Boss,        RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     4]
        ],

        [
            "clones",
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Elite,       someHero, 		    2],
            [EnemyType.Minion,      someHero, 		    3]
        ],
        [
            "double boss clones",
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Elite,       someHero, 		    2]
        ],
        [
            "four elite clones",
            [EnemyType.Elite,       someHero, 		    4],
            [EnemyType.Minion,      someHero, 		    2]
        ],

        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomTankHero,     1]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomDamageHero,   1]
        ],		
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomSupportHero,  1],
            [EnemyType.Minion,      RandomSupportHero,  2]
        ],

        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Pharah,  1]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Reinhardt,  1]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Sigma,     1]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Doomfist,  1]
        ],

        [
            "close range",
            [EnemyType.Boss,        Hero.Reaper,        1],
            [EnemyType.Elite,       Hero.Roadhog,       2],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Minion,      Hero.Mei,           2]
        ],
        [
            "close range",
            [EnemyType.Boss,        Hero.Mei,           1],
            [EnemyType.Elite,       Hero.Doomfist,      2],
            [EnemyType.Elite,       Hero.Roadhog,       1],
            [EnemyType.Minion,      Hero.Reaper,        2]
        ],
        [
            "close range",
            [EnemyType.Boss,        Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Mei,           2],
            [EnemyType.Elite,       Hero.Reaper,        1],
            [EnemyType.Minion,      Hero.Roadhog,       2]
        ],
        [
            "melees",
            [EnemyType.Boss,        Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Doomfist,      2],
            [EnemyType.Elite,       Hero.Mercy,         1],
            [EnemyType.Minion,      Hero.Brigitte,      2]
        ],
        [
            "melees",
            [EnemyType.Boss,        Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Brigitte,      2],
            [EnemyType.Minion,      Hero.Mercy,         2]
        ],
        [
            "flankers",
            [EnemyType.Boss,        Hero.Soldier76,     1],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Genji,         1],
            [EnemyType.Minion,      Hero.Tracer,        3]
        ],
        [
            "flankers",
            [EnemyType.Boss,        Hero.Genji,         1],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Tracer,        1],
            [EnemyType.Minion,      Hero.Soldier76,     3]
        ],
        [
            "long range",
            [EnemyType.Boss,        Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Bastion, 		1],
            [EnemyType.Elite,       Hero.Ana, 	        2],
            [EnemyType.Minion,      Hero.Soldier76, 	2]
        ],
        [
            "long range",
            [EnemyType.Boss,        Hero.Bastion, 		1],
            [EnemyType.Elite,       Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Soldier76, 	2],
            [EnemyType.Minion,      Hero.Ana, 	        2]
        ],
        [
            "air forces",
            [EnemyType.Elite,       Hero.Echo, 			2],
            [EnemyType.Elite,       Hero.Pharah, 		2],
            [EnemyType.Minion,      Hero.Mercy, 		2]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Pharah, 		1],
            [EnemyType.Elite,       Hero.Mercy, 		3],
            [EnemyType.Minion,      Hero.Mercy, 		2]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Echo, 		    1],
            [EnemyType.Elite,       Hero.Mercy, 		3],
            [EnemyType.Minion,      Hero.Mercy, 		2]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Mercy, 		1],
            [EnemyType.Elite,       Hero.Pharah, 		3],
            [EnemyType.Minion,      Hero.Echo, 		    2]
        ],
        [
            "snipers",
            [EnemyType.Boss,        Hero.Hanzo,			1],
            [EnemyType.Boss,        Hero.Widowmaker,	1],
            [EnemyType.Elite,       Hero.Ashe, 			2],
            [EnemyType.Minion,      Hero.Ana, 			2]
        ],
        [
            "snipers",
            [EnemyType.Boss,        Hero.Widowmaker,	1],
            [EnemyType.Boss,        Hero.Ana,	        1],
            [EnemyType.Elite,       Hero.Hanzo, 		2],
            [EnemyType.Minion,      Hero.Ashe, 	        2]
        ],
        [
            "snipers",
            [EnemyType.Boss,        Hero.Ashe,			1],
            [EnemyType.Boss,        Hero.Hanzo,	        1],
            [EnemyType.Elite,       Hero.Ana, 		    2],
            [EnemyType.Minion,      Hero.Widowmaker, 	2]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Bastion, 		2],
            [EnemyType.Elite,       Hero.Echo,          2],
            [EnemyType.Minion,      Hero.Zenyatta,      1]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Bastion, 		1],
            [EnemyType.Elite,       Hero.Zenyatta, 		2],
            [EnemyType.Elite,       Hero.Orisa,         2],
            [EnemyType.Minion,      Hero.Echo,          1]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Echo, 		    1],
            [EnemyType.Elite,       Hero.Zenyatta, 		2],
            [EnemyType.Elite,       Hero.Bastion,       2],
            [EnemyType.Minion,      Hero.Orisa,         1]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Zenyatta, 		1],
            [EnemyType.Elite,       Hero.Bastion, 		2],
            [EnemyType.Elite,       Hero.Orisa,         2],
            [EnemyType.Minion,      Hero.Echo,          1]
        ],
        [
            "Reinhardt army",
            [EnemyType.Boss,        Hero.Reinhardt, 	1],
            [EnemyType.Minion,      Hero.Reinhardt, 	5]
        ],
        [
            "Brigitte army",
            [EnemyType.Boss,        Hero.Reinhardt, 	1],
            [EnemyType.Minion,      Hero.Brigitte,   	5]
        ],
        [
            "turrets",
            [EnemyType.Boss,        Hero.Torbjorn, 		1],
            [EnemyType.Elite,       Hero.Symmetra, 		2],
            [EnemyType.Minion,      Hero.Symmetra, 		3]
        ],
        [
            "turrets",
            [EnemyType.Boss,        Hero.Symmetra, 		1],
            [EnemyType.Elite,       Hero.Torbjorn, 		2],
            [EnemyType.Minion,      Hero.Torbjorn, 		3]
        ]

    ];

globalvar define someHero!;

rule: "EnemyBot/reloadBotAsset"
Event.OngoingGlobal
if(
    initCompleted &&
    !IsInSetup()
){
    dbgMsg("reloadBotAsset");
    // change bot asset by random
    if(
        0 >= NumberOfPlayers(enemyTeam) ||
        ProbabilityTrue(70)
    ){
        someHero = RandomHero;
        // create all bot
        CreateEnemyBotsByAssetList(assetList, enemyTeam);
    }
    Wait(10, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/EnemyType ----------
playervar define eachDealtDamageScale!;
playervar define eachMaxSpawnInterval!;
playervar define eachMinSpawnInterval!;
playervar define eachChargeUltInterval!;
playervar define eachEffectTextSize!;
playervar define eachNameText!;
playervar define eachNameColor!;

playervar define eachPerkDropProbability;   // dummy

rule: "EnemyBot/EnemyType/setEnemyType"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    if(enemyType == EnemyType.Minion){
        StartScalingPlayer(ep, 0.75, false);
        StartModifyingHeroVoiceLines(ep, 1.5, false);

        SetMaxHealth(ep, 50);

        SetHealingDealt(ep, 50);
        SetHealingReceived(ep, 75);
        
        eachDealtDamageScale = 0.5;
        eachChargeUltInterval = 60;
        eachMaxSpawnInterval = 5;
        eachMinSpawnInterval = 0;

        eachNameText = "Minion";
        eachNameColor = Color.White;
        eachEffectTextSize = 1;

        eachPerkDropProbability = 3;
    }
    else if(enemyType == EnemyType.Elite){
        StartScalingPlayer(ep, 1.0, false);
        StartModifyingHeroVoiceLines(ep, 1.0, false);

        SetMaxHealth(ep, 200);

        SetHealingDealt(ep, 100);
        SetHealingReceived(ep, 150);

        eachDealtDamageScale = 1.0;
        eachChargeUltInterval = 20;
        eachMaxSpawnInterval = 10;
        eachMinSpawnInterval = 5;

        eachNameText = "Elite";
        eachNameColor = Color.Yellow;
        eachEffectTextSize = 2;

        eachPerkDropProbability = 12;
    }
    else if(enemyType == EnemyType.Boss){
        StartScalingPlayer(ep, 1.5, false);
        StartModifyingHeroVoiceLines(ep, 0.5, false);

        SetMaxHealth(ep, 1000);

        SetHealingDealt(ep, 200);
        SetHealingReceived(ep, 300);

        eachDealtDamageScale = 2.0;
        eachChargeUltInterval = 10;
        eachMaxSpawnInterval = 20;
        eachMinSpawnInterval = 10;

        eachNameText = "Boss";
        eachNameColor = Color.Red;
        eachEffectTextSize = 3;

        eachPerkDropProbability = 50;
    }
    else if(enemyType == EnemyType.GiantBoss){
        StartScalingPlayer(ep, 2.5, false);
        StartModifyingHeroVoiceLines(ep, 0.1, false);

        SetMaxHealth(ep, 1000);

        SetHealingDealt(ep, 200);
        SetHealingReceived(ep, 300);

        eachDealtDamageScale = 3.0;
        eachChargeUltInterval = 5;
        eachMaxSpawnInterval = 10;
        eachMinSpawnInterval = 5;

        eachNameText = "Giant Boss";
        eachNameColor = Color.Purple;
        eachEffectTextSize = 4;

        eachPerkDropProbability = 100;

        // set addtinal health
        AddHealthPoolToPlayer(ep, HealthType.Armor, 2500, true, false);
        AddHealthPoolToPlayer(ep, HealthType.Shields, 2500, true, false);
    }

    UpdateEachDealtDamage();
    UpdateEachSpawnInterval();

    // heal to max health
    while(Health() < MaxHealth()){
        Heal(ep, null, MaxValue());
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
}

// TAG EnemyBot/Effect ----------
define enemyColor: Color.Purple;
playervar define botAppearanceEntitys!;

rule: "EnemyBot/Effect/showBotAppearance"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    IsAlive()
){
    botAppearanceEntitys = [];
    // show evil aura
    botAppearanceEntitys[0] = 
        CreateEffect(AllPlayers(), Effect.Cloud, enemyColor,
            ep, eachEffectTextSize, EffectRev.VisibleToPositionAndRadius);
    // show name text
    botAppearanceEntitys[1] = 
        CreateInWorldText(
            AllPlayers(), eachNameText, 
            ep, eachEffectTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            eachNameColor, Spectators.DefaultVisibility);
}

rule: "EnemyBot/Effect/hideBotAppearanceAndReek"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    !IsAlive()
){
    // hide evil aura
    DestroyEffect(botAppearanceEntitys[0]);
    // hide name text
    DestroyInWorldText(botAppearanceEntitys[1]);
    // play dead effect
    PlayContinuousBlast(Color.Red, PositionOf(),
        eachEffectTextSize * 1.5, eachEffectTextSize);
}

// TAG EnemyBot/Teleport ----------
Vector CurrentObjectPosition()"CurrentObjectPosition"{
    Vector objPos;
    define mode = CurrentGameMode();

    if(mode == GameMode.Assault){
        objPos = ObjectivePosition(CurrentObjectNo());
    }
    else if(
        mode == GameMode.Escort ||
        mode == GameMode.Hybrid
    ){
        objPos = PayloadPosition();
    }
    else{
        dbgHudTxt("ERROR ON ObjectPosition");
    }
    return objPos;
}

Number CurrentObjectNo()"CurrentObjectNo"{
    if(!IsObjectiveComplete(0)) return 0;
    if(!IsObjectiveComplete(1)) return 1;
    if(!IsObjectiveComplete(2)) return 2;
    if(!IsObjectiveComplete(3)) return 3;
    if(!IsObjectiveComplete(4)) return 4;
    else return -1;
}

define teleportAreaSize: 7;
define ClosestPlayerToTelPos: ClosestPlayerTo(teleportPosition, playerTeam);
define ClosestPlayerToComTelPos: ClosestPlayerTo(commonTeleportPosition, playerTeam);
define ClosestPlayerToMe: ClosestPlayerTo(ep, playerTeam);

Player ClosestPlayerFromObject()"ClosestPlayerFromObject"{
    return FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(playerTeam),
                (
                    HasSpawned(ae) &&
                    IsAlive(ae) &&
                    !IsInSpawnRoom(ae)
                )
            ),
            DistanceBetween(ae, CurrentObjectPosition())
        )
    );
}

playervar define teleportPosition!;
globalvar define commonTeleportPosition!;

Boolean SetTeleportPositionToPlayerFront()"SetTeleportPositionToPlayerFront"{
    // set teleportToTarget at closest player from Object
    define teleportToTarget! = ClosestPlayerFromObject();
    if(teleportToTarget == null){
        teleportPosition = CurrentObjectPosition();
        return true;
    }
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        // select teleportPosition from middle of Object and teleportToTarget
        teleportPosition =
            NearestWalkablePosition(
                PositionOf(teleportToTarget)
                    + 
                (
                    DirectionTowards(teleportToTarget, CurrentObjectPosition())
                        *
                    DistanceBetween(teleportToTarget, CurrentObjectPosition()) * 0.5
                )
                    +
                RandomPosition(teleportAreaSize, teleportAreaSize, teleportAreaSize)
            );

        define telPosNearTarget! = ClosestPlayerToTelPos;
        if(
            // target not inside teleport area
            DistanceBetween(telPosNearTarget, teleportPosition) >= teleportAreaSize
                &&
            // Has line to target
            IsInLineOfSight(telPosNearTarget, teleportPosition, BarrierLOS.NoBarriersBlock)
        ){
            break;
        }
        Wait(0.1, WaitBehavior.AbortWhenFalse);
        WaitUntilServerFree();
    }
    return true;
}

Boolean SetTeleportPositionToObject()"SetTeleportPositionToObjectt"{
    // set teleportToTarget at closest player from Object
    teleportPosition = CurrentObjectPosition() + RandomPosition(3, 0, 3);
    return true;
}

Boolean SetTeleportPositionToPlayerAround()"SetTeleportPositionToPlayerAround"{
    // set teleportToTarget at closest player from Object
    define teleportToTarget! = ClosestPlayerFromObject();
    if(teleportToTarget == null){
        teleportPosition = CurrentObjectPosition();
        return true;
    }
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        // select teleportPosition from teleportToTarget around
        teleportPosition =
            BlockedPositon(
                teleportToTarget,
                DirectionFromAngles(
                    RandomReal(0, 360), RandomReal(30, -30),
                ),
                RandomReal(teleportAreaSize, 50)
            );
        // slide teleportPosition to targer for avoid map surface edge
        teleportPosition += DirectionTowards(teleportPosition, teleportToTarget);
        
        define telPosNearTarget! = ClosestPlayerToTelPos;
        if(
            // target not inside teleport area
            DistanceBetween(telPosNearTarget, teleportPosition) >= teleportAreaSize
                &&
            // Has line to target
            IsInLineOfSight(telPosNearTarget, teleportPosition, BarrierLOS.NoBarriersBlock)
                &&
            // Has ground of teleport position
            IsBlockedBetween(teleportPosition, ShiftedPosition(teleportPosition, Down(), 6))

        ){
            break;
        }
        Wait(0.1, WaitBehavior.AbortWhenFalse);
        WaitUntilServerFree();
    }
    teleportPosition -= PositionOffset();
    return true;
}

define forceUpdateCommonPositionProb: 5;

Boolean SetTeleportPositionToCommonPosition()"SetTeleportPositionToCommonPosition"{
    // set telPosNearTarget at closest player from commonTeleportPosition
    define telPosNearTarget! = ClosestPlayerToComTelPos;
    if(telPosNearTarget == null){
        teleportPosition = CurrentObjectPosition();
        return true;
    }
    if(
        // invalid commonTeleportPosition
        commonTeleportPosition ==  0 ||
        // Probability
        ProbabilityTrue(forceUpdateCommonPositionProb) ||
        // has not line closest player from commonTeleportPosition
        !IsInLineOfSight(commonTeleportPosition, telPosNearTarget) ||                      
        // target inside teleport area
        DistanceBetween(commonTeleportPosition, telPosNearTarget) < teleportAreaSize 
    ){
        // new select common position
        // set teleport position to player around
        if(SetTeleportPositionToPlayerAround()){
            // save teleport position as common position
            commonTeleportPosition = teleportPosition;
        }
        else{
            // set teleport position from common position
            teleportPosition = commonTeleportPosition;
        }
    }
    else{
        // set teleport position from common position
        teleportPosition = commonTeleportPosition;
    }
    return true;
}

void PlayTeleportEffect(define isBefore!)"PlayTeleportEffect"{
    // if before teleport
    if(isBefore){
        // play teleport shadow of own
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyColor, ep, 1);
        // play teleport shadow of dest
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyColor, teleportPosition, 1);
        // wait for show teleport shadow of before
        Wait(0.4, WaitBehavior.IgnoreCondition);
    }
    else{
        // play teleport blast
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, enemyColor, ep, eachEffectTextSize);

    }
}

void TeleportWithEffect()"TeleportWithEffect"{
    Wait(SlotOf(ep) * 0.1, WaitBehavior.AbortWhenFalse);
    // show pre teleport effect
    PlayTeleportEffect(true);
    // Teleport
    Teleport(ep, teleportPosition);
    // show teleport effect
    PlayTeleportEffect(false);
}


define forceTeleportToPlayerAroundProb: 50 / NumberOfPlayers(enemyTeam);
define teleportToCommonPositionProb: 90;

define IsPlayerOnObject: ([] != AllPlayersOnObjective(playerTeam));

rule: "EnemyBot/Teleport/teleportByRespawn"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsAlive() &&
    IsInSpawnRoom()
){
    if(
        // during Object attacks
        IsPlayerOnObject ||
        // probability
        ProbabilityTrue(forceTeleportToPlayerAroundProb)
    ){
        if(
            // probability
            ProbabilityTrue(teleportToCommonPositionProb)
        ){
            // set teleport position to common position
            if(SetTeleportPositionToCommonPosition()){
                // teleport
                TeleportWithEffect();
            }
        }
        else{
            // set teleport position to player around
            if(SetTeleportPositionToPlayerAround()){
                // teleport
                TeleportWithEffect();
            }
        }
    }
    else{
        if(IsTeamOnDefense()){
            // set teleport position to player front
            if(SetTeleportPositionToPlayerFront()){
                // teleport
                TeleportWithEffect();
            }
        }
        else{
            // set teleport position to player front
            if(SetTeleportPositionToObject()){
                // teleport
                TeleportWithEffect();
            }
        }
    }
}

rule: "EnemyBot/Teleport/teleportByPlayerNotFound"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsAlive() &&
    !IsInSpawnRoom()
){
    for(define notHasLineSecond! = 0; notHasLineSecond < 3; notHasLineSecond ++){
        Wait(1, WaitBehavior.AbortWhenFalse);
        if(
            IsInLineOfSight(ep,
                ClosestPlayerToMe,
                BarrierLOS.NoBarriersBlock)
        ){
            LoopIfConditionIsTrue();
        }
    }

    if(
        // during Object attacks
        IsPlayerOnObject ||
        // probability
        ProbabilityTrue(forceTeleportToPlayerAroundProb)
    ){
        if(
            // probability
            ProbabilityTrue(teleportToCommonPositionProb)
        ){
            // set teleport position to common position
            if(SetTeleportPositionToCommonPosition()){
                // teleport
                TeleportWithEffect();
            }
        }
        else{
            // set teleport position to player around
            if(SetTeleportPositionToPlayerAround()){
                // teleport
                TeleportWithEffect();
            }
        }
    }
    else{
        if(IsTeamOnDefense()){
            // set teleport position to player front
            if(SetTeleportPositionToPlayerFront()){
                // teleport
                TeleportWithEffect();
            }
        }
        else{
            // set teleport position to player front
            if(SetTeleportPositionToObject()){
                // teleport
                TeleportWithEffect();
            }
        }
    }

    LoopIfConditionIsTrue();
}

rule: "EnemyBot/Teleport/clearCommonTeleportPosition"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep
){
    commonTeleportPosition = 0;
}

// TAG EnemyBot/EnemyAbility
rule: "EnemyBot/EnemyAbility/combatTeleport"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsAlive() &&
    !IsInSpawnRoom() &&
    enemyType == EnemyType.GiantBoss &&
    actionState == ActionState.Attack
){
    define teleportWaitSecond! = NormalizedHealth() * 10;
    Wait(RandomReal(teleportWaitSecond, teleportWaitSecond + 3), WaitBehavior.AbortWhenFalse);
    // set teleport position to player around
    if(SetTeleportPositionToPlayerAround()){
        define telBeam!;
        // teleport with beam effect
        DestroyEffect(telBeam);
        telBeam = CreateBeamEffect(AllPlayers(),
            BeamType.BadBeam, EyePosition(ep) + Down(), teleportPosition,
            Color.Purple, EffectRev.VisibleToPositionAndRadius);
        TeleportWithEffect();
        DestroyEffect(telBeam);
    }
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/chargeUltimate ----------
rule: "EnemyBot/chargeUltimate"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    HasSpawned() &&
    enemyType != EnemyType.None &&
    !IsUsingUltimate()
){
    SetUltimateCharge(ep, UltimateChargePercent() + (100 / eachChargeUltInterval));
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/SpawnInterval ----------
define showDeadEffectTime: 1.5;
playervar define confirmSpawnInterval!;

void UpdateEachSpawnInterval()"UpdateEachSpawnInterval"{
    confirmSpawnInterval = eachMaxSpawnInterval;
    // confirmSpawnInterval *= (1 - (ObjectSize / maxObjectSize));
    // confirmSpawnInterval -= (roundNo / 5);
    confirmSpawnInterval = Max(confirmSpawnInterval, 0);
    confirmSpawnInterval += eachMinSpawnInterval;
    SetRespawnMaxTime(ep, confirmSpawnInterval + showDeadEffectTime); 
}

rule: "EnemyBot/SpawnInterval/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    UpdateEachSpawnInterval();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/SpawnInterval/fastRespawnBySucide"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep
){
    Wait(showDeadEffectTime, WaitBehavior.AbortWhenFalse);
    Respawn();
}

// TAG EnemyBot/ReceivedDamage ----------
globalvar define confirmReceiveDamage!;

void UpdateEachReceivedDamage()"UpdateEachReceivedDamage"{
    // set base damage
    confirmReceiveDamage = 100;
    // apply team balance
    confirmReceiveDamage *= ConvertToBalancedValue(0.6, playerTeam);
    SetDamageReceived(AllPlayers(enemyTeam), confirmReceiveDamage);
}

rule: "EnemyBot/ReceivedDamage/update"
Event.OngoingGlobal
if(
    initCompleted
){
    UpdateEachReceivedDamage();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/DealtDamage ----------
playervar define confirmDealtDamage!;
globalvar define threatLevel!;

void UpdateEachDealtDamage()"UpdateEachDealtDamage"{
    // set base damage
    confirmDealtDamage = WorkshopSettingReal("Enemy Bot Settings", "Base Deal Damage", 10, 0, 1000, 1);
    // apply team balance
    confirmDealtDamage /= ConvertToBalancedValue(0.6, playerTeam);
        // set strengthScore
        threatLevel = confirmDealtDamage;
    // apply enemy type scale
    confirmDealtDamage *= eachDealtDamageScale;
    SetDamageDealt(ep, confirmDealtDamage);
}

rule: "EnemyBot/DealtDamage/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    UpdateEachDealtDamage();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}


// TAG Debug ----------
disabled rule: "Debug/builtin"
Event.OngoingGlobal
if(
    initCompleted
){
    CreateEffect(HostPlayer(), Effect.Sphere, Color.Yellow,
        commonTeleportPosition, teleportAreaSize, EffectRev.PositionAndRadius);
}

globalvar define debugMode!;

enum DebugMode{
    Non,
    SlowLevelOnly,
    ShowParam,
    WithRecord
}

rule: "Debug/changeDebugMode"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump) 
){
    // change debug mode
    WaitLongPressConfirm();
    if(debugMode == DebugMode.Non){
        debugMode = DebugMode.SlowLevelOnly;
    }
    else if(debugMode == DebugMode.SlowLevelOnly){
        debugMode = DebugMode.ShowParam;
    }
    else if(debugMode == DebugMode.ShowParam){
        debugMode = DebugMode.WithRecord;
    }
    else if(debugMode == DebugMode.WithRecord){
        debugMode = DebugMode.Non;
    }

    if(debugMode == DebugMode.Non){
        DisableInspectorRecording();
        HideDebugHud();
    }
    else if(debugMode == DebugMode.SlowLevelOnly){
        DisableInspectorRecording();
        HideDebugHud();
        ShowDebugHud(HostPlayer());
    }
    else if(debugMode == DebugMode.ShowParam){
        DisableInspectorRecording();
        HideDebugHud();
        ShowDebugHud(HostPlayer());
    }
    else if(debugMode == DebugMode.WithRecord){
        EnableInspectorRecording();
        HideDebugHud();
        ShowDebugHud(HostPlayer());
    }
}

define End(): CountOf(debugHudEntitys);
define botOfEnemyType(define enemyType): FirstOf(FilteredArray(AllPlayers(enemyTeam), ae.enemyType == enemyType));
globalvar define debugHudEntitys!;

// show debug icon and hud
void ShowDebugHud(define player!)"ShowDebugHud"{
    if(
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        if(
            debugMode == DebugMode.WithRecord
        ){
            CreateHudText(player,
                null,
                null,
                "● is Recording",
                Location.Left, -1,
                Color.White, Color.White, Color.Red,
                HudTextRev.VisibleToAndString, Spectators.VisibleNever);
            debugHudEntitys[End()] = LastTextID();
        }

        // CreateHudText(player,
        //     null,
        //     <"<0> <1>", "Regeneration Rate", regenRateTeam1>,
        //     null,
        //     Location.Left, -1,
        //     Color.White, Color.Blue, Color.White,
        //     HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        // debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Giant Boss Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.GiantBoss).confirmDealtDamage,
                botOfEnemyType(EnemyType.GiantBoss).confirmSpawnInterval,
                botOfEnemyType(EnemyType.GiantBoss).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Boss Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.Boss).confirmDealtDamage,
                botOfEnemyType(EnemyType.Boss).confirmSpawnInterval,
                botOfEnemyType(EnemyType.Boss).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Elite Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.Elite).confirmDealtDamage,
                botOfEnemyType(EnemyType.Elite).confirmSpawnInterval,
                botOfEnemyType(EnemyType.Elite).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Minion Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.Minion).confirmDealtDamage,
                botOfEnemyType(EnemyType.Minion).confirmSpawnInterval,
                botOfEnemyType(EnemyType.Minion).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "threat Level", threatLevel>,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();   }

        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load", ServerLoad()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

    if(
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load Average", ServerLoadAverage()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load Peak", ServerLoadPeak()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
    }

        CreateHudText(player,
            null,
            <"<0> <1>", "current Slow Level", currentSlowLevel>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
}

// Hide debug icon and hud
void HideDebugHud()"HideDebugHud"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(debugHudEntitys); gLoopIndex ++){
        DestroyHudText(debugHudEntitys[gLoopIndex]);
    }
}

rule: "Debug/resetPortal // reset portal position by random"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    !IsButtonHeld(ep, Button.Reload) &&
    IsButtonHeld(ep, Button.Crouch)
){
    // Recalculate portal
    WaitLongPressConfirm();

    someHero = RandomHero;
    // create all bot
    CreateEnemyBotsByAssetList(assetList, enemyTeam);
}