import "EnemyRush.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ServerOverLoadMeasures.del";
import "Lib/Bot.del";
import "Lib/Buddy.del";
// import "Lib/Mutation.del";

// TAG Signature and infomation ----------
disabled rule: "ENEMY RUSH -HORDE PVE [ver.2.0] Share code [V7PEF]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated by [Overwatch-Script-To-Workshop] tools"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Initialize ----------
define playerTeam: Team.Team2;
define enemyTeam: Team.Team1;

globalvar define initCompleted!;

rule: "Initialize/initialize"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(3, WaitBehavior.AbortWhenFalse);

    // Start watch over load
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;

    // show version and share code
    CreateHudText(AllPlayers(),
        null, "ENEMY RUSH -HORDE PVE [ver.2.0] Share code [V7PEF]", null,
        Location.Left, -999,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // show HUD of enemy team assembly
    CreateHudText(AllPlayers(),
        null,
        null,
        <"Enemy Team Assembly \"<0>\"", enemyTeamName>,
        Location.Right, -1,
        Color.White, Color.White, Color.Purple,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

rule: "Initialize/shortenAssemblingHeroes"
Event.OngoingGlobal
if(
    IsAssemblingHeroes()
){
    SetMatchTime(0);
    // SetMatchTime(25);
}

rule: "Initialize/shortenSetup"
Event.OngoingGlobal
if(
    IsInSetup()
){
    SetMatchTime(25);
}

// TAG Buddy ----------
rule: "Buddy/BuddyContorl"
Event.OngoingGlobal
if(
    initCompleted
){
    define buddyList! = 
    WorkshopSettingToggle("Follower AI Settings(Join on behalf of absent player)", "Random Hero", true) ?
        // random list
        [
            RandomSupportHero,
            RandomTankHero,
            RandomDamageHero,
            RandomSupportHero,
            RandomTankHero,
            RandomDamageHero,
            RandomSupportHero,
            RandomDamageHero
        ]
    :
        // fix list
        [
            Hero.Mercy,
            Hero.Genji,
            Hero.Reinhardt,
            Hero.Ana,
            Hero.Hanzo,
            Hero.Orisa,
            Hero.Baptiste,
            Hero.Soldier76
        ];

    // slice buddy list by setting
    buddyList = ArraySlice(buddyList, 0,
        WorkshopSettingInteger(
            "Follower AI Settings(Join on behalf of absent player)",
            "Follower Max Num", 8, 0, 8, 1)
    );

    define prevPlayerNum! = -1;
    define maxSlotNum! = NumberOfSlots(playerTeam);
    define maxBuddyNum! = CountOf(buddyList);

    while(true){
        define playerNum! =
            CountOf(
                FilteredArray(
                    AllPlayers(playerTeam),
                    !IsDummyBot(ae)));

        define needBuddyNum! = 
            Min(
                maxSlotNum - playerNum,
                maxBuddyNum);

        define buddyNum! = 
            CountOf(
                FilteredArray(
                    AllPlayers(playerTeam),
                    IsDummyBot(ae)));

        if(
            // player number changed
            prevPlayerNum != playerNum ||
            // not filed buddy number
            buddyNum != needBuddyNum
        ){
            // save player num
            prevPlayerNum = playerNum;
            // relaod buddy list
            DestroyBots(playerTeam);
            define emptySlotNum! = maxSlotNum - playerNum;
            define addList! = ArraySlice(buddyList, 0, emptySlotNum);
            for(define buddyAddIndex! = 0; buddyAddIndex < CountOf(addList); buddyAddIndex++){
                CreateBotsByHeroInput(addList[buddyAddIndex], 1, playerTeam);
            }
        }
    
        Wait(5, WaitBehavior.IgnoreCondition);
    }
}

rule: "Buddy/Teleport/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    if(IsGameInProgress()){
        SetUltimateCharge(ep, 50);
        // teleport to player near object
        Teleport(ep, ClosestPlayerTo(CurrentObjectPosition(), playerTeam));
    }
    else{
        // teleport to spawn point
        Teleport(ep, SpawnPoints(playerTeam)[0]);
    }
}

rule: "Buddy/fastRespawnByKilled"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    Attacker() != ep
){
    Wait(7.0, WaitBehavior.IgnoreCondition);
    Respawn();
}

rule: "Buddy/fastRespawnBySucide"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    Attacker() == ep
){
    Respawn();
}


// TAG Payload ----------
globalvar define prevPayloadPosition!;

globalvar define payloadDirection!;

rule: "Payload/updatePayloadDirection"
Event.OngoingGlobal
if(
    PayloadProgressPercentage() > 0
){
    prevPayloadPosition = PayloadPosition();

    while(true){
        define nowPayloadPosition! = PayloadPosition();
        if(
            IsPlayerOnObject &&
            DistanceBetween(nowPayloadPosition, prevPayloadPosition) > 0.01
        ){
            payloadDirection = DirectionTowards(prevPayloadPosition, nowPayloadPosition);
            prevPayloadPosition = nowPayloadPosition;
        }
        Wait(1, WaitBehavior.IgnoreCondition);
    }
}

// TAG Player ----------
// TAG Player/FisrtFast
rule: "Player/FisrtFast/setFastSpeed"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsAlive() &&
    IsInSpawnRoom()
){
    SetMoveSpeed(ep, 150);
    while(!IsInLineOfSight(ep, ClosestPlayerTo(ep, enemyTeam))){
        Wait(1, WaitBehavior.IgnoreCondition);
    }
    SetMoveSpeed(ep, DefaultPercentage());
}

// TAG EnemBot ----------
define assetList:
    [
        // random hero
        [
            "basic",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Elite,       RandomHero,         5],
            [EnemyType.Minion,      RandomHero,         10]
        ],
        [
            "basic",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Elite,       RandomHero,         5],
            [EnemyType.Minion,      RandomHero,         10]
        ],
        [
            "basic",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Elite,       RandomHero,         5],
            [EnemyType.Minion,      RandomHero,         10]
        ],
        [
            "basic",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Elite,       RandomHero,         5],
            [EnemyType.Minion,      RandomHero,         10]
        ],
        [
            "basic",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Elite,       RandomHero,         5],
            [EnemyType.Minion,      RandomHero,         10]
        ],
        [
            "basic",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Elite,       RandomHero,         5],
            [EnemyType.Minion,      RandomHero,         10]
        ],
        [
            "boss and minions",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Minion,      RandomHero,         15]
        ],
        [
            "boss and minions",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Minion,      RandomHero,         15]
        ],        [
            "boss and minions",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Minion,      RandomHero,         15]
        ],
        [
            "12 elites",
            [EnemyType.Elite,       RandomHero,         4],
            [EnemyType.Elite,       RandomHero,         4],
            [EnemyType.Elite,       RandomHero,         4]
        ],
        [
            "12 elites",
            [EnemyType.Elite,       RandomHero,         4],
            [EnemyType.Elite,       RandomHero,         4],
            [EnemyType.Elite,       RandomHero,         4]
        ],        [
            "12 elites",
            [EnemyType.Elite,       RandomHero,         4],
            [EnemyType.Elite,       RandomHero,         4],
            [EnemyType.Elite,       RandomHero,         4]
        ],
        [
            "double bosses",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Minion,      RandomHero,         8]
        ],
        [
            "double bosses",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Minion,      RandomHero,         8]
        ],        [
            "double bosses",
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Boss,        RandomHero,         1],
            [EnemyType.Minion,      RandomHero,         8]
        ],

        [
            "clones",
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Elite,       someHero, 		    5],
            [EnemyType.Minion,      someHero, 		    10]
        ],
        [
            "double boss clones",
            [EnemyType.Boss,        someHero, 		    2],
            [EnemyType.Elite,       someHero, 		    8]
        ],
        [
            "12 elites clones",
            [EnemyType.Elite,       someHero, 		    12]
        ],
        
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomTankHero,     1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     10]
        ],

        // specificatied hero asset
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Reinhardt,     1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Sigma,         1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Doomfist,      1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Pharah,        1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Genji,         1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Roadhog,         1],
            [EnemyType.Minion,      RandomSupportHero,  10]
        ],
        [
            "close range",
            [EnemyType.Boss,        Hero.Reaper,        1],
            [EnemyType.Elite,       Hero.Mei,           5],
            [EnemyType.Minion,      Hero.Dva,           10]
        ],
        [
            "close range",
            [EnemyType.Boss,        Hero.Mei,           1],
            [EnemyType.Elite,       Hero.Dva,           5],
            [EnemyType.Minion,      Hero.Reaper,        10]
        ],
        [
            "melees",
            [EnemyType.Boss,        Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Doomfist,      5],
            [EnemyType.Minion,      Hero.Brigitte,      10]
        ],
        [
            "melees",
            [EnemyType.Boss,        Hero.Brigitte,      1],
            [EnemyType.Elite,       Hero.Doomfist,      5],
            [EnemyType.Minion,      Hero.Reinhardt,     10]
        ],
        [
            "flankers",
            [EnemyType.Boss,        Hero.Genji,         1],
            [EnemyType.Elite,       Hero.Soldier76,     5],
            [EnemyType.Minion,      Hero.Tracer,        10]
        ],
        [
            "flankers",
            [EnemyType.Boss,        Hero.Tracer,        1],
            [EnemyType.Elite,       Hero.Genji,         5],
            [EnemyType.Minion,      Hero.Soldier76,     10]
        ],
        [
            "long range",
            [EnemyType.Boss,        Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Sojourn, 		5],
            [EnemyType.Minion,      Hero.Ana, 	        10]
        ],
        [
            "long range",
            [EnemyType.Boss,        Hero.Sojourn, 		1],
            [EnemyType.Elite,       Hero.Orisa, 		5],
            [EnemyType.Minion,      Hero.Ana, 	        10]
        ],
        [
            "air forces elite",
            [EnemyType.Elite,       Hero.Echo, 			5],
            [EnemyType.Elite,       Hero.Pharah, 		5]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Pharah, 		1],
            [EnemyType.Elite,       Hero.Mercy, 		5],
            [EnemyType.Minion,      Hero.Echo,   		10]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Echo, 		    1],
            [EnemyType.Elite,       Hero.Mercy, 		5],
            [EnemyType.Minion,      Hero.Pharah,   		10]
        ],
        [
            "snipers elite",
            [EnemyType.Boss,         Hero.Orisa,        1],
            [EnemyType.Elite,        Hero.Hanzo,		7],
            [EnemyType.Elite,        Hero.Widowmaker,	7]
        ],
        [
            "snipers elite",
            [EnemyType.Boss,         Hero.Orisa,        1],
            [EnemyType.Elite,        Hero.Ashe,		    7],
            [EnemyType.Elite,        Hero.Widowmaker,	7]
        ],
        [
            "snipers elite",
            [EnemyType.Boss,         Hero.Orisa,        1],
            [EnemyType.Elite,        Hero.Hanzo,		7],
            [EnemyType.Elite,        Hero.Ana,	        7]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Sojourn, 		5],
            // [EnemyType.Elite,       Hero.Bastion, 		5],
            [EnemyType.Minion,      Hero.Zenyatta,      10]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Zenyatta, 		1],
            [EnemyType.Elite,       Hero.Orisa, 		5],
            [EnemyType.Minion,      Hero.Sojourn,       10]
            // [EnemyType.Minion,      Hero.Bastion,       10]
        ],
        [
            "Steel waves",
            [EnemyType.Boss,        Hero.Reinhardt, 	1],
            [EnemyType.Minion,      Hero.Reinhardt, 	15]
        ],
        [
            "Many turrets",
            [EnemyType.Boss,        Hero.Torbjorn, 		1],
            [EnemyType.Elite,       Hero.Symmetra, 		4],
            [EnemyType.Minion,      Hero.Symmetra, 		4]
        ],
        [
            "Many turrets",
            [EnemyType.Boss,        Hero.Symmetra, 		1],
            [EnemyType.Elite,       Hero.Torbjorn, 		4],
            [EnemyType.Minion,      Hero.Torbjorn, 		4]
        ],
        [
            "gunmans",
            [EnemyType.Elite,       Hero.Cassidy, 		12]
        ],
        [
            "Explodes",
            [EnemyType.Boss,        Hero.Tracer, 		1],
            [EnemyType.Elite,       Hero.Pharah, 		5],
            [EnemyType.Minion,      Hero.Junkrat, 		10]
        ],
        [
            "Explodes",
            [EnemyType.Boss,        Hero.Pharah, 		1],
            [EnemyType.Elite,       Hero.Junkrat, 		5],
            [EnemyType.Minion,      Hero.Tracer, 		10]
        ]
    ];

globalvar define someHero!;

// TAG EnemyBot/BotAsset ----------
rule: "EnemyBot/reloadBotAsset"
Event.OngoingGlobal
if(
    initCompleted &&
    (
        (IsInSetup() && MatchTime() <= 5 ) ||
        (IsGameInProgress())
    )
){
    dbgMsg("reloadBotAsset start");
    WaitUntil(!(IsEnemyOnObject && IsPlayerOnObject), 60);
    someHero = RandomHero;
    // create all bot
    PlayEffectsToTeam(enemyTeam);
    DestroyBots(enemyTeam);
    CreateBotsByAssetList(assetList, enemyTeam);
    dbgMsg("reloadBotAsset end");

    Wait(RandomInteger(120, 180), WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

void PlayEffectsToTeam(define team!) "PlayEffectsToTeam"{
    define players! = AllPlayers(team);
    for(define playersIndex! = 0; playersIndex < CountOf(players); playersIndex ++){
        // play blast
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion,
            TeamOf(players[playersIndex]) == enemyTeam ?
                enemyColor :
                Color.Yellow,
            PositionOf(players[playersIndex]),
            TeamOf(players[playersIndex]) == enemyTeam ?
                players[playersIndex].eachTextSize : 
                basicInWorldTextSize + 0.5);
    }
    Wait(0.1, WaitBehavior.IgnoreCondition);
}

// TAG EnemyBot/EnemyType ----------
playervar define eachDealtDamageScale!;
playervar define eachMaxSpawnInterval!;
playervar define eachMinSpawnInterval!;
playervar define eachChargeUltInterval!;

playervar define eachTextOffset!;
playervar define eachTextSize!;
playervar define eachNameText!;
playervar define eachNameColor!;

playervar define eachPerkDropProbability;   // dummy

define minionSpawnTimeMin: 10;
define eliteSpawnTimeMin: 20;
define bossSpawnTimeMin: 30;
define spawnTimeMinToMaxMulti: 1.5;

rule: "EnemyBot/EnemyType/setEnemyType"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    if(enemyType == EnemyType.Minion){
        watchUpdateRate = 15;
        eachTextOffset = 0.75;
        StartScalingPlayer(ep, 0.75, false);
        StartModifyingHeroVoiceLines(ep, 1.5, false);

        SetMaxHealth(ep, 25);
        SetHealingDealt(ep, 25);
        SetHealingReceived(ep, 25);
        
        eachDealtDamageScale = 0.5;
        eachChargeUltInterval = 90;
        eachMinSpawnInterval = minionSpawnTimeMin;
        eachMaxSpawnInterval = minionSpawnTimeMin * spawnTimeMinToMaxMulti;

        eachNameText = "Minion";
        eachNameColor = Color.White;
        eachTextSize = basicInWorldTextSize;
    }
    else if(enemyType == EnemyType.Elite){
        watchUpdateRate = 9;
        eachTextOffset = 1.0;
        StartScalingPlayer(ep, 1.0, false);
        StartModifyingHeroVoiceLines(ep, 1.0, false);

        SetMaxHealth(ep, 100);
        SetHealingDealt(ep, 100);
        SetHealingReceived(ep, 100);

        eachDealtDamageScale = 1.0;
        eachChargeUltInterval = 30;
        eachMinSpawnInterval = eliteSpawnTimeMin;
        eachMaxSpawnInterval = eliteSpawnTimeMin * spawnTimeMinToMaxMulti;

        eachNameText = "Elite";
        eachNameColor = Color.Yellow;
        eachTextSize = basicInWorldTextSize + 0.5;
    }
    else if(enemyType == EnemyType.Boss){
        watchUpdateRate = 3;
        eachTextOffset = 1.5;
        StartScalingPlayer(ep, 1.5, false);
        StartModifyingHeroVoiceLines(ep, 0.5, false);

        SetMaxHealth(ep, 1000);
        SetHealingDealt(ep, 200);
        SetHealingReceived(ep, 200);

        eachDealtDamageScale = 2.0;
        eachChargeUltInterval = 10;
        eachMinSpawnInterval = bossSpawnTimeMin;
        eachMaxSpawnInterval = bossSpawnTimeMin * spawnTimeMinToMaxMulti;

        eachNameText = "Boss";
        eachNameColor = Color.Red;
        eachTextSize = basicInWorldTextSize + 1;
    }
    else if(enemyType == EnemyType.GiantBoss){
        watchUpdateRate = 3;
        eachTextOffset = 2.5;
        StartScalingPlayer(ep, 2.5, false);
        StartModifyingHeroVoiceLines(ep, 0.1, false);

        SetMaxHealth(ep, 1000);
        SetHealingDealt(ep, 200);
        SetHealingReceived(ep, 200);

        eachDealtDamageScale = 4.0;
        eachChargeUltInterval = 10;
        eachMinSpawnInterval = bossSpawnTimeMin;
        eachMaxSpawnInterval = bossSpawnTimeMin * spawnTimeMinToMaxMulti;

        eachNameText = "Big Boss";
        eachNameColor = Color.Purple;
        eachTextSize = basicInWorldTextSize + 1.5;

        // set addtinal health
        Wait(0.1, WaitBehavior.AbortWhenFalse);
        define health! = MaxHealth(ep) * 0.5;
        AddHealthPoolToPlayer(ep, HealthType.Armor, health, true, false);
        AddHealthPoolToPlayer(ep, HealthType.Shields, health, true, false);
    }

    UpdateEachDealtDamage();
    UpdateEachSpawnInterval();
}

rule: "EnemyBot/Effect/setFullHealth"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    IsAlive()
){
    // heal to max health
    Wait(0.5, WaitBehavior.IgnoreCondition);
    while(Health() < MaxHealth()){
        Heal(ep, null, MaxValue());
        Wait(0.5, WaitBehavior.IgnoreCondition);
    }
}

// TAG EnemyBot/Effect ----------
define enemyColor: Color.Purple;
playervar define botAppearanceEntitys!;

rule: "EnemyBot/Effect/showBotAppearance"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    IsAlive()
){
    botAppearanceEntitys = [];
    // show evil aura
    botAppearanceEntitys[0] = 
        CreateEffect(AllPlayers(), Effect.Cloud, enemyColor,
            ep, eachTextSize, EffectRev.VisibleToPositionAndRadius);
    // show name text
    botAppearanceEntitys[1] = 
        CreateInWorldText(
            AllPlayers(), eachNameText, 
        ep + Vector(0, eachTextOffset * 2.55, 0), eachTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            eachNameColor, Spectators.DefaultVisibility);
}

rule: "EnemyBot/Effect/hideBotAppearanceAndReek"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    !IsAlive()
){
    // hide evil aura
    DestroyEffect(botAppearanceEntitys[0]);
    // hide name text
    DestroyInWorldText(botAppearanceEntitys[1]);
    // play dead effect
    PlayContinuousBlast(Color.Red, PositionOf(),
        eachTextSize * 1.5, eachTextSize, 0);
}

// TAG EnemyBot/Teleport ----------
playervar define teleportPosition!;
globalvar define commonTeleportPosition!;
define teleportAreaSize: 10;

Player ClosestPlayerFromObject()"ClosestPlayerFromObject"{
    return FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(playerTeam),
                (
                    HasSpawned(ae) &&
                    IsAlive(ae)
                    // !IsInSpawnRoom(ae)
                )
            ),
            DistanceBetween(ae, CurrentObjectPosition())
        )
    );
}

Boolean SetTeleportPositionToPlayerFront() playervar "SetTeleportPositionToPlayerFront"{
    // set teleportToTarget at closest player from Object
    define teleportToTarget! = ClosestPlayerFromObject();

    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        WaitRandomForDistributeServerLoad();
    
        // select teleportPosition from middle of Object and teleportToTarget
        teleportPosition =
            NearestWalkablePosition(
                PositionOf(teleportToTarget)
                    + 
                (
                    DirectionTowards(teleportToTarget, CurrentObjectPosition())
                        *
                    DistanceBetween(teleportToTarget, CurrentObjectPosition()) * 0.35
                )
                    +
                RandomPosition(
                    (teleportAreaSize),
                    (teleportAreaSize),
                    (teleportAreaSize)
                )
            );
        break;
    }
    return true;
}

Boolean SetTeleportPositionToObjectArround() playervar "SetTeleportPositionToObjectArround"{
    define teleportToTarget! = CurrentObjectPosition();

    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        WaitRandomForDistributeServerLoad();

        // select teleportPosition from current object around
        teleportPosition = 
            NearestWalkablePosition(
                teleportToTarget
                    +
                RandomPosition(
                    (teleportAreaSize),
                    (teleportAreaSize),
                    (teleportAreaSize)
                )
            );
        
        define telPosNearTarget! = ClosestPlayerTo(teleportPosition, playerTeam);
        if(
            // Has line to target
            IsInLineOfSight(
                PositionOffsetY1() + PositionOf(telPosNearTarget),
                PositionOffsetY1() + teleportPosition,
                BarrierLOS.NoBarriersBlock)  
        ){
            break;
        }
        Wait(0.5, WaitBehavior.AbortWhenFalse);
    }
    return true;
}

globalvar define additinalTeleportAreaSize;
define teleportAreaSizeOffset: 30;
define onObjectPosition: CurrentObjectPosition() + Vector(0, 4, 0); // not collision in payload object position

Boolean SetTeleportPositionToObjectAhead() playervar "SetTeleportPositionToObjectAhead"{
    define teleportToTarget! = onObjectPosition;
    
    if(
        payloadDirection != 0 &&
        IsPlayerOnObject
    ){
        // get bloacked position of payload ahead
        define blockedHead! = BlockedPositon(teleportToTarget, payloadDirection, teleportAreaSizeOffset);
        // increase teleportAreaSize by cutoff distance for spam payload brock by teleport
        additinalTeleportAreaSize = teleportAreaSizeOffset - DistanceBetween(teleportToTarget, blockedHead);
        additinalTeleportAreaSize /= 2;
        // change teleportTarget to payload ahead
        teleportToTarget = blockedHead;
    }
    else{
        additinalTeleportAreaSize = 0;
    }

    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        WaitRandomForDistributeServerLoad();

        // select teleportPosition from teleportToTarget around
        teleportPosition = 
            NearestWalkablePosition(
                teleportToTarget
                    +
                RandomPosition(
                    (teleportAreaSize + additinalTeleportAreaSize),
                    (teleportAreaSize + additinalTeleportAreaSize),
                    (teleportAreaSize + additinalTeleportAreaSize)
                )
            );

        define telPosNearTarget! = ClosestPlayerTo(teleportPosition, playerTeam);
        if(
            // Has line to target
            IsInLineOfSight(
                PositionOffsetY1() + PositionOf(telPosNearTarget),
                PositionOffsetY1() + teleportPosition,
                BarrierLOS.NoBarriersBlock)            
        ){
            break;
        }
        Wait(0.5, WaitBehavior.AbortWhenFalse);
    }
    teleportPosition -= PositionOffset();
    return true;
}

Boolean SetTeleportPositionToCommonPosition() playervar "SetTeleportPositionToCommonPosition"{
    // set telPosNearTarget at closest player from commonTeleportPosition
    if(
        // update commonTeleportPosition conditions
        // invalid commonTeleportPosition
        commonTeleportPosition ==  0 ||
        // Probability
        ProbabilityTrue(3) ||
        // player too close from commonTeleportPosition
        DistanceBetween(commonTeleportPosition, ClosestPlayerTo(commonTeleportPosition, playerTeam)) < 5 ||
        // has not line commonTeleportPosition to current object 
        !IsInLineOfSight(
            PositionOffsetY1() + CurrentObjectPosition(),
            PositionOffsetY1() + commonTeleportPosition,
            BarrierLOS.NoBarriersBlock
        )
    ){
        // new select common position
        // set teleport position to player around
        if(SetTeleportPositionToObjectAhead()){
            // save teleport position as common position
            commonTeleportPosition = teleportPosition;
        }
        else{
            // set teleport position from common position
            teleportPosition = commonTeleportPosition;
        }
    }
    else{
        // set teleport position from common position
        teleportPosition = commonTeleportPosition;
    }
    return true;
}

define showTeleportBeamTime: 0.4;
void PlayTeleportEffect(define isBefore!) playervar "PlayTeleportEffect"{
    // if before teleport
    if(isBefore){
        // play teleport shadow of own
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyColor, ep, 1);
        // play teleport shadow of dest
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyColor, teleportPosition, 1);
        // show teleport beam effect
        DestroyEffect(telBeam);
        define fromSky! = IsInSpawnRoom();
        telBeam = CreateBeamEffect(AllPlayers(),
            BeamType.BadBeam,
            fromSky ? 
                teleportPosition + Vector(0, 30, 0) :
                BodyPosition(ep),
            teleportPosition + PositionOffset(),
            Color.Purple, EffectRev.VisibleToPositionAndRadius);
        // wait for show teleport shadow of before
        Wait(showTeleportBeamTime, WaitBehavior.IgnoreCondition);
    }
    else{
        // play teleport blast
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, enemyColor, ep, eachTextSize);
        // hide teleport beam effect
        DestroyEffect(telBeam);
        // play teleport sound
        PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, null,
        ep, 70);
    }
}

playervar define telBeam!;

void TeleportWithEffect() playervar "TeleportWithEffect"{
    WaitRandomForDistributeServerLoad();
    
    Wait(SlotOf(ep) * 0.1, WaitBehavior.AbortWhenFalse);
    // show pre teleport effect
    PlayTeleportEffect(true);
    // Teleport
    Teleport(ep, teleportPosition);
    // show teleport effect
    PlayTeleportEffect(false);
    // hide teleport beam effect
    DestroyEffect(telBeam);
}

define forceActiveTeleport: 30;
define teleportToCommonPositionProb: 50;

define IsPlayerOnObject: ([] != AllPlayersOnObjective(playerTeam));
define IsEnemyOnObject: ([] != AllPlayersOnObjective(enemyTeam));

void HybridTeleport()"HybridTeleport"{
    if(
        // during Object attacks
        IsPlayerOnObject ||
        // probability
        ProbabilityTrue(forceActiveTeleport)
    ){
        if(
            // probability
            ProbabilityTrue(teleportToCommonPositionProb)
        ){
            if(SetTeleportPositionToCommonPosition()){
                TeleportWithEffect();
            }
        }
        else{
            if(SetTeleportPositionToObjectAhead()){
                TeleportWithEffect();
            }
        }
    }
    else{
        if(IsTeamOnDefense(TeamOf())){
            if(SetTeleportPositionToPlayerFront()){
                TeleportWithEffect();
            }
        }
        else{
            if(SetTeleportPositionToObjectArround()){
                TeleportWithEffect();
            }
        }
    }
}

rule: "EnemyBot/Teleport/teleportByRespawn"
Event.OngoingPlayer
if(
    IsGameInProgress() &&
    TeamOf() == enemyTeam &&
    IsInSpawnRoom()
){
    HybridTeleport();
    // failsafe
    Wait(3, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/Teleport/teleportByEnemyNotFound"
Event.OngoingPlayer
if(
    IsGameInProgress() &&
    TeamOf() == enemyTeam &&
    IsAlive() &&
    !IsInSpawnRoom()
){
    for(define notHasLineSecond! = 0; notHasLineSecond < watchUpdateRate; notHasLineSecond ++){
        Wait(1, WaitBehavior.AbortWhenFalse);
        define hasTarget! = (actionState != ActionState.Non);
        define nearObject! = (DistanceBetween(ep, CurrentObjectPosition()) <= 15);
        if(
            !(      // not
                !hasTarget ||                       // not has target
                (!nearObject && IsPlayerOnObject)   // not near object on player attaking
            )
        ){
            // reset count up
            LoopIfConditionIsTrue();
        }
    }
    HybridTeleport();
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/Teleport/clearCommonTeleportPosition"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep
){
    commonTeleportPosition = 0;
}

// TAG EnemyBot/EnemyAbility ----------
define enemyAbilityIntervalMin: 20;
define enemyAbilityIntervalAcordingProgress: 40;

rule: "EnemyBot/EnemyAbility/rush"
Event.OngoingGlobal
if(
    IsGameInProgress() &&
    !IsOverTime()
){
    define interval! = (1 - (TotalObjectProgress() / DefaultPercentage())) * enemyAbilityIntervalAcordingProgress;
    Wait(enemyAbilityIntervalMin + interval, WaitBehavior.AbortWhenFalse);

    dbgMsg("rush start");
    define rushDurling! = RandomInteger(5, 15);
    for(rushCount; rushDurling > 0; rushDurling--){
        Respawn(AllDeadPlayers(enemyTeam));
        Wait(1, WaitBehavior.AbortWhenFalse);
    }
    dbgMsg("rush end");

    LoopIfConditionIsTrue();
}

rule: "EnemyBot/EnemyAbility/shotCall"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    define interval! = (1 - (TotalObjectProgress() / DefaultPercentage())) * enemyAbilityIntervalAcordingProgress;
    Wait(enemyAbilityIntervalMin + interval, WaitBehavior.AbortWhenFalse);

    dbgMsg("shotCall start");
    define deployedEnemys! = FilteredArray(
        AllLivingPlayers(enemyTeam),
        !IsInSpawnRoom(ae)
    );
    define shotCallDelay! = RandomReal(0, 1);
    for(define scLoopIndex! = 0; scLoopIndex < CountOf(deployedEnemys); scLoopIndex ++){
        SetUltimateCharge(deployedEnemys[scLoopIndex], DefaultPercentage());
        PressButton(deployedEnemys[scLoopIndex], Button.Ultimate);
        Wait(shotCallDelay, WaitBehavior.AbortWhenFalse);
    }
    dbgMsg("shotCall end");

    LoopIfConditionIsTrue();
}

rule: "EnemyBot/EnemyAbility/combatTeleport"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType == EnemyType.GiantBoss&&
    IsAlive() &&
    actionState == ActionState.Attack
){
    define interval! = NormalizedHealth() * 20 + RandomInteger(1, 5);
    Wait(interval, WaitBehavior.AbortWhenFalse);
    // set teleport position to object around
    if(SetTeleportPositionToObjectArround()){
        TeleportWithEffect();
    }
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/EnemyAbility/closeHopToObject"
Event.OngoingPlayer
if(
    initCompleted &&
    TeamOf() == enemyTeam &&
    IsAlive() &&
    TotalObjectProgress() >= 95
){
    if(
        IsPlayerOnObject &&
        IsOnGround() &&
        DistanceBetween(ep, onObjectPosition) >= 4.0 &&
        CountOf(AllPlayersOnObjective(enemyTeam)) <= 1
    ){
        PressButton(ep, Button.Jump);
        ApplyImpulse(ep, 
            VectorTowards(ep, onObjectPosition), 10,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    
    Wait(RandomReal(1.0, 3.0), WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/chargeUltimate ----------
rule: "EnemyBot/chargeUltimate"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    HasSpawned() &&
    enemyType != EnemyType.None &&
    !IsUsingUltimate()
){
    SetUltimateCharge(ep, UltimateChargePercent() + (DefaultPercentage() / eachChargeUltInterval));
    WaitUpdateASecond();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/SpawnInterval ----------
define showDeadEffectTime: 1.5;
playervar define confirmSpawnInterval!;

Number TotalObjectProgress()"TotalObjectProgress"{
    Number progress;

    if(!IsGameInProgress()){
        progress = DefaultPercentage();
    }
    else{
        define mode = CurrentGameMode();
        if(mode == GameMode.Assault){
            if(CurrentObjectNo() == 0){
                progress = (PointCapturePercentage() * 0.5);
            }
            else{
                progress = 50 + (PointCapturePercentage() * 0.5);
            }
        }
        else if(mode == GameMode.Escort){
            progress = PayloadProgressPercentage();
        }
        else if(mode == GameMode.Hybrid){
            if(CurrentObjectNo() == 0){
                progress = (PointCapturePercentage() * 0.3);
            }
            else{
                progress = 30 + (PayloadProgressPercentage() * 0.7);
            }
        }
        else{
            errLog("ERROR ON TotalObjectProgress");
        }
    }
    return progress;
}

globalvar define spawnTimeScale;

void UpdateEachSpawnInterval()"UpdateEachSpawnInterval"{
    confirmSpawnInterval = (eachMaxSpawnInterval - eachMinSpawnInterval);
    confirmSpawnInterval *= (1 - (TotalObjectProgress() / DefaultPercentage()));
    confirmSpawnInterval += eachMinSpawnInterval;
    
    define diff = GameProgressDiff();
    if(70 <= diff){
        spawnTimeScale = 0.001;
    }
    else if(40 <= diff && diff < 70){
        spawnTimeScale = 0.25;
    }
    else if(10 <= diff && diff < 40){
        spawnTimeScale = 0.5;
    }
    else if(-10 <= diff && diff < 10){
        spawnTimeScale = 1.0;
    }
    else if(-40 <= diff && diff < -10){
        spawnTimeScale = 1.5;
    }
    else if(-70 <= diff && diff < -40){
        spawnTimeScale = 3.0;
    }
    else if(diff < -70){
        spawnTimeScale = 5.0;
    }
    confirmSpawnInterval *= spawnTimeScale;
    SetRespawnMaxTime(ep, confirmSpawnInterval + showDeadEffectTime);
}

Number GameProgressDiff()"GameProgressDiff"{
    Number prgDiff! = 0;
    Number objPrg! = RoundToInteger(TotalObjectProgress());  // MAX 100
    Number timePrg  = RoundToInteger(MatchTime() / 3.0);  // MAX 300
    timePrg = DefaultPercentage() - timePrg;
    prgDiff = objPrg - timePrg;
    return prgDiff;
}

rule: "EnemyBot/SpawnInterval/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    UpdateEachSpawnInterval();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/SpawnInterval/fastRespawnBySucide"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep
){
    Wait(showDeadEffectTime, WaitBehavior.AbortWhenFalse);
    Respawn();
}

// TAG EnemyBot/ReceivedDamage ----------
globalvar define confirmReceiveDamage!;

void UpdateEachReceivedDamage()"UpdateEachReceivedDamage"{
    // set base damage
    confirmReceiveDamage = DefaultPercentage();
    // apply team balance
    confirmReceiveDamage *= ConvertToBalancedValue(1.5, playerTeam);
    SetDamageReceived(AllPlayers(enemyTeam), confirmReceiveDamage);
}

rule: "EnemyBot/ReceivedDamage/update"
Event.OngoingGlobal
if(
    initCompleted
){
    UpdateEachReceivedDamage();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/DealtDamage ----------
playervar define confirmDealtDamage!;
globalvar define autoTuneDmgDlt!;
globalvar define autoTuneScale! = WorkshopSettingReal("Enemy Bot Settings", "Dynamic Difficult Scale", 1.0, 0, 1000, 0);

define internalRate: 0.3;

rule: "EnemyBot/DealtDamage/upTune"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() != ep
){
    if(enemyType == EnemyType.Minion){
        autoTuneDmgDlt += 0.25 * internalRate * autoTuneScale;
    }
    else if(enemyType == EnemyType.Elite){
        autoTuneDmgDlt += 1.0 *  internalRate * autoTuneScale;
    }
    else if(enemyType == EnemyType.Boss){
        autoTuneDmgDlt += 10.0 * internalRate * autoTuneScale;
    }
    else if(enemyType == EnemyType.GiantBoss){
        autoTuneDmgDlt += 20.0 * internalRate * autoTuneScale;
    }
}

rule: "EnemyBot/DealtDamage/downTune"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    Attacker() != ep
){
    autoTuneDmgDlt -= 1.0;
    autoTuneDmgDlt = autoTuneDmgDlt < 0 ? 0 : autoTuneDmgDlt;
}

globalvar define threatLevel!;

void UpdateEachDealtDamage()"UpdateEachDealtDamage"{
    // set base damage
    confirmDealtDamage = WorkshopSettingReal("Enemy Bot Settings", "Base Deal Damage", 30, 0, 1000, 1);
    // apply team balance
    confirmDealtDamage /= ConvertToBalancedValue(1.5, playerTeam);
    // apply auto tune
    confirmDealtDamage += autoTuneDmgDlt;
        // set threat Level
        threatLevel = confirmDealtDamage;
    // apply enemy type scale
    confirmDealtDamage *= eachDealtDamageScale;
    SetDamageDealt(ep, confirmDealtDamage);
}

rule: "EnemyBot/DealtDamage/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    UpdateEachDealtDamage();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/ObstIcon ----------
playervar define obstIcon;
define color: isBlink ? Color.Red : Color.Yellow;

rule: "EnemyBot/ObstIcon/show"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    (
        IsPlayerOnObject &&
        IsOnObjective(ep)
    )
){
    DestroyIcon(obstIcon);
    obstIcon = CreateIcon(AllPlayers(playerTeam), ep, Icon.ExclamationMark,
        IconRev.PositionAndColor, color, true);
}

rule: "EnemyBot/ObstIcon/hide"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    !(
        IsPlayerOnObject &&
        IsOnObjective(ep)
    )
){
    DestroyIcon(obstIcon);
    obstIcon = 0;
}

globalvar define isBlink = false;

rule: "EnemyBot/ObstIcon/blinkColor"
Event.OngoingGlobal
if(
    initCompleted
){
    while(true){
        isBlink = !isBlink;
        Wait(0.1, WaitBehavior.AbortWhenFalse); 
    }
}

// TAG FinalStand ----------
rule: "FinalStand/FinalStand"
Event.OngoingGlobal
if(
    IsGameInProgress() &&
    MatchTime() <= 0
){
    BigMessage(AllPlayers(), "Final Stand !");
    slowControlHandler = SlowControlHandler.GameLogic;
    SetSlowMotion(10);
    Wait(0.3, WaitBehavior.AbortWhenFalse);   // show slow

    PlayEffectsToTeam(Team.All);
    Resurrect(AllPlayers());
    Heal(AllPlayers(), null, MaxValue());
    SetUltimateCharge(AllPlayers(), DefaultPercentage());

    Wait(0.3, WaitBehavior.AbortWhenFalse);   // show slow
    SetSlowMotion(DefaultPercentage());
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;

    define scList! = AllPlayers(enemyTeam);
    define scDelay! = RandomReal(0, 1);
    for(define scLoopIndex! = 0; scLoopIndex < CountOf(scList); scLoopIndex ++){
        SetUltimateCharge(scList[scLoopIndex], DefaultPercentage());
        PressButton(scList[scLoopIndex], Button.Ultimate);
        Wait(scDelay, WaitBehavior.AbortWhenFalse);
    }

}

// TAG Debug ----------
rule: "Debug/defaultDebugMode"
Event.OngoingGlobal
Team.All
if(
    initCompleted
){
    // CreateEffect(HostPlayer(), Effect.Orb, enemyColor,
    //     commonTeleportPosition + PositionOffset(), 1, EffectRev.VisibleToPositionAndRadius);
    // CreateIcon(HostPlayer(), commonTeleportPosition, Icon.Spiral,
    //     IconRev.PositionAndColor, enemyColor, true);

    debugMode = DebugMode.SlowLevelOnly;
    ShowDebugHud(HostPlayer());

    // while(true){
    //     SetUltimateCharge(AllPlayers(playerTeam), 100);
    //     Wait(1);
    // }

}

rule: "Debug/changeDebugMode"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump) 
){
    // change debug mode
    WaitLongPressConfirm();
    if(debugMode == DebugMode.Non){
        debugMode = DebugMode.SlowLevelOnly;
    }
    else if(debugMode == DebugMode.SlowLevelOnly){
        debugMode = DebugMode.ShowParam;
    }
    else if(debugMode == DebugMode.ShowParam){
        debugMode = DebugMode.WithRecord;
    }
    else if(debugMode == DebugMode.WithRecord){
        debugMode = DebugMode.Non;
    }

    // reload hud
    HideDebugHud();
    ShowDebugHud(HostPlayer());
}

define End(): CountOf(debugHudEntitys);
define botOfEnemyType(define enemyType): FirstOf(FilteredArray(AllPlayers(enemyTeam), ae.enemyType == enemyType));
globalvar define debugHudEntitys!;

// show debug icon and hud
void ShowDebugHud(define player!)"ShowDebugHud"{
    if(
        debugMode == DebugMode.WithRecord
    ){
        EnableInspectorRecording();
        CreateHudText(player,
            null,
            null,
            "● Recording",
            Location.Left, -1,
            Color.White, Color.White, Color.Red,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
    }
    else{
        DisableInspectorRecording();
    }
    
    if(
        debugMode == DebugMode.SlowLevelOnly ||
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load", ServerLoad()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "game Logic Speed", gameLogicSpeed>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "auto Tune Dmg Dlt", autoTuneDmgDlt>,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
    }

    if(
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load Average", ServerLoadAverage()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load Peak", ServerLoadPeak()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
    }
}

// Hide debug icon and hud
void HideDebugHud()"HideDebugHud"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(debugHudEntitys); gLoopIndex ++){
        DestroyHudText(debugHudEntitys[gLoopIndex]);
    }
}

rule: "Debug/resetBotList"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    !IsButtonHeld(ep, Button.Reload) &&
    IsButtonHeld(ep, Button.Crouch)
){
    // Recalculate portal
    WaitLongPressConfirm();

    someHero = RandomHero;
    // create all bot
    PlayEffectsToTeam(enemyTeam);
    DestroyBots(enemyTeam);
    CreateBotsByAssetList(assetList, enemyTeam);
}

rule: "Debug/increaseMatchTime"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ability2)
){
    WaitLongPressConfirm();
    SetMatchTime(MatchTime() + 30);
    LoopIfConditionIsTrue();
}

rule: "Debug/decreaseMatchTime"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ability1)
){
    WaitLongPressConfirm();
    SetMatchTime(MatchTime() - 30);
    LoopIfConditionIsTrue();
}
