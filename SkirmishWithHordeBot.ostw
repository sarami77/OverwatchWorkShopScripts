import "Lib/Bot.del";
import "Lib/Regeneration.del";

// TAG Bot/CreateBot ----------
disabled rule: "SetDebugSetting"
Event.OngoingGlobal
{
    //SetMaxHealth(AllPlayers(), 500);
    //SetDamageDealt(AllPlayers(), 1000);
    //SetStatus(AllPlayers(), null, Status.Unkillable, MaxValue());
    Wait(5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "InitialSetting"
Event.OngoingGlobal
{
    DisableInspectorRecording();

    Regeneration_enableTeam = Team.All;
    Regeneration_waitRegenTimeTeam1 = WorkshopSettingReal("Player Settings", "Wait Second Until Start Regeneration", 1, 0, 100, 1);
    Regeneration_regenerationRateTeam1 = WorkshopSettingReal("Player Settings", "Regeneration Rate In Per Seconds", 25, 0, 1000, 2);

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    CreateIcon(HostPlayer(), teleportPos, Icon.ArrowDown,
            IconRev.VisibleToAndPosition, Color.White, true);

    CreateEffect(AllPlayers(), Effect.Sphere, Color.White, teleportPos,
        combatAreaRange, EffectRev.VisibleToPositionRadiusAndColor);
}

rule: "Player/ReturnSpawn/showReturnSpawnOperation"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    HasSpawned()
){
    // show hero change operation
    CreateHudText(AllPlayers(),
        null, <"Long hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/returnSpawn"
Event.OngoingPlayer
if(
    !IsDummyBot() &&
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Reload)
){
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

playervar define killCount = 0;

rule: "Player/KillCount/showText"
Event.OngoingPlayer
if(
    HasSpawned()
){
    CreateHudText(ep,
        <"<0> Kills", killCount>, null, null,
        Location.Top, 3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    CreateInWorldText(
        AllPlayers(),
        <"<0> Kills", killCount>,
        ep, 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
}


rule: "Player/KillCount/countup"
Event.OnFinalBlow
if(
    HasSpawned()
){
    killCount ++;
}

rule: "ReloadBotList"
Event.OngoingGlobal
{
    dbgMsg("Reload Bot List");
    define botNum = WorkshopSettingInteger("Bot Settings", "Bot Count", 24, 0, 24, 1);
    CreateBothBotsByInput(AllHeroes(), botNum);
    // CreateBothBotsByInput(AllSupportHeroes(), botNum);
    // CreateBothBotsByInput([Hero.Moira, Hero.Brigitte], botNum);

    Wait(180, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "ReloadTeleportPosition"
Event.OngoingGlobal
{
    SetTeleportPositionAtRandom(selectionAreaRange);
    Wait(120, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

globalvar define combatAreaRange = WorkshopSettingReal("Game Settings", "Combat Area Range", 50, 0, 1000, 1);
define selectionAreaRange: 100;
globalvar define teleportPos;

rule: "FastRespawnForBot"
Event.OnDeath
if(
    true
){
    Wait(1);
    Respawn(ep);
}

rule: "TeleortByRespawn"
Event.OngoingPlayer
if(
    IsInSpawnRoom() &&
    (
        IsDummyBot() ||
        IsMoving()
    )
){
    if(!IsDummyBot()){
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
    TeleportToTeleportPosition(combatAreaRange);
}

rule: "PullCenterByOutBound"
Event.OngoingPlayer
if(
    !IsInSpawnRoom(ep) &&
    DistanceBetween(ep, teleportPos) > combatAreaRange
){
    if(DistanceBetween(ep, teleportPos) > combatAreaRange + 3){
        TeleportToTeleportPosition(combatAreaRange);
    }
    else{
        ApplyImpulse(ep, VectorTowards(ep, teleportPos),
            DistanceBetween(ep, teleportPos) * 0.5,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    WaitUntil(!isServerOverLoading, 10);
    LoopIfConditionIsTrue();
}

rule: "TeleortByTargetNotFoundForBot"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Non
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    TeleportToTeleportPosition(combatAreaRange);
    LoopIfConditionIsTrue();
}

rule: "TeleortByTargetNotFoundForPlayer"
Event.OngoingPlayer
if(
    !IsInSpawnRoom(ep) &&
    !IsDummyBot() &&
    !IsInLineOfSight(ep, ClosestPlayerTo(ep, OppositeTeamOf(TeamOf())))
){
    Wait(10, WaitBehavior.AbortWhenFalse);
    TeleportToTeleportPosition(combatAreaRange);
    LoopIfConditionIsTrue();
}

rule: "ShiftTeleportPositionBySpawnRoomKill"
Event.OnDeath
if(
    ep == Attacker()         // sucide
){
    if(
        IsInOppsiteSpawnRoom(ep) &&
        ProbabilityTrue(50)
    ){
        dbgMsg("Shift Teleport Position By Spawn Room Kill");
        SetTeleportPositionAtRandom(selectionAreaRange);
        ForceSpawnRoom(Team.Team1, RandomInteger(0, 2));
        ForceSpawnRoom(Team.Team2, RandomInteger(0, 2));
    }
}

define minDistancePrevTeleport: 50;

globalvar define prev_teleportPos;

void SetTeleportPositionAtRandom(define range)"SetTeleportPositionAtRandom"{
    prev_teleportPos = teleportPos;
    for(gLoopIndex = 0; gLoopIndex < 30; gLoopIndex++){
        teleportPos = NearestWalkablePosition(
            teleportPos +
            RandomPosition(range, range, range));

        teleportPos = NearestWalkablePosition(
            teleportPos +
            RandomPosition(5, 5, 5));

        if(
            // Not too close to prev_teleportPos
            DistanceBetween(    
                prev_teleportPos, teleportPos)
            >= minDistancePrevTeleport
        ){
            break;
        }
        Wait(0.01, WaitBehavior.AbortWhenFalse);
        WaitUntil(!isServerOverLoading, 10);
    }
}

define minDistanceEnemyTeleport: 10;

playervar define guardEffectEntity;

void TeleportToTeleportPosition(define range)"TeleportToTeleportPosition"{
    define pos;
    for(pLoopIndex = 0; pLoopIndex < 30; pLoopIndex++){ 
        pos = NearestWalkablePosition(
            teleportPos +
            RandomPosition(range, range, range)); 

        pos = NearestWalkablePosition(
            pos +
            RandomPosition(5, 5, 5));

        if(
            // not too close to enemy
            DistanceBetween(    
                pos, 
                ClosestPlayerTo(
                    pos,
                    OppositeTeamOf(TeamOf())))
            >= minDistanceEnemyTeleport
            &&
            // has line to enemy
            IsInLineOfSight(
                pos + Up(),
                ClosestPlayerTo(
                    pos,
                    OppositeTeamOf(TeamOf())))
                &&
            // not inside enemy spwan room
            !IsInOppsiteSpawnRoom(pos)
        ){
            break;
        }
        Wait(0.01, WaitBehavior.AbortWhenFalse);
        WaitUntil(!isServerOverLoading, 10);
    }
    if(IsDummyBot()){
        Wait(SlotOf(ep) * 0.1, WaitBehavior.AbortWhenFalse);
    }
    Teleport(ep, pos);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SetStatus(ep, null, Status.Rooted, 1);
    SetStatus(ep, null, Status.Invincible, 3);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = CreateEffect(
        AllPlayers(), Effect.Sphere, Color.Gray,
        ep, 1.25, EffectRev.PositionAndRadius);
}

rule: "hideGuardEffect"
Event.OngoingPlayer
Team.All
if(
    guardEffectEntity != 0
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    DestroyEffect(guardEffectEntity);
    guardEffectEntity = 0;
}

rule: "Debug/resetTeleportPos"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    WaitLongPressConfirm();
    SetTeleportPositionAtRandom(selectionAreaRange);
}
