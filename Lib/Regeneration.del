import "Utility.del";

// Function enable team
// Set team in import destination parent file

// TAG public property
globalvar define regenerationEnableTeams! = [Team.Team1, Team.Team2];
define isRegenerationEnableTeam: IsTrueForAny(regenerationEnableTeams, TeamOf(ep) == ae);

globalvar define regenerationStartWaitSecond! = 5;
globalvar define regenerationInterval = 0.25;
globalvar define regenerationNeedBalanceTeam1! = false;
globalvar define regenerationNeedBalanceTeam2! = false;
globalvar define regenerationHealthTeam1! = 25;
globalvar define regenerationHealthTeam2! = 25;


rule: "Player/Regeneration/updateRate //if there are few players, incrase regeneration rate for fair play."
Event.OngoingGlobal
{
    // If don't enough players, adjust player regeneration rate to make the game fair
    // Multiply heal unit
    regenerationRateTeam1 = regenerationHealthTeam1;
    regenerationRateTeam2 = regenerationHealthTeam2;

    // Apply balance multiplier
    if(regenerationNeedBalanceTeam1)
        regenerationRateTeam1 *= ConvertToBalancedValue(0.75, Team.Team1);  // TAG player regeneration scale
    if(regenerationNeedBalanceTeam2)
        regenerationRateTeam2 *= ConvertToBalancedValue(0.75, Team.Team2);  // TAG player regeneration scale

    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

playervar define waitRegen!;

rule: "Player/Regeneration/waitRegenerate //by taken damage"
Event.OnDamageTaken
if(
    isRegenerationEnableTeam &&
    IsAlive()
){
    // Stop regeneration when player receives damage
    // Resume regeneration over time
    waitRegen = true;

    Wait(regenerationStartWaitSecond, WaitBehavior.RestartWhenTrue);  // TAG wait regenenation timer

    waitRegen = false;
}

globalvar define regenerationRateTeam1!;
globalvar define regenerationRateTeam2!;

rule: "Player/Regeneration/regenerate //heal if not damaged for a short time"
Event.OngoingPlayer
if(
    isRegenerationEnableTeam &&
    IsAlive() &&
    Health() < MaxHealth() &&
    !waitRegen    
){
    Heal(ep, null, (TeamOf() == Team.Team1 ? regenerationRateTeam1 : regenerationRateTeam2) * regenerationInterval);

    // Heal until the player's health is maximized
    Wait(regenerationInterval, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

