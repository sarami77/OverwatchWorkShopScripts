import "Utility.del";

// Message display for debugging that can be seen only by the host player
void dbgMsg(define msg){ SmallMessage(HostPlayer(), "debug message: "+ msg); }

void dbgLog(define msg){ LogToInspector("debug log: "+ msg); }

define maxDbgHudTxtNum: 40;
globalvar define dbgHudTxtEntity! = [];
globalvar define dbgHudTxtIndex! = 0;

void dbgHudTxt(define msg)"dbgHudTxt"{ 
    if(dbgHudTxtIndex >= maxDbgHudTxtNum)
    {
        dbgHudTxtIndex = 0;
    }
    DestroyHudText(dbgHudTxtEntity[dbgHudTxtIndex]);
    dbgHudTxtEntity[dbgHudTxtIndex] = 
        CreateHudText(HostPlayer(),
            null, "debug: "+ msg, null,
            Location.Right, -MaxValue(),
            Color.White, Color.Yellow, Color.White,
            HudTextRev.None, Spectators.VisibleNever);
    dbgHudTxtIndex ++;
}

define dbgWldTxt(define position, define msg): 
    CreateInWorldText(HostPlayer(),
        "debug: "+ msg, 
        position, 1, Clipping.DoNotClip, InworldTextRev.None,
        Color.Yellow, Spectators.VisibleNever);

void dbgIcn(define position){
    CreateIcon(HostPlayer(), position, Icon.X, IconRev.VisibleToPositionAndColor, Color.Yellow, true);
}

void dbgEft(define position){
    CreateEffect(HostPlayer(), Effect.Sphere, Color.Yellow, position, 1, EffectRev.VisibleToPositionRadiusAndColor);
}

void dbgPlyEft(define position){
    PlayEffect(HostPlayer(), PlayEffect.GoodPickupEffect, Color.Yellow, position, 1);
}

globalvar define dbgBemEft!;

void dbgPlyBemEft(define position, define position2){
    DestroyEffect(dbgBemEft);
    dbgBemEft = CreateBeamEffect(HostPlayer(),
        BeamType.GoodBeam, position, position2,
        Color.Yellow, EffectRev.VisibleToPositionAndRadius);
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    DestroyEffect(dbgBemEft);
}


void dbgPlySud(define position){
    PlayEffect(HostPlayer(), PlayEffect.BuffImpactSound, Color.Yellow, position, MaxValue());
}

rule: "Debug/useCheatOwnTeam //give ult, revive, full health"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ultimate)
){
    // Give revive, full health, charge ult to all player
    WaitLongPressConfirm();
    // If own player dead by abyss, teleport player to map surface
    if(IsDeadByAbyss()){
        Teleport(EventPlayer(), NearestWalkablePosition(EventPlayer()));
        Wait(0.1, WaitBehavior.IgnoreCondition);    // wait teleport
    }
    Resurrect(AllPlayers(TeamOf()));
    Heal(AllPlayers(TeamOf()), null, MaxValue());
    Wait(0.5, WaitBehavior.AbortWhenFalse);    // wait release ult button 
    SetUltimateCharge(AllPlayers(TeamOf()), 100);
}

rule: "Debug/teleportOwnTeam"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    // Teleport player to aim center
    WaitLongPressConfirm();
    Teleport(AllPlayers(TeamOf()), 
        AimingPosition()
    );
}

disabled rule: "Debug/freezeOtherPlayer"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Jump) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    // Teleport player to aim center
    WaitLongPressConfirm();
    SetStatus(AllPlayers(Team.All), null, Status.Frozen, 30);
    WaitChangeState();
    ClearStatus(EventPlayer(), Status.Frozen);
}

disabled rule: "Debug/killAimPlayer"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    // kill players on aim center
    WaitLongPressConfirm();
    Kill(
        PlayersWithinRadius(
            AimingPosition(), 5, Team.All, RadiusLOS.Off),
        EventPlayer());
}

