import "Utility.del";

// Message display for debugging that can be seen only by the host player
define dbgMsg(define msg): SmallMessage(HostPlayer(), "debug message: "+ msg);

define dbgHudTxt(define msg): 
    CreateHudText(HostPlayer(),
        null, "debug hud: "+ msg, null,
        Location.Left, -1,
        Color.White, Color.Yellow, Color.White,
        HudTextRev.None, Spectators.VisibleNever);

define dbgWrdTxt(define msg, define position): 
    CreateInWorldText(HostPlayer(),
        "debug hud: "+ msg, 
        position, 1, Clipping.DoNotClip, InworldTextRev.None,
        Color.Yellow, Spectators.VisibleNever);

define dbgLog(define msg): LogToInspector("debug log: "+ msg);

void dbgEft(define position){
    CreateEffect(HostPlayer(), Effect.Sphere, Color.Yellow, position, 0.25, EffectRev.None);
    //PlayEffect(HostPlayer(), PlayEffect.BuffImpactSound, Color.Yellow, position, MaxValue());
}

void dbgPlyEft(define position){
    PlayEffect(HostPlayer(), PlayEffect.GoodPickupEffect, Color.Yellow, position, 0.25);
    //PlayEffect(HostPlayer(), PlayEffect.BuffImpactSound, Color.Yellow, position, MaxValue());
}

rule: "Debug/useCheatOwnTeam //give ult, revive, full health"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ultimate)
){
    // Give revive, full health, charge ult to all player
    WaitLongPressConfirm();
    // If own player dead by abyss, teleport player to map surface
    if(IsDeadByAbyss()){
        Teleport(EventPlayer(), NearestWalkablePosition(EventPlayer()));
        Wait(0.1, WaitBehavior.IgnoreCondition);    // wait teleport
    }
    Resurrect(AllPlayers(Team.Team1));
    Heal(AllPlayers(Team.Team1), null, MaxValue());
    Wait(0.5, WaitBehavior.AbortWhenFalse);    // wait release ult button 
    SetUltimateCharge(AllPlayers(Team.Team1), 100);
}

rule: "Debug/teleportOwnTeam"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    // Teleport player to aim center
    WaitLongPressConfirm();
    Teleport(AllPlayers(TeamOf()), 
        AimingPosition()
    );
}

disabled rule: "Debug/freezeOtherPlayer"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Jump) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    // Teleport player to aim center
    WaitLongPressConfirm();
    SetStatus(AllPlayers(Team.All), null, Status.Frozen, 30);
    WaitChangeState();
    ClearStatus(EventPlayer(), Status.Frozen);
}

disabled rule: "Debug/killAimPlayer"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    // kill players on aim center
    WaitLongPressConfirm();
    Kill(
        PlayersWithinRadius(
            AimingPosition(), 5, Team.All, RadiusLOS.Off),
        EventPlayer());
}

