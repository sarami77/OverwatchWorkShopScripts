import "Utility.del";

// Message display for debugging that can be seen only by the host player
globalvar define debugMode;

enum DebugMode{
    Non,
    SlowLevelOnly,
    ShowParam,
    WithRecord
}

define debugShowTime: 0.5;

void dbgMsg(define msg)"dbgMsg"{
    SmallMessage(HostPlayer(), "dbg: "+ msg);
}

void dbgLog(define msg)"dbgLog"{
    LogToInspector("dbg: "+ msg);
}

define maxDbgHudTxtNum: 25;
globalvar define dbgHudTxtEntity = [];
globalvar define dbgHudTxtIndex = 0;
globalvar define dbgHudTxtCount = 0;

void dbgHudTxt(define msg)"dbgHudTxt"{
    DestroyHudText(dbgHudTxtEntity[dbgHudTxtIndex]);
    dbgHudTxtEntity[dbgHudTxtIndex] = CreateHudText(HostPlayer(),
        null, "[" + dbgHudTxtCount + "] dbg: "+ msg, null,
        Location.Right, -MaxValue(),
        Color.White, Color.Yellow, Color.White,
        HudTextRev.None, Spectators.VisibleNever);
    dbgHudTxtCount ++;

    if(dbgHudTxtIndex < maxDbgHudTxtNum)
    {
        dbgHudTxtIndex++;
    }
    else{
        dbgHudTxtIndex = 0;
    }
}

void dbgHudTxtArray(define array)"dbgHudTxtArray"{
    for(define index! = 0; index < CountOf(array); index++){
        dbgHudTxt(<"array[<1>] = <0>", array[index], index>);
    }
}

void destoryAllDbgHudTxt()"destoryAllDbgHudTxt"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(dbgHudTxtEntity); gLoopIndex ++){
        DestroyHudText(dbgHudTxtEntity[gLoopIndex]);
    }
    dbgHudTxtIndex = 0;
}

define CreateDebugHud(define caption!, define value!, define color!):
    CreateHudText(HostPlayer(),
        null,
        <"<0> = <1>", caption, value>,
        null,
        Location.Left, -1,
        Color.White, color, Color.White,
        HudTextRev.VisibleToStringAndColor, Spectators.VisibleNever);

void errLog(define msg)"errLog"{
    dbgHudTxt("err! " + msg);
}

globalvar define dbgWldTxtEntity! = 0;

void dbgWldTxt(define position, define msg)"dbgWldTxt"{
    WaitUntil(dbgWldTxtEntity == 0, debugShowTime);
    DestroyInWorldText(dbgWldTxtEntity);
    dbgWldTxtEntity = CreateInWorldText(HostPlayer(),
        "dbg: "+ msg, 
        position, 1, Clipping.DoNotClip, InworldTextRev.None,
        Color.Yellow, Spectators.VisibleNever);
    Wait(debugShowTime, WaitBehavior.IgnoreCondition);
    DestroyInWorldText(dbgWldTxtEntity);
    dbgWldTxtEntity = 0;
}

void dbgIcn(define position)"dbgIcn"{
    CreateIcon(HostPlayer(),
        position, Icon.X, IconRev.VisibleToPositionAndColor,
        Color.Yellow, true);
}

void dbgEft(define position)"dbgIcn"{
    CreateEffect(HostPlayer(),
        Effect.Sphere, Color.Yellow, position, 1,
        EffectRev.VisibleToPositionRadiusAndColor);
}

void dbgPlyEft(define position)"dbgPlyEft"{
    PlayEffect(HostPlayer(),
        PlayEffect.GoodPickupEffect,
        Color.Yellow, position, 1);
}

globalvar define dbgPlyBemEftEntity!;

void dbgPlyBemEft(define startPos!, define endPos!)"dbgPlyBemEft"{
    DestroyEffect(dbgPlyBemEftEntity[0]);
    DestroyEffect(dbgPlyBemEftEntity[1]);

    dbgPlyBemEftEntity = [];
    dbgPlyBemEftEntity[0] = CreateBeamEffect(HostPlayer(),
        BeamType.GoodBeam, startPos, endPos,
        Color.Yellow, EffectRev.PositionAndRadius);
    dbgPlyBemEftEntity[1] = CreateEffect(HostPlayer(),
        Effect.Orb, Color.Yellow, startPos, 1, EffectRev.PositionAndRadius);

    Wait(debugShowTime, WaitBehavior.IgnoreCondition);

    DestroyEffect(dbgPlyBemEftEntity[0]);
    DestroyEffect(dbgPlyBemEftEntity[1]);
}

void dbgPlySud()"dbgPlySud"{
    PlayEffect(HostPlayer(),
        PlayEffect.BuffImpactSound,
        Color.Yellow, HostPlayer(), MaxValue());
}

// Debug Action
rule: "Debug/increaseMatchTime"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    !IsButtonHeld(ep, Button.Melee) &&
    !IsButtonHeld(ep, Button.Ability1) &&
    IsButtonHeld(ep, Button.Ability2)){

    WaitLongPressConfirm();
    SetMatchTime(MatchTime() + 30);
    LoopIfConditionIsTrue();
}

rule: "Debug/decreaseMatchTime"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    !IsButtonHeld(ep, Button.Melee) &&
    IsButtonHeld(ep, Button.Ability1) &&
    !IsButtonHeld(ep, Button.Ability2)
){
    WaitLongPressConfirm();
    SetMatchTime(MatchTime() - 30);
    LoopIfConditionIsTrue();
}

globalvar define isPauseMatchTime!;

rule: "Debug/pauseMatchTime"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ability1) &&
    IsButtonHeld(ep, Button.Ability2)
){
    WaitLongPressConfirm();
    if(!isPauseMatchTime){
        PauseMatchTime();
        isPauseMatchTime = true;
    }
    else{
        UnpauseMatchTime();
        isPauseMatchTime = false;
    }
}

rule: "Debug/reviveHealUltCharge"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ultimate)
){
    // Give revive, full health, charge ult to all player
    WaitLongPressConfirm();

    // If own player dead by abyss, teleport player to map surface
    if(IsDeadByAbyss()){
        Teleport(ep, NearestWalkablePosition(ep));
        Wait(0.1, WaitBehavior.IgnoreCondition);    // wait teleport
    }
    Resurrect(AllPlayers(TeamOf()));
    Heal(AllPlayers(TeamOf()), null, MaxValue());
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    SetUltimateCharge(AllPlayers(TeamOf()), DefaultPercentage());
    Wait(0.01, WaitBehavior.IgnoreCondition);
    SetUltimateCharge(AllPlayers(TeamOf()), DefaultPercentage());
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    Resurrect(AllPlayers(EnemyTeamOf(ep)));
    Heal(AllPlayers(EnemyTeamOf(ep)), null, MaxValue());
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    SetUltimateCharge(AllPlayers(EnemyTeamOf(ep)), DefaultPercentage());
}

rule: "Debug/teleportPlayers"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Melee)
){
    // Teleport player to aim center
    WaitLongPressConfirm();

    Teleport(AllPlayers(TeamOf()), 
        AimingPosition()
    );
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    Teleport(AllPlayers(EnemyTeamOf(ep)), 
        AimingPosition()
    );
}

rule: "Debug/lowHealthOrKillAimPlayer"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.PrimaryFire)
){
    // kill players on aim center
    WaitLongPressConfirm();

    SetPlayerHealth(
        PlayersWithinRadius(
            AimingPosition(), 5, Team.All, RadiusLOS.Off),
        25);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    Kill(
        PlayersWithinRadius(
            AimingPosition(), 5, Team.All, RadiusLOS.Off),
        ep);
}

rule: "Debug/killEnemyTeamPlayers"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.SecondaryFire)
){
    // kill players on aim center
    WaitLongPressConfirm();
    
    Kill(AllPlayers(EnemyTeamOf(ep)), ep);
}