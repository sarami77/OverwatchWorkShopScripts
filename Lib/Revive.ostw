import "Utility.ostw";

// Function enable team
// Set team in import destination parent file
globalvar define Revive_enableTeam;
globalvar define Revive_timeLimit;
define Revive_isEnableTeam:
    Revive_enableTeam == TeamOf() ||
    Revive_enableTeam == Team.All;

playervar define downPosition;
playervar define reviveTimeLimit;
playervar define needHelpEntitys;
playervar define reviver;

define reviveTime: 3;
define reviveRange : 2.5;
define CanRevive():
    IsDead() &&
    IsOnGround();

define NearTeammate():
    CountOf(
        FilteredArray(
            AllPlayers(TeamOf()), (
                IsAlive(ArrayElement()) &&
                HasSpawned(ArrayElement()) &&
                DistanceBetween(downPosition, ArrayElement()) <= reviveRange
            )
        )
    ) > 0;

rule: "Player/Revive/setTimeLimit"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    !IsAlive()
){
    // set revive time limit by player dead
    reviveTimeLimit = Revive_timeLimit;
}

rule: "Player/Revive/resetTimeLimit"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    IsAlive()
){
    // reset revive time limit by player alive
    reviveTimeLimit = 0;
}

rule: "Player/Revive/returnGround // dead by abyss"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    IsDead() &&
    !IsOnGround()
){
    if(IsDeadByAbyss()){
        Teleport(EventPlayer(), NearestWalkablePosition(EventPlayer()));
    }
    else{
        WaitUpdateMediumCycle();
        LoopIfConditionIsTrue();
    }
}

rule: "Player/Revive/showNeedHelp"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    CanRevive()
){
    // Display HELP on the downed player's position
    // As for the player position, the appearance position and the down position will not match the dead body where the ragdoll works
    // Therefore, save and use the position when down, not the position of the player
    // If down in the abyss of the map, can not revive, so do not display HELP
    if(!IsDeadByAbyss()){
        downPosition = PositionOf(EventPlayer());
        needHelpEntitys = [];
        
        CreateInWorldText(
            AllPlayers(TeamOf()), <"<0> <1> <2> <3>", "Help", EventPlayer(), HeroIconString(HeroOf(EventPlayer())), reviveTimeLimit>,
            downPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
            Color.White, Spectators.VisibleAlways);

        needHelpEntitys[0] = LastTextID();
        CreateIcon(
            AllPlayers(TeamOf()), downPosition,
            Icon.Skull, IconRev.VisibleToAndPosition, Color.Red, true);
        needHelpEntitys[1] = LastCreatedEntity();
    }
}

rule: "Player/Revive/hideNeedHelp"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    !CanRevive()
){
    // Hide HELP on the downed player's position
    DestroyIcon(needHelpEntitys[1]);
    DestroyInWorldText(needHelpEntitys[0]);
}

rule: "Player/Revive/countDownTimeLimit"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    CanRevive() &&
    reviveTimeLimit > 0
){
    // Count down revive time limit on the downed player's position
    WaitUpdateMediumCycle();
    reviveTimeLimit -= 1;
    if(!IsDeadByAbyss() && !NearTeammate()){
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
            Color.White, EventPlayer(), 1);
    }
    LoopIfConditionIsTrue();
}

rule: "Player/Revive/reviveByTeammate //by near standing"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    (
        CanRevive() &&
        NearTeammate()
    )
){
    // revived when a teammate is nearby
    // The event player is the player who receives the revival.
    DisableRespawning();
    if(!IsDeadByAbyss()){
        // Save the reviver to display a message to the reviver
        reviver = ClosestPlayerTo(EventPlayer(), Revive_enableTeam);

        SmallMessage(reviver,
            <"<0> <1> <2>.", "reviving", EventPlayer(), HeroIconString(HeroOf(EventPlayer()))>);
        SmallMessage(EventPlayer(),
                        <"<0> <1> <2>.", reviver, HeroIconString(HeroOf(reviver)), "reviving">);

        // reviving effect and progress count
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
                Color.Yellow, EventPlayer(), 1);
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.BuffImpactSound,
                Color.Yellow, EventPlayer(), 30);
            // skip this wait by timer too short
            Wait(1, WaitBehavior.AbortWhenFalse);   
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
                Color.Yellow, EventPlayer(), 1);
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.BuffImpactSound,
                Color.Yellow, EventPlayer(), 30);
            // skip this wait by timer too short
            Wait(1, WaitBehavior.AbortWhenFalse);   

            PlayEffect(
                AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
                Color.Yellow, EventPlayer(), 1);
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.BuffImpactSound,
                Color.Yellow, EventPlayer(), 30);
            // skip this wait by timer too short
            Wait(1, WaitBehavior.AbortWhenFalse);   


        // revive effect and sound
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
            Color.Yellow, EventPlayer(), 1);
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.RingExplosion,
            Color.Yellow, EventPlayer(), 8);
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.BuffExplosionSound,
            Color.White, EventPlayer(), MaxLength());

        Resurrect(EventPlayer());

        SmallMessage(reviver,
            <"<0> <1> <2>.", "revived", EventPlayer(), HeroIconString(HeroOf(EventPlayer()))>);
        SmallMessage(EventPlayer(),
            <"<0> <1> <2>.", reviver, HeroIconString(HeroOf(reviver)), "revivied">);
    }
}

rule: "Player/Revive/cancelReviveByTeammate //by near standing"
Event.OngoingPlayer
if(
    Revive_isEnableTeam &&
    !(
        CanRevive() &&
        NearTeammate()
    )
){
    EnableRespawning();
    if(
        reviveTimeLimit <= 0 &&
        IsDead()
    ){
        Respawn();
    }
}

// TAG Debug ----------
disabled rule: "Debug/forceReviveTeammate // for bot only"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    0 < NumberOfDeadPlayers(Team.Team1)
){
    define reviveTarget =
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    IsDead(ArrayElement()) &&
                    IsInLineOfSight(EventPlayer(), ArrayElement())
                )
            )
        );

    if(
        reviveTarget != null
    ){
        ApplyImpulse(EventPlayer(), 
            VectorTowards(EventPlayer(), reviveTarget + PositionOffset()),
            DistanceBetween(EventPlayer(), reviveTarget) * 2,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();    
}
