import "Utility.del";

rule: "Mutation/buildLotteryMutationList"
Event.OngoingGlobal
{
    lotteryMutationListOrder = 0;
    lotteryMutationList = [];     // TAG lottery perk list
    addLottelyMutation(MutaiotType.LowGravity,      WorkshopSettingInteger("Mutation Settings", "(Low Gravity) Lottery Rate",       1, 0, 100, 0));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.FastWalk,        WorkshopSettingInteger("Mutation Settings", "(Fast Walk) Lottery Rate",         1, 0, 100, 1));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.NoCoolDown,      WorkshopSettingInteger("Mutation Settings", "(No Cool Down) Lottery Rate",      1, 0, 100, 2));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.ShotCall,        WorkshopSettingInteger("Mutation Settings", "(Shot Call) Lottery Rate",         1, 0, 100, 3));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.ChainExplosion,  WorkshopSettingInteger("Mutation Settings", "(Chain Explosion) Lottery Rate",   1, 0, 100, 4));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.AllGenji,        WorkshopSettingInteger("Mutation Settings", "(All Ganji) Lottery Rate",         1, 0, 100, 5));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.AllReinhardt,    WorkshopSettingInteger("Mutation Settings", "(All Reinhardt) Lottery Rate",     1, 0, 100, 6));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.Snipers,         WorkshopSettingInteger("Mutation Settings", "(Snipers) Lottery Rate",           1, 0, 100, 7));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.Gargantua,       WorkshopSettingInteger("Mutation Settings", "(Gargantua) Lottery Rate",         1, 0, 100, 8));   lotteryMutationListOrder++;
    addLottelyMutation(MutaiotType.Miniature,       WorkshopSettingInteger("Mutation Settings", "(Miniature) Lottery Rate",         1, 0, 100, 9));   lotteryMutationListOrder++;

    // show mutation type
    CreateHudText(AllPlayers(),
        null, <"Current Mutaiton is <0>", currentMutationTypeName>, null,
        Location.Left, 0,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

enum MutaiotType{
    Non,
    FastWalk,
    LowGravity,
    NoCoolDown,
    ShotCall,
    ChainExplosion,
    AllGenji,
    AllReinhardt,
    Snipers,
    Gargantua,
    Miniature
}

globalvar define currentMutationType!;
globalvar define lotteryMutationList!;
globalvar define lotteryMutationListOrder!;

void addLottelyMutation(define mutation!, define count!)"addLottelyMutation"{
    for(define countIdx! = 0; countIdx < count; countIdx++)
        lotteryMutationList[CountOf(lotteryMutationList)] = mutation;
}

rule: "Mutation/controlMutation"
Event.OngoingGlobal
if(
    initCompleted
){
    CreateHudText(AllPlayers(),
        <"Current mutation is [<0>]", currentMutationTypeName>, null, null,
        Location.Left, 0,
        Color.Green, Color.Green, Color.Green,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    
    while(true){
        currentMutationType = MutaiotType.Non;
        Wait(0.5, WaitBehavior.AbortWhenFalse);   // show slow
        SetSlowMotion(10);
        Wait(0.5, WaitBehavior.AbortWhenFalse);   // show slow
        SetSlowMotion(100);
        Wait(RandomReal(60, 90), WaitBehavior.AbortWhenFalse);

        BigMessage(AllPlayers(), <"Mutation imcoming...">);
        Wait(5, WaitBehavior.AbortWhenFalse);

        currentMutationType = RandomValueInArray(lotteryMutationList);
        Wait(0.5, WaitBehavior.AbortWhenFalse);   // show slow
        SetSlowMotion(10);
        Wait(0.5, WaitBehavior.AbortWhenFalse);   // show slow
        SetSlowMotion(100);
        Wait(RandomReal(60, 90), WaitBehavior.AbortWhenFalse);
    }
}

rule: "Debug/Mutation/triggerRandomMutation"
Event.OngoingPlayer
if(
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Reload)
){
    WaitLongPressConfirm();
    currentMutationType = MutaiotType.Non;
    Wait(1);
    currentMutationType = RandomValueInArray(lotteryMutationList);
}

define MUTATION_TARGETS: FilteredArray(AllPlayers(), 
    (
        HasSpawned(ae) &&
        !ae.isApplyMutation
    )
);

define DEMUTATION_TARGETS: FilteredArray(AllPlayers(), 
    (
        ae.isApplyMutation
    )
);

void applyForceHero(define hero!)"applyForceHero"{
    mu_targets = MUTATION_TARGETS;
    for(mu_index = 0; mu_index < CountOf(mu_targets); mu_index++){
        mu_targets[mu_index].mu_originalHero = HeroOf(mu_targets[mu_index]);
    }
    ForcePlayerHero(MUTATION_TARGETS, hero);
}

void applyOriginalHero()"applyOriginalHero"{
    mu_targets = DEMUTATION_TARGETS;
    for(mu_index = 0; mu_index < CountOf(mu_targets); mu_index++){
        ForcePlayerHero(mu_targets[mu_index], mu_targets[mu_index].mu_originalHero);
    }
    StopForcingHero(mu_targets);
}

void setApplyMutation(define flag!)"setApplyMutation"{
    if(flag){
        mu_targets = MUTATION_TARGETS;
    }
    else{
        mu_targets = DEMUTATION_TARGETS;
    }

    for(mu_index = 0; mu_index < CountOf(mu_targets); mu_index++){
        mu_targets[mu_index].isApplyMutation = flag;
    }
}

// ----- Non -----
globalvar define currentMutationTypeName;

rule: "Mutation/Non/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.Non
){
    currentMutationTypeName = "None";
    BigMessage(AllPlayers(), <"Ended mutation...">);
}

define StartMutationMessage(define mutationName)"StartMutationMessage"{
    currentMutationTypeName = mutationName;
    BigMessage(AllPlayers(), <"Mutation [<0>] has begun!", mutationName>);
} 

// ----- LowGravity -----
playervar define isApplyMutation;

rule: "Mutation/LowGravity/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.LowGravity
){
    StartMutationMessage("Low Gravity");

    while(true){
        SetGravity(MUTATION_TARGETS, 15);

        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/LowGravity/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.LowGravity
){
    SetGravity(DEMUTATION_TARGETS, DefaultPercentage());
    setApplyMutation(false);
}

// ----- FastWalk -----
rule: "Mutation/FastWalk/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.FastWalk
){
    StartMutationMessage("Fast Walk");

    while(true){
        SetMoveSpeed(MUTATION_TARGETS, 200);

        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/FastWalk/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.FastWalk
){
    SetMoveSpeed(DEMUTATION_TARGETS, DefaultPercentage());
    setApplyMutation(false);
}

// ----- NoCoolDown -----
rule: "Mutation/NoCoolDown/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.NoCoolDown
){
    StartMutationMessage("No Cool Down");

    while(true){
        SetAbilityCooldown(MUTATION_TARGETS, Button.Ability1, 0);
        SetAbilityCooldown(MUTATION_TARGETS, Button.Ability2, 0);
        SetAbilityCooldown(MUTATION_TARGETS, Button.SecondaryFire, 0);
        SetAbilityCooldown(MUTATION_TARGETS, Button.Jump, 0);
        Wait(0.5, WaitBehavior.AbortWhenFalse);
    }
}

// ----- ShotCall -----
rule: "Mutation/ShotCall/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.ShotCall
){
    StartMutationMessage("Shot Call");

    while(true){
        BigMessage(MUTATION_TARGETS, "Shot Call!");
        SetUltimateCharge(MUTATION_TARGETS, 100);
        Wait(RandomReal(20, 40), WaitBehavior.AbortWhenFalse);
    }
}

// ----- ChainExplosion -----
rule: "Mutation/ChainExplosion/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.ChainExplosion
){
    StartMutationMessage("Chain Explosion");
}

define chainExplosionRange: 8;

rule: "Mutation/ChainExplosion/explosion"
Event.OnElimination
if(
    currentMutationType == MutaiotType.ChainExplosion
){
        WaitPlayEffect();
        // splash damage
        Damage(
            PlayersWithinRadius(
                PositionOf(Victim()), chainExplosionRange, TeamOf(Victim()), RadiusLOS.Off
            ), ep, 200);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Orange, Victim(), chainExplosionRange);
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosion,
            Color.Orange, Victim(), chainExplosionRange);
        // play blast sound
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosionSound,
            Color.White, Victim(), MaxLength());
}

// ----- AllGenji -----
playervar define mu_originalHero!;
globalvar define mu_targets!;
globalvar define mu_index!;

rule: "Mutation/AllGenji/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.AllGenji
){
    StartMutationMessage("Ninja Time");

    while(true){
        applyForceHero(Hero.Genji);
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        SetUltimateCharge(MUTATION_TARGETS, 100);
        PressButton(MUTATION_TARGETS, Button.Ultimate);

        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/AllGenji/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.AllGenji
){
    applyOriginalHero();
    setApplyMutation(false);
}

rule: "Perk/Player/LegendalyNinja/chargingUlt"
Event.OngoingPlayer
if(
    currentMutationType == MutaiotType.AllGenji
){
    WaitUpdateASecond();
    SetUltimateCharge(ep, (UltimateChargePercent() + 10));
    LoopIfConditionIsTrue();
}

// ----- AllReinhardt -----
rule: "Mutation/AllReinhardt/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.AllReinhardt
){
    StartMutationMessage("Hammer Time");

    while(true){
        applyForceHero(Hero.Reinhardt);
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        SetUltimateCharge(MUTATION_TARGETS, 100);
        PressButton(MUTATION_TARGETS, Button.Ultimate);

        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/AllReinhardt/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.AllReinhardt
){
    applyOriginalHero();
    setApplyMutation(false);
}

rule: "Mutation/AllReinhardt/chargingUlt"
Event.OngoingPlayer
if(
    currentMutationType == MutaiotType.AllReinhardt
){
    WaitUpdateASecond();
    SetUltimateCharge(ep, (UltimateChargePercent() + 5));
    LoopIfConditionIsTrue();
}

// ----- Snipers -----
rule: "Mutation/Snipers/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.Snipers
){
    StartMutationMessage("Snipers Nest");

    while(true){
        applyForceHero(Hero.Widowmaker);
        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/Snipers/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.Snipers
){
    applyOriginalHero();
    setApplyMutation(false);
}

rule: "Mutation/Snipers/deactivate"
Event.OnDamageTaken
if(
    currentMutationType == MutaiotType.Snipers
){
    
}

// ----- Gargantua -----
rule: "Mutation/Gargantua/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.Gargantua
){
    StartMutationMessage("Gargantua");

    while(true){
        StartScalingPlayer(MUTATION_TARGETS, 2.0, false);
        StartModifyingHeroVoiceLines(MUTATION_TARGETS, 0.5, false);

        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/Gargantua/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.Gargantua
){
    StopScalingPlayer(DEMUTATION_TARGETS);
    StopModifyingHeroVoiceLines(DEMUTATION_TARGETS);
    setApplyMutation(false);
}

// ----- Miniature -----
rule: "Mutation/Miniature/activate"
Event.OngoingGlobal
if(
    currentMutationType == MutaiotType.Miniature
){
    StartMutationMessage("Miniature");

    while(true){
        StartScalingPlayer(MUTATION_TARGETS, 0.25, false);
        StartModifyingHeroVoiceLines(MUTATION_TARGETS, 1.5, false);

        setApplyMutation(true);
        WaitUpdateMediumCycle();
    }
}

rule: "Mutation/Miniature/deactivate"
Event.OngoingGlobal
if(
    currentMutationType != MutaiotType.Miniature
){
    StopScalingPlayer(DEMUTATION_TARGETS);
    StopModifyingHeroVoiceLines(DEMUTATION_TARGETS);
    setApplyMutation(false);
}