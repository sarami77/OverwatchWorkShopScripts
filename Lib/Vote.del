import "Debug.del";

// TAG Vote ----------
playervar define operationText!;
playervar define voteGameDifficulty!;

define DifficultyNum: 6;

enum Difficulty{
    NO_VOTE = 0,
    EASY = 1,
    NORMAL = 2,
    HARD = 3,
    HELL = 4,
    INSANE = 5
}

define DifficultyText(in define inputDifficulty!):
    inputDifficulty == Difficulty.NO_VOTE ? "NO VOTE(0)" :
    inputDifficulty == Difficulty.EASY ?    "EASY(1)" :
    inputDifficulty == Difficulty.NORMAL ?  "NORMAL(2)" :
    inputDifficulty == Difficulty.HARD ?    "HARD(3)" :
    inputDifficulty == Difficulty.HELL ?    "HELL(4)" :
    inputDifficulty == Difficulty.INSANE ?  "INSANE(5)" :
    null;

define VoteGameDifficultyText(define inputDifficulty!) playervar "VoteGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

define ConfirmGameDifficultyText(define inputDifficulty!) globalvar "ConfirmGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

void UpdateVoteOperationText()"UpdateVoteOperationText"{
    DestroyHudText(operationText);
    operationText = CreateHudText(ep,
        null, <"You can vote game difficulty until game starts.\n\rPress interact key <0> to select vote difficulty.\n\r●Your vote = <1>",
            ButtonGuide(Button.Interact), VoteGameDifficultyText(voteGameDifficulty)>, null,
        Location.Left, 100,
        null, Color.Yellow, null,
        HudTextRev.StringAndColor, Spectators.DefaultVisibility);
}

rule: "Vote/showVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    IsInSetup()
){
    UpdateVoteOperationText();
}

rule: "Vote/hideVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    !IsInSetup()
){
    DestroyHudText(operationText);
}

rule: "Vote/switchVoteGameDifficulty"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    IsInSetup() &&
    IsButtonHeld(ep, Button.Interact)
){
    voteGameDifficulty ++;
    voteGameDifficulty = voteGameDifficulty > Difficulty.INSANE ? Difficulty.NO_VOTE : voteGameDifficulty;
    UpdateVoteOperationText();
}

globalvar define confirmGameDifficulty!;

globalvar define settingGameDifficulty! = 
    WorkshopSettingInteger("Game Settings", "Game Difficulty (Override voting difficulty when set above 0)", Difficulty.NO_VOTE + 0, Difficulty.NO_VOTE + 0, Difficulty.INSANE + 0, 0);

rule: "Vote/confirmGameDifficulty"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // make votedList
    define votedList! = [];
    for(define idx! = 0; idx < NumberOfPlayers(playerTeam); idx++){
        define player! = PlayersInSlot(idx, playerTeam);
        // not include NO_VOTE in votedList
        if(player.voteGameDifficulty != Difficulty.NO_VOTE){
            votedList[CountOf(votedList)] = player.voteGameDifficulty;
        }
    }

                    // // set zero to voteTotalList
                    // define voteTotalList! = [];
                    // for(define idx! = 0; idx < DifficultyNum; idx++){
                    //     voteTotalList[idx] = 0;
                    // }

                    // // sum voteTotalList
                    // for(define idx! = 0; idx < CountOf(votedList); idx++){
                    //     voteTotalList[votedList[idx]] ++;
                    // }

                    // // check most vote index
                    // define mostVoteCount! = 0;
                    // define mostVoteIdx! = 0;
                    // for(define idx! = 1; idx < CountOf(voteTotalList); idx++){
                    //     if(mostVoteCount < voteTotalList[idx]){
                    //         mostVoteCount = voteTotalList[idx];
                    //         mostVoteIdx = idx;
                    //     }
                    // }

                    // set most voted index difficulty
                    // confirmGameDifficulty = mostVoteIdx;
    
    // override vote by host debug key
    if(
        IsButtonHeld(hp, Button.Interact) &&
        hp.voteGameDifficulty != Difficulty.NO_VOTE
    ){
        // set difficult from host's vote
        confirmGameDifficulty = hp.voteGameDifficulty;
    }
    // override vote by game setting
    else if(
        settingGameDifficulty != Difficulty.NO_VOTE
    ){
        // set difficult from host's vote
        confirmGameDifficulty = settingGameDifficulty;
    }
    // players has votes
    else if(0 < CountOf(votedList)){
        // set difficult from votedList
        confirmGameDifficulty = RandomValueInArray(votedList);
    }
    // set normal as default
    else{
        // set difficult to easy as default
        confirmGameDifficulty = Difficulty.NORMAL;
    }
}

define DifficultyTextColor(define inputDifficulty):
    confirmGameDifficulty == Difficulty.EASY ? Color.Blue :
    confirmGameDifficulty == Difficulty.NORMAL ? Color.Green :
    confirmGameDifficulty == Difficulty.HARD ? Color.Yellow :
    confirmGameDifficulty == Difficulty.HELL ? Color.Red :
    confirmGameDifficulty == Difficulty.INSANE ? warningIconColor :
    null;

rule: "Vote/showConfirmGameDifficuly"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam  &&
    HasSpawned() &&
    confirmGameDifficulty != Difficulty.NO_VOTE
){
    CreateHudText(ep,
        null, <"●game difficulty = <0>", ConfirmGameDifficultyText(confirmGameDifficulty)>, null,
        Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleNever);
}

rule: "Vote/showConfirmGameDifficulyForSpectators"
Event.OngoingGlobal
if(
    confirmGameDifficulty != Difficulty.NO_VOTE
){
    CreateHudText(null,
        null, <"game difficulty = <0>", ConfirmGameDifficultyText(confirmGameDifficulty)>, null,
        Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleAlways);
}

// TAG Debug ----------
// rule: "Debug/Vote/dummyVote"
// Event.OngoingPlayer
// if(
//     TeamOf() == playerTeam &&
//     IsInSetup() &&
//     IsDummyBot()
// ){
//     StartHoldingButton(ep, Button.Interact);
//     Wait(0.1);
//     StopHoldingButton(ep, Button.Interact);
//     Wait(RandomInteger(1, 5));
//     LoopIfConditionIsTrue();
// }