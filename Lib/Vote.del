import "Debug.del";

// TAG Vote ----------
playervar define voteGameDifficulty! = GameDifficulty.NO_VOTE;

enum GameDifficulty{
    INIT,
    NO_VOTE,
    EASY,
    NORMAL,
    HARD,
    EXPERT,
    LEGENDARY,
    INSANITY,
    LAST
}

define DifficultyText(in define inputDifficulty!):
    inputDifficulty == GameDifficulty.NO_VOTE ?     "NO VOTE" :
    inputDifficulty == GameDifficulty.EASY ?        "EASY" :
    inputDifficulty == GameDifficulty.NORMAL ?      "NORMAL" :
    inputDifficulty == GameDifficulty.HARD ?        "HARD" :
    inputDifficulty == GameDifficulty.EXPERT ?      "EXPERT" :
    inputDifficulty == GameDifficulty.LEGENDARY ?   "LEGENDARY" :
    inputDifficulty == GameDifficulty.INSANITY ?    "HERO_MUST_DIE!" :
    null;

define VoteGameDifficultyText(define inputDifficulty!) playervar "VoteGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

define ConfirmGameDifficultyText(define inputDifficulty!) globalvar "ConfirmGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

define VD_AscKey: Button.Reload;
define VD_DisKey: Button.Interact;

playervar define voteOpeText!;

void UpdateVoteOperationText()"UpdateVoteOperationText"{
    DestroyHudText(voteOpeText[0]);
    DestroyHudText(voteOpeText[1]);
    voteOpeText = [];

    if(
        IsInSetup()
    ){
        if(CanChangeVote()){
            voteOpeText[0] = CreateHudText(ep, null,
                <
                    "You can vote game difficulty.\n\rPress <2>/<3> key while standing still to select vote.\n\r●Your vote = <0> <1>",
                    VoteGameDifficultyText(voteGameDifficulty),
                    <"(<0>/<1>)", voteGameDifficulty - 1, GameDifficulty.LAST - 2>,
                    ButtonGuide(VD_AscKey),
                    ButtonGuide(VD_DisKey)
                >,
                null, Location.Left, 100, null, Color.Yellow, null, HudTextRev.StringAndColor, Spectators.DefaultVisibility);

        }
        else{
            voteOpeText[1] = CreateHudText(ep, null,
                <
                    "You can vote game difficulty in respawn area until game starts.\n\r●Your vote = <0> <1>",
                    VoteGameDifficultyText(voteGameDifficulty),
                    <"(<0>/<1>)", voteGameDifficulty - 1, GameDifficulty.LAST - 2>
                >,
                null, Location.Left, 100, null, Color.Yellow, null, HudTextRev.StringAndColor, Spectators.DefaultVisibility);
        }
    }
}

define CanChangeVote():
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    IsInSetup();

rule: "Vote/showVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    CanChangeVote()
){
    UpdateVoteOperationText();
}

rule: "Vote/hideVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    !CanChangeVote()
){
    UpdateVoteOperationText();
}

rule: "Vote/switchVoteGameDifficulty"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    CanChangeVote() &&
    (
        ( IsButtonHeld(ep, VD_AscKey) && !IsButtonHeld(ep, VD_DisKey) ) ||
        ( !IsButtonHeld(ep, VD_AscKey) && IsButtonHeld(ep, VD_DisKey) )
    )
){
    AbortIf(IsMoving());
    // switch vote
    voteGameDifficulty = 
        ( IsButtonHeld(ep, VD_AscKey) && !IsButtonHeld(ep, VD_DisKey) ) ?
            voteGameDifficulty < GameDifficulty.LAST - 1 ? voteGameDifficulty + 1 : GameDifficulty.INIT + 1 :
            voteGameDifficulty > GameDifficulty.INIT + 1 ? voteGameDifficulty - 1 : GameDifficulty.LAST - 1 ;

    // update text
    UpdateVoteOperationText();

    PlayEffect(ep, PlayEffect.DebuffImpactSound, null, ep, 75);
}

globalvar define confirmGameDifficulty! = GameDifficulty.NO_VOTE;

globalvar define settingGameDifficulty! = 
    WorkshopSettingInteger("Game Settings", "Game Difficulty (Override voting difficulty when set other of 0)", GameDifficulty.INIT + 0, GameDifficulty.INIT + 0, GameDifficulty.LAST - 2, 0)
    + 1;

rule: "Vote/confirmGameDifficulty"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // make votedList
    define votedList! = [];
    for(define idx! = 0; idx < NumberOfPlayers(playerTeam); idx++){
        define player! = PlayersInSlot(idx, playerTeam);
        // not include INIT, NO_VOTE, LAST in votedList
        if(
            player.voteGameDifficulty != GameDifficulty.INIT &&
            player.voteGameDifficulty != GameDifficulty.NO_VOTE &&
            player.voteGameDifficulty != GameDifficulty.LAST
        ){
            votedList[CountOf(votedList)] = player.voteGameDifficulty;
        }
    }

    // override vote by host debug key
    if(
        IsButtonHeld(hp, Button.Interact) &&
        hp.voteGameDifficulty != GameDifficulty.NO_VOTE
    ){
        // set difficult from host's vote
        confirmGameDifficulty = hp.voteGameDifficulty;
    }
    // override vote by game setting
    else if(
        settingGameDifficulty != GameDifficulty.NO_VOTE
    ){
        // set difficult from game setting
        confirmGameDifficulty = settingGameDifficulty;
    }
    // players has votes
    else if(0 < CountOf(votedList)){
        // set difficult from votedList
        confirmGameDifficulty = RandomValueInArray(votedList);
    }
    // set normal as default
    else{
        // set difficult to easy as default
        confirmGameDifficulty = GameDifficulty.NORMAL;
    }
}

playervar define gameDiffText!;

define DifficultyTextColor(define inputDifficulty):
    confirmGameDifficulty == GameDifficulty.EASY ? Color.Blue :
    confirmGameDifficulty == GameDifficulty.NORMAL ? Color.Green :
    confirmGameDifficulty == GameDifficulty.HARD ? Color.Yellow :
    confirmGameDifficulty == GameDifficulty.EXPERT ? Color.Orange :
    confirmGameDifficulty == GameDifficulty.LEGENDARY ? Color.Red :
    confirmGameDifficulty == GameDifficulty.INSANITY ? warningColor :
    null;

void UpdateConfirmGameDifficultyText()"UpdateConfirmGameDifficultyText"{
    DestroyHudText(gameDiffText[0]);
    gameDiffText = [];

    // show difficulty text
    gameDiffText[0] = CreateHudText(ep,
        null,
        <
            "●game difficulty = <0> <1>",
            ConfirmGameDifficultyText(confirmGameDifficulty),
            <"(<0>/<1>)", confirmGameDifficulty - 1, GameDifficulty.LAST - 2>
        >,
        null, Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleNever);
}

rule: "Vote/showConfirmGameDifficuly"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam  &&
    HasSpawned() &&
    IsGameInProgress() &&
    confirmGameDifficulty != GameDifficulty.NO_VOTE
){
    Wait(0.1);
    UpdateVoteOperationText();      // delete opetation text
    UpdateConfirmGameDifficultyText();
}

// TAG Debug ----------
rule: "Debug/increaseDifficulty"
Event.OngoingPlayer
Team.All
if(
    hp == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Melee) &&
    IsButtonHeld(ep, Button.Ability2)
){
    WaitLongPressConfirm();
    if(confirmGameDifficulty < GameDifficulty.INSANITY){
        confirmGameDifficulty ++;
    }
    UpdateConfirmGameDifficultyText();
    LoopIfConditionIsTrue();
}

rule: "Debug/decreaseDifficulty"
Event.OngoingPlayer
Team.All
if(
    hp == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Melee) &&
    IsButtonHeld(ep, Button.Ability1)
){
    WaitLongPressConfirm();
    if(confirmGameDifficulty > GameDifficulty.EASY){
        confirmGameDifficulty --;
    }
    UpdateConfirmGameDifficultyText();
    LoopIfConditionIsTrue();
}

