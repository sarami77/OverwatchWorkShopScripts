import "Debug.del";

// TAG Vote ----------
playervar define operationText!;
playervar define voteGameDifficulty!;

define DifficultyNum: 6;

enum Difficulty{
    NO_VOTE = 0,
    EASY = 1,
    NORMAL = 2,
    HARD = 3,
    HELL = 4,
    INSANE = 5
}

define DifficultyText(define inputDifficulty):
    inputDifficulty == Difficulty.NO_VOTE ? "NO VOTE(0)" :
    inputDifficulty == Difficulty.EASY ?    "EASY(1)" :
    inputDifficulty == Difficulty.NORMAL ?  "NORMAL(2)" :
    inputDifficulty == Difficulty.HARD ?    "HARD(3)" :
    inputDifficulty == Difficulty.HELL ?    "HELL(4)" :
    inputDifficulty == Difficulty.INSANE ?  "INSANE(5)" :
    null;

define voteGameDifficultyText(define inputDifficulty!) playervar "voteGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

define confirmGameDifficultyText(define inputDifficulty!) globalvar "confirmGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

void UpdateVoteOperationText()"UpdateVoteOperationText"{
    DestroyHudText(operationText);
    operationText = CreateHudText(ep,
        null, <"You can vote for game difficulty until game starts.\n\rPress interact buton <0> to switch vote difficulty.\n\r  Your vote = <1>",
            ButtonGuide(Button.Interact), voteGameDifficultyText(voteGameDifficulty)>, null,
        Location.Left, 100,
        Color.White, Color.Yellow, Color.White,
        HudTextRev.String, Spectators.DefaultVisibility);
}

rule: "Vote/showVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    IsInSetup()
){
    UpdateVoteOperationText();
}

rule: "Vote/hideVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    !IsInSetup()
){
    DestroyHudText(operationText);
}

rule: "Vote/switchVoteGameDifficulty"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    IsInSetup() &&
    IsButtonHeld(ep, Button.Interact)
){
    voteGameDifficulty ++;
    voteGameDifficulty = voteGameDifficulty > Difficulty.INSANE ? Difficulty.NO_VOTE : voteGameDifficulty;
    UpdateVoteOperationText();
}

globalvar define confirmGameDifficulty;

rule: "Vote/confirmGameDifficulty"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // make votedList
    define votedList! = [];
    for(define idx! = 0; idx < NumberOfPlayers(playerTeam); idx++){
        define player! = PlayersInSlot(idx, playerTeam);
        votedList[CountOf(votedList)] = player.voteGameDifficulty;
    }

    // set zero to voteTotalList
    define voteTotalList! = [];
    for(define idx! = 0; idx < DifficultyNum; idx++){
        voteTotalList[idx] = 0;
    }

    // sum voteTotalList
    for(define idx! = 0; idx < CountOf(votedList); idx++){
        voteTotalList[votedList[idx]] ++;
    }

    // check most vote index
    define mostVoteCount! = 0;
    define mostVoteIdx! = 0;
    for(define idx! = 1; idx < CountOf(voteTotalList); idx++){
        if(mostVoteCount < voteTotalList[idx]){
            mostVoteCount = voteTotalList[idx];
            mostVoteIdx = idx;
        }
    }

    // set most voted index difficulty
    confirmGameDifficulty = mostVoteIdx;
        
    if(confirmGameDifficulty == Difficulty.NO_VOTE){
        confirmGameDifficulty = Difficulty.NORMAL;
    }
    
    // dbgHudTxt(<"gameDifficulty = <0>", gameDifficulty>);
}

define DifficultyTextColor(define inputDifficulty):
    confirmGameDifficulty == Difficulty.EASY ? Color.Blue :
    confirmGameDifficulty == Difficulty.NORMAL ? Color.Green :
    confirmGameDifficulty == Difficulty.HARD ? Color.Yellow :
    confirmGameDifficulty == Difficulty.HELL ? Color.Red :
    confirmGameDifficulty == Difficulty.INSANE ? warningIconColor :
    null;

rule: "Vote/showConfirmGameDifficuly"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam  &&
    HasSpawned() &&
    confirmGameDifficulty != Difficulty.NO_VOTE
){
    CreateHudText(ep,
        null, <"game difficulty = <0>", confirmGameDifficultyText(confirmGameDifficulty)>, null,
        Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleNever);
}

rule: "Vote/showConfirmGameDifficulyForSpectators"
Event.OngoingGlobal
if(
    confirmGameDifficulty != Difficulty.NO_VOTE
){
    CreateHudText(null,
        null, <"●game difficulty = <0>", confirmGameDifficultyText(confirmGameDifficulty)>, null,
        Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleAlways);
}

// TAG Debug ----------
// rule: "Debug/Vote/dummyVote"
// Event.OngoingPlayer
// if(
//     TeamOf() == playerTeam &&
//     IsInSetup() &&
//     IsDummyBot()
// ){
//     StartHoldingButton(ep, Button.Interact);
//     Wait(0.1);
//     StopHoldingButton(ep, Button.Interact);
//     // PressButton(ep, Button.Interact);
    
//     dbgHudTxt(<"PressButton <0>", ep>);
//     Wait(RandomInteger(3, 6));
//     LoopIfConditionIsTrue();
// }