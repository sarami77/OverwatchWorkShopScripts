import "Debug.del";

// TAG Vote ----------
playervar define operationText!;
playervar define voteDifficulty!;

define DifficultyNum: 6;

enum Difficulty{
    NO_VOTE = 0,
    EASY = 1,
    NORMAL = 2,
    HARD = 3,
    HELL = 4,
    INSANE = 5
}

define GameDifficultyScale()"GameDifficultyScale"{
    return gameDifficulty / Difficulty.INSANE;
}

define GameDifficultyText(define difficulty)"GameDifficultyText"{
    define text! = "";
    switch(difficulty){
        case Difficulty.NO_VOTE:
        text = "NO VOTE(0)";
        break;
        case Difficulty.EASY:
        text = "EASY(1)";
        break;
        case Difficulty.NORMAL:
        text = "NORMAL(2)";
        break;
        case Difficulty.HARD:
        text = "HARD(3)";
        break;
        case Difficulty.HELL:
        text = "HELL(4)";
        break;
        case Difficulty.INSANE:
        text = "INSANE(5)";
        break;
    }
    return text;
}

void UpdateOperationText()"UpdateOperationText"{
    DestroyHudText(operationText);
    operationText = CreateHudText(ep,
        null, <"You can vote for game difficulty until game starts.\n\rPress interact buton <0> to switch vote difficulty.\n\r  Your vote = <1>",
            ButtonGuide(Button.Interact), GameDifficultyText(voteDifficulty)>, null,
        Location.Left, 100,
        Color.White, Color.Yellow, Color.White,
        HudTextRev.String, Spectators.DefaultVisibility);

}

rule: "Vote/showOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    !IsDummyBot() &&
    IsInSetup()
){
    UpdateOperationText();
}

rule: "Vote/hideOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    !IsDummyBot() &&
    !IsInSetup()
){
    DestroyHudText(operationText);
}

rule: "Vote/switchVote"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsInSetup() &&
    IsButtonHeld(ep, Button.Interact) &&
    !IsDummyBot()
){
    voteDifficulty ++;
    voteDifficulty = voteDifficulty > Difficulty.INSANE ? Difficulty.NO_VOTE : voteDifficulty;
    UpdateOperationText();
}

globalvar define gameDifficulty;

rule: "Vote/confitmVote"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // make votedList
    define votedList! = [];
    for(define idx! = 0; idx < NumberOfPlayers(playerTeam); idx++){
        define player! = PlayersInSlot(idx, playerTeam);
        votedList[CountOf(votedList)] = player.voteDifficulty;
    }

    // set zero to voteTotalList
    define voteTotalList! = [];
    for(define idx! = 0; idx < DifficultyNum; idx++){
        voteTotalList[idx] = 0;
    }

    // sum voteTotalList
    for(define idx! = 0; idx < CountOf(votedList); idx++){
        voteTotalList[votedList[idx]] ++;
    }

    // for(define idx! = 0; idx < CountOf(voteTotalList); idx++){
    //     dbgHudTxt(<"voteTotalList[<0>] = <1>", idx, voteTotalList[idx]>);
    // }

    // check most vote index
    define mostVoteCount! = 0;
    define mostVoteIdx! = 0;
    for(define idx! = 1; idx < CountOf(voteTotalList); idx++){
        if(mostVoteCount < voteTotalList[idx]){
            mostVoteCount = voteTotalList[idx];
            mostVoteIdx = idx;
        }
    }

    // set most voted index difficulty
    gameDifficulty = mostVoteIdx;
        
    if(gameDifficulty == Difficulty.NO_VOTE){
        gameDifficulty = Difficulty.NORMAL;
    }
    
    // dbgHudTxt(<"gameDifficulty = <0>", gameDifficulty>);
}

rule: "Vote/showGameDifficuly"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam  &&
    HasSpawned() &&
    IsGameInProgress()
){
    CreateHudText(ep,
        null, <"game difficulty = <0>", GameDifficultyText(gameDifficulty)>, null,
        Location.Left, 10,
        Color.White, 
            gameDifficulty == Difficulty.EASY ? Color.Blue :
            gameDifficulty == Difficulty.NORMAL ? Color.Green :
            gameDifficulty == Difficulty.HARD ? Color.Yellow :
            gameDifficulty == Difficulty.HELL ? Color.Red :
            gameDifficulty == Difficulty.INSANE ? warningIconColor :
            null,
        Color.White,
        HudTextRev.StringAndColor, Spectators.DefaultVisibility);
}

// TAG Debug ----------
disabled rule: "Debug/Vote/forceVote"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsInSetup() &&
    IsDummyBot()
){
    voteDifficulty = Difficulty.EASY;
}