import "Debug.del";

// TAG Vote ----------
playervar define operationText!;
playervar define voteGameDifficulty! = GameDifficulty.NO_VOTE;

define DifficultyNum: 6;

enum GameDifficulty{
    INIT,
    NO_VOTE,
    EASY,
    NORMAL,
    HARD,
    HELL,
    INSANE,
    LAST
}

define DifficultyText(in define inputDifficulty!):
    inputDifficulty == GameDifficulty.NO_VOTE ? "NO VOTE" :
    inputDifficulty == GameDifficulty.EASY ?    "EASY" :
    inputDifficulty == GameDifficulty.NORMAL ?  "NORMAL" :
    inputDifficulty == GameDifficulty.HARD ?    "HARD" :
    inputDifficulty == GameDifficulty.HELL ?    "HELL" :
    inputDifficulty == GameDifficulty.INSANE ?  "INSANE" :
    null;

define VoteGameDifficultyText(define inputDifficulty!) playervar "VoteGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

define ConfirmGameDifficultyText(define inputDifficulty!) globalvar "ConfirmGameDifficultyText"{
    return DifficultyText(inputDifficulty);
}

define AscKey: Button.Reload;
define DisKey: Button.Interact;

void UpdateVoteOperationText()"UpdateVoteOperationText"{
    DestroyHudText(operationText);
    operationText = CreateHudText(ep,
        null,
        <
            "You can vote game difficulty until game starts.\n\rPress <2>/<3> to select vote difficulty.\n\r●Your vote = <0> <1>",
            VoteGameDifficultyText(voteGameDifficulty),
            <
                "(<0>/<1>)", voteGameDifficulty, GameDifficulty.LAST - 1
            >,
            ButtonGuide(AscKey),
            ButtonGuide(DisKey)
        >, null,
        Location.Left, 100,
        null, Color.Yellow, null,
        HudTextRev.StringAndColor, Spectators.DefaultVisibility);
}

rule: "Vote/showVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    IsInSetup()
){
    UpdateVoteOperationText();
}

rule: "Vote/hideVoteOperation"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned() &&
    !IsInSetup()
){
    DestroyHudText(operationText);
}

rule: "Vote/switchVoteGameDifficulty"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    HasSpawned() &&
    IsInSetup() &&
    (
        ( IsButtonHeld(ep, AscKey) && !IsButtonHeld(ep, DisKey) ) ||
        ( !IsButtonHeld(ep, AscKey) && IsButtonHeld(ep, DisKey) )
    )
){
    // switch vote
    voteGameDifficulty = 
        IsButtonHeld(ep, AscKey) ?
            voteGameDifficulty < GameDifficulty.LAST - 1 ? voteGameDifficulty + 1 : GameDifficulty.INIT + 1 :
            voteGameDifficulty > GameDifficulty.INIT + 1 ? voteGameDifficulty - 1 : GameDifficulty.LAST - 1 ;

    // update text
    UpdateVoteOperationText();
}

globalvar define confirmGameDifficulty! = GameDifficulty.NO_VOTE;

globalvar define settingGameDifficulty! = 
    WorkshopSettingInteger("Game Settings", "Game Difficulty (Override voting difficulty when set above 0)", GameDifficulty.NO_VOTE + 0, GameDifficulty.NO_VOTE + 0, GameDifficulty.INSANE + 0, 0);

rule: "Vote/confirmGameDifficulty"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // make votedList
    define votedList! = [];
    for(define idx! = 0; idx < NumberOfPlayers(playerTeam); idx++){
        define player! = PlayersInSlot(idx, playerTeam);
        // not include NO_VOTE in votedList
        if(player.voteGameDifficulty != GameDifficulty.NO_VOTE){
            votedList[CountOf(votedList)] = player.voteGameDifficulty;
        }
    }

    // override vote by host debug key
    if(
        IsButtonHeld(hp, Button.Interact) &&
        hp.voteGameDifficulty != GameDifficulty.NO_VOTE
    ){
        // set difficult from host's vote
        confirmGameDifficulty = hp.voteGameDifficulty;
    }
    // override vote by game setting
    else if(
        settingGameDifficulty != GameDifficulty.NO_VOTE
    ){
        // set difficult from host's vote
        confirmGameDifficulty = settingGameDifficulty;
    }
    // players has votes
    else if(0 < CountOf(votedList)){
        // set difficult from votedList
        confirmGameDifficulty = RandomValueInArray(votedList);
    }
    // set normal as default
    else{
        // set difficult to easy as default
        confirmGameDifficulty = GameDifficulty.NORMAL;
    }
}

define DifficultyTextColor(define inputDifficulty):
    confirmGameDifficulty == GameDifficulty.EASY ? Color.Blue :
    confirmGameDifficulty == GameDifficulty.NORMAL ? Color.Green :
    confirmGameDifficulty == GameDifficulty.HARD ? Color.Yellow :
    confirmGameDifficulty == GameDifficulty.HELL ? Color.Red :
    confirmGameDifficulty == GameDifficulty.INSANE ? warningIconColor :
    null;

rule: "Vote/showConfirmGameDifficuly"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam  &&
    HasSpawned() &&
    (
        confirmGameDifficulty >= GameDifficulty.NO_VOTE + 1 &&
        confirmGameDifficulty <= GameDifficulty.LAST - 1
    )
){
    CreateHudText(ep,
        null,
        <
            "●game difficulty = <0> <1>",
            ConfirmGameDifficultyText(confirmGameDifficulty),
            <
                "(<0>/<1>)", confirmGameDifficulty, GameDifficulty.LAST - 1
            >
        >,
        null, Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleNever);
}

rule: "Vote/showConfirmGameDifficulyForSpectators"
Event.OngoingGlobal
if(
    (
        confirmGameDifficulty >= GameDifficulty.NO_VOTE + 1 &&
        confirmGameDifficulty <= GameDifficulty.LAST - 1
    )
){
    CreateHudText(null,
        null,
        <
            "game difficulty = <0> <1>",
            ConfirmGameDifficultyText(confirmGameDifficulty),
            <
                "(<0>/<1>)", confirmGameDifficulty, GameDifficulty.LAST - 1
            >
        >,
        null, Location.Left, -999,
        Color.White, 
        DifficultyTextColor(confirmGameDifficulty),
        Color.White,
        HudTextRev.StringAndColor, Spectators.VisibleAlways);
}

// TAG Debug ----------
// rule: "Debug/Vote/dummyVote"
// Event.OngoingPlayer
// if(
//     TeamOf() == playerTeam &&
//     IsInSetup() &&
//     IsDummyBot()
// ){
//     StartHoldingButton(ep, Button.Interact);
//     Wait(0.1);
//     StopHoldingButton(ep, Button.Interact);
//     Wait(RandomInteger(1, 5));
//     LoopIfConditionIsTrue();
// }