import "Utility.del";
import "Perk/PerkCore.del";

// List of import Perk
import "Perk/SuperLanding.del";
// import "Perk/GrapplingBeam.del";
// import "Perk/Sprinter.del";
// import "Perk/Adrenaline.del";
// import "Perk/HeroicAgility.del";
import "Perk/Savior.del";
import "Perk/Fearless.del";
// import "Perk/SteelFormation.del";
// import "Perk/PersonalShelter.del";
import "Perk/BioticStation.del";
import "Perk/TrapBeam.del";
// import "Perk/BattleFlag.del";
import "Perk/ChainExplosion.del";
import "Perk/IceAge.del";
// import "Perk/AimHack.del";
// import "Perk/Vampire.del";
import "Perk/HotShot.del";
import "Perk/ShotCaller.del";
import "Perk/GrudgeFireBall.del";
import "Perk/GrudgeThunderStrike.del";
import "Perk/StrafingSupport.del";
import "Perk/MissileBarrage.del";
import "Perk/ArtilleryRequest.del";
// import "Perk/CruiseMissile.del";
// import "Perk/OrbitalLaser.del";
// import "Perk/CarePackage.del";
import "Perk/DeathFromAbove.del";
import "Perk/LegendalyNinja.del";
import "Perk/MachDelivery.del";
// import "Perk/Juggernaut.del";
import "Perk/BeamSniper.del";
// import "Perk/DragonStorm.del";
// import "Perk/Titan.del";
import "Perk/Behemoth.del";
import "Perk/Annihilator.del";


rule: "Perk/buildLotteryPerkList // list of parks you can pick up"
Event.OngoingGlobal
{
    lotteryPerkListOrder = 0;
    lotteryPerkList = [];     // TAG lottery perk list
    addLottelyPerk(PerkType.SuperLanding,           WorkshopSettingInteger("Perk Settings", "(Super Landing) Included Amount",              10, 0, 1000, 0));   lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.GrapplingBeam,          WorkshopSettingInteger("Perk Settings", "(Grappling Beam) Included Amount",             10, 0, 1000, 1));   lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.Sprinter,               WorkshopSettingInteger("Perk Settings", "(Sprinter) Included Amount",                   10, 0, 1000, 2));   lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.Adrenaline,             WorkshopSettingInteger("Perk Settings", "(Adrenaline) Included Amount",                 10, 0, 1000, 3));   lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.HeroicAgility,          WorkshopSettingInteger("Perk Settings", "(Heroic Agility) Included Amount",             10, 0, 1000, 4));   lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Savior,                 WorkshopSettingInteger("Perk Settings", "(Savior) Included Amount",                     10, 0, 1000, 5));   lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Fearless,               WorkshopSettingInteger("Perk Settings", "(Fearless) Included Amount",                   10, 0, 1000, 6));   lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.SteelFormation,         WorkshopSettingInteger("Perk Settings", "(Steel Formation) Included Amount",            10, 0, 1000, 7));   lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.PersonalShelter,        WorkshopSettingInteger("Perk Settings", "(Personal Shelter) Included Amount",           10, 0, 1000, 8));   lotteryPerkListOrder++;
    addLottelyPerk(PerkType.BioticStation,          WorkshopSettingInteger("Perk Settings", "(Biotic Station) Included Amount",             10, 0, 1000, 9));   lotteryPerkListOrder++;
    addLottelyPerk(PerkType.TrapBeam,               WorkshopSettingInteger("Perk Settings", "(Trap Beam) Included Amount",                  10, 0, 1000, 10));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.BattleFlag,             WorkshopSettingInteger("Perk Settings", "(Battle Flag) Included Amount",                10, 0, 1000, 11));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.ChainExplosion,         WorkshopSettingInteger("Perk Settings", "(Chain Explosion) Included Amount",            10, 0, 1000, 12));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.IceAge,                 WorkshopSettingInteger("Perk Settings", "(Ice Age) Included Amount",                    10, 0, 1000, 13));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.AimHack,                WorkshopSettingInteger("Perk Settings", "(Aim Hack) Included Amount",                   10, 0, 1000, 14));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.Vampire,                WorkshopSettingInteger("Perk Settings", "(Vampire) Included Amount",                    10, 0, 1000, 15));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.HotShot,                WorkshopSettingInteger("Perk Settings", "(Hot Shot) Included Amount",                   10, 0, 1000, 16));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.ShotCaller,             WorkshopSettingInteger("Perk Settings", "(Shot Caller) Included Amount",                10, 0, 1000, 17));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.GrudgeFireBall,         WorkshopSettingInteger("Perk Settings", "(Grudge Fire Ball) Included Amount",           10, 0, 1000, 18));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.GrudgeThunderStrike,    WorkshopSettingInteger("Perk Settings", "(Grudge Thunder Strike) Included Amount",      10, 0, 1000, 19));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.StrafingSupport,        WorkshopSettingInteger("Perk Settings", "(Strafing Support) Included Amount",           10, 0, 1000, 20));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.MissileBarrage,         WorkshopSettingInteger("Perk Settings", "(Missile Barrage) Included Amount",            10, 0, 1000, 21));  lotteryPerkListOrder++;    
    addLottelyPerk(PerkType.ArtilleryRequest,       WorkshopSettingInteger("Perk Settings", "(Artillery Request) Included Amount",          10, 0, 1000, 22));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.CruiseMissile,          WorkshopSettingInteger("Perk Settings", "(Cruise Missile) Included Amount",           10, 0, 1000, 23));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.OrbitalLaser,           WorkshopSettingInteger("Perk Settings", "(Orbital Laser) Included Amount",              10, 0, 1000, 24));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.CarePackage,            WorkshopSettingInteger("Perk Settings", "(Care Package) Included Amount",               10, 0, 1000, 25));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.DeathFromAbove,         WorkshopSettingInteger("Perk Settings", "(Death From Above) Included Amount",           10, 0, 1000, 26));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.LegendalyNinja,         WorkshopSettingInteger("Perk Settings", "(Legendaly Ninja) Included Amount",            10, 0, 1000, 27));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.MachDelivery,           WorkshopSettingInteger("Perk Settings", "(Mach Delivery) Included Amount",              10, 0, 1000, 28));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.Juggernaut,             WorkshopSettingInteger("Perk Settings", "(Juggernaut) Included Amount",                 10, 0, 1000, 29));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.BeamSniper,             WorkshopSettingInteger("Perk Settings", "(Beam Sniper) Included Amount",                10, 0, 1000, 30));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.DragonStorm,            WorkshopSettingInteger("Perk Settings", "(Dragon Storm) Included Amount",               10, 0, 1000, 31));  lotteryPerkListOrder++;
    // addLottelyPerk(PerkType.Titan,                  WorkshopSettingInteger("Perk Settings", "(Titan) Included Amount",                      10, 0, 1000, 32));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Behemoth,               WorkshopSettingInteger("Perk Settings", "(Behemoth) Included Amount",                   10, 0, 1000, 33));  lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Annihilator,            WorkshopSettingInteger("Perk Settings", "(Annihilator) Included Amount",                10, 0, 1000, 34));  lotteryPerkListOrder++;
}

// TAG System ----------
rule: "Perk/System/ServerOverLoadMeasures/StopChasingVariable"
Event.OngoingGlobal
if(
    isServerOverLoading
){
    Wait(2, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(AllPlayers(Team.Team1).perkPosition);
    StopChasingVariable(AllPlayers(Team.Team1).perkPosition2);
    StopChasingVariable(AllPlayers(Team.Team1).landPosition);
    StopChasingVariable(AllPlayers(Team.Team1).landZonePosition);
}