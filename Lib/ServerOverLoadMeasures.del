import "Utility.del";

// TAG SerServerLoadMeasures ----------
enum ServerLoad{
    LOW = 100,
    MID = 150,
    HIGH = 200,
    FULL = 255
}

// TAG SerServerLoadMeasures/WaitUntilServerLoadLimitRelease ----------
define NormalizedServerLoad() : (ServerLoad() / ServerLoad.FULL);
define ActionWaitServerLoad : ServerLoad.HIGH;
globalvar define countWaitByServerLoad;

void WaitUntilServerLoadLimitRelease(define baseTime = 1.0){
    if(
        ServerLoad() >= ActionWaitServerLoad
    ){
        countWaitByServerLoad ++;

        // WaitUntil(!(ServerLoad() >= ActionWaitServerLoad), 3.0);

        while(ServerLoad() >= ActionWaitServerLoad){
            // Wait(NormalizedServerLoad() * 1.0, WaitBehavior.IgnoreCondition);
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }

        // distribute load
        Wait(RandomReal(0.0, 1.0), WaitBehavior.IgnoreCondition);
    }
}

// TAG ServerLoadMeasures/GameSpeed ----------
define GameSpeedSlowServerLoad : ServerLoad.FULL;
define watchTimGameSpeedDecrease: 1.5;
define watchTimeGameSpeedIncrease: 1.5;
define watchTimeGameSpeedForceIncrease: 5.0;
define speedChangeUnit: 10;
define gameSpeedMax: 100;
globalvar define gameSpeed = gameSpeedMax;
globalvar define countGameSpeedDecrease;

rule: "ServerOverloadMeasures/GameSpeed/decrease"
Event.OngoingGlobal
if(
    gameSpeed > 0 &&
    (ServerLoad() >= GameSpeedSlowServerLoad)
){
    Wait(watchTimGameSpeedDecrease, WaitBehavior.AbortWhenFalse);
    countGameSpeedDecrease ++;
    TuneGameSpeed(-speedChangeUnit);
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increase"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax &&
    !(ServerLoad() >= GameSpeedSlowServerLoad)
){
    Wait(watchTimeGameSpeedIncrease, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(speedChangeUnit);
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increaseByTimeout"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax
){
    Wait(watchTimeGameSpeedForceIncrease, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(speedChangeUnit);
    Loop();
}

void TuneGameSpeed(define changeVal)"TuneGameSpeed"{
    gameSpeed += changeVal;
    if(gameSpeed > gameSpeedMax){
        gameSpeed = gameSpeedMax;
    }
    else if(gameSpeed < 0){
        gameSpeed = 0;
    }
    SetSlowMotion(gameSpeed);
}