import "Utility.del";

// TAG SerServerLoadMeasures ----------
define isServerHighload(): 200 <= ServerLoad();

// TAG SerServerLoadMeasures/WaitUntilServerLoadLimitRelease ----------
globalvar define countWaitActionByServerLoad;

void WaitUntilServerLoadLimitRelease(define baseTime = 1.0){
    if(
        isServerHighload()
    ){
        countWaitActionByServerLoad ++;
        // WaitUntil(!isServerLoadLimit(), 10);

        while(isServerHighload()){
            Wait(
                // baseTime * 0.1,
                0.1,
                WaitBehavior.IgnoreCondition);
        }
        
        Wait(RandomReal(0.0, 1.0), WaitBehavior.IgnoreCondition);
    }
}

// TAG ServerLoadMeasures/GameSpeed ----------
define isServerOverload(): 255 <= ServerLoad();

define watchTimGameSpeedDecrease: 1.5;
define watchTimeGameSpeedIncrease: 1.5;
define watchTimeGameSpeedForceIncrease: 5.0;
define speedChangeUnit: 10;
define gameSpeedMax: 100;

globalvar define gameSpeed = gameSpeedMax;
globalvar define countGameSpeedDecrease;


rule: "ServerOverloadMeasures/GameSpeed/decrease"
Event.OngoingGlobal
if(
    gameSpeed > 0 &&
    isServerOverload()
){
    Wait(watchTimGameSpeedDecrease, WaitBehavior.AbortWhenFalse);
    countGameSpeedDecrease ++;
    TuneGameSpeed(-speedChangeUnit);
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increase"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax &&
    !isServerOverload()
){
    Wait(watchTimeGameSpeedIncrease, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(speedChangeUnit);
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increaseByTimeout"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax
){
    Wait(watchTimeGameSpeedForceIncrease, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(speedChangeUnit);
    Loop();
}

void TuneGameSpeed(define changeVal)"TuneGameSpeed"{
    gameSpeed += changeVal;
    if(gameSpeed > gameSpeedMax){
        gameSpeed = gameSpeedMax;
    }
    else if(gameSpeed < 0){
        gameSpeed = 0;
    }
    SetSlowMotion(gameSpeed);
}