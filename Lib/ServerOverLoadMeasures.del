import "Utility.del";

// TAG ServerOverloadMeasures/ServerLoadLimit ----------
define serverLoadMax: 255;
define watchTimeLimitDecrease: 0.25;
define watchTimeLimitIncrease: 0.25;
define limitChangeUnit: 50;
define isServerOverload(): serverLoadMax <= ServerLoad();
globalvar define currentServerLoadLimit = serverLoadMax;

rule: "ServerOverloadMeasures/ServerLoadLimit/decrease"
Event.OngoingGlobal
if(
    currentServerLoadLimit > 0 &&
    isServerOverload()
){
    Wait(watchTimeLimitDecrease, WaitBehavior.AbortWhenFalse);
    currentServerLoadLimit -= limitChangeUnit;
    if(currentServerLoadLimit < 0){
        currentServerLoadLimit = 0;
    }
    Loop();
}

rule: "ServerOverloadMeasures/ServerLoadLimit/increase"
Event.OngoingGlobal
if(
    currentServerLoadLimit < serverLoadMax &&
    !isServerOverload()
){
    Wait(watchTimeLimitIncrease, WaitBehavior.AbortWhenFalse);
    currentServerLoadLimit += limitChangeUnit;
    if(currentServerLoadLimit > serverLoadMax){
        currentServerLoadLimit = serverLoadMax;
    }
    Loop();
}

// TAG ServerOverloadMeasures/GameSpeed ----------
define gameSpeedMax: 100;
define watchTimeSpeedDecrease: 1.5;
define watchTimeSpeedIncrease: 1.5;
define speedChangeUnit: 10;
globalvar define currentGameSpeed = gameSpeedMax;
globalvar define countGameSpeedDecrease;

rule: "ServerOverloadMeasures/GameSpeed/decrease"
Event.OngoingGlobal
if(
    currentGameSpeed > 0 &&
    isServerOverload()
){
    Wait(watchTimeSpeedDecrease, WaitBehavior.AbortWhenFalse);
    currentGameSpeed -= speedChangeUnit;
    if(currentGameSpeed < 0){
        currentGameSpeed = 0;
    }
    SetSlowMotion(currentGameSpeed);
    countGameSpeedDecrease ++;
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increase"
Event.OngoingGlobal
if(
    currentGameSpeed < gameSpeedMax &&
    !isServerOverload()
){
    Wait(watchTimeSpeedIncrease, WaitBehavior.AbortWhenFalse);
    currentGameSpeed += speedChangeUnit;
    if(currentGameSpeed > gameSpeedMax){
        currentGameSpeed = gameSpeedMax;
    }
    SetSlowMotion(currentGameSpeed);
    Loop();
}

define forceTimeSpeedIncrease: 5.0;

rule: "ServerOverloadMeasures/GameSpeed/forceIncrease"
Event.OngoingGlobal
if(
    currentGameSpeed < gameSpeedMax &&
    !isServerOverload()
){
    Wait(forceTimeSpeedIncrease, WaitBehavior.IgnoreCondition);
    currentGameSpeed += speedChangeUnit;
    if(currentGameSpeed > gameSpeedMax){
        currentGameSpeed = gameSpeedMax;
    }
    SetSlowMotion(currentGameSpeed);
    Loop();
}

// TAG ServerOverloading ----------
define isServeLoadLimit(): ServerLoad() >= currentServerLoadLimit;

globalvar define countWaitActionByServerLoad;

void WaitUntilServerLoadLimitRelease(){
    if(
        isServeLoadLimit()
    ){
        countWaitActionByServerLoad ++;
        while(isServeLoadLimit()){
            Wait(RandomReal(0.9, 1.1), WaitBehavior.IgnoreCondition);
        }
    }
}

