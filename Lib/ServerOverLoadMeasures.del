import "Utility.del";

// TAG SerServerLoadMeasures/ServerLoadLimit ----------
globalvar define countWaitActionByServerLoad;

void WaitUntilServerLoadLimitRelease(define baseTime = 1.0){
    if(
        isServerLoadLimit()
    ){
        countWaitActionByServerLoad ++;
        
        while(isServerLoadLimit()){
            Wait(
                baseTime / 0.5,
                // RandomReal(0.1, 1.0),
                WaitBehavior.IgnoreCondition);
        }
    }
}

define serverLoadLimitMax: serverLoadMax;
define isServerLoadLimit(): serverLoadLimitMax <= ServerLoad();

define watchTimeLoadLimitDecrease: 0.1;
define watchTimeLoadLimitIncrease: watchTimeLoadLimitDecrease * 1;
define limitChangeUnit: 50;
globalvar define serverLoadLimit = serverLoadLimitMax;

void TuneServerLoadLimit(define changeVal)"TuneServerLoadLimit"{
    serverLoadLimit += changeVal;
    if(serverLoadLimit < 0){
        serverLoadLimit = 0;
    }
    else if(serverLoadLimit > serverLoadLimitMax){
        serverLoadLimit = serverLoadLimitMax;
    }
}

rule: "ServerOverloadMeasures/ServerLoadLimit/decrease"
Event.OngoingGlobal
if(
    serverLoadLimit > 0 &&
    isServerLoadLimit()
){
    Wait(watchTimeLoadLimitDecrease, WaitBehavior.AbortWhenFalse);
    TuneServerLoadLimit(-limitChangeUnit);
    Loop();
}

rule: "ServerOverloadMeasures/ServerLoadLimit/increase"
Event.OngoingGlobal
if(
    serverLoadLimit < serverLoadLimitMax &&
    !isServerLoadLimit()
){
    Wait(watchTimeLoadLimitIncrease, WaitBehavior.AbortWhenFalse);
    TuneServerLoadLimit(limitChangeUnit);
    Loop();
}

// TAG ServerLoadMeasures/GameSpeed ----------
define serverLoadMax: 255;
define isServerOverload(): serverLoadMax <= ServerLoad();

define watchTimGameSpeedDecrease: 1.5;
define watchTimeGameSpeedIncrease: watchTimGameSpeedDecrease * 0.75;
define speedChangeUnit: 10;
define gameSpeedMax: 100;
globalvar define gameSpeed = gameSpeedMax;
globalvar define countGameSpeedDecrease;

void TuneGameSpeed(define changeVal)"TuneGameSpeed"{
    serverLoadLimit += changeVal;
    if(gameSpeed < 0){
        gameSpeed = 0;
    }
    else if(gameSpeed > gameSpeedMax){
        gameSpeed = gameSpeedMax;
    }
    SetSlowMotion(gameSpeed);
}

rule: "ServerOverloadMeasures/GameSpeed/decrease"
Event.OngoingGlobal
if(
    gameSpeed > 0 &&
    isServerOverload()
){
    Wait(watchTimGameSpeedDecrease, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(-speedChangeUnit);
    countGameSpeedDecrease ++;
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increase"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax &&
    !isServerOverload()
){
    Wait(watchTimeGameSpeedIncrease, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(speedChangeUnit);

    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increaseByTimeout"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax
){
    Wait(5, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(speedChangeUnit);
    Loop();
}