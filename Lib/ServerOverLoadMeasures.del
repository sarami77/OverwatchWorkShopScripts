import "Utility.del";

// TAG ServerOverLoadMeasures ----------
define maxGameLogicSpeed: 110;

globalvar define slowControlHandler!;
enum SlowControlHandler{
    None,
    ServerOverLoadMeasures,
    GameLogic
}

globalvar define gameLogicSpeed = maxGameLogicSpeed;

rule: "ServerOverLoadMeasures/increaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    !isServerOverLoading() &&
    gameLogicSpeed < maxGameLogicSpeed
){
    Wait(0.2 * (gameLogicSpeed / DefaultPercentage()), WaitBehavior.AbortWhenFalse);
    // increase slow level
    // gameLogicSpeed += 1;
    gameLogicSpeed += 3;
    gameLogicSpeed = Min(gameLogicSpeed, maxGameLogicSpeed);
    // apply slow level
    if(gameLogicSpeed <= DefaultPercentage()){
        SetSlowMotion(gameLogicSpeed);
    }
    LoopIfConditionIsTrue();
}

rule: "ServerOverLoadMeasures/decreaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    isServerOverLoading() &&
    gameLogicSpeed > 0
){
    Wait(0.2 * (gameLogicSpeed / DefaultPercentage()), WaitBehavior.AbortWhenFalse);
    // decrease slow level
    gameLogicSpeed -= 2;
    gameLogicSpeed = Max(gameLogicSpeed, 0);
    // apply slow level
    if(gameLogicSpeed <= DefaultPercentage()){
        SetSlowMotion(gameLogicSpeed);
    }
    LoopIfConditionIsTrue();
}
