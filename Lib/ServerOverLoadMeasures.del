import "Utility.del";

// TAG SerServerLoadMeasures ----------
globalvar define loadLimit = maxLoadLimit;
globalvar define countActionWait;

define IsLoadLimit() : ServerLoad() >= loadLimit;

// TAG SerServerLoadMeasures/WaitUntilLoadLimitRelease ----------
void WaitUntilServerLoadLimitRelease(define baseTime = 1.0){
    if(
        IsLoadLimit()
    ){
        countActionWait ++;

        // WaitUntil(!IsLoadLimit(), MaxValue());

        while(ServerLoad() >= loadLimit){
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }

        // distribute load
        Wait(RandomReal(0.0, 3.0), WaitBehavior.IgnoreCondition);

        countActionWait --;
    }
}

// TAG ServerLoadMeasures/LoadLimit ----------
define maxLoadLimit : ServerLoad.HIGH;
define ServerLoadOfDoLoadLimitDown : ServerLoad.HIGH;
define WaitTimeLoadLimitDown : 0.1;
define ChangeStepLoadLimitDown : 50;
define WaitTimeLoadLimitUp : 0.1;
define ChangeStepLoadLimitUp : 50;

enum ServerLoad{
    LOW = 100,
    MID = 150,
    HIGH = 200,
    FULL = 255
}

rule: "ServerOverloadMeasures/LoadLimit/down"
Event.OngoingGlobal
if(
    ServerLoad() >= ServerLoadOfDoLoadLimitDown &&
    loadLimit > 0
){
    Wait(WaitTimeLoadLimitDown, WaitBehavior.AbortWhenFalse);
    TuneLoadLimit(-ChangeStepLoadLimitDown);

    Loop();
}

rule: "ServerOverloadMeasures/LoadLimit/up"
Event.OngoingGlobal
if(
    ServerLoad() < ServerLoadOfDoLoadLimitDown &&
    loadLimit < ServerLoad.FULL
){
    Wait(WaitTimeLoadLimitUp, WaitBehavior.AbortWhenFalse);
    TuneLoadLimit(ChangeStepLoadLimitUp);

    Loop();
}

void TuneLoadLimit(define changeVal)"TuneLoadLimit"{
    loadLimit += changeVal;
    loadLimit = Min(loadLimit, maxLoadLimit);
    loadLimit = Max(loadLimit, 0);
}

// TAG ServerLoadMeasures/GameSpeed ----------
define ServerLoadOfDoGameSpeedDown : ServerLoad.FULL;
define WaitTimeGameSpeedDown : 3.0;
define ChangeStepGameSpeedDown : 30;
define WaitTimeGameSpeedUp : 3.0;
define ChangeStepGameSpeedUp : 30;

define gameSpeedMax: 100;
globalvar define gameSpeed = gameSpeedMax;
globalvar define countGameSpeedDecrease;

rule: "ServerOverloadMeasures/GameSpeed/down"
Event.OngoingGlobal
if(
    ServerLoad() >= ServerLoadOfDoGameSpeedDown &&
    gameSpeed > 0
){
    Wait(WaitTimeGameSpeedDown, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(-ChangeStepGameSpeedDown);

    countGameSpeedDecrease ++;
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/up"
Event.OngoingGlobal
if(
    // ServerLoad() < ServerLoadOfDoGameSpeedDown &&
    gameSpeed < gameSpeedMax
){
    Wait(WaitTimeGameSpeedUp, WaitBehavior.AbortWhenFalse);
    TuneGameSpeed(ChangeStepGameSpeedUp);

    Loop();
}

void TuneGameSpeed(define changeVal)"TuneGameSpeed"{
    gameSpeed += changeVal;
    gameSpeed = Min(gameSpeed, gameSpeedMax);
    gameSpeed = Max(gameSpeed, 0);
    SetSlowMotion(gameSpeed);
}
