import "Utility.del";

// TAG ServerOverLoadMeasures ----------
define maxGameLogicSpeed: DefaultPercentage();

globalvar define slowControlHandler!;
enum SlowControlHandler{
    None,
    ServerOverLoadMeasures,
    GameLogic
}

globalvar define gameLogicSpeed = maxGameLogicSpeed;
define watchTimeSpeedDecrease: 1.0;
globalvar define watchTimeSpeedIncrease = (watchTimeSpeedDecrease);
define changeUnitSpeedDecrease: 10;
define changeUnitSpeedIncrease: 10;
rule: "ServerOverLoadMeasures/increaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    !isServerOverLoading() &&
    gameLogicSpeed < maxGameLogicSpeed
){
    Wait(
        watchTimeSpeedDecrease *
        (gameLogicSpeed / DefaultPercentage()),
        WaitBehavior.AbortWhenFalse);
    
    // increase slow level
    gameLogicSpeed += changeUnitSpeedDecrease;
    gameLogicSpeed = Min(gameLogicSpeed, maxGameLogicSpeed);
    // apply slow level
    SetSlowMotion(gameLogicSpeed);

    // reset watchTimeSpeedIncrease
    watchTimeSpeedIncrease = (watchTimeSpeedDecrease);
    LoopIfConditionIsTrue();
}

rule: "ServerOverLoadMeasures/decreaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    isServerOverLoading() &&
    gameLogicSpeed > 0
){
    // decrease watchTimeSpeedIncrease
    if(gameLogicSpeed < maxGameLogicSpeed){
        watchTimeSpeedIncrease -= 0.01;
    }

    Wait(watchTimeSpeedIncrease *
        (gameLogicSpeed / DefaultPercentage()),
        WaitBehavior.AbortWhenFalse);
    
    // decrease slow level
    gameLogicSpeed -= changeUnitSpeedIncrease;
    gameLogicSpeed = Max(gameLogicSpeed, 0);
    // apply slow level
    SetSlowMotion(gameLogicSpeed);
    LoopIfConditionIsTrue();
}
