import "Utility.del";

// TAG ServerOverLoadMeasures ----------
define maxGameLogicSpeed: DefaultPercentage();

globalvar define slowControlHandler!;
enum SlowControlHandler{
    None,
    ServerOverLoadMeasures,
    GameLogic
}

globalvar define gameLogicSpeed = maxGameLogicSpeed;

define changeGameSpeedUnit: 5;
define changeInterval: 0.5;

rule: "ServerOverLoadMeasures/increaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    !isServerOverLoading() &&
    gameLogicSpeed < maxGameLogicSpeed
){
    Wait(changeInterval * (gameLogicSpeed / DefaultPercentage()), WaitBehavior.AbortWhenFalse);
    // increase slow level
    gameLogicSpeed += changeGameSpeedUnit;
    gameLogicSpeed = Min(gameLogicSpeed, maxGameLogicSpeed);
    // apply slow level
    SetSlowMotion(gameLogicSpeed);
    LoopIfConditionIsTrue();
}

rule: "ServerOverLoadMeasures/decreaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    isServerOverLoading() &&
    gameLogicSpeed > 0
){
    Wait(changeInterval * (gameLogicSpeed / DefaultPercentage()), WaitBehavior.AbortWhenFalse);
    // decrease slow level
    gameLogicSpeed -= changeGameSpeedUnit;
    gameLogicSpeed = Max(gameLogicSpeed, 0);
    // apply slow level
    SetSlowMotion(gameLogicSpeed);
    LoopIfConditionIsTrue();
}
