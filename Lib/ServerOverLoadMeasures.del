import "Utility.del";

// TAG ServerOverloadMeasures ----------
globalvar define currentServerLoadLimit = serverLoadMax;
define serverLoadMax: 255;
define watchTimeLimitDecrease: 1.0;
define watchTimeLimitIncrease: 1.0;
define limitChangeUnit: 10;

rule: "ServerOverloadMeasures/increaseServerLoadLimit"
Event.OngoingGlobal
if(
    currentServerLoadLimit < serverLoadMax &&
    !(ServerLoad() >= serverLoadMax)
){
    Wait(watchTimeLimitIncrease, WaitBehavior.AbortWhenFalse);
    currentServerLoadLimit += limitChangeUnit;
    if(currentServerLoadLimit > serverLoadMax){
        currentServerLoadLimit = serverLoadMax;
    }
    Loop();
}

rule: "ServerOverloadMeasures/decreaseServerLoadLimit"
Event.OngoingGlobal
if(
    currentServerLoadLimit > 0 &&
    (ServerLoad() >= serverLoadMax)
){
    Wait(watchTimeLimitDecrease, WaitBehavior.AbortWhenFalse);
    currentServerLoadLimit -= limitChangeUnit;
    if(currentServerLoadLimit < 0){
        currentServerLoadLimit = 0;
    }
    Loop();
}

// TAG ServerOverloading ----------
define isServerOverload(): ServerLoad() >= currentServerLoadLimit;

globalvar define countWaitActionByServerLoad;

void WaitUntilServerOverloadRelease(){
    if(
        isServerOverload()
    ){
        countWaitActionByServerLoad ++;
        WaitUntil(!isServerOverload(), MaxValue());
        Wait(RandomReal(0.0, 1.0),WaitBehavior.IgnoreCondition);
    }
}

