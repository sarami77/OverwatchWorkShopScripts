import "Utility.del";

// TAG ServerOverLoadMeasures ----------
define maxGameLogicSpeed: DefaultPercentage();

globalvar define slowControlHandler;

enum SlowControlHandler{
    None,
    ServerOverLoadMeasures,
    GameLogic
}

globalvar define countGameLogicSpeedDecrease = 0;
globalvar define gameLogicSpeed = maxGameLogicSpeed;
define watchTimeSpeedDecrease: 1.5;
define watchTimeSpeedIncrease: watchTimeSpeedDecrease * 0.33;
define speedDecreaseUnit: 10;
define speedIncreaseUnit: speedDecreaseUnit * 1.0;

rule: "ServerOverLoadMeasures/increaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    !isServerLoadLevel(ServerLoadLevel.Overload) &&
    gameLogicSpeed < maxGameLogicSpeed
){
    Wait(
        watchTimeSpeedIncrease,
        // watchTimeSpeedIncrease * (gameLogicSpeed / DefaultPercentage()),
        WaitBehavior.AbortWhenFalse);
    
    // increase slow level
    gameLogicSpeed += speedDecreaseUnit;
    gameLogicSpeed = Min(gameLogicSpeed, maxGameLogicSpeed);
    // apply slow level
    SetSlowMotion(gameLogicSpeed);

    Loop();
}

rule: "ServerOverLoadMeasures/decreaseGameLogicSpeed"
Event.OngoingGlobal
if(
    slowControlHandler == SlowControlHandler.ServerOverLoadMeasures &&
    isServerLoadLevel(ServerLoadLevel.Overload) &&
    gameLogicSpeed > 0
){
    Wait(
        watchTimeSpeedDecrease,
        // watchTimeSpeedDecrease * (gameLogicSpeed / DefaultPercentage()),
        WaitBehavior.AbortWhenFalse);
    
    // decrease slow level
    gameLogicSpeed -= speedIncreaseUnit;
    gameLogicSpeed = Max(gameLogicSpeed, 0);
    // apply slow level
    SetSlowMotion(gameLogicSpeed);

    countGameLogicSpeedDecrease ++;
    Loop();
}
