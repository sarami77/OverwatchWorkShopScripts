import "Utility.del";

// TAG SerServerLoadMeasures/ServerLoadLimit ----------
define waitTime: 1.0;
globalvar define countWaitActionByServerLoad;

void WaitUntilServerLoadLimitRelease(){
    if(
        isServerLoadLimit()
    ){
        countWaitActionByServerLoad ++;
        
        while(isServerLoadLimit()){
            Wait(waitTime, WaitBehavior.IgnoreCondition);
        }
    }
}

define serverLoadLimitMax: 255;
define isServerLoadLimit(): serverLoadLimitMax <= ServerLoad();

define limitChangeUnit: 50;
define watchTimeLimitDecrease: 0.1;
define watchTimeLimitIncrease: 0.1;
globalvar define serverLoadLimit = serverLoadLimitMax;

rule: "ServerOverloadMeasures/ServerLoadLimit/decrease"
Event.OngoingGlobal
if(
    serverLoadLimit > 0 &&
    isServerLoadLimit()
){
    Wait(watchTimeLimitDecrease, WaitBehavior.AbortWhenFalse);
    serverLoadLimit -= limitChangeUnit;
    if(serverLoadLimit < 0){
        serverLoadLimit = 0;
    }
    Loop();
}

rule: "ServerOverloadMeasures/ServerLoadLimit/increase"
Event.OngoingGlobal
if(
    serverLoadLimit < serverLoadLimitMax &&
    !isServerLoadLimit()
){
    Wait(watchTimeLimitIncrease, WaitBehavior.AbortWhenFalse);
    serverLoadLimit += limitChangeUnit;
    if(serverLoadLimit > serverLoadLimitMax){
        serverLoadLimit = serverLoadLimitMax;
    }
    Loop();
}

// TAG ServerLoadMeasures/ServerOverLoad ----------
define serverLoadMax: 255;
define isServerOverload(): serverLoadMax <= ServerLoad();

define gameSpeedMax: 100;
define watchTimeSpeedDecrease: 1.5;
define watchTimeSpeedIncrease: 1.5;
define speedChangeUnit: 10;
globalvar define gameSpeed = gameSpeedMax;
globalvar define countGameSpeedDecrease;

rule: "ServerOverloadMeasures/GameSpeed/decrease"
Event.OngoingGlobal
if(
    gameSpeed > 0 &&
    isServerOverload()
){
    Wait(watchTimeSpeedDecrease, WaitBehavior.AbortWhenFalse);
    gameSpeed -= speedChangeUnit;
    if(gameSpeed < 0){
        gameSpeed = 0;
    }
    SetSlowMotion(gameSpeed);
    countGameSpeedDecrease ++;
    Loop();
}

rule: "ServerOverloadMeasures/GameSpeed/increase"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax &&
    !isServerOverload()
){
    Wait(watchTimeSpeedIncrease, WaitBehavior.AbortWhenFalse);
    gameSpeed += speedChangeUnit;
    if(gameSpeed > gameSpeedMax){
        gameSpeed = gameSpeedMax;
    }
    SetSlowMotion(gameSpeed);
    Loop();
}

define forceTimeSpeedIncrease: 5.0;

rule: "ServerOverloadMeasures/GameSpeed/forceIncrease"
Event.OngoingGlobal
if(
    gameSpeed < gameSpeedMax &&
    !isServerOverload()
){
    Wait(forceTimeSpeedIncrease, WaitBehavior.IgnoreCondition);
    gameSpeed += speedChangeUnit;
    if(gameSpeed > gameSpeedMax){
        gameSpeed = gameSpeedMax;
    }
    SetSlowMotion(gameSpeed);
    Loop();
}

