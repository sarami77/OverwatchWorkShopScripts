import "Utility.ostw";
import "Debug.ostw";

// TAG Bot/Spawn ----------
enum BotAsset{
    EnemyType,
    hero,
    count
}

globalvar define botSlot;

disabled rule: "Bot/Spawn/CreateAllBotByBotAsset"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Interact)
){
    WaitLongPressConfirm();
    CreateAllBotByAsset();
}

define RandomHero: RandomValueInArray(AllHeroes());
define RandomTankHero: RandomValueInArray(AllTankHeroes());
define RandomDamageHero: RandomValueInArray(AllDamageHeroes());
define RandomSupportHero: RandomValueInArray(AllSupportHeroes());

void CreateAllBotByAsset()"CreateAllBotByAsset"{
    dbgMsg("Start Create All Bot By Bot Asset");
    if(0 < NumberOfPlayers(Team.Team2)){
        DestroyAllBot();
    }
    Wait(1, WaitBehavior.IgnoreCondition);
    // define asset list
    define assetList =
    [
        // basic tank boss
        [
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  3]
        ],
        // basic damage boss
        [
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  3]
        ],
        // 5 minion
        [
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   5]
        ],
        // 4 elite
        [
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  1],
            [EnemyType.Minion,      RandomSupportHero,  1]
        ],
        // double boss
        [
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Boss,        RandomDamageHero,   1]
        ],
        // Giant boss
        [
            [EnemyType.GiantBoss,   RandomHero,         1]
        ],
        // melees
        [
            [EnemyType.Boss,        Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Doomfist,      2],
            [EnemyType.Minion,      Hero.Brigitte,      3]
        ],
        // flanker
        [
            [EnemyType.Boss,        Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Genji,         1],
            [EnemyType.Minion,      Hero.Tracer,        3]
        ],
        // long range
        [
            [EnemyType.Boss,      Hero.Orisa, 1],
            [EnemyType.Elite,     Hero.Bastion, 1],
            [EnemyType.Elite,     Hero.Widowmaker, 2],
            [EnemyType.Minion,    Hero.Soldier76, 2]
        ],
        // airforce
        [
            [EnemyType.Elite,     Hero.Pharah, 3],
            [EnemyType.Elite,     Hero.Echo, 3]
        ],
        // snipers
        [
            [EnemyType.Boss,      Hero.Reinhardt, 1],
            [EnemyType.Elite,     Hero.Widowmaker, 2],
            [EnemyType.Elite,     Hero.Hanzo, 1],
            [EnemyType.Elite,     Hero.Ana, 1],
            [EnemyType.Elite,     Hero.Ashe, 1]
        ]
    ];
    // create bot by asset
    define asset = ValueInArray(assetList, RandomInteger(0, CountOf(assetList) - 1));
    for(define idx = 0; idx < CountOf(asset); idx++){
        for(define botCount = 0; botCount < asset[idx][BotAsset.count]; botCount++){
            // create bot
            CreateDummyBot(
                asset[idx][BotAsset.hero],
                Team.Team2,
                botSlot,
                SpawnPoints(Team.Team2)[0],
                Forward()
            );
            Wait(1, WaitBehavior.IgnoreCondition);            

            // set Bot type as enemy type
            define spawnBot = PlayersInSlot(botSlot, Team.Team2);
            spawnBot.enemyType = asset[idx][BotAsset.EnemyType];
            Respawn(spawnBot);
            // next slot
            botSlot ++;
        }
    }

    dbgMsg("Finish Create All Bot By Bot Asset");
}

void DestroyAllBot()"DestroyAllBot"{
    if(0 < NumberOfPlayers(Team.Team2)){
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team2, idx);
        }
        botSlot = 0;
    }
}

// TAG Bot/SetBotInfo ----------
playervar define botInfo = [];
enum BotInfo{
    heroName,
    combatRange,
    combatRangeMin,
    combatRangeMax,
    primaryFireButtonBehaivor,
    primaryFireButtonWaitMin,
    primaryFireButtonWaitMax,
    primaryFireButtonHoldMin,
    primaryFireButtonHoldMax,
    secondaryFireButtonBehaivor,
    secondaryFireButtonWaitMin,
    secondaryFireButtonWaitMax,
    secondaryFireButtonHoldMin,
    secondaryFireButtonHoldMax,
    ability1ButtonWaitMin,
    ability1ButtonWaitMax,
    ability1ButtonHoldMin,
    ability1ButtonHoldMax,
    ability2ButtonWaitMin,
    ability2ButtonWaitMax,
    ability2ButtonHoldMin,
    ability2ButtonHoldMax,
    isRepeating,
    repeatDuringMin,
    repeatDuringMax,
    detectorRoot,
    upperDetector,
    frontDetector,
    underDetector,
    statusText,
    state,
    tuneDir,
    target,
    targetPos,
    watchUpdateRate,
    sideStepDir,
    sideStepSecond,
    moveDir
}

define targetPosRange: 6;

rule: "Bot/SetBotInfo"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
        botInfo[BotInfo.heroName] = "Default";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldOnly;
        botInfo[BotInfo.primaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.primaryFireButtonWaitMax] = 5;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 5;

        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.secondaryFireButtonWaitMax] = 5;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 5;

        botInfo[BotInfo.ability1ButtonWaitMin] = 0;
        botInfo[BotInfo.ability1ButtonWaitMax] = 5;
        botInfo[BotInfo.ability1ButtonHoldMin] = 0;
        botInfo[BotInfo.ability1ButtonHoldMax] = 1;

        botInfo[BotInfo.ability2ButtonWaitMin] = 0;
        botInfo[BotInfo.ability2ButtonWaitMax] = 5;
        botInfo[BotInfo.ability2ButtonHoldMin] = 0;
        botInfo[BotInfo.ability2ButtonHoldMax] = 1;

    switch(HeroOf()){
        case Hero.Ana:
        botInfo[BotInfo.heroName] = "Ana";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldOnly;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.secondaryFireButtonWaitMax] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 10;
        break;

        case Hero.Ashe:
        botInfo[BotInfo.heroName] = "Ashe";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.Repeat;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.secondaryFireButtonWaitMax] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 10;
        break;

        case Hero.Baptiste:
        botInfo[BotInfo.heroName] = "Baptiste";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Bastion:
        botInfo[BotInfo.heroName] = "Bastion";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        break;

        case Hero.Brigitte:
        botInfo[BotInfo.heroName] = "Brigitte";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.Doomfist:
        botInfo[BotInfo.heroName] = "Doomfist";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.Dva:
        botInfo[BotInfo.heroName] = "Doomfist";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Echo:
        botInfo[BotInfo.heroName] = "Echo";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Genji:
        botInfo[BotInfo.heroName] = "Genji";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Hanzo:
        botInfo[BotInfo.heroName] = "Hanzo";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.primaryFireButtonWaitMax] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 2;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 2;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.Non;
        break;

        case Hero.Junkrat:
        botInfo[BotInfo.heroName] = "Junkrat";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Lucio:
        botInfo[BotInfo.heroName] = "Lucio";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Mccree:
        botInfo[BotInfo.heroName] = "Mccree";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Mei:
        botInfo[BotInfo.heroName] = "Mei";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Mercy:
        botInfo[BotInfo.heroName] = "Mercy";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        break;

        case Hero.Moira:
        botInfo[BotInfo.heroName] = "Moira";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldOnly;
        break;

        case Hero.Orisa:
        botInfo[BotInfo.heroName] = "Orisa";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Pharah:
        botInfo[BotInfo.heroName] = "Pharah";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Reaper:
        botInfo[BotInfo.heroName] = "Reaper";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Reinhardt:
        botInfo[BotInfo.heroName] = "Reinhardt";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.Roadhog:
        botInfo[BotInfo.heroName] = "Reaper";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Sigma:
        botInfo[BotInfo.heroName] = "Sigma";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.secondaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.secondaryFireButtonWaitMax] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 1;
        break;

        case Hero.Soldier76:
        botInfo[BotInfo.heroName] = "Soldier76";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Sombra:
        botInfo[BotInfo.heroName] = "Sombra";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Symmetra:
        botInfo[BotInfo.heroName] = "Symmetra";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Torbjorn:
        botInfo[BotInfo.heroName] = "Torbjorn";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Tracer:
        botInfo[BotInfo.heroName] = "Tracer";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Widowmaker:
        botInfo[BotInfo.heroName] = "Widowmaker";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonWaitMin] = 1;
        botInfo[BotInfo.primaryFireButtonWaitMax] = 2;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 0;

        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.secondaryFireButtonWaitMax] = 0;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 10;
        break;

        case Hero.Winston:
        botInfo[BotInfo.heroName] = "Winston";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.WreckingBall:
        botInfo[BotInfo.heroName] = "WreckingBall";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonWaitMin] = 0;
        botInfo[BotInfo.primaryFireButtonWaitMax] = 5;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 10;
        break;

        case Hero.Zarya:
        botInfo[BotInfo.heroName] = "Zarya";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Zenyatta:
        botInfo[BotInfo.heroName] = "Zenyatta";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;
    }

    // set combat range
    switch(botInfo[BotInfo.combatRange]){
        case CombatRange.Melee:
            botInfo[BotInfo.combatRangeMin] = 1;
            botInfo[BotInfo.combatRangeMax] = 3;
            break;
        case CombatRange.Close:
            botInfo[BotInfo.combatRangeMin] = 1;
            botInfo[BotInfo.combatRangeMax] = 10;
            break;
        case CombatRange.Middle:
            botInfo[BotInfo.combatRangeMin] = 10;
            botInfo[BotInfo.combatRangeMax] = 20;
            break;
        case CombatRange.Far:
            botInfo[BotInfo.combatRangeMin] = 20;
            botInfo[BotInfo.combatRangeMax] = 30;
            break;
    }
}

enum State{
    Non,
    Combat,
    Searching
}

enum CombatRange{
    Non,
    Melee,
    Close,
    Middle,
    Far
}

enum ButtonBehaivor{
    Non,
    HoldOnly,
    HoldAndRelease,
    Repeat
}

// TAG Bot/ObjectDetector ----------


// TAG Bot/ButtonControl ----------
enum ButtonControl{
    button,
    buttonOperation,
    waitDuringMin,
    waitDuringMax,
    holdDuringMin,
    holdDuringMax
}

void StartButtonControl(define buttonControl){
    if(buttonControl[ButtonControl.buttonOperation] == ButtonBehaivor.HoldOnly){
        while(true){
            StartHoldingButton(ep, buttonControl[ButtonControl.button]);
            Wait(RandomReal(buttonControl[ButtonControl.holdDuringMin], buttonControl[ButtonControl.holdDuringMax]), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, buttonControl[ButtonControl.button]);
        }
    }
    else if(buttonControl[ButtonControl.buttonOperation] == ButtonBehaivor.HoldAndRelease){
        while(true){
            Wait(RandomReal(buttonControl[ButtonControl.waitDuringMin], buttonControl[ButtonControl.waitDuringMax]), WaitBehavior.AbortWhenFalse);
            StartHoldingButton(ep, buttonControl[ButtonControl.button]);
            Wait(RandomReal(buttonControl[ButtonControl.holdDuringMin], buttonControl[ButtonControl.holdDuringMax]), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, buttonControl[ButtonControl.button]);
        }
    }
    else if(buttonControl[ButtonControl.buttonOperation] == ButtonBehaivor.Repeat){
        botInfo[BotInfo.repeatDuringMin] = buttonControl[ButtonControl.holdDuringMin];
        botInfo[BotInfo.repeatDuringMax] = buttonControl[ButtonControl.holdDuringMax];
        while(true){
            Wait(RandomReal(buttonControl[ButtonControl.waitDuringMin], buttonControl[ButtonControl.waitDuringMax]), WaitBehavior.AbortWhenFalse);
            botInfo[BotInfo.isRepeating] = true;
            while(botInfo[BotInfo.isRepeating]){
                PressButton(ep, buttonControl[ButtonControl.button]); 
                Wait(0.5, WaitBehavior.AbortWhenFalse);
            }
        }
    }
}

rule: "Bot/ButtonControl/isRepeating"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat &&
    botInfo[BotInfo.isRepeating]
){
    Wait(RandomReal(botInfo[BotInfo.repeatDuringMin], botInfo[BotInfo.repeatDuringMax]), WaitBehavior.AbortWhenFalse);
    botInfo[BotInfo.isRepeating] = false;
}

rule: "Bot/ButtonControl/PrimaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.PrimaryFire,
            botInfo[BotInfo.primaryFireButtonBehaivor],
            botInfo[BotInfo.primaryFireButtonWaitMin],
            botInfo[BotInfo.primaryFireButtonWaitMax],
            botInfo[BotInfo.primaryFireButtonHoldMin],
            botInfo[BotInfo.primaryFireButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/SeconaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.SecondaryFire,
            botInfo[BotInfo.secondaryFireButtonBehaivor],
            botInfo[BotInfo.secondaryFireButtonWaitMin],
            botInfo[BotInfo.secondaryFireButtonWaitMax],
            botInfo[BotInfo.secondaryFireButtonHoldMin],
            botInfo[BotInfo.secondaryFireButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/Ability1/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Ability1,
            ButtonBehaivor.HoldAndRelease,
            botInfo[BotInfo.ability1ButtonWaitMin],
            botInfo[BotInfo.ability1ButtonWaitMax],
            botInfo[BotInfo.ability1ButtonHoldMin],
            botInfo[BotInfo.ability1ButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/Ability2/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Ability2,
            ButtonBehaivor.HoldAndRelease,
            botInfo[BotInfo.ability2ButtonWaitMin],
            botInfo[BotInfo.ability2ButtonWaitMax],
            botInfo[BotInfo.ability2ButtonHoldMin],
            botInfo[BotInfo.ability2ButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/Ultimate/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat &&
    UltimateChargePercent() >= 100
){
    StartButtonControl(
        [
            Button.Ultimate,
            ButtonBehaivor.HoldAndRelease,
            0,
            5,
            0,
            1
        ]
    );
}

rule: "Bot/ButtonControl/Jump/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Jump,
            ButtonBehaivor.HoldAndRelease,
            0,
            10,
            0,
            5
        ]
    );
}

rule: "Bot/ButtonControl/Crouch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Crouch,
            ButtonBehaivor.HoldAndRelease,
            0,
            10,
            0,
            3
        ]
    );
}

rule: "Bot/ButtonControl/Reload/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Reload,
            ButtonBehaivor.HoldAndRelease,
            5,
            10,
            0,
            1
        ]
    );
}

rule: "Bot/ButtonControl/WeaponSwitch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    while(true){
        Wait(RandomReal(0, 30), WaitBehavior.AbortWhenFalse);
        SetWeapon(ep, RandomInteger(0, 1));
    }
}

rule: "Bot/ButtonControl/StopButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] != State.Combat
){
    StopHoldingButton(ep, Button.PrimaryFire);
    StopHoldingButton(ep, Button.SecondaryFire);
    StopHoldingButton(ep, Button.Ability1);
    StopHoldingButton(ep, Button.Ability2);
    StopHoldingButton(ep, Button.Ultimate);
    StopHoldingButton(ep, Button.Jump);
    StopHoldingButton(ep, Button.Crouch);
}


// TAG Bot/StateControl ----------
define basicUpdateRate: 1.0;

define isStacking:
    SpeedOf() <= 3.0;

define isContactPlayer: 
    botInfo[BotInfo.target] != 0 &&
    IsAlive(botInfo[BotInfo.target]) &&
    IsInLineOfSight(ep, botInfo[BotInfo.target]) &&
    !(
        HeroOf(botInfo[BotInfo.target]) == Hero.Sombra &&
        IsUsingAbility1(botInfo[BotInfo.target]) &&
        DistanceBetween(ep, botInfo[BotInfo.target]) >= 2
    );

rule: "Bot/State/StateControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    // get target
    if(
        botInfo[BotInfo.target] == 0 ||                     // no target
        !IsInLineOfSight(ep, botInfo[BotInfo.target]) ||    // targhet lost
        IsDead(botInfo[BotInfo.target])                     // target dead
    ){
        // set target
        define target = FirstOf(
            SortedArray(
                FilteredArray(
                    AllPlayers(Team.Team1),
                    (
                        IsAlive(ae) &&
                        IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock)
                    )
                ),
                DistanceBetween(ep, ae)
            )
        );
        if(target != 0){
            botInfo[BotInfo.target] = target;
            botInfo[BotInfo.targetPos] = PositionOf(target);
        }
        else{
            botInfo[BotInfo.target] = 0;
        }
    }

    // change state
    if(
        IsDead()
    ){
        // non by dead
        botInfo[BotInfo.state] = State.Non; 
    }
    else
    { 
        if(isContactPlayer){
            // combat by contact player
            botInfo[BotInfo.state] = State.Combat; 
        }
        else
        {
            if(botInfo[BotInfo.targetPos] != 0){
                // searching by target lost
                botInfo[BotInfo.state] = State.Searching;
            }
            else{
                // non by target not found
                botInfo[BotInfo.state] = State.Non;
            }       
        }
    }
    Wait(basicUpdateRate, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

define StartMove(define dir):
    StartThrottleInDirection(
        ep, dir, 1,
        Relative.ToPlayer,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude);

define StopMove(): StopThrottleInDirection();

// TAG Bot/State/Non ----------
rule: "Bot/State/Non"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Non
){
    botInfo[BotInfo.statusText] = <"Non">;
    botInfo[BotInfo.target] = 0;
    botInfo[BotInfo.targetPos] = 0;
    StopMove();
    StopFacing(ep);
}


// TAG Bot/State/Searching ----------
rule: "Bot/State/Searching"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Searching
){
    botInfo[BotInfo.statusText] = <"Searching">;

    // set initial status
    botInfo[BotInfo.watchUpdateRate] = basicUpdateRate;
    StopFacing(ep); 

    if(botInfo[BotInfo.sideStepDir] == 0){
        //botInfo[BotInfo.sideStepDir] = RandomValueInArray([Right(),Left()]);
        botInfo[BotInfo.sideStepDir] = 0;
    }
    else{
        // set reverse side step for find player
        botInfo[BotInfo.sideStepDir] = -botInfo[BotInfo.sideStepDir];
    }
    
    // action loop
    while(true){
        botInfo[BotInfo.targetPos] = BelowPosition(botInfo[BotInfo.targetPos]);
        SetFacing(ep, DirectionTowards(ep, botInfo[BotInfo.targetPos]), Relative.ToWorld);

        botInfo[BotInfo.moveDir] = Forward();
        botInfo[BotInfo.statusText] = <"Searching/Walking">;

        // set move direction
        if(botInfo[BotInfo.moveDir] != 0 && botInfo[BotInfo.sideStepDir] != 0){
            StartMove(botInfo[BotInfo.moveDir] + botInfo[BotInfo.sideStepDir]);
        }
        else if(botInfo[BotInfo.moveDir] == 0 && botInfo[BotInfo.sideStepDir] != 0){
            StartMove(botInfo[BotInfo.sideStepDir]);
        }
        else if(botInfo[BotInfo.moveDir] != 0 && botInfo[BotInfo.sideStepDir] == 0){
            StartMove(botInfo[BotInfo.moveDir]);
        }
        else{
            StopMove();
        }

        // check stack
        if(isStacking){
            StartMove(-botInfo[BotInfo.sideStepDir]);
            while(RandomInteger(0, 100) <= 40){
                StartHoldingButton(ep, Button.Jump);
                Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
                StopHoldingButton(ep, Button.Jump);
            }
        }

        // arrival target lost position
        if(DistanceBetween(botInfo[BotInfo.targetPos], ep) <= targetPosRange){
            Wait(3, WaitBehavior.AbortWhenFalse);

            botInfo[BotInfo.statusText] = <"Searching/Canceled">;
            Wait(1, WaitBehavior.AbortWhenFalse);
            botInfo[BotInfo.state] = State.Non;
        }
 
        Wait(botInfo[BotInfo.watchUpdateRate], WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/State/Searching/timeout"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Searching
){
    Wait(10, WaitBehavior.AbortWhenFalse);

    botInfo[BotInfo.statusText] = <"Searching/Timeout">;
    Wait(1, WaitBehavior.AbortWhenFalse);
    botInfo[BotInfo.state] = State.Non;
}

// TAG Bot/State/Combat ----------
rule: "Bot/State/Combat"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    botInfo[BotInfo.statusText] = <"Combat">;

    // set initial status
    botInfo[BotInfo.watchUpdateRate] = basicUpdateRate;
    botInfo[BotInfo.moveDir] = 0;
    botInfo[BotInfo.sideStepDir] = 0;
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            EyePosition(botInfo[BotInfo.target])),
        300,
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );   
    
    // action loop
    while(true){
        // update target pos
        botInfo[BotInfo.targetPos] = PositionOf(botInfo[BotInfo.target]);

        // change combat distance
        define distToTarget = DistanceBetween(ep, botInfo[BotInfo.target]);
        if(distToTarget > botInfo[BotInfo.combatRangeMax]){
            botInfo[BotInfo.moveDir] = Forward();
            botInfo[BotInfo.statusText] = <"Combat/Forward">;
        }
        else if(distToTarget < botInfo[BotInfo.combatRangeMin]){
            botInfo[BotInfo.moveDir] = Backward();
            botInfo[BotInfo.statusText] = <"Combat/Backward">;
        }
        else{
            botInfo[BotInfo.moveDir] = 0;
            botInfo[BotInfo.statusText] = <"Combat/Keep_Distance">;
        }

        // change side step
        if(
            botInfo[BotInfo.sideStepSecond] == 0
        ){
            if(RandomInteger(0, 100) <= 50){
                botInfo[BotInfo.sideStepDir] = RandomValueInArray([Right(),Left()]);
                botInfo[BotInfo.sideStepSecond] = RandomInteger(0, 3);
            }
            else{
                botInfo[BotInfo.sideStepDir] = 0;
                botInfo[BotInfo.sideStepSecond] = RandomInteger(0, 3);
            }
        }

        // check stack
        if(isStacking){
            StartMove(-botInfo[BotInfo.sideStepDir]);
            while(RandomInteger(0, 100) <= 40){
                StartHoldingButton(ep, Button.Jump);
                Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
                StopHoldingButton(ep, Button.Jump);
            }
        }

        // set move direction
        if(botInfo[BotInfo.moveDir] != 0 && botInfo[BotInfo.sideStepDir] != 0){
            StartMove(botInfo[BotInfo.moveDir] + botInfo[BotInfo.sideStepDir]);
        }
        else if(botInfo[BotInfo.moveDir] == 0 && botInfo[BotInfo.sideStepDir] != 0){
            StartMove(botInfo[BotInfo.sideStepDir]);
        }
        else if(botInfo[BotInfo.moveDir] != 0 && botInfo[BotInfo.sideStepDir] == 0){
            StartMove(botInfo[BotInfo.moveDir]);
        }
        else{
            StopMove();
        }

        Wait(botInfo[BotInfo.watchUpdateRate], WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/Bot/State/Combat/sideStepSecond"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    0 < botInfo[BotInfo.sideStepSecond]
){
    while(true){
        Wait(1, WaitBehavior.AbortWhenFalse);
        botInfo[BotInfo.sideStepSecond] --;
    }
}

// Debug -----------------------------------------------
disabled rule: "Debug/ReloadBotAsset"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Interact)
){
    WaitLongPressConfirm();
    DestroyAllBot();
    CreateAllBotByAsset();
}

disabled rule: "Debug/ShowDebugInfo"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){  
    // show status text
    CreateInWorldText(
        HostPlayer(), botInfo[BotInfo.statusText],
        ep + (Up() * 3), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);

    // show targetPos path
    CreateBeamEffect(
        ep.botInfo[BotInfo.state] == State.Combat || ep.botInfo[BotInfo.state] == State.Searching ? HostPlayer() : null,
        BeamType.GoodBeam,
        EyePosition(), botInfo[BotInfo.targetPos],
        Color.Red,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show targetPos
    CreateEffect(
        ep.botInfo[BotInfo.state] == State.Searching ? HostPlayer() : null,
        Effect.Ring, Color.Red,
        botInfo[BotInfo.targetPos], targetPosRange, EffectRev.VisibleToPositionAndRadius);
}