// A script as perk functions

import "Utility.ostw";
import "Debug.ostw";

// Function enable team is Team1

// TAG System ----------
define enableOverLoadMeasures: true;
define overloadSecondLimit: 5;
globalvar define overloadSecond;
globalvar define resetPerkPlayer;
playervar define resetPerkType;

rule: "System/ServerOverLoadMeasures"
Event.OngoingGlobal
if(
    enableOverLoadMeasures
){
    // To avoid shutdown due to server overload,
    //  reset the perk to reduce the load
    //  if the overload continues for a certain period of time.
    
    // Since the value of ServerLoad() changes frequently,
    // do not bind it to "Condition" and monitor it by polling.
    Wait(1, WaitBehavior.AbortWhenFalse);

    // count duration of overload
    if(255 <= ServerLoad()){
        overloadSecond ++;
    }
    else{
        overloadSecond = 0;
    }

    if(overloadSecond >= overloadSecondLimit){
        overloadSecond = 0;

        // abort perk
        dbgMsg("!!! Player's perk was force reset by server over load !!!");
        resetPerkPlayer = 
            FilteredArray(
                AllPlayers(Team.Team1),
                ArrayElement().perkState == PerkState.Using
        );
        for(gLoopIndex = 0; gLoopIndex < CountOf(resetPerkPlayer); gLoopIndex++){
            resetPerkPlayer[gLoopIndex].resetPerkType = resetPerkPlayer[gLoopIndex].perkType;
            resetPerkPlayer[gLoopIndex].perkState = PerkState.Non;
        }
        Wait(4, WaitBehavior.IgnoreCondition);
        // reset perk
        for(gLoopIndex = 0; gLoopIndex < CountOf(resetPerkPlayer); gLoopIndex++){
            resetPerkPlayer[gLoopIndex].perkType = resetPerkPlayer[gLoopIndex].resetPerkType;
            resetPerkPlayer[gLoopIndex].perkState = PerkState.Ready;
        }
    }

    LoopIfConditionIsTrue();
}

globalvar define lotteryPerkList;
playervar define perkCratePosition;
playervar define perkCrateState;
enum PerkCrateState{
    NotDropped,
    Dropped
}
playervar define perkCrateEntitys;
playervar define perkType;
enum PerkType{  // TAG perk type
    Non,
    HighJump,
    GrapplingBeam,
    Sprinter,
    Adrenaline,
    Savior,
    Fearless,
    SteelFormation,
    PersonalShelter,
    BioticStation,
    TrapBeam,
    BattleFlag,
    ChainExplosion,
    IceAge,
    AimHack,
    Vampire,
    ShotCaller,
    GrudgeFireBall,
    ArtillerySupport,
    CruisingMissile,
    CarePackage,
    DeathFromAbove,
    LegendalyNinja,
    MachDelivery,
    Juggernaut,
    BeamSniper,
    DragonStorm,
    Titan,
    Annihilator
}
playervar define perkState;
enum PerkState{
    Non,
    Ready,
    Using
}

define enableDebugPerk: true;  // TAG enable Debug Perk
playervar define perkHudEntitys;

rule: "Perk/lotteryPerkList // list of parks you can pick up"
Event.OngoingGlobal
{
    if(!enableDebugPerk){
        lotteryPerkList = [     // TAG lottery perk list
            PerkType.HighJump, 
            PerkType.GrapplingBeam,
            PerkType.Sprinter,
            PerkType.Adrenaline,
            PerkType.Savior,
            PerkType.Fearless,
            PerkType.SteelFormation,
            PerkType.PersonalShelter,
            PerkType.BioticStation,
            PerkType.BioticStation,
            PerkType.TrapBeam,
            PerkType.BattleFlag,
            PerkType.ChainExplosion,
            PerkType.IceAge,
            PerkType.AimHack,
            PerkType.Vampire,
            PerkType.ShotCaller,
            PerkType.GrudgeFireBall,
            PerkType.GrudgeFireBall,
            PerkType.GrudgeFireBall,
            PerkType.ArtillerySupport,
            PerkType.ArtillerySupport,
            PerkType.CruisingMissile,
            PerkType.CruisingMissile,
            PerkType.CarePackage,
            PerkType.DeathFromAbove,
            PerkType.LegendalyNinja,
            PerkType.MachDelivery,
            PerkType.Juggernaut,
            PerkType.BeamSniper,
            PerkType.DragonStorm,
            PerkType.Titan,
            PerkType.Annihilator
        ];
    }
    else{
        lotteryPerkList = [     // TAG lottery perk list for debug
            PerkType.GrudgeFireBall
        ];

        CreateHudText(HostPlayer(),
            null,
            null,
            "enable Debug Perk",
            Location.Left, -1,
            Color.White, Color.White, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    }
}

rule: "Perk/CreatState/NotDropped"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.NotDropped
){
    // Reset param
    perkCratePosition = 0;
    // Hide perk effect and text
    DestroyInWorldText(perkCrateEntitys[0]);
    DestroyEffect(perkCrateEntitys[1]);
}

rule: "Perk/CreatState/Dropped"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped
){
    // show perk effect and text
    CreateInWorldText(
        AllPlayers(), "Perk Crate", 
        perkCratePosition, 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkCrateEntitys[0] = LastTextID();
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkCratePosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkCrateEntitys[1] = LastCreatedEntity();
}

rule: "Perk/Enemy/dropPerkCrate // drop by low probability on death"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    IsDead() &&
    IsOnGround() &&
    perkCrateState == PerkCrateState.NotDropped
){
    // The more people who do not have a park, the higher the drop rate
    if(RandomInteger(1, 100) <= 
        ( 
            // Number of players who do not have a perk
            CountOf(FilteredArray(AllPlayers(Team.Team1), (ArrayElement().perkState == PerkState.Non)))
            * 3.0   // TAG perk drop rate
        )
    ){
        // Set perk crate position from killed enemry position
        perkCratePosition = PositionOf() + PositionOffset();
        perkCrateState = PerkCrateState.Dropped;
    }
}

rule: "Perk/Enemy/clearPerkCrate //by 30second timer"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped
){
    // delete perk crate after a some time
    Wait(30, WaitBehavior.AbortWhenFalse);  // wait clear perk
    perkCrateState = PerkCrateState.NotDropped;
}

define pickupRange : 2.5;
playervar define playerClosestCrate;

rule: "Perk/Enemy/perkPickUpByPlayer //Giving a park to the player who touched the crate"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped &&
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkState == PerkState.Non &&
                DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
            )
        )
    ) > 0
){
    // When a player approaches the position where the perk crate drops,
    //  give the player a random perk
    WaitConditionConfirmed();
    playerClosestCrate = 
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ArrayElement().perkState == PerkState.Non &&
                    DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
                )
            )
        );
    // play pickup effect, message
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, playerClosestCrate, 1);
    PlayEffect(
        playerClosestCrate, PlayEffect.BuffExplosionSound,
        Color.White, playerClosestCrate, MaxLength());
    SmallMessage(playerClosestCrate, "Got perk. Check detail from left list.");
    // set perk
    playerClosestCrate.perkType = RandomValueInArray(lotteryPerkList);
    playerClosestCrate.perkState = PerkState.Ready;
    // delete perk crate when picked up
    perkCrateState = PerkCrateState.NotDropped;
}

rule: "Perk/Enemy/alreadykPickUpByPlayer"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped &&
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkState != PerkState.Non &&
                DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
            )
        )
    ) > 0
){
    WaitConditionConfirmed();
    playerClosestCrate = 
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ArrayElement().perkState != PerkState.Non &&
                    DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
                )
            )
        );

    // If player already have perk
    SmallMessage(playerClosestCrate, "Already have perk.");
    SmallMessage(playerClosestCrate, <"First, long hold interact button <0> to cancel current perk.", ButtonGuide(Button.Interact)> );
}

rule: "Perk/Player/ParkState/Non"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Non
){
    // Hide perk hud
    HidePerkHUD();
}

rule: "Perk/Player/ParkState/Ready"
Event.OngoingPlayer
Team.Team1
Player.All
if(perkState == PerkState.Ready){
    // Update perk hud
    HidePerkHUD();
    ShowPerkHUD();
}

rule: "Perk/Player/ParkState/Using"
Event.OngoingPlayer
Team.Team1
Player.All
if(perkState == PerkState.Using){
    // Update perk hud
    HidePerkHUD();
    ShowPerkHUD();
}

// TAG Common Property ----------
class PerkHero{
    public define hero = null;
    public define statusUnkillable = false;
    public define statusInvincible = false;
    public define primaryFireEnabled = true;
    public define secondaryFireEnabled = true;
    public define ability1Enabled = true;
    public define ability2Enabled = true;
    public define maxHealth = 100;
    public define healingReceived = 100;
    public define damageDealt = 100;
    public define gravity = 100;
    public define moveSpeed = 100;
    public define projectileSpeed = 100;
    public define ultimateCharge = 0;
}

void ForcePlayerPerkHero(
    define target,
    PerkHero perkHero
)"Subroutine/ForcePlayerPerkHero"{
    // set hero
    if(perkHero.hero != null){
        target.originalHero = HeroOf(target);
        ForcePlayerHero(EventPlayer(), perkHero.hero);
    }
    
    // set primaryFireEnabled
    SetPrimaryFireEnabled(target, perkHero.primaryFireEnabled);
    // set secondaryFireEnabled
    SetSecondaryFireEnabled(target, perkHero.secondaryFireEnabled);
    // set ability1Enabled
    SetAbility1Enabled(target, perkHero.ability1Enabled);
    // set ability2Enabled
    SetAbility2Enabled(target, perkHero.ability2Enabled);
    
    // set damageDealt
    SetDamageDealt(target, perkHero.damageDealt);
    // set gravity
    SetGravity(target, perkHero.gravity);
    // set moveSpeed
    SetMoveSpeed(target, perkHero.moveSpeed);
    // set projectileSpeed
    SetProjectileSpeed(target, perkHero.projectileSpeed);

    // set maxHealth. 
    SetMaxHealth(target, perkHero.maxHealth);
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait change MaxHealth
    // heal to maxHealth. Heal before set healingReceived
    Heal(target, null, MaxValue());
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait heal
    // set healingReceived
    SetHealingReceived(target, perkHero.healingReceived);
    // set ultimateCharge
    SetUltimateCharge(target, perkHero.ultimateCharge);

    // set statusUnkillable
    if(perkHero.statusUnkillable) SetStatus(target, null, Status.Unkillable, MaxValue());
    // set statusUnkillable
    if(perkHero.statusInvincible) SetStatus(target, null, Status.Invincible, MaxValue());
}

void StopForcingPerkHero(define target)"Subroutine/StopForcingPerkHero"{
    // reset hero
    ForcePlayerHero(target, target.originalHero);
    StopForcingHero(target);

    // reset primaryFireEnabled
    SetPrimaryFireEnabled(target, true);
    // reset secondaryFireEnabled
    SetSecondaryFireEnabled(target, true);
    // reset ability1Enabled
    SetAbility1Enabled(target, true);
    // reset ability2Enabled
    SetAbility2Enabled(target, true);

    // reset damageDealt
    SetDamageDealt(target, DefaultPercentage());
    // reset gravity
    SetGravity(target, DefaultPercentage());
    // reset moveSpeed
    SetMoveSpeed(target, DefaultPercentage());
    // reset projectileSpeed
    SetProjectileSpeed(target, DefaultPercentage());
    // reset ultimateCharge
    SetUltimateCharge(target, 0);

    // reset healingReceived
    SetHealingReceived(target, DefaultPercentage());
    // reset maxHealth
    SetMaxHealth(target, DefaultPercentage());
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait change MaxHealth
    // heal to maxHealth. Heal after reset healingReceived
    Heal(target, null, MaxValue());
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait heal

    // reset statusUnkillble
    ClearStatus(target, Status.Unkillable);
    // reset statusInvincible
    ClearStatus(target, Status.Invincible);
}

playervar define perkTimeLimit;
playervar define originalHero;
playervar define perkName = "";
playervar define perkDetail = "";

playervar define perkEffectAndText;
playervar define perkEffectStatus;
enum PerkEffectStatus{
    Ready,
    Launched,
    Triggered,
    Cooldown
}
playervar define aimPosition;
playervar define aimPosition2;
playervar define landPosition;
playervar define landPosition2;
playervar define perkPosition;
playervar define perkPosition2;
playervar define perkTargets;

// show perk name and player name
define CreatePerkTitleHud(define title):
    CreateHudText(AllPlayers(),
        <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), title>, null, null,
        Location.Left, (SlotOf() * 10) + 0,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk detail
define CreatePerkDetailHud(define detail):
    CreateHudText(AllPlayers(),
        null, detail, null,
        Location.Left, (SlotOf() * 10) + 1,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk ready status
define CreatePerkReadyHud():
    CreateHudText(AllPlayers(),
        null, null, <"  perk ready. hold interact button <0> to active.", ButtonGuide(Button.Interact)>,
        Location.Left, (SlotOf() * 10) + 2,
        Color.Team1, Color.White, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk effect status
define CreatePerkEffectHud(define text):
    CreateHudText(EventPlayer(),
        null, null, text,
        Location.Top, 3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk active status and active limit time
define CreatePerkActiveHud():
    CreateHudText(AllPlayers(),
        null, null, <"  perk active until <0> second. long hold interact button <1> to cancel.", perkTimeLimit, ButtonGuide(Button.Interact)>,
        Location.Left, (SlotOf() * 10) + 2,
        Color.Team1, Color.White, Color.Orange,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show active perk name on player head up
define CreateHeadUpText(define text):
    CreateInWorldText(
        AllPlayers(),
        text,
        EventPlayer(), 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);

// show each perk hud
void ShowPerkHUD()"Subroutine/ShowPerkHUD"{
    perkName = "";
    perkDetail = "";

    // TAG perk detail text HUD
    if(perkType == PerkType.HighJump){
        perkName = "High Jump";
        perkDetail = "jump more higher and can stay in air a little. Can avoid danger or move to high places.";
    }
    else if(perkType == PerkType.GrapplingBeam){
        perkName = "Grappling Beam";
        perkDetail = "Shot grappling beam and move quickly in air. If aiming enemy, pull enemy to you.";
    }
    else if(perkType == PerkType.Sprinter){
        perkName = "Sprinter";
        perkDetail = "Move faster when keep moving. Reset by stop or received damage.";
    }
    else if(perkType == PerkType.Adrenaline){
        perkName = "Adrenaline";
        perkDetail = "The less health you have, the faster you move. Ideal for avoiding danger.";
    }
    else if(perkType == PerkType.Savior){
        perkName = "Savior";
        perkDetail = "Instantly revives teammate. Stuns enemy when attack enemy near weakened teammate.";
    }
    else if(perkType == PerkType.Fearless){
        perkName = "Fearless";
        perkDetail = "The more enemies around you, the more you deal damage and receive heal.";
    }
    else if(perkType == PerkType.SteelFormation){
        perkName = "Steel Formation";
        perkDetail = "Reduce half received damage of near teammate and you. Let's unite.";
    }
    else if(perkType == PerkType.PersonalShelter){
        perkName = "Personal Shelter";
        perkDetail = "Place safe shelter. but for personal use only. Recommend for sniper or support hero.";
    }
    else if(perkType == PerkType.BioticStation){
        perkName = "Biotic Station";
        perkDetail = "Place powerful healing field. But effective time is short.";
    }
    else if(perkType == PerkType.TrapBeam){
        perkName = "Trap Beam";
        perkDetail = "Place beam to between own position and aiming position, and stun touched enemy.";
    }
    else if(perkType == PerkType.BattleFlag){
        perkName = "Battle Flag";
        perkDetail = "Teammate can teleport at you from spawn room. Promote ultimate charge of near teammates and you.";
    }
    else if(perkType == PerkType.ChainExplosion){
        perkName = "Chain Explosion";
        perkDetail = "Killed enemy explodes and splash addtinal damage to around. Explosion is chain around.";
    }
    else if(perkType == PerkType.IceAge){
        perkName = "Ice Age";
        perkDetail = "killed enemy explode and splash freeze effect to around. Freeze time is short but range is wide.";
    }
    else if(perkType == PerkType.AimHack){
        perkName = "Aim Hack";
        perkDetail = "Automatically aim at enemy's head. No problem, bot can't report.";
    }
    else if(perkType == PerkType.Vampire){
        perkName = "Vampire";
        perkDetail = "When deal damage to enemy, absorbs half of dealt damage as own health.";
    }
    else if(perkType == PerkType.ShotCaller){
        perkName = "Shot Caller";
        perkDetail = "When use ultimate ability, teammate's ultimate ability be instantly full charged.";
    }
    else if(perkType == PerkType.GrudgeFireBall){
        perkName = "Grudge Fire Ball";
        perkDetail = "Convert received damage to power and shoot as fire ball. If more power have, bigger explosion.";
    }
    else if(perkType == PerkType.ArtillerySupport){
        perkName = "Artillery Support";
        perkDetail = "Request artillery fire support to aim position. Attack wide area with 10-second barrage.";
    }
    else if(perkType == PerkType.CruisingMissile){
        perkName = "Cruising Missile";
        perkDetail = "Large missile that guiding to aim position. Destroy enemies of wide area.";
    }
    else if(perkType == PerkType.CarePackage){
        perkName = "Care Package";
        perkDetail = "Request drop of support supplies. Can get multiple perk crates.";
    }
    else if(perkType == PerkType.DeathFromAbove){
        perkName = "Death From Above";
        perkDetail = "Raining cannon shells and bullets from gunship. Turn the earth into hell!";
    }
    else if(perkType == PerkType.LegendalyNinja){
        perkName = "Legendaly Ninja";
        perkDetail = "Ninja with super agility, dragon blade, immortality. Can add activity time by kill enemy.";
    }
    else if(perkType == PerkType.MachDelivery){
        perkName = "Mach Delivery";
        perkDetail = "When kill or deal critical damage by use pulse bomb, pulse bomb be instantly full charged.";
    }
    else if(perkType == PerkType.Juggernaut){
        perkName = "Juggernaut";
        perkDetail = "Heavy mechanical infantry with plasma auto canon and powerful gravity bomb.";
    }
    else if(perkType == PerkType.BeamSniper){
        perkName = "Beam Sniper";
        perkDetail = "Sniper with powerful beam rifle. Penetrates wall and enemy body when max charge shot.";
    }
    else if(perkType == PerkType.DragonStorm){
        perkName = "Dragon Storm";
        perkDetail = "Many dragons fall from sky, massive damage enemy of wide area. Can add activity time by kill enemy.";
    }
    else if(perkType == PerkType.Titan){
        perkName = "Titan";
        perkDetail = "Giant with big shield and hammer. Protect team and rampage!";
    }
    else if(perkType == PerkType.Annihilator){
        perkName = "Annihilator";
        perkDetail = "Executes nearby enemies one after another like super-fast lightning bolt.";
    }

    // TAG perk common action
    perkHudEntitys = [];
    WaitRedraw();

    // show title hud
    CreatePerkTitleHud(perkName);
    perkHudEntitys[0] = LastTextID();
    WaitRedraw();

    // show detail hud
    CreatePerkDetailHud(<" <0>", perkDetail>);
    perkHudEntitys[1] = LastTextID();
    WaitRedraw();

    // show status hud
    if(perkState == PerkState.Ready){
        CreatePerkReadyHud();
    }
    else if(perkState == PerkState.Using){
        CreatePerkActiveHud();
    }
    perkHudEntitys[2] = LastTextID();
    WaitRedraw();

    // show head up text
    if(perkState == PerkState.Using){
        CreateHeadUpText(perkName);
    }
    perkHudEntitys[3] = LastTextID();
    WaitRedraw();

    // show Aura effct
    if(perkState == PerkState.Using){
        CreateEffect(AllPlayers(), Effect.BadAura, Color.White,
            EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
        perkHudEntitys[4] = LastCreatedEntity();
        WaitRedraw();
    }
}

void HidePerkHUD()"Subroutine/HidePerkHUD"{
    DestroyHudText(perkHudEntitys[0]);
    DestroyHudText(perkHudEntitys[1]);
    DestroyHudText(perkHudEntitys[2]);
    DestroyInWorldText(perkHudEntitys[3]);
    DestroyEffect(perkHudEntitys[4]);
}

rule: "Perk/Player/usePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Ready &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    WaitLongPressConfirm();
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);
    PlayEffect(
        EventPlayer(), PlayEffect.BuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkState = PerkState.Using;
}

rule: "Perk/Player/countDownTimeLimit"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit > 0
){
    // count down perk active limit time
    WaitUpdateMediumCycle();
    perkTimeLimit -= 1;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/timeLimitOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    // lose perk by active limit time out
    WaitConditionConfirmed();
    perkState = PerkState.Non;
}

rule: "Perk/Player/cancelPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    // lose perk by cancel operation of interact key hold
    WaitCancelPressConfirm();
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkState = PerkState.Non;
}

rule: "Perk/Player/remindPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    SmallMessage(EventPlayer(), <"Forgotten perk? Hold interact button <0> to activate perk.", ButtonGuide(Button.Interact)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/losePerk //by dead"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsDead() &&
    perkState == PerkState.Using
){
    // lose perk by player dead
    perkState = PerkState.Non;
}

// TAG HighJump ----------
rule: "Perk/Player/HighJump/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = false;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud("More hold to hover in air.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to high jump.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[1] = LastTextID();
}

rule: "Perk/Player/HighJump/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/HighJump/highJump"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using &&
    !perkEffectStatus &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();
    ApplyImpulse(EventPlayer(), Up(), 18,
        Relative.ToPlayer, ContraryMotion.Cancel);
    perkEffectStatus = true;
}

rule: "Perk/Player/HighJump/hover"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using &&
    perkEffectStatus &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    Wait(0.9, WaitBehavior.AbortWhenFalse);
    for(define hovringCount = 0; hovringCount < 15; hovringCount++){
        ApplyImpulse(EventPlayer(), Up(), 1,
            Relative.ToPlayer, ContraryMotion.Cancel);
        WaitApplyImpulseCycle();
    }
}

rule: "Perk/Player/HighJump/resetUsedFlag"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using &&
    perkEffectStatus &&
    IsOnGround()
)
{
    WaitConditionConfirmed();
    perkEffectStatus = false;
}

// TAG GrapplingBeam ----------
rule: "Perk/Player/GrapplingBeam/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrapplingBeam &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = false;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold jump button <0> to shot grapple beam.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[0] = LastTextID();
}

rule: "Perk/Player/GrapplingBeam/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrapplingBeam &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/GrapplingBeam/shotGrappleBeam"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrapplingBeam &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();
    
    perkTargets = AimingPlayer();
    if(perkTargets != null){
        SetStatus(perkTargets, EventPlayer(), Status.Stunned, 1.0);
        WaitEntityImpulse();
        // pull target
        if(DistanceBetween(EventPlayer(), perkTargets) <= 100 && !perkEffectStatus){
            CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
                EventPlayer(), perkTargets,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(perkTargets, 
                VectorTowards(perkTargets, EventPlayer() + Up()),
                DistanceBetween(perkTargets, EventPlayer()) * 2.0,
                Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    else{
        // move in air
        aimPosition = AimingPosition();
        if(DistanceBetween(EventPlayer(), aimPosition) <= 100 && !perkEffectStatus){
            CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
                EventPlayer(), aimPosition,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(EventPlayer(), VectorTowards(EventPlayer(), aimPosition),
                40, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    perkEffectStatus = true;

    WaitPlayEffect();// show beam effect
    DestroyEffect(perkEffectAndText[1]);
    perkEffectStatus = false;
}

// TAG Sprinter ----------
playervar define keepMovingSecond;

rule: "Perk/Player/Sprinter/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    keepMovingSecond = 0;
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Move speed <0>%", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
}

rule: "Perk/Player/Sprinter/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset status
    SetMoveSpeed(EventPlayer(), 100);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Sprinter/updateMoveSpeed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using &&
    IsMoving()
){
    if(keepMovingSecond < 10){
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        keepMovingSecond += 1;
        perkEffectStatus = keepMovingSecond;
        perkEffectStatus *= 10;
        perkEffectStatus += 100;
        SetMoveSpeed(EventPlayer(), perkEffectStatus);
        LoopIfConditionIsTrue();
    }
}

rule: "Perk/Player/Sprinter/resetMoveSpeedByStop"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using &&
    !IsMoving()
){
    WaitConditionConfirmed();

    keepMovingSecond = 0;
    perkEffectStatus = 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
}

rule: "Perk/Player/Sprinter/resetMoveSpeedByDamage"
Event.OnDamageTaken
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using &&
    1 <= EventDamage()
){
    keepMovingSecond = 0;
    perkEffectStatus = 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
}

// TAG Adrenaline ----------
rule: "Perk/Player/Adrenaline/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Move speed <0>%", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
}

rule: "Perk/Player/Adrenaline/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset status
    SetMoveSpeed(EventPlayer(), 100);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Adrenaline/updateMoveSpeed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Using &&    
    Health() < MaxHealth()
){
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = RoundToInteger((1 - (Health() / MaxHealth())) * 100);
    perkEffectStatus += 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Adrenaline/resetMoveSpeedByFullHealth"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Using &&
    Health() == MaxHealth()
){
    perkEffectStatus = 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
}

// TAG Savior ----------
define saviorStunRange: 10;

rule: "Perk/Player/Savior/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Savior &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkTargets = EmptyArray();
}

rule: "Perk/Player/Savior/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Savior &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Savior/stunEnemy"
Event.OnDamageDealt
Team.Team1
Player.All
if(
    perkType == PerkType.Savior &&
    perkState == PerkState.Using
){
    if(Victim() != EventPlayer()){
        if(!HasStatus(Victim(), Status.Stunned)){
            perkTargets = FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ArrayElement() != EventPlayer() &&
                    Health(ArrayElement()) <= MaxHealth(ArrayElement()) / 2 &&
                    saviorStunRange >= DistanceBetween(Victim(), ArrayElement())
                )
            );
            if(perkTargets != EmptyArray()){
                
                // set stun
                SetStatus(Victim(), EventPlayer(), Status.Stunned, 3.0);
                // play blast
                PlayEffect(
                    AllPlayers(), PlayEffect.GoodExplosion,
                    Color.Yellow, Victim(), 1.0);
            }
        }
    }
}

playervar define savior;
define saviorReviveRange: 2.5;

rule: "Perk/Player/Savior/instantyRevive"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsDead() &&
    IsOnGround()&&
    CountOf(
        FilteredArray(
            AllPlayers(TeamOf()), (
                IsAlive(ArrayElement()) &&
                HasSpawned(ArrayElement()) &&
                ArrayElement().perkType == PerkType.Savior &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement()) <= saviorReviveRange
            )
        )
    ) > 0
){
    savior = ClosestPlayerTo(EventPlayer(), Team.Team1);

    // revive effect and sound
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.Yellow, EventPlayer(), 1);
    PlayEffect(
        AllPlayers(), PlayEffect.BuffExplosionSound,
        Color.White, EventPlayer(), MaxLength());

    Resurrect();

    SmallMessage(savior,
        <"<0> <1> <2>.", "revived", EventPlayer(), HeroIconString(HeroOf())>);
    SmallMessage(EventPlayer(),
        <"<0> <1> <2>.", savior, HeroIconString(HeroOf(savior)), "revivied">);
}

// TAG Fearless ----------
define fearlessRange : 13;
rule: "Perk/Player/Fearless/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Fearless &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Damage dealt & heal received <0>%", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue,
        EventPlayer(), fearlessRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
}

rule: "Perk/Player/Fearless/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Fearless &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset status
    SetDamageDealt(EventPlayer(), perkEffectStatus);
    SetHealingReceived(EventPlayer(), perkEffectStatus);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Fearless/updateDealDamage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Fearless &&
    perkState == PerkState.Using
){
    perkEffectStatus = CountOf(
        FilteredArray(
            PlayersWithinRadius(
                EventPlayer(), fearlessRange, Team.Team2, RadiusLOS.Off
            ),
            IsAlive(ArrayElement())
        )
    );
    perkEffectStatus *= 30;
    perkEffectStatus += 100;
    SetDamageDealt(EventPlayer(), perkEffectStatus);
    SetHealingReceived(EventPlayer(), perkEffectStatus);
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

// TAG SteelFormation ----------
define steelRange : 8;

rule: "Perk/Player/SteelFormation/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SteelFormation &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Formation include <0> players.", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.Orange,
        EventPlayer(), steelRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
}

rule: "Perk/Player/SteelFormation/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SteelFormation &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

define nearSteel:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.SteelFormation &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement()) <= steelRange
            )
        )
    ) > 0;

rule: "Perk/Player/SteelFormation/updateIncludePlayers"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SteelFormation &&
    perkState == PerkState.Using
){
    perkEffectStatus = CountOf(
        FilteredArray(
            PlayersWithinRadius(
                EventPlayer(), steelRange, Team.Team1, RadiusLOS.Off
            ),
            IsAlive(ArrayElement())
        )
    );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/SteelFormation/enableSteel"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    nearSteel
){
    SetDamageReceived(EventPlayer(), 50);
}

rule: "Perk/Player/SteelFormation/disableSteel"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !nearSteel
){
    SetDamageReceived(EventPlayer(), 100);
}

// TAG PersonalShelter ----------
define shelterRange : 1.0;
define inShelter:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.PersonalShelter &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement().perkPosition) <= shelterRange
            )
        )
    ) > 0;

rule: "Perk/Player/PersonalShelter/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.PersonalShelter &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 60;
    // set param
    perkPosition = PositionOf();
    // show text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Personal Shelter">,
        perkPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.White,
        perkPosition, shelterRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.White,
        perkPosition, shelterRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();        
}

rule: "Perk/Player/PersonalShelter/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.PersonalShelter &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    // reset param
    perkPosition = 0;
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/PersonalShelter/enableSafe"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    inShelter
){
    SetStatus(EventPlayer(), null, Status.PhasedOut, MaxValue());
    SetStatus(EventPlayer(), null, Status.Invincible, MaxValue());
    SetInvisible(EventPlayer(), InvisibleTo.Enemies);
}

rule: "Perk/Player/PersonalShelter/disableSafe"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !inShelter
){
    ClearStatus(EventPlayer(), Status.PhasedOut);
    ClearStatus(EventPlayer(), Status.Invincible);
    SetInvisible(EventPlayer(), InvisibleTo.None);
}

rule: "Perk/Player/PersonalShelter/exclusiveOtherPlayer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.PersonalShelter &&
    perkState == PerkState.Using &&
    1 < CountOf(
            PlayersWithinRadius(
                perkPosition, shelterRange, Team.Team1, RadiusLOS.Off))
){
    WaitApplyImpulseCycle();
    perkTargets = PlayersWithinRadius(
                perkPosition, shelterRange, Team.Team1, RadiusLOS.Off);
    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        if(perkTargets[pLoopIndex] !=
            ClosestPlayerTo(perkPosition, Team.Team1)){
            ApplyImpulse(perkTargets[pLoopIndex],
                VectorTowards(perkPosition, perkTargets[pLoopIndex] + PositionOffset()),
                10, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    LoopIfConditionIsTrue();
}

// TAG BioticStation ----------
define healRange : 6;

rule: "Perk/Player/BioticStation/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BioticStation &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 30;
    // set param
    perkPosition = PositionOf();
    // show text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Biotic Station">,
        perkPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.Yellow,
        perkPosition, healRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Yellow,
        perkPosition, healRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.Yellow,
        perkPosition, 0.25, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();   
}

rule: "Perk/Player/BioticStation/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BioticStation &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    // reset param
    perkPosition = 0;
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/BioticStation/heal"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.BioticStation &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement().perkPosition) <= healRange
            )
        )
    ) > 0
){
    Heal(EventPlayer(), EventPlayer(), 20);
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

// TAG TrapBeam ----------
playervar define detecterPosition;
define patrolCycle: 0.25;

rule: "Perk/Player/TrapBeam/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // show text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Trap Beam">,
        perkPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
        perkPosition, aimPosition,
        Color.Yellow, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Yellow,
        detecterPosition, 0.25, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // set param
    StopChasingVariable(detecterPosition);
}

rule: "Perk/Player/TrapBeam/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    // reset param
    StopChasingVariable(detecterPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/TrapBeam/deploy"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using
){
    perkPosition = PositionOf() + PositionOffset();
    aimPosition = AimingPositionIgnorePlayer();
}

rule: "Perk/Player/TrapBeam/moveDetectorToAimPosition"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using
){
    detecterPosition = perkPosition;
    UpdateEveryFrame(detecterPosition);
    ChaseVariableOverTime(detecterPosition, aimPosition,
        patrolCycle, TimeChaseReevaluation.DestinationAndDuration);
    Wait(patrolCycle, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/TrapBeam/stunByTouched"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using &&
    // Since the position of the player is judged by the feet,
    //  an offset is added and the collision judgment is shifted to the body.
    DistanceBetween(ClosestPlayerTo(detecterPosition, Team.Team2) + PositionOffset(), detecterPosition) <= 1.25
){
    perkTargets = ClosestPlayerTo(detecterPosition, Team.Team2);
    if(IsAlive(perkTargets) &&
     !HasStatus(perkTargets, Status.Stunned)){
        // set stun
        SetStatus(perkTargets, EventPlayer(), Status.Stunned, 2.0);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Yellow, perkTargets, 1.0);
    }
}

// TAG BattleFlag ----------
define battleFlagRange : 15;
rule: "Perk/Player/BattleFlag/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BattleFlag &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 360;
    // set effect
    perkEffectAndText = [];
    CreateEffect(AllPlayers(Team.Team1), Effect.Ring, Color.Blue,
        EventPlayer(), battleFlagRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[0] = LastCreatedEntity();
    // show icon
    CreateIcon(AllPlayers(), PositionOf() + (Up() * 2.5), Icon.Flag,
        IconRev.VisibleToAndPosition, Color.Blue, false);
    perkEffectAndText[1] = LastCreatedEntity();
}

rule: "Perk/Player/BattleFlag/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BattleFlag &&
    perkState == PerkState.Non
){
    // reset effect
    DestroyEffect(perkEffectAndText[0]);
    // reset icon
    DestroyIcon(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

define nearBattleFlag:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.BattleFlag &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement()) <= battleFlagRange
            )
        )
    ) > 0;

rule: "Perk/Player/BattleFlag/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
        nearBattleFlag
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 1));
    LoopIfConditionIsTrue();
}

define raisedBattleFlag:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.BattleFlag &&
                ArrayElement().perkState == PerkState.Using &&
                ArrayElement() != EventPlayer()
            )
        )
    ) > 0;

rule: "Perk/Player/BattleFlag/showOperationTeleport"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    (
        IsInSpawnRoom() &&
        raisedBattleFlag
    )
){
    WaitChangeState();
    // set hud
    CreatePerkEffectHud(<"Battle flag is raised on the battle line. Hold jump button <0> to teleport to battle flag.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[100] = LastTextID();
}

rule: "Perk/Player/BattleFlag/hideOperationTeleport"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !(
        IsInSpawnRoom() &&
        raisedBattleFlag
    )
){
    WaitChangeState();
    // reset hud
    DestroyHudText(perkEffectAndText[100]);
}

rule: "Perk/Player/BattleFlag/teleportToBattleFlag"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    (
        IsInSpawnRoom() &&
        raisedBattleFlag
    ) &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();
    perkTargets = 
        RandomValueInArray(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ArrayElement().perkType == PerkType.BattleFlag &&
                    ArrayElement().perkState == PerkState.Using
                )
            )
        );
    // teleport to battle flag
    Teleport(EventPlayer(), perkTargets);
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.Blue, perkTargets, 1);
    PlayEffect(
        AllPlayers(), PlayEffect.BuffImpactSound,
        Color.White, perkTargets, MaxLength());
    SmallMessage(perkTargets, "Teammate spawned on you.");
}

// TAG ChainExplosion ----------
rule: "Perk/Player/ChainExplosion/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ChainExplosion &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
}

rule: "Perk/Player/ChainExplosion/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ChainExplosion &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

define chainExplosionRange: 9;

rule: "Perk/Player/ChainExplosion/explosion"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.ChainExplosion &&
    perkState == PerkState.Using
){
    if(Victim() != EventPlayer()){
        WaitPlayEffect();
        // splash damage
        Damage(
            PlayersWithinRadius(
                Victim(), chainExplosionRange, Team.Team2, RadiusLOS.Off),
            EventPlayer(), 300);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Orange, Victim(), chainExplosionRange);
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosion,
            Color.Orange, Victim(), chainExplosionRange);
    }
}

// TAG IceAge ----------
rule: "Perk/Player/IceAge/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.IceAge &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
}

rule: "Perk/Player/IceAge/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.IceAge &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

define IceAgeRange: 12;

rule: "Perk/Player/IceAge/explosion"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.IceAge &&
    perkState == PerkState.Using
){
    if(Victim() != EventPlayer()){
        WaitPlayEffect();
        // splash freeze
        SetStatus(
            PlayersWithinRadius(
                Victim(), IceAgeRange, Team.Team2, RadiusLOS.Off),
            EventPlayer(), Status.Frozen, 1.5);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Aqua, Victim(), IceAgeRange);
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosion,
            Color.Aqua, Victim(), IceAgeRange);
    }
}

// TAG AimHack ----------
playervar define autoAimingTarget;
rule: "Perk/Player/AimHack/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set status
    perkEffectStatus = true;
    autoAimingTarget = null;
    perkTargets = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(perkEffectStatus ? "Aim hack Enable." : "Aim hack Disable.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to toggle aim hack.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[1] = LastTextID();
}

rule: "Perk/Player/AimHack/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Non
){
    // reset status
    StopFacing();
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/AimHack/toggleAimHack"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus){
        perkEffectStatus = false;
    }
    else{
        perkEffectStatus = true;
    }
}

rule: "Perk/Player/AimHack/startAutoAim"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    perkEffectStatus
){
    AutoAim();
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/AimHack/stopAutoAim"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    !perkEffectStatus
){
    StopFacing(EventPlayer());
    autoAimingTarget = null;
    perkTargets = 0;
}

void AutoAim()"Subroutine/AutoAim"{
    // check auto aim valid
    perkTargets = FirstOf(
        FilteredArray(
            PlayersInViewAngle(EventPlayer(), Team.Team2, 10),
            (
                autoAimingTarget == ArrayElement()
            )
        )
    );
    // if auto aim invalid
    if(perkTargets == 0){
        // stop auto aim
        if(autoAimingTarget != null){
            StopFacing(EventPlayer());
            autoAimingTarget = null;
        }
    }

    if(
        perkTargets == 0 ||     // no target
        IsDead(perkTargets) ||  // target is dead
        !IsInLineOfSight(EventPlayer(), perkTargets, BarrierLOS.NoBarriersBlock)    // target hidden
    ){
        // get near target in sight
        perkTargets = FirstOf(
            SortedArray(
                FilteredArray(
                    PlayersInViewAngle(EventPlayer(), Team.Team2, 90),
                    (
                        IsAlive(ArrayElement()) &&
                        IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock) &&
                        !HasStatus(ArrayElement(), Status.Asleep)
                    )
                ),
                DistanceBetween(EventPlayer(), ArrayElement())
            )
        );
    }
    // has target
    if(perkTargets != 0){
        // target changed
        if(autoAimingTarget != perkTargets){
            // update target
            autoAimingTarget = perkTargets;
            // start auto aim
            StartFacing(
                EventPlayer(), 
                DirectionTowards(
                    EyePosition(),
                    EyePosition(autoAimingTarget) + (Up() * 0.175)
                ),
                MaxValue(),
                Relative.ToWorld,
                FacingRev.DirectionAndTurnRate
            );
        }
        // if some target, not restart auto aim.
    }
    else{
        // stop auto aim
        if(autoAimingTarget != null){
            StopFacing(EventPlayer());
            autoAimingTarget = null;
        }
    }
}

// TAG Vampire ----------
rule: "Perk/Player/Vampire/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Vampire &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
}

rule: "Perk/Player/Vampire/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Vampire &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}


rule: "Perk/Player/Vampire/absorbsHealth"
Event.OnDamageDealt
Team.Team1
Player.All
if(
    perkType == PerkType.Vampire &&
    perkState == PerkState.Using
){
    Heal(EventPlayer(), EventPlayer(), EventDamage() / 2);
}

// TAG ShotCaller ----------
rule: "Perk/Player/ShotCaller/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;

    SetUltimateCharge(EventPlayer(), 100);
}

rule: "Perk/Player/ShotCaller/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/ShotCaller/shotCall"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    perkTargets = 
        FilteredArray(
            AllPlayers(Team.Team1),
                !(
                    ArrayElement().perkType == PerkType.ShotCaller &&
                    ArrayElement().perkState == PerkState.Using
                )
        );

    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        if(perkTargets[pLoopIndex] != EventPlayer()){
            SetUltimateCharge(perkTargets[pLoopIndex], 100);
        }
    }
}

rule: "Perk/Player/ShotCaller/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 2));
    LoopIfConditionIsTrue();
}

// TAG GrudgeFireBall ----------
define fireBallSpeed: 60;
playervar define fireBallPower;
playervar define fireBallSize;
playervar define fireBallDamageRange;

rule: "Perk/Player/GrudgeFireBall/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set status
    perkPosition = 0;
    landPosition = 0;
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Fire ball power <0>", fireBallPower>);
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to shot fire ball.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[1] = LastTextID();
}

rule: "Perk/Player/GrudgeFireBall/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Non
){
    // reset text
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    StopChasingVariable(perkPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/GrudgeFireBall/chargePowerByTakenDamage"
Event.OnDamageTaken
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    EventDamage() > 0
){
    fireBallPower += RoundToInteger(EventDamage());
}

rule: "Perk/Player/GrudgeFireBall/playFireBallTrajectory"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    perkEffectStatus == 1
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Yellow, perkPosition, fireBallSize);

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/GrudgeFireBall/shot"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    HostPlayer() &&
    perkEffectStatus == 100 &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    AbortIf(fireBallPower < 0);

    perkPosition = EyePosition();
    landPosition = AimingPositionIgnorePlayer();
    // start movement
    UpdateEveryFrame(perkPosition);
    ChaseVariableAtRate(
        perkPosition, landPosition, fireBallSpeed,
        RateChaseReevaluation.DestinationAndRate);

    fireBallSize = fireBallPower * 0.003;
    fireBallDamageRange = fireBallPower * 0.006;
    // show ball
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Orange,
        perkPosition, fireBallSize, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // show aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Orange,
        perkPosition, fireBallSize * 1.5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition + (FacingDirectionOf() * 1), fireBallSize);
    // play shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.DebuffImpactSound,
        Color.White, AllPlayers(), fireBallSize * 30);

    perkEffectStatus = 1;
}

rule: "Perk/Player/GrudgeFireBall/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkEffectStatus == 1
){
    Wait(DistanceBetween(perkPosition, landPosition) / fireBallSpeed,
        WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/hitToPlyer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkEffectStatus == 1 &&
    IsAlive(ClosestPlayerTo(perkPosition, Team.Team2)) &&
    DistanceBetween(
        perkPosition,
        ClosestPlayerTo(perkPosition, Team.Team2))
    <= fireBallSize * 0.5
){
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/timeOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkEffectStatus == 1
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

void ExplodeFireBall()"Subroutine/ExplodeFireBall"{
    perkEffectStatus = 2;

    // stop movement
    StopChasingVariable(perkPosition);
    // hide ball
    DestroyEffect(perkEffectAndText[2]);
    // hide aura
    DestroyEffect(perkEffectAndText[3]);
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition, fireBallDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply Impulse
    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        ApplyImpulse(perkTargets[pLoopIndex],
            VectorTowards(perkPosition, perkTargets[pLoopIndex] + Up()),
            fireBallSize * 10, Relative.ToWorld, ContraryMotion.Cancel);
    }
    // show impulse
    WaitEntityImpulse();
    // damage
    Damage(perkTargets, EventPlayer(), fireBallPower);
    fireBallPower = 0;
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(), fireBallSize * 30);
    // play blast effect
    PlayContinuousBlast(perkPosition,
        fireBallDamageRange,
        fireBallSize < 7 ? fireBallSize : 7,
        Color.Orange);

    Wait(1, WaitBehavior.IgnoreCondition);
    perkEffectStatus = 100;
}

// TAG ArtillerySupport ----------
define artilleryLandingRange: 20;
define artilleryDamageRange: 7;
playervar define landZonePosition;
define attackTime: 10;
define attackNumber: 20;

rule: "Perk/Player/ArtillerySupport/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtillerySupport &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 13;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    landPosition2 = -1;  
    perkEffectStatus = 0; 
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Artillery Support">,
        landZonePosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    CreateInWorldText(
        AllPlayers(), <"Artillery Support incoming.">,
        landZonePosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // shell body1
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // shell body2
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landZonePosition, artilleryLandingRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
}
rule: "Perk/Player/ArtillerySupport/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtillerySupport &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/ArtillerySupport/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtillerySupport &&
    perkState == PerkState.Using
){
    // set shell land position to aiming position
    landZonePosition = AimingPosition();
    Wait(3, WaitBehavior.AbortWhenFalse);
    DestroyEffect(perkEffectAndText[4]);
    perkEffectStatus = attackNumber;
}

rule: "Perk/Player/ArtillerySupport/launchShell"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtillerySupport &&
    perkState == PerkState.Using &&
    perkEffectStatus > 0
){
    // set shell at random horizontal positions over 50
    perkPosition = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(10, 0, 10);
    // start shell move
    landPosition = landZonePosition + RandomPosition(artilleryLandingRange / 2, 0, artilleryLandingRange / 2);
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, attackTime / attackNumber,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(attackTime / attackNumber, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(perkPosition);
    perkPosition = 0;
    async ExplodeShell(landPosition);
    perkEffectStatus -- ;

    // set shell at random horizontal positions over 50
    perkPosition2 = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(10, 0, 10);
    // start shell move
    landPosition2 = landZonePosition + RandomPosition(artilleryLandingRange / 2, 0, artilleryLandingRange / 2);
    UpdateEveryFrame(perkPosition2);
    ChaseVariableOverTime(
        perkPosition2, landPosition2, attackTime / attackNumber,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(attackTime / attackNumber, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(perkPosition2);
    perkPosition = 0;
    async ExplodeShell(landPosition2);
    perkEffectStatus -- ;

    LoopIfConditionIsTrue();
}

void ExplodeShell(define position)"Subroutine/ExplodeShell"{
    // get target
    perkTargets = 
        PlayersWithinRadius(
            position, artilleryDamageRange,
            Team.All, RadiusLOS.Off);
    // damage
    Damage(
        PlayersWithinRadius(
            position, artilleryDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), 300);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, position, 300);
    // play blast effect
    PlayContinuousBlast(position, artilleryDamageRange,
        2, Color.Yellow);
}

// TAG CruisingMissile ----------
define missleDamageRange: 20;
rule: "Perk/Player/CruisingMissile/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 10;
    // set status
    perkTargets = 0;
    perkEffectStatus = false;
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Cruising Missile">,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    CreateInWorldText(
        AllPlayers(), <"Cruising missile landing at <0> second. Brace for impact!", perkTimeLimit>,
        landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // missile body
    CreateEffect(AllPlayers(), Effect.Orb, Color.Red,
        perkPosition, 10, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // missile flare
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.White,
        perkPosition, 20, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // missle sound
    CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White,
        AllPlayers(), MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, missleDamageRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, 0.1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[6] = LastCreatedEntity();  
    // landing zone warning icon
    CreateIcon(AllPlayers(), landPosition + (PositionOffset()*2), Icon.Warning,
        IconRev.VisibleToAndPosition, Color.Yellow, true);
    perkEffectAndText[7] = LastCreatedEntity();
    // set hud
    CreatePerkEffectHud(perkEffectStatus ? "locked landing point." : "guiding landing point.");
    perkEffectAndText[8] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to lock landing point.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[9] = LastTextID();  
}
rule: "Perk/Player/CruisingMissile/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    DestroyEffect(perkEffectAndText[6]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);
    // reset icon
    DestroyIcon(perkEffectAndText[7]);
    // reset hud
    DestroyHudText(perkEffectAndText[8]);
    DestroyHudText(perkEffectAndText[9]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/CruisingMissile/toggleLockPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus){
        perkEffectStatus = false;
    }
    else{
        perkEffectStatus = true;
    }
}

rule: "Perk/Player/CruisingMissile/playMissleBooster"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 3.0);

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CruisingMissile/launchMissile"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using
){
    // set missiles at random horizontal positions over 500m
    perkPosition = EventPlayer() +
        Vector(0, 500, 0) + RandomPosition(250, 0, 250);
    // set missile land position to aiming position
    landPosition = AimingPosition();
    // start missile move
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, perkTimeLimit,
        TimeChaseReevaluation.DestinationAndDuration);
}

rule: "Perk/Player/CruisingMissile/aimLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    !perkEffectStatus
){
    // chase missile land position to aiming position
    WaitUpdateShortCycle();
    aimPosition = AimingPosition();
    UpdateEveryFrame(landPosition);
    ChaseVariableAtRate(
        landPosition, aimPosition, 10,
        RateChaseReevaluation.DestinationAndRate);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CruisingMissile/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);

    // apply knockout
    SetStatus(
        PlayersWithinRadius(
            perkPosition, missleDamageRange,
            Team.Team1, RadiusLOS.Off
        ), null, Status.KnockedDown, 3);
    // apply Impulse
    perkTargets = 
        PlayersWithinRadius(
            aimPosition, missleDamageRange,
            Team.Team2, RadiusLOS.Off);
    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        ApplyImpulse(perkTargets[pLoopIndex],
            VectorTowards(perkPosition, perkTargets[pLoopIndex] + Up()),
            2000, Relative.ToWorld, ContraryMotion.Cancel);
    }
    WaitEntityImpulse();
    // damage
    Damage(
        PlayersWithinRadius(
            perkPosition, missleDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), MaxValue());
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(), MaxLength());
    // play blast effect
    PlayContinuousBlast(perkPosition, missleDamageRange,
        7, Color.Orange);
    perkState = PerkState.Non;
}

// TAG CarePackage ----------
rule: "Perk/Player/CarePackage/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 10;
    // set param
    perkEffectStatus = 0;
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Care Package">,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    CreateInWorldText(
        AllPlayers(), <"Care package arrival at <0> second. Stand by...", perkTimeLimit>,
        landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // package body
    CreateEffect(AllPlayers(), Effect.Orb, Color.Turquoise,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // package flare
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.White,
        perkPosition, 5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // package sound
    CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White,
        AllPlayers(), MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // landing zone smoke
    CreateEffect(AllPlayers(), Effect.Cloud, Color.Turquoise,
        landPosition, 5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity();
    // landing zone light shaft
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.Turquoise,
        landPosition, 0.1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[6] = LastCreatedEntity();
    // landing zone check icon
    CreateIcon(AllPlayers(), landPosition + PositionOffset(), Icon.Heart,
        IconRev.VisibleToAndPosition, Color.Turquoise, true);
    perkEffectAndText[7] = LastCreatedEntity();
}

rule: "Perk/Player/CarePackage/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    DestroyEffect(perkEffectAndText[6]);
    StopChasingVariable(perkPosition);
    // reset icon
    DestroyIcon(perkEffectAndText[7]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/CarePackage/playPackageBooster"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 1.0);

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CarePackage/dropPackage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using
){
    // set package at horizontal positions over 250
    perkPosition = EventPlayer() +
        Vector(0, 125, 0) + RandomPosition(0, 0, 0);
    // set package land position to player position
    landPosition = PositionOf();
    // start package move
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, perkTimeLimit,
        TimeChaseReevaluation.DestinationAndDuration);
}

rule: "Perk/Player/CarePackage/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    StopChasingVariable(perkPosition);

    // play landing effect
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosion,
        Color.Turquoise, perkPosition, 10);
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Turquoise, perkPosition, 10);
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(), MaxLength());
    
    // delploy perk crate around of landPosition
    perkEffectStatus = RandomInteger(4, 6);
    // Use variables of enemy players who have not dropped the crate
    perkTargets = FilteredArray(
        AllPlayers(Team.Team2),
        ArrayElement().perkCrateState == PerkCrateState.NotDropped);
    if(CountOf(perkTargets) < perkEffectStatus){
        perkEffectStatus = CountOf(perkTargets);
    }
    // Set perk crate position to around of landPosition
    for(pLoopIndex = 0; pLoopIndex < perkEffectStatus; pLoopIndex++){
        perkTargets[pLoopIndex].perkCratePosition = NearestWalkablePosition(
            landPosition + RandomPosition(3, 0, 3)) + PositionOffset();    
        perkTargets[pLoopIndex].perkCrateState = PerkCrateState.Dropped;
    }
    perkState = PerkState.Non;
}

// TAG DeathFromAbove ----------
rule: "Perk/Player/DeathFromAbove/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set param
    perkEffectStatus = true;   // set fly mode
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Press secondary fire button <0> to use Afterburner.", ButtonGuide(Button.SecondaryFire)>);
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Press jump button <0> to flying mode.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[1] = LastTextID();
    CreatePerkEffectHud(<"Press crouch button <0> to landing mode.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[2] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Bastion;
    perkHero.statusUnkillable = true;
    perkHero.secondaryFireEnabled = false;
    perkHero.maxHealth = 300;
    perkHero.healingReceived = 0;
    perkHero.gravity = 5;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // set status
    StartScalingPlayer(EventPlayer(), 1.5, false);
    StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);
    // change mode
    PressButton(EventPlayer(), Button.Ability1);
    // fly
    PressButton(EventPlayer(), Button.Jump);
}

rule: "Perk/Player/DeathFromAbove/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Non
){
    // reset status
    ClearStatus(EventPlayer(), Status.Rooted);
    StopScalingPlayer(EventPlayer());
    StopModifyingHeroVoiceLines(EventPlayer());
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    DestroyHudText(perkEffectAndText[2]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/DeathFromAbove/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/DeathFromAbove/changeFlyingMode"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !perkEffectStatus &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    SetStatus(EventPlayer(), null, Status.Rooted, MaxValue());
    SetGravity(EventPlayer(), 5);
    perkEffectStatus = true;
}

rule: "Perk/Player/DeathFromAbove/changeToLandingMode"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    ClearStatus(EventPlayer(), Status.Rooted);
    SetGravity(EventPlayer(), 100);
    perkEffectStatus = false;
}

rule: "Perk/Player/DeathFromAbove/flying"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus
){
    // if near surface
    if(
        DistanceBetween(EventPlayer(), 
        NearestWalkablePosition(EventPlayer())) <= 16
    ){
        // float    
        ApplyImpulse(EventPlayer(), Up(), 0.3,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    
    // if press SF button
    if(IsButtonHeld(EventPlayer(), Button.SecondaryFire)){
        // move forword
        ApplyImpulse(EventPlayer(), Forward(), 1.0,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    else{
        ApplyImpulse(EventPlayer(), Forward(), 0.1,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DeathFromAbove/playAfterburner"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    // play Afterburner
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Orange, PositionOf(EventPlayer()), 0.5);
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

define splashDamageRange: 1.5;

rule: "Perk/Player/DeathFromAbove/splashDamage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    IsFiringPrimary()
)
{
    // get aimPosition
    aimPosition = AimingPosition();
    perkPosition = RandomPosition(1.0, 1.0, 1.0);
    // splash damage
    Damage(
        PlayersWithinRadius(
            aimPosition + perkPosition, splashDamageRange,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 45);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Yellow, aimPosition + perkPosition, splashDamageRange);
    
    WaitContinuousBlastCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DeathFromAbove/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DeathFromAbove/setTankModeDamageBuff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    SetDamageDealt(EventPlayer(), 200);
}

rule: "Perk/Player/DeathFromAbove/resetTankModeDamageBuff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !IsUsingUltimate()
){
    SetDamageDealt(EventPlayer(), 100);
}

// TAG LegendalyNinja ----------
rule: "Perk/Player/LegendalyNinja/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = false;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold jump button <0> to shot grapple hook.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Genji;
    perkHero.statusInvincible = true;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/LegendalyNinja/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/LegendalyNinja/shotGrappleHook"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();

    perkTargets = AimingPlayer();
    if(perkTargets != null){
        SetStatus(perkTargets, EventPlayer(), Status.Stunned, 1.0);
        WaitEntityImpulse();
        // pull target
        if(DistanceBetween(EventPlayer(), perkTargets) <= 100 && !perkEffectStatus){
            CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
                EventPlayer(), perkTargets,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(perkTargets, 
                VectorTowards(perkTargets, EventPlayer() + Up()),
                DistanceBetween(perkTargets, EventPlayer()) * 2.0,
                Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    else{
        // move in air
        aimPosition = AimingPosition();
        if(DistanceBetween(EventPlayer(), aimPosition) <= 100 && !perkEffectStatus){
            CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
                EventPlayer(), aimPosition,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(EventPlayer(), VectorTowards(EventPlayer(), aimPosition),
                40, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    perkEffectStatus = true;

    WaitPlayEffect();// show beam effect
    DestroyEffect(perkEffectAndText[1]);
    perkEffectStatus = false;
}

rule: "Perk/Player/LegendalyNinja/addActivityTime"
Event.OnElimination
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using
){
    perkTimeLimit += 2;
}

rule: "Perk/Player/LegendalyNinja/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 8));
    LoopIfConditionIsTrue();
}

// TAG MachDelivery ----------
rule: "Perk/Player/MachDelivery/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set param
    perkEffectStatus = false;
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Tracer;
    perkHero.statusUnkillable = true;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
}

rule: "Perk/Player/MachDelivery/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Non
){
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/MachDelivery/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/MachDelivery/startBombDelifering"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    perkEffectStatus = true;
    Wait(2.5, WaitBehavior.RestartWhenTrue);    // wait release delifering
    perkEffectStatus = false;
}

rule: "Perk/Player/MachDelivery/rechargeByBombCriticalDamage"
Event.OnDamageDealt
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    perkEffectStatus &&
    EventDamage() >= 150
){
    SetUltimateCharge(EventPlayer(), 100);
}

rule: "Perk/Player/MachDelivery/rechargeByBombKill"
Event.OnElimination
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    perkEffectStatus
){
    SetUltimateCharge(EventPlayer(), 100);
}

rule: "Perk/Player/MachDelivery/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 6));
    LoopIfConditionIsTrue();
}

// TAG Juggernaut ----------
rule: "Perk/Player/Juggernaut/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set param
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Press secondary fire button <0> to use gravity bomb.", ButtonGuide(Button.SecondaryFire)>);
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Orisa;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 300;
    perkHero.healingReceived = 2.0;
    perkHero.damageDealt = 150;
    perkHero.gravity = 300;
    perkHero.moveSpeed = 75;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
}

rule: "Perk/Player/Juggernaut/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    StopChasingVariable(perkEffectStatus);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Juggernaut/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Juggernaut/setFiringSlow"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    IsFiringPrimary()
)
{
    SetMoveSpeed(EventPlayer(), 30);
}

rule: "Perk/Player/Juggernaut/resetFiringSlow"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    !IsFiringPrimary()
)
{
    SetMoveSpeed(EventPlayer(), 75);
}

rule: "Perk/Player/Juggernaut/splashDamage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    IsFiringPrimary()
)
{
    // get aimPosition  
    aimPosition = AimingPosition();
    perkPosition = RandomPosition(0.5, 0.5, 0.5);
    // splash damage
    Damage(
        PlayersWithinRadius(
            aimPosition + perkPosition, splashDamageRange,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 30);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Green, aimPosition + perkPosition, splashDamageRange);
    
    WaitContinuousBlastCycle();
    LoopIfConditionIsTrue();
}

// splashDamage
rule: "Perk/Player/Juggernaut/shotGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    IsFiringSecondary() &&
    perkEffectStatus == 100
){
    StopChasingVariable(perkEffectStatus);
    perkEffectStatus = 0;
    aimPosition2 = AimingPositionIgnorePlayer();
    perkPosition2 = EyePosition();
    // show aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.LimeGreen,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // follow the original ability effect
    UpdateEveryFrame(perkPosition2);
    ChaseVariableAtRate(perkPosition2, aimPosition2,
        26, RateChaseReevaluation.DestinationAndRate);
    // wait can trigger
    Wait(0.2, WaitBehavior.IgnoreCondition);    
    perkEffectStatus = 1;
}

define bombDamageRange: 6;

rule: "Perk/Player/Juggernaut/triggerGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == 1 &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    ExplodeBomb();
}

rule: "Perk/Player/Juggernaut/landedGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == 1 &&
    perkPosition2 == aimPosition2
){
    ExplodeBomb();
}

rule: "Perk/Player/Juggernaut/timeoutGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == 1
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    ExplodeBomb();
}

void ExplodeBomb()"Subroutine/ExplodeBomb"{
    perkEffectStatus = 2;
    // stop aura
    StopChasingVariable(perkPosition2);
    // hide aura
    DestroyEffect(perkEffectAndText[1]);
    // wait builtin ability efect play
    Wait(0.9, WaitBehavior.IgnoreCondition);
    // start change as cooldown
    perkEffectStatus = 3;
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition2, bombDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply Impulse
    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        ApplyImpulse(perkTargets[pLoopIndex],
            VectorTowards(perkPosition2, perkTargets[pLoopIndex] + Up()),
            30, Relative.ToWorld, ContraryMotion.Cancel);
    }
    // show impulse
    WaitEntityImpulse();
    // damage
    Damage(perkTargets, EventPlayer(), 500);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(), MaxLength());
    // play blast effect
    PlayContinuousBlast(perkPosition2, bombDamageRange,
        5, Color.LimeGreen);
}

rule: "Perk/Player/Juggernaut/coolDownGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == 3
){
    Wait(5.25, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = 100;
}

// TAG BeamSniper ----------
rule: "Perk/Player/BeamSniper/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud("Critical damage chance when blinking blue");
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Widowmaker;
    perkHero.statusUnkillable = true;
    perkHero.damageDealt = 200;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/BeamSniper/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Non
){
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    StopChasingVariable(perkEffectStatus);
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/BeamSniper/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/BeamSniper/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 6));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BeamSniper/startCharge"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire) &&
    IsFiringSecondary() &&
    perkEffectStatus != 100
){
    Wait(1.3, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = 100;
}

rule: "Perk/Player/BeamSniper/cancelCharge"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    !IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    StopChasingVariable(perkEffectStatus);
    perkEffectStatus = 0;
}

rule: "Perk/Player/BeamSniper/markTarget"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    perkEffectStatus == 100
){
    perkTargets = FilteredArray(
        PlayersInViewAngle(EventPlayer(), Team.Team2, 1.25),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        PlayEffect(
            EventPlayer(), PlayEffect.GoodPickupEffect,
            Color.Aqua, perkTargets, 1.0);
        PlayEffect(
            EventPlayer(), PlayEffect.GoodExplosion,
            Color.Aqua, AimingPosition(), 0.01);
    }

    // Since the impact point will shift due to the recoil when shooting, get the position before shooting
    aimPosition = AimingPosition();     

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BeamSniper/shotSniperBeam"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    if(perkEffectStatus < 100){
        perkEffectStatus = 0;
        Abort();
    }
    perkEffectStatus = 0;

    // give hit damage to enemy near penetration ballistic
    if(perkTargets != []){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Aqua, perkTargets, 4.0);
        Damage(perkTargets, EventPlayer(), 300);
    }
    // give splash damage to enemy near landed position
    perkTargets = FilteredArray(
        PlayersWithinRadius(aimPosition, 4, Team.Team2, RadiusLOS.Off),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        Damage(perkTargets, EventPlayer(), 100);
    }

    // set offset for gun sight
    perkPosition = EyePosition() - PositionOffset(); 

    // set landing position for penetration
    landPosition = EyePosition() +
        (FacingDirectionOf() * MaxLength());

    // play shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.Aqua, EventPlayer(), 100);
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Aqua, perkPosition + (FacingDirectionOf() * 1), 1.0);
    // play landed position blast
    PlayContinuousBlast(aimPosition, 4,
        2, Color.Aqua);

    // show ballistics for aiming
    CreateBeamEffect(AllPlayers(),
        BeamType.BadBeam, perkPosition, aimPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // show ballistic for penetration
    CreateBeamEffect(AllPlayers(),
        BeamType.BadBeam, aimPosition, landPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();

    WaitPlayEffect();
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
}

// TAG DragonStorm ----------
playervar define isInAir;

rule: "Perk/Player/DragonStorm/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = 0;
    isInAir = false;
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Hanzo;
    perkHero.statusUnkillable = true;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/DragonStorm/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Non
){
    // reset status
    ClearStatus(EventPlayer(), Status.Rooted);
    StopFacing();
    if(isInAir){
        Teleport(EventPlayer(), PositionOf() + Vector(0, -60, 0));
    }
    // hide enemy outline
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        EventPlayer()
    );
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/DragonStorm/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

define maxOfDragon: 9;

rule: "Perk/Player/DragonStorm/startDragonStorm"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    IsUsingUltimate() &&
    perkEffectStatus == 0
){
    CancelPrimaryAction();
    // jump movement
    ApplyImpulse(EventPlayer(), Up(),
        20, Relative.ToWorld, ContraryMotion.Cancel);
    Wait(0.5, WaitBehavior.IgnoreCondition);
        AbortIf(!(perkType == PerkType.DragonStorm && perkState == PerkState.Using));
    // set position
    Teleport(EventPlayer(), PositionOf() + Vector(0, 60, 0));
    isInAir = true;
    perkPosition = PositionOf();
    // set status
    SetStatus(EventPlayer(), null, Status.Rooted, MaxValue());
    SetGravity(EventPlayer(), 0);
    SetDamageDealt(EventPlayer(), 600);
    // show enemy outline
    StartForcingPlayerOutlines(
        AllLivingPlayers(Team.Team2),
        EventPlayer(),
        true,
        Color.Red,
        OutlineType.Always
    );  
    // face enemy
    perkTargets = ClosestPlayerTo(EventPlayer(), Team.Team2);
    StartFacing(
        EventPlayer(), 
        DirectionTowards(
            EventPlayer(),
            perkTargets
        ),
        MaxValue(), Relative.ToWorld,
        FacingRev.DirectionAndTurnRate
    );
    Wait(0.5, WaitBehavior.IgnoreCondition);
        AbortIf(!(perkType == PerkType.DragonStorm && perkState == PerkState.Using));
    StopFacing();
    // wait
    Wait(0.5, WaitBehavior.IgnoreCondition);
        AbortIf(!(perkType == PerkType.DragonStorm && perkState == PerkState.Using));

    perkEffectStatus = 1;
}

rule: "Perk/Player/DragonStorm/deployDragons"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    (1 <= perkEffectStatus && perkEffectStatus <= maxOfDragon)
){
    perkEffectStatus ++;
    SetUltimateCharge(EventPlayer(), 100);
    SetProjectileSpeed(EventPlayer(), 3 + perkEffectStatus);
    PressButton(EventPlayer(), Button.Ultimate);
    Wait(3, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = maxOfDragon + 1;
}

rule: "Perk/Player/DragonStorm/keepPosition"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    isInAir &&
    DistanceBetween(EventPlayer(), perkPosition) >= 0.001
){
    ApplyImpulse(EventPlayer(), VectorTowards(EventPlayer(), perkPosition),
        DistanceBetween(EventPlayer(), perkPosition),
        Relative.ToWorld, ContraryMotion.Cancel);
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DragonStorm/finishDragonStorm"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    !(1 <= perkEffectStatus && perkEffectStatus <= maxOfDragon)
){
    // wait  final deploy
    Wait(5.5, WaitBehavior.AbortWhenFalse);
        AbortIf(!(perkState == PerkState.Using && perkType == PerkType.DragonStorm));
    // reset position
    Teleport(EventPlayer(), PositionOf() - Vector(0, 60, 0));
    isInAir = false;
    // reset status
    SetProjectileSpeed(EventPlayer(), DefaultPercentage());
    ClearStatus(EventPlayer(), Status.Rooted);
    SetGravity(EventPlayer(), DefaultPercentage());
    SetDamageDealt(EventPlayer(), 150);
    // hide enemy outline
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        EventPlayer()
    );
    // face enemy
    perkTargets = ClosestPlayerTo(EventPlayer(), Team.Team2);
    StartFacing(
        EventPlayer(), 
        DirectionTowards(
            EventPlayer(),
            perkTargets
        ),
        MaxValue(), Relative.ToWorld,
        FacingRev.DirectionAndTurnRate
    );
    Wait(0.5, WaitBehavior.AbortWhenFalse);
        AbortIf(!(perkState == PerkState.Using && perkType == PerkType.DragonStorm));
    StopFacing();

    perkEffectStatus = 0;
}

rule: "Perk/Player/DragonStorm/"
Event.OnElimination
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using
){
    perkTimeLimit += 3;
}

rule: "Perk/Player/DragonStorm/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

// TAG Titan ----------
playervar define healthPoolID;

rule: "Perk/Player/Titan/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold crouch or crouch button <0> to get smaller.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Reinhardt;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 200;
    perkHero.healingReceived = 20;
    perkHero.damageDealt = 300;
    perkHero.gravity = 1000;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);

    // set pool health
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 1500, true, false);
    healthPoolID = LastCreatedHealthPool();

    // start grow big
    PressButton(EventPlayer(), Button.Crouch);
}

rule: "Perk/Player/Titan/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset status
    RemoveHealthPoolFromPlayer(healthPoolID);
    StopScalingPlayer(EventPlayer());
    StopModifyingHeroVoiceLines(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Titan/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Titan/growBig"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    !(IsCrouching() || IsButtonHeld(EventPlayer(), Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);

    if(!( 0 <= perkEffectStatus && perkEffectStatus <= 1)) perkEffectStatus = 0;
    while(perkEffectStatus < 1){
        StartScalingPlayer(EventPlayer(), 1 + (perkEffectStatus * 1.25), false);
        perkEffectStatus += 0.1;
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
    StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);
}

rule: "Perk/Player/Titan/suspendBig"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    (IsCrouching() || IsButtonHeld(EventPlayer(), Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);

    if(!( 0 <= perkEffectStatus && perkEffectStatus <= 1)) perkEffectStatus = 1;
    while(perkEffectStatus > 0){
        StartScalingPlayer(EventPlayer(), 1 + (perkEffectStatus * 1.25), false);
        perkEffectStatus -= 0.1;
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
    StartModifyingHeroVoiceLines(EventPlayer(), 1.0, false);
}

rule: "Perk/Player/Titan/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

// TAG Annihilator ----------
rule: "Perk/Player/Annihilator/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 150;
    // set param
    perkEffectStatus = 0;
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Reaper;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 150;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/Annihilator/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Non
){
    // reset param
    StopCamera(EventPlayer());
    perkEffectStatus = 0;
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Annihilator/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Annihilator/startAnnihilate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    SetDamageDealt(EventPlayer(), 300);
    SetMoveSpeed(EventPlayer(), 300);

    perkTargets = 
        SortedArray(
            FilteredArray(
                AllPlayers(Team.Team2), 
                (
                    IsAlive(ArrayElement()) &&
                    IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)
                )
            ),
            Health(ArrayElement())
        );
    // get target with insight and lowest health
    perkTargets = FirstOf(perkTargets);

    perkPosition = EyePosition();
    if(perkTargets != 0){
        // set camera
        StartCamera(EventPlayer(), perkPosition, EyePosition(), 10);
    }

    perkEffectStatus = 0;
}

rule: "Perk/Player/Annihilator/chaseNextTarget"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    perkEffectStatus ++;

    perkTargets = 
        SortedArray(
            FilteredArray(
                AllPlayers(Team.Team2), 
                (
                    IsAlive(ArrayElement()) &&
                    IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)
                )
            ),
            Health(ArrayElement())
        );
    if(perkEffectStatus <= 22){
        // get target with insight and lowest health for kill more
        perkTargets = FirstOf(perkTargets);
    }
    else{
        // get target with insight and highst health for deal finish damage
        perkTargets = LastOf(perkTargets);
    }

    if(perkTargets == 0){
        // get target with near random
        perkTargets = RandomValueInArray(perkTargets);
            RandomValueInArray(
                FilteredArray(
                    AllPlayers(Team.Team2), 
                    (
                        IsAlive(ArrayElement()) &&
                        DistanceBetween(EventPlayer(), ArrayElement()) <= 10
                    )
                )
            );
    }

    if(perkTargets != 0){
        // if camera too far to player
        if(
            !IsInLineOfSight(perkPosition, EventPlayer(), BarrierLOS.NoBarriersBlock) ||
            DistanceBetween(perkPosition, EyePosition()) > 20
        ){
            // camera set to middle point
            perkPosition = (perkPosition + EyePosition()) / 2;
            // if camera too close to player
            if(DistanceBetween(perkPosition, EyePosition()) < 10){
                // camera move to backword
                perkPosition = perkPosition + (VectorTowards(perkTargets, perkPosition) * 1.5);
            }
            // update camera
            StartCamera(EventPlayer(), perkPosition, EyePosition(), 10);
        }
        // chase target
        ApplyImpulse(EventPlayer(),
            VectorTowards(EventPlayer(), perkTargets+ RandomPosition(1, 1, 1)),
            1000, Relative.ToWorld, ContraryMotion.Cancel);
        // play movement pulse
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Red, EventPlayer(), 1.0);
    }

    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Annihilator/finishAnnihilate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    !IsUsingUltimate()
){
    // finish damage
    Damage(
        PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Off ),
        EventPlayer(), MaxValue()
    );

    SetDamageDealt(EventPlayer(), 200);
    SetMoveSpeed(EventPlayer(), 150);
    StopCamera(EventPlayer());

    Wait(4, WaitBehavior.AbortWhenFalse);

    perkEffectStatus = 0;
    SetDamageDealt(EventPlayer(), 200);
    SetMoveSpeed(EventPlayer(), 150);
    StopCamera(EventPlayer());
}

rule: "Perk/Player/Annihilator/returnGround"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    perkEffectStatus > 0
){
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    if(
        DistanceBetween(
            EventPlayer(),
            NearestWalkablePosition(EventPlayer())
        ) >= 5
    ){
        // return to safe ground
        Teleport(EventPlayer(), NearestWalkablePosition(EventPlayer()));
        // play movement pulse
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Red, EventPlayer(), 1.0);
    }
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Annihilator/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 4));
    LoopIfConditionIsTrue();
}

// TAG Debug ----------
rule: "Debug/givePerkToOwn"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    WaitLongPressConfirm();

    // Give perk to own player
    perkState = PerkState.Non;
    Wait(0.5, WaitBehavior.IgnoreCondition);
    perkType = RandomValueInArray(lotteryPerkList);
    perkState = PerkState.Ready;   

    // Use perk by force
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    perkState = PerkState.Using;       
}

rule: "Debug/givePerkToAll"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    WaitLongPressConfirm();

    // Give perk to all player
    AllPlayers(Team.Team1).perkState = PerkState.Non;   
    Wait(0.5, WaitBehavior.IgnoreCondition);
    AllPlayers(Team.Team1).perkType = RandomValueInArray(lotteryPerkList);
    AllPlayers(Team.Team1).perkState = PerkState.Ready;

    // Use perk by force    
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    AllPlayers(Team.Team1).perkState = PerkState.Using;
}

disabled rule: "Debug/forceUsePerk // for bot"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Ready
){
    if(
        DistanceBetween(
            EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team2)) <= 10 &&
        RandomInteger(1, 100) <= 50
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodPickupEffect,
            Color.White, EventPlayer(), 1);
        PlayEffect(
            EventPlayer(), PlayEffect.BuffImpactSound,
            Color.White, EventPlayer(), MaxLength());
        perkState = PerkState.Using;
    }
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();    
}
