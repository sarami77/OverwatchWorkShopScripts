import "PerkCore.ostw";

// TAG HighJump ----------
rule: "Perk/Player/HighJump/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud("More hold to hover in air.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to high jump.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[1] = LastTextID();
    // set status
    SetGravity(EventPlayer(), 50);
}

rule: "Perk/Player/HighJump/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset status
    SetGravity(EventPlayer(), 100);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/HighJump/HighJump"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();
    ApplyImpulse(EventPlayer(), Up(), 16,
        Relative.ToPlayer, ContraryMotion.Cancel);
    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/HighJump/hover"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    Wait(1.6, WaitBehavior.AbortWhenFalse);
    for(define hovringCount = 0; hovringCount < 300; hovringCount++){
        ApplyImpulse(EventPlayer(), (Up() * 0.00001), 1,
            Relative.ToPlayer, ContraryMotion.Cancel);
        WaitApplyImpulseCycle();
    }
}

rule: "Perk/Player/HighJump/resetUsedFlag"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HighJump &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsOnGround()
)
{
    WaitConditionConfirmed();
    perkEffectStatus = PerkEffectStatus.Ready;
}

// TAG GrapplingBeam ----------
rule: "Perk/Player/GrapplingBeam/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrapplingBeam &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold jump button <0> to shot grapple beam.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[0] = LastTextID();
}

rule: "Perk/Player/GrapplingBeam/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrapplingBeam &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/GrapplingBeam/shotGrappleBeam"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrapplingBeam &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    AbortIf(perkEffectStatus == PerkEffectStatus.Triggered);
    WaitLongPressConfirm();
    
    perkTargets = AimingPlayer();
    if(perkTargets != null){
        SetStatus(perkTargets, EventPlayer(), Status.Stunned, 1.0);
        WaitEntityImpulse();
        // pull target
        if(DistanceBetween(EventPlayer(), perkTargets) <= 100){
            CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
                EventPlayer(), perkTargets,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(perkTargets, 
                VectorTowards(perkTargets, PositionOf(EventPlayer()) + Up()),
                DistanceBetween(perkTargets, EventPlayer()) * 2.0,
                Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    else{
        // move in air
        aimPosition = AimingPosition();
        if(DistanceBetween(EventPlayer(), aimPosition) <= 100){
            CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
                EventPlayer(), aimPosition,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(EventPlayer(), VectorTowards(EventPlayer(), aimPosition),
                35, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    perkEffectStatus = PerkEffectStatus.Triggered;

    WaitPlayEffect();// show beam effect
    DestroyEffect(perkEffectAndText[1]);
    perkEffectStatus = PerkEffectStatus.Ready;
}

// TAG Sprinter ----------
playervar define keepMovingSecond;

rule: "Perk/Player/Sprinter/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    keepMovingSecond = 0;
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Move speed <0>%", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
}

rule: "Perk/Player/Sprinter/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset status
    SetMoveSpeed(EventPlayer(), 100);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Sprinter/updateMoveSpeed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using &&
    IsMoving()
){
    if(keepMovingSecond < 10){
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        keepMovingSecond += 1;
        perkEffectStatus = keepMovingSecond;
        perkEffectStatus *= 10;
        perkEffectStatus += 100;
        SetMoveSpeed(EventPlayer(), perkEffectStatus);
        LoopIfConditionIsTrue();
    }
}

rule: "Perk/Player/Sprinter/resetMoveSpeedByStop"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using &&
    !IsMoving()
){
    WaitConditionConfirmed();

    keepMovingSecond = 0;
    perkEffectStatus = 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
}

rule: "Perk/Player/Sprinter/resetMoveSpeedByDamage"
Event.OnDamageTaken
Team.Team1
Player.All
if(
    perkType == PerkType.Sprinter &&
    perkState == PerkState.Using &&
    1 <= EventDamage()
){
    keepMovingSecond = 0;
    perkEffectStatus = 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
}

// TAG Adrenaline ----------
rule: "Perk/Player/Adrenaline/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Move speed <0>%", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
}

rule: "Perk/Player/Adrenaline/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset status
    SetMoveSpeed(EventPlayer(), 100);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Adrenaline/updateMoveSpeed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Using &&    
    Health() < MaxHealth()
){
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = RoundToInteger((1 - (Health() / MaxHealth())) * 100);
    perkEffectStatus += 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Adrenaline/resetMoveSpeedByFullHealth"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Adrenaline &&
    perkState == PerkState.Using &&
    Health() == MaxHealth()
){
    perkEffectStatus = 100;
    SetMoveSpeed(EventPlayer(), perkEffectStatus);
}

// TAG Savior ----------
define saviorStunRange: 10;

rule: "Perk/Player/Savior/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Savior &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkTargets = [];
}

rule: "Perk/Player/Savior/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Savior &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Savior/stunEnemy"
Event.OnDamageDealt
Team.Team1
Player.All
if(
    perkType == PerkType.Savior &&
    perkState == PerkState.Using
){
    if(Victim() != EventPlayer()){
        if(!HasStatus(Victim(), Status.Stunned)){
            perkTargets = FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ArrayElement() != EventPlayer() &&
                    Health(ArrayElement()) <= MaxHealth(ArrayElement()) / 2 &&
                    saviorStunRange >= DistanceBetween(Victim(), ArrayElement())
                )
            );
            if(perkTargets != []){
                
                // set stun
                SetStatus(Victim(), EventPlayer(), Status.Stunned, 3.0);
                // play blast
                PlayEffect(
                    AllPlayers(), PlayEffect.GoodExplosion,
                    Color.Yellow, Victim(), 1.0);
            }
        }
    }
}

define saviorReviveRange: 2.5;

rule: "Perk/Player/Savior/instantyRevive"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsDead() &&
    IsOnGround()&&
    CountOf(
        FilteredArray(
            AllPlayers(TeamOf()), (
                IsAlive(ArrayElement()) &&
                HasSpawned(ArrayElement()) &&
                ArrayElement().perkType == PerkType.Savior &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement()) <= saviorReviveRange
            )
        )
    ) > 0
){
    define reviver = ClosestPlayerTo(EventPlayer(), Team.Team1);

    // revive effect and sound
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
        Color.Yellow, EventPlayer(), 1);
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.RingExplosion,
        Color.Yellow, EventPlayer(), 8);
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.BuffExplosionSound,
        Color.White, EventPlayer(), MaxLength());

    Resurrect(EventPlayer());

    SmallMessage(reviver,
        <"<0> <1> <2>.", "revived", EventPlayer(), HeroIconString(HeroOf(EventPlayer()))>);
    SmallMessage(EventPlayer(),
        <"<0> <1> <2>.", reviver, HeroIconString(HeroOf(reviver)), "revivied you">);
}

// TAG Fearless ----------
define fearlessRange : 13;
rule: "Perk/Player/Fearless/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Fearless &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = 100;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Damage dealt & heal received <0>%", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue,
        EventPlayer(), fearlessRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
}

rule: "Perk/Player/Fearless/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Fearless &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset status
    SetDamageDealt(EventPlayer(), perkEffectStatus);
    SetHealingReceived(EventPlayer(), perkEffectStatus);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Fearless/updateDealDamage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Fearless &&
    perkState == PerkState.Using
){
    perkEffectStatus = CountOf(
        FilteredArray(
            PlayersWithinRadius(
                PositionOf(EventPlayer()), fearlessRange, Team.Team2, RadiusLOS.Off
            ),
            IsAlive(ArrayElement())
        )
    );
    perkEffectStatus *= 30;
    perkEffectStatus += 100;
    SetDamageDealt(EventPlayer(), perkEffectStatus);
    SetHealingReceived(EventPlayer(), perkEffectStatus);
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

// TAG SteelFormation ----------
define steelRange : 8;

rule: "Perk/Player/SteelFormation/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SteelFormation &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Formation include <0> players.", perkEffectStatus>);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.Orange,
        EventPlayer(), steelRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
}

rule: "Perk/Player/SteelFormation/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SteelFormation &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

define nearSteel:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.SteelFormation &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement()) <= steelRange
            )
        )
    ) > 0;

rule: "Perk/Player/SteelFormation/updateIncludePlayers"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.SteelFormation &&
    perkState == PerkState.Using
){
    perkEffectStatus = CountOf(
        FilteredArray(
            PlayersWithinRadius(
                PositionOf(EventPlayer()), steelRange, Team.Team1, RadiusLOS.Off
            ),
            IsAlive(ArrayElement())
        )
    );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/SteelFormation/enableSteel"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    nearSteel
){
    SetDamageReceived(EventPlayer(), 50);
}

rule: "Perk/Player/SteelFormation/disableSteel"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !nearSteel
){
    SetDamageReceived(EventPlayer(), 100);
}

// TAG PersonalShelter ----------
define shelterRange : 1.0;
define inShelter:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.PersonalShelter &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement().perkPosition) <= shelterRange
            )
        )
    ) > 0;

rule: "Perk/Player/PersonalShelter/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.PersonalShelter &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 60;
    // set param
    perkPosition = PositionOf();
    // show text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Personal Shelter">,
        perkPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.White,
        perkPosition, shelterRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.White,
        perkPosition, shelterRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();        
}

rule: "Perk/Player/PersonalShelter/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.PersonalShelter &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    // reset param
    perkPosition = 0;
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/PersonalShelter/enableSafe"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    inShelter
){
    SetStatus(EventPlayer(), null, Status.PhasedOut, MaxValue());
    SetInvisible(EventPlayer(), InvisibleTo.Enemies);
}

rule: "Perk/Player/PersonalShelter/disableSafe"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !inShelter
){
    ClearStatus(EventPlayer(), Status.PhasedOut);
    SetInvisible(EventPlayer(), InvisibleTo.None);
}

rule: "Perk/Player/PersonalShelter/failsafeReset"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    HasStatus(EventPlayer(), Status.PhasedOut) &&
    !IsInSpawnRoom()
){
    WaitUpdateLongCycle();
    if(!inShelter){
        ClearStatus(EventPlayer(), Status.PhasedOut);   
        SetInvisible(EventPlayer(), InvisibleTo.None);
    }
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/PersonalShelter/exclusiveOtherPlayer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.PersonalShelter &&
    perkState == PerkState.Using &&
    1 < CountOf(
            PlayersWithinRadius(
                perkPosition, shelterRange, Team.Team1, RadiusLOS.Off))
){
    perkTargets = PlayersWithinRadius(
                perkPosition, shelterRange, Team.Team1, RadiusLOS.Off);
    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        if(perkTargets[pLoopIndex] !=
            ClosestPlayerTo(perkPosition, Team.Team1)){
            ApplyImpulse(perkTargets[pLoopIndex],
                VectorTowards(perkPosition, perkTargets[pLoopIndex] + PositionOffset()),
                10, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}

// TAG BioticStation ----------
define healRange : 6;
define nearStation:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.BioticStation &&
                ArrayElement().perkState == PerkState.Using &&
                DistanceBetween(EventPlayer(), ArrayElement().perkPosition) <= healRange
            )
        )
    ) > 0;

rule: "Perk/Player/BioticStation/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BioticStation &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 30;
    // set param
    perkPosition = BelowPosition(PositionOf());
    // show text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Biotic Station">,
        perkPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.Yellow,
        perkPosition, healRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Yellow,
        perkPosition, healRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.Yellow,
        perkPosition, 0.25, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();   
}

rule: "Perk/Player/BioticStation/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BioticStation &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    // reset param
    perkPosition = 0;
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/BioticStation/playWave"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BioticStation &&
    perkState == PerkState.Using
){
    // play ring
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosion,
        Color.Yellow, perkPosition, healRange * 2);
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BioticStation/heal"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    nearStation
){
    // heal
    Heal(EventPlayer(), EventPlayer(), 25);
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

// TAG TrapBeam ----------
playervar define detecterPosition;
define patrolCycle: 0.25;

rule: "Perk/Player/TrapBeam/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // show text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), "Trap Beam">,
        perkPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // set effect
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
        perkPosition, aimPosition,
        Color.Yellow, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Yellow,
        detecterPosition, 0.25, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // set param
    StopChasingVariable(detecterPosition);
}

rule: "Perk/Player/TrapBeam/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    // reset param
    StopChasingVariable(detecterPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/TrapBeam/deploy"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using
){
    perkPosition = PositionOf() + PositionOffset();
    aimPosition = AimingPositionIgnorePlayer();
}

rule: "Perk/Player/TrapBeam/moveDetectorToAimPosition"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using
){
    detecterPosition = perkPosition;
    UpdateEveryFrame(detecterPosition);
    ChaseVariableOverTime(detecterPosition, aimPosition,
        patrolCycle, TimeChaseReevaluation.DestinationAndDuration);
    Wait(patrolCycle, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/TrapBeam/stunByTouched"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.TrapBeam &&
    perkState == PerkState.Using &&
    // Since the position of the player is judged by the feet,
    //  an offset is added and the collision judgment is shifted to the body.
    DistanceBetween(PositionOf(ClosestPlayerTo(detecterPosition, Team.Team2)) + PositionOffset(), detecterPosition) <= 1.25
){
    perkTargets = ClosestPlayerTo(detecterPosition, Team.Team2);
    if(IsAlive(perkTargets) &&
     !HasStatus(perkTargets, Status.Stunned)){
        // set stun
        SetStatus(perkTargets, EventPlayer(), Status.Stunned, 2.0);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Yellow, perkTargets, 1.0);
    }
}

// TAG BattleFlag ----------
define battleFlagRange : 15;
rule: "Perk/Player/BattleFlag/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BattleFlag &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 360;
    // set effect
    perkEffectAndText = [];
    CreateEffect(AllPlayers(Team.Team1), Effect.Ring, Color.Blue,
        EventPlayer(), battleFlagRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[0] = LastCreatedEntity();
    // show icon
    CreateIcon(AllPlayers(), PositionOf() + (Up() * 2), Icon.Flag,
        IconRev.VisibleToAndPosition, Color.Blue, false);
    perkEffectAndText[1] = LastCreatedEntity();
}

rule: "Perk/Player/BattleFlag/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BattleFlag &&
    perkState == PerkState.Non
){
    // reset effect
    DestroyEffect(perkEffectAndText[0]);
    // reset icon
    DestroyIcon(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

define nearBattleFlag:
    FilteredArray(
        AllPlayers(Team.Team1),
        (
            ArrayElement().perkType == PerkType.BattleFlag &&
            ArrayElement().perkState == PerkState.Using &&
            DistanceBetween(EventPlayer(), ArrayElement()) <= battleFlagRange
        )
    );

rule: "Perk/Player/BattleFlag/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    CountOf(nearBattleFlag) > 0
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 1));
    LoopIfConditionIsTrue();
}

define raisedBattleFlag:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.BattleFlag &&
                ArrayElement().perkState == PerkState.Using &&
                ArrayElement() != EventPlayer()
            )
        )
    ) > 0;

rule: "Perk/Player/BattleFlag/showOperationTeleport"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    (
        IsInSpawnRoom() &&
        raisedBattleFlag
    )
){
    WaitChangeState();
    // set hud
    CreatePerkEffectHud(<"Hold jump button <0> to teleport to battle flag.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[100] = LastTextID();
    CreatePerkEffectHud(<"Battle flag is raised on the battle line.">);
    perkEffectAndText[101] = LastTextID();
}

rule: "Perk/Player/BattleFlag/hideOperationTeleport"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !(
        IsInSpawnRoom() &&
        raisedBattleFlag
    )
){
    WaitChangeState();
    // reset hud
    DestroyHudText(perkEffectAndText[100]);
    DestroyHudText(perkEffectAndText[101]);
}

rule: "Perk/Player/BattleFlag/teleportToBattleFlag"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    (
        IsInSpawnRoom() &&
        raisedBattleFlag
    ) &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();
    perkTargets = 
        RandomValueInArray(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ArrayElement().perkType == PerkType.BattleFlag &&
                    ArrayElement().perkState == PerkState.Using
                )
            )
        );
    // teleport to battle flag
    Teleport(EventPlayer(), perkTargets);
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.Blue, perkTargets, 1);
    PlayEffect(
        AllPlayers(), PlayEffect.BuffImpactSound,
        Color.White, perkTargets, MaxLength());
    SmallMessage(perkTargets, "Teammate spawned on you.");
}

// TAG ChainExplosion ----------
rule: "Perk/Player/ChainExplosion/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ChainExplosion &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
}

rule: "Perk/Player/ChainExplosion/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ChainExplosion &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

define chainExplosionRange: 9;

rule: "Perk/Player/ChainExplosion/explosion"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.ChainExplosion &&
    perkState == PerkState.Using
){
    if(Victim() != EventPlayer()){
        WaitPlayEffect();
        // splash damage
        Damage(
            PlayersWithinRadius(
                PositionOf(Victim()), chainExplosionRange, Team.Team2, RadiusLOS.Off),
            EventPlayer(), 300);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Orange, Victim(), chainExplosionRange);
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosion,
            Color.Orange, Victim(), chainExplosionRange);
        // play blast sound
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosionSound,
            Color.White, Victim(), 100);
    }
}

// TAG IceAge ----------
rule: "Perk/Player/IceAge/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.IceAge &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
}

rule: "Perk/Player/IceAge/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.IceAge &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

define IceAgeRange: 12;

rule: "Perk/Player/IceAge/explosion"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.IceAge &&
    perkState == PerkState.Using
){
    if(Victim() != EventPlayer()){
        WaitPlayEffect();
        // splash freeze
        SetStatus(
            PlayersWithinRadius(
                PositionOf(Victim()), IceAgeRange, Team.Team2, RadiusLOS.Off),
            EventPlayer(), Status.Frozen, 1.5);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Aqua, Victim(), IceAgeRange);
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosion,
            Color.Aqua, Victim(), IceAgeRange);
        // play blast sound
        PlayEffect(
            AllPlayers(), PlayEffect.BuffImpactSound,
            Color.White, Victim(), 100);
    }
}

// TAG AimHack ----------
playervar define autoAimingTarget;
rule: "Perk/Player/AimHack/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set status
    perkEffectStatus = PerkEffectStatus.Triggered;
    autoAimingTarget = 0;
    perkTargets = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(perkEffectStatus == PerkEffectStatus.Triggered ?
        "Aim hack Enable." : "Aim hack Disable.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to toggle aim hack.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[1] = LastTextID();
}

rule: "Perk/Player/AimHack/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Non
){
    // reset status
    StopFacing();
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/AimHack/toggleAimHack"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus == PerkEffectStatus.Triggered){
        perkEffectStatus = PerkEffectStatus.Ready;
    }
    else{
        perkEffectStatus = PerkEffectStatus.Triggered;
    }
    // play change sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());
}

rule: "Perk/Player/AimHack/startAutoAim"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    AutoAim();
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/AimHack/stopAutoAim"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.AimHack &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready
){
    StopFacing(EventPlayer());
    autoAimingTarget = null;
    perkTargets = 0;
}

void AutoAim()"AutoAim"{
    if(
        perkTargets == 0 ||     // no target
        IsDead(perkTargets) ||  // target is dead
        !IsInLineOfSight(EventPlayer(), perkTargets, BarrierLOS.NoBarriersBlock)    // target hidden
    ){
        // get near target in sight
        perkTargets = FirstOf(
            SortedArray(
                FilteredArray(
                    PlayersInViewAngle(EventPlayer(), Team.Team2, 90),
                    (
                        IsAlive(ArrayElement()) &&
                        IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock) &&
                        !HasStatus(ArrayElement(), Status.Asleep)
                    )
                ),
                DistanceBetween(EventPlayer(), ArrayElement())
            )
        );
    }
    // has target and sighted
    if(
        perkTargets != 0 &&
        IsInLineOfSight(EventPlayer(), perkTargets)
    ){
        // target changed
        if(autoAimingTarget != perkTargets){
            // update target
            autoAimingTarget = perkTargets;
            // start auto aim
            StartAutoAiming(perkTargets);
        }
        // if some target, not restart auto aim.
    }
    else{
        // stop auto aim
        if(autoAimingTarget != 0){
            StopFacing(EventPlayer());
            autoAimingTarget = 0;
        }
    }
}

// TAG Vampire ----------
rule: "Perk/Player/Vampire/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Vampire &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
}

rule: "Perk/Player/Vampire/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Vampire &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}


rule: "Perk/Player/Vampire/absorbsHealth"
Event.OnDamageDealt
Team.Team1
Player.All
if(
    perkType == PerkType.Vampire &&
    perkState == PerkState.Using
){
    Heal(EventPlayer(), EventPlayer(), EventDamage() / 2);
}

// TAG HotShot ----------
rule: "Perk/Player/HotShot/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HotShot &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
}

rule: "Perk/Player/HotShot/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.HotShot &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/HotShot/rechargeAbility"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.HotShot &&
    perkState == PerkState.Using
){
    SetAbilityCooldown(EventPlayer(), Button.PrimaryFire, 0);
    SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 0);
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
    SetAbilityCooldown(EventPlayer(), Button.Jump, 0);
}

rule: "Perk/Player/HotShot/refillAbilityAndAmmo"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.HotShot &&
    perkState == PerkState.Using
){
    define clips = [0, 1];
    for(define idx = 0; idx < CountOf(clips); idx++){
        SetAmmo(EventPlayer(), clips[idx], MaxAmmo(EventPlayer(), clips[idx]));
    }
    
    define buttons = [
        Button.PrimaryFire,
        Button.SecondaryFire,
        Button.Ability1,
        Button.Ability2, 
        Button.Jump
    ];
    for(define idx = 0; idx < CountOf(buttons); idx++){
        SetAbilityCooldown(EventPlayer(), buttons[idx], 0);
        SetAbilityCharge(EventPlayer(), buttons[idx], 3);
        SetAbilityResource(EventPlayer(), buttons[idx], 100);
    }
}

// TAG ShotCaller ----------
rule: "Perk/Player/ShotCaller/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;

    SetUltimateCharge(EventPlayer(), 100);
}

rule: "Perk/Player/ShotCaller/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/ShotCaller/shotCall"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    perkTargets = 
        FilteredArray(
            AllPlayers(Team.Team1),
                !(
                    ArrayElement().perkType == PerkType.ShotCaller &&
                    ArrayElement().perkState == PerkState.Using
                )
        );

    for(pLoopIndex = 0; pLoopIndex < CountOf(perkTargets); pLoopIndex++){
        if(perkTargets[pLoopIndex] != EventPlayer()){
            SetUltimateCharge(perkTargets[pLoopIndex], 100);
        }
    }
}

rule: "Perk/Player/ShotCaller/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ShotCaller &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 2));
    LoopIfConditionIsTrue();
}

// TAG GrudgeFireBall ----------
playervar define fireBallSpeed;
playervar define fireBallPower;
playervar define fireBallSize;
playervar define fireBallBlastRange;
define minFireBallSpeed: 15;
define maxFireBallSpeed: 60;
define minCollisionRange: 2.0;
define chargeRate: 2.0;

rule: "Perk/Player/GrudgeFireBall/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set status
    perkPosition = 0;
    landPosition = 0;
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Fire ball power <0>", fireBallPower>);
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to shot fire ball.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[1] = LastTextID();
}

rule: "Perk/Player/GrudgeFireBall/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Non
){
    // reset text
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    StopChasingVariable(perkPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/GrudgeFireBall/chargePowerByTakenDamage"
Event.OnDamageTaken
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    Attacker() != EventPlayer() &&
    EventDamage() > 0
){
    fireBallPower += RoundToInteger(EventDamage() * chargeRate);
}

rule: "Perk/Player/GrudgeFireBall/shot"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    AbortIf(fireBallPower <= 0);

    perkPosition = EyePosition() + 
        (FacingDirectionOf(EventPlayer()) * fireBallSize / 2);
    landPosition = AimingPositionIgnorePlayer();
    // set fireball param
    fireBallSpeed = maxFireBallSpeed - (fireBallPower / maxFireBallSpeed);
    fireBallSpeed = Max(minFireBallSpeed, fireBallSpeed);
    fireBallSpeed = Min(maxFireBallSpeed, fireBallSpeed);
    fireBallSize = fireBallPower * 0.002;
    fireBallBlastRange = fireBallPower * 0.01;
    // start movement
    UpdateEveryFrame(perkPosition);
    ChaseVariableAtRate(
        perkPosition, landPosition, fireBallSpeed,
        RateChaseReevaluation.DestinationAndRate);
    // show ball
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Orange,
        perkPosition, fireBallSize, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // show aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Orange,
        perkPosition, fireBallSize * 1.5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition + (FacingDirectionOf() * 1), fireBallSize);
    // play shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), fireBallPower * 1);

    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/GrudgeFireBall/playFireBallTrajectory"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Yellow, perkPosition, fireBallSize * 1.5);

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/GrudgeFireBall/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    Wait(DistanceBetween(perkPosition, landPosition) / fireBallSpeed,
        WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/hitToPlyer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsAlive(ClosestPlayerTo(perkPosition, Team.Team2)) &&
    DistanceBetween(
        perkPosition,
        ClosestPlayerTo(perkPosition, Team.Team2))
        	<= 
    Max(minCollisionRange, fireBallSize)
){
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/timeOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

void ExplodeFireBall()"ExplodeFireBall"{
    perkEffectStatus = PerkEffectStatus.Reloading;

    // stop movement
    StopChasingVariable(perkPosition);
    // hide ball
    DestroyEffect(perkEffectAndText[2]);
    // hide aura
    DestroyEffect(perkEffectAndText[3]);
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition, Max(minCollisionRange, fireBallBlastRange),
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perkTargets, perkPosition, fireBallBlastRange);
    // damage
    Damage(perkTargets, EventPlayer(), fireBallPower);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, perkPosition, fireBallBlastRange * 50);
    // play blast effect
    PlayContinuousBlast(
        Color.Orange,
        perkPosition,
        fireBallBlastRange,
        Min(7, fireBallSize));

    // reset charge
    fireBallPower = 0;

    perkEffectStatus = PerkEffectStatus.Ready;
}

// TAG ArtilleryRequest ----------
define artilleryLandingRange: 20;
define artilleryDamageRange: 7;
define attackTime: 10;
define attackCount: 30;
playervar define landZonePosition;

rule: "Perk/Player/ArtilleryRequest/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtilleryRequest &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 14;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    landPosition2 = -1;  
    perkEffectStatus = 0; 
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rBarrage incoming. Stand by...", EventPlayer(), HeroIconString(HeroOf()), "Artillery Request">,
        landZonePosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // CreateInWorldText(
    //     AllPlayers(), <"Barrage incoming. Stand by...">,
    //     landZonePosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
    //     Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // shell body1
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // shell body2
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landZonePosition, artilleryLandingRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        landZonePosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity(); 
}
rule: "Perk/Player/ArtilleryRequest/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtilleryRequest &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/ArtilleryRequest/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtilleryRequest &&
    perkState == PerkState.Using
){
    perkPosition = InvalidPosition();
    perkPosition2 = InvalidPosition();

    // set shell land position to aiming position
    landZonePosition = BelowPosition(AimingPosition());
    Wait(3, WaitBehavior.AbortWhenFalse);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    firstAnimationDelay = true;
    perkEffectStatus = attackCount;
}

playervar define firstAnimationDelay;
define parallelAnimationNum: 2;
define attackSpeeed:
    (attackTime / attackCount) * parallelAnimationNum;

rule: "Perk/Player/ArtilleryRequest/launchShell"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtilleryRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus > 0
){
    // set shell at random horizontal positions over 50
    perkPosition = landZonePosition +
        Vector(0, 100, 0) + RandomPosition(10, 0, 10);
    // start shell move
    landPosition = 
        landZonePosition + 
        RandomPosition(
            artilleryLandingRange / 1.5,
            0,
            artilleryLandingRange / 1.5
        );
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, attackSpeeed,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(attackSpeeed, WaitBehavior.IgnoreCondition);
    StopChasingVariable(perkPosition);
    // hide shell
    perkPosition = InvalidPosition();
    // on landed play blast
    async ExplodeArtilleryShell(landPosition);
    perkEffectStatus -- ;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/ArtilleryRequest/launchShell2"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.ArtilleryRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus > 0
){
    if(firstAnimationDelay){
        firstAnimationDelay = false;
        Wait(attackSpeeed / 2, WaitBehavior.IgnoreCondition);
    }

    // set shell at random horizontal positions over 50
    perkPosition2 = landZonePosition +
        Vector(0, 100, 0) + RandomPosition(10, 0, 10);
    // start shell move
    landPosition2 = 
        landZonePosition + 
        RandomPosition(
            artilleryLandingRange / 1.5,
            0,
            artilleryLandingRange / 1.5
        );
    UpdateEveryFrame(perkPosition2);
    ChaseVariableOverTime(
        perkPosition2, landPosition2, attackSpeeed,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(attackSpeeed, WaitBehavior.IgnoreCondition);
    StopChasingVariable(perkPosition2);
    // hide shell
    perkPosition2 = InvalidPosition();
    // on landed play blast
    async ExplodeArtilleryShell(landPosition2);
    perkEffectStatus -- ;
    LoopIfConditionIsTrue();
}

void ExplodeArtilleryShell(define position)"ExplodeArtilleryShell"{
    // get target
    perkTargets = 
        PlayersWithinRadius(
            position, artilleryDamageRange,
            Team.All, RadiusLOS.Off);
    // damage
    Damage(
        PlayersWithinRadius(
            position, artilleryDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), 300);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, position, 300);
    // play blast effect
    PlayContinuousBlast(
        Color.Yellow,
        position,
        artilleryDamageRange,
        2);
}

// TAG StrafingRequest ----------
define strafReqLandingRange: 4;
define strafReqDamageRange: 3.5;
define strafReqAttackTime: 1.5;
define strafReqAttackDistance: RandomInteger(15, 25);
define strafReqReloadTime: RandomInteger(4, 8);

rule: "Perk/Player/StrafingRequest/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    perkEffectStatus = PerkEffectStatus.Ready;
    perkEffectAndText = [];
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(
        perkEffectStatus == PerkEffectStatus.Ready ?
            <"Hold melee button <0> to call Strafing Request.", ButtonGuide(Button.Melee)> :
            perkEffectStatus == PerkEffectStatus.Reloading ?
                "Strafing Request in preparation..." :
                "Strafing incoming!"
        );
    perkEffectAndText[3] = LastTextID();

    // first use
    StartHoldingButton(EventPlayer(), Button.Melee);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopHoldingButton(EventPlayer(), Button.Melee);
}
rule: "Perk/Player/StrafingRequest/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[3]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    StopChasingVariable(landPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/StrafingRequest/startStrafing"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    perkEffectStatus = PerkEffectStatus.Triggered;
}

playervar define approachingAngle;

rule: "Perk/Player/StrafingRequest/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    // play set sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());

    aimPosition = BelowPosition(AimingPosition());
    approachingAngle = DirectionTowards(
            aimPosition, ClosestPlayerTo(
                aimPosition,
                Team.All
            )
        );
    approachingAngle = Vector(
        XOf(approachingAngle),
        0,
        ZOf(approachingAngle)
    );
    // set start point
    perkPosition = 
        aimPosition + 
            // add random direction
            -approachingAngle *
            // add static distance
            strafReqAttackDistance;
    // set end point
    perkPosition2 = 
        aimPosition + 
            // add random direction
            approachingAngle *
            // add static distance
            strafReqAttackDistance;

    // landing zone text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rStrafing incoming!", EventPlayer(), HeroIconString(HeroOf()), "Strafing Request">,
        aimPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();

    // set effect
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, strafReqLandingRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        aimPosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity(); 

    // play landing animation
    landPosition = perkPosition;
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        strafReqAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(strafReqAttackTime, WaitBehavior.AbortWhenFalse);

    StopChasingVariable(landPosition);
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    // start attack
    perkEffectStatus = PerkEffectStatus.SecondTriggered;
}


rule: "Perk/Player/StrafingRequest/moveLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.SecondTriggered
){
    // chase landing position
    landPosition = perkPosition;
    UpdateEveryFrame(landPosition);
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        strafReqAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(strafReqAttackTime, WaitBehavior.IgnoreCondition);

    StopChasingVariable(landPosition);
    DestroyInWorldText(perkEffectAndText[0]);

    // start reload
    perkEffectStatus = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/StrafingRequest/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.SecondTriggered
){
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    landPosition2 =
        landPosition + 
        RandomPosition(
            strafReqLandingRange / 1.5,
            0,
            strafReqLandingRange / 1.5
        );
    // splash damage
    Damage(
        PlayersWithinRadius(
            landPosition2, strafReqDamageRange,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 250);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.White,
        landPosition2,
        strafReqDamageRange);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White,
        landPosition2,
        100);
    Wait(0.05, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/StrafingRequest/coolDown"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    Wait(strafReqReloadTime, WaitBehavior.AbortWhenFalse);
    // play ready sound
    PlayEffect(
        EventPlayer(), PlayEffect.BuffImpactSound,
        Color.White, EventPlayer(), 80);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/StrafingRequest/playAircraftAnimation"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.StrafingRequest &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);

    // set start point
    perkPosition =
        aimPosition +
        DirectionTowards(aimPosition, perkPosition) * 
        (strafReqAttackDistance * 20) +
        Vector(0, 75 , 0); 
    // set end point
    perkPosition2 = 
        aimPosition +
        DirectionTowards(aimPosition, perkPosition2) *
        (strafReqAttackDistance * 20) +
        Vector(0, 75 , 0); 
    // air craft
    CreateEffect(AllPlayers(), Effect.Orb, Color.Red,
        landPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // air craft aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
        landPosition, 10, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();

    // play air craft animation
    landPosition = perkPosition;
    UpdateEveryFrame(landPosition);
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        strafReqAttackTime * 1.5,
        TimeChaseReevaluation.DestinationAndDuration);
    Wait(strafReqAttackTime * 1.5, WaitBehavior.IgnoreCondition);
    StopChasingVariable(landPosition);

    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
}

// TAG CruisingMissile ----------
define missleDamageRange: 20;
rule: "Perk/Player/CruisingMissile/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 10;
    // set status
    perkTargets = 0;
    perkEffectStatus = PerkEffectStatus.Ready;
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rLanding at <3> second. Brace for impact!", EventPlayer(), HeroIconString(HeroOf()), "Cruising Missile", perkTimeLimit>,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // CreateInWorldText(
    //     AllPlayers(), <"Landing at <0> second. Brace for impact!", perkTimeLimit>,
    //     landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
    //     Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // missile body
    CreateEffect(AllPlayers(), Effect.Orb, Color.Red,
        perkPosition, 10, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // missile flare
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.White,
        perkPosition, 20, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // missle sound
    CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White,
        perkPosition, MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, missleDamageRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        landPosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[6] = LastCreatedEntity();  
    // landing zone warning icon
    CreateIcon(AllPlayers(), landPosition + (Up() * 2), Icon.Warning,
        IconRev.VisibleToAndPosition, Color.Yellow, true);
    perkEffectAndText[7] = LastCreatedEntity();
    // set hud
    CreatePerkEffectHud(perkEffectStatus == PerkEffectStatus.Triggered ? "locked landing point." : "guiding landing point.");
    perkEffectAndText[8] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to lock landing point.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[9] = LastTextID();  
}
rule: "Perk/Player/CruisingMissile/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    DestroyEffect(perkEffectAndText[6]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);
    // reset icon
    DestroyIcon(perkEffectAndText[7]);
    // reset hud
    DestroyHudText(perkEffectAndText[8]);
    DestroyHudText(perkEffectAndText[9]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/CruisingMissile/toggleLockPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus == PerkEffectStatus.Triggered){
        perkEffectStatus = PerkEffectStatus.Ready;
    }
    else{
        perkEffectStatus = PerkEffectStatus.Triggered;
    }
    // play change sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());
}

rule: "Perk/Player/CruisingMissile/playMissleBooster"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 3.0);

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CruisingMissile/setLandingZone"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using
){
    // set missiles at random horizontal positions over 500m
    perkPosition = EventPlayer() +
        Vector(0, 500, 0) + RandomPosition(250, 0, 250);
    // set missile land position to aiming position
    landPosition = AimingPosition();
    // start missile move
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, perkTimeLimit,
        TimeChaseReevaluation.DestinationAndDuration);
}

rule: "Perk/Player/CruisingMissile/aimLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready
){
    // chase missile land position to aiming position
    WaitUpdateShortCycle();
    aimPosition = AimingPosition();
    UpdateEveryFrame(landPosition);
    ChaseVariableAtRate(
        landPosition, aimPosition,
        DistanceBetween(landPosition, aimPosition) * 1.0,
        RateChaseReevaluation.DestinationAndRate);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CruisingMissile/hideBlastRange"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    perkTimeLimit <= 1
){
    DestroyEffect(perkEffectAndText[5]);
}

rule: "Perk/Player/CruisingMissile/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CruisingMissile &&
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);

    // apply knockout
    SetStatus(
        PlayersWithinRadius(
            perkPosition, missleDamageRange,
            Team.Team1, RadiusLOS.Off
        ), null, Status.KnockedDown, 3);
    // get target
    perkTargets = 
        PlayersWithinRadius(
            aimPosition, missleDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perkTargets, perkPosition, missleDamageRange);
    // damage
    Damage(
        PlayersWithinRadius(
            perkPosition, missleDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), MaxValue());
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, perkPosition, MaxLength());
    // play blast effect
    PlayContinuousBlast(
        Color.Orange,
        perkPosition,
        missleDamageRange,
        7);

    perkState = PerkState.Non;
}

// TAG OrbitalLaser ----------
define lazerDamageRange: 3;
rule: "Perk/Player/OrbitalLaser/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 60;
    // set status
    perkTargets = 0;
    perkEffectStatus = PerkEffectStatus.Ready;
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rIrradiating until <3> seconds.", EventPlayer(), HeroIconString(HeroOf()), "Orbital Laser", perkTimeLimit>,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // CreateInWorldText(
    //     AllPlayers(), <"Irradiating until <0> seconds.", perkTimeLimit>,
    //     landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
    //     Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // lazer body
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
        perkPosition, landPosition,
        Color.Red, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // lazer aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
        landPosition, 5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // lazer sound
    CreateEffect(AllPlayers(), Effect.EnergySound, Color.White,
        landPosition, MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // above lazer aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
         PositionOf(EventPlayer()) + Vector(0, 1000, 0), 30, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity();
    // lazer shell
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.Red,
        landPosition, 0.3, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[6] = LastCreatedEntity();  
    // landing zone warning icon
    // CreateIcon(AllPlayers(), landPosition + (PositionOffset()*2), Icon.Warning,
    //     IconRev.VisibleToAndPosition, Color.Yellow, true);
    // perkEffectAndText[7] = LastCreatedEntity();
    // set hud
    CreatePerkEffectHud(perkEffectStatus == PerkEffectStatus.Triggered ? "locked irradiation point." : "guiding irradiation point.");
    perkEffectAndText[8] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to lock irradiation point.", ButtonGuide(Button.Melee)>);
    perkEffectAndText[9] = LastTextID();  
}
rule: "Perk/Player/OrbitalLaser/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    DestroyEffect(perkEffectAndText[6]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(landPosition);
    // reset icon
    DestroyIcon(perkEffectAndText[7]);
    // reset hud
    DestroyHudText(perkEffectAndText[8]);
    DestroyHudText(perkEffectAndText[9]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/OrbitalLaser/toggleLockPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Melee)
){
    WaitLongPressConfirm();
    if(perkEffectStatus == PerkEffectStatus.Triggered){
        perkEffectStatus = PerkEffectStatus.Ready;
    }
    else{
        perkEffectStatus = PerkEffectStatus.Triggered;
    }
    // play change sound
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxValue());
}

rule: "Perk/Player/OrbitalLaser/launchLazer"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using
){
    // set lazer at above positions over 500m
    perkPosition = AimingPosition() +
        Vector(0, 1000, 0);
    // set lazer land position to aiming position
    landPosition = BelowPosition(AimingPosition());
}

rule: "Perk/Player/OrbitalLaser/aimLandPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready
){
    // chase lazer land position to aiming position
    WaitUpdateShortCycle();
    aimPosition = BelowPosition(AimingPosition());
    define distanceBetween = DistanceBetween(landPosition, aimPosition) * 3.0;
    UpdateEveryFrame(landPosition);
    ChaseVariableAtRate(
        landPosition, aimPosition,
        distanceBetween,
        RateChaseReevaluation.DestinationAndRate);
    ChaseVariableAtRate(
        perkPosition, aimPosition + Vector(0, 500, 0),
        distanceBetween,
        RateChaseReevaluation.DestinationAndRate);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/OrbitalLaser/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.OrbitalLaser &&
    perkState == PerkState.Using
){
    // damage
    Damage(
        PlayersWithinRadius(
            landPosition, lazerDamageRange,
            Team.Team2, RadiusLOS.Off
        ), EventPlayer(), 50);

    // play blast effect
    PlayEffect(
        FilteredArray(
            AllPlayers(),
            // Because it is dazzling, it is hidden at a short distance
            6 <= DistanceBetween(ArrayElement(), landPosition)
        ),
        PlayEffect.BadExplosion,
        Color.Red, landPosition, lazerDamageRange);

    WaitContinuousBlastCycle();
    LoopIfConditionIsTrue();
}

// TAG CarePackage ----------
rule: "Perk/Player/CarePackage/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 10;
    // set param
    perkEffectStatus = 0;
    // show text
    // landing zone text
    perkEffectAndText = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rArrival at <3> second. Stand by...", EventPlayer(), HeroIconString(HeroOf()), "Care Package", perkTimeLimit>,
        landPosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[0] = LastTextID();
    // CreateInWorldText(
    //     AllPlayers(), <"Arrival at <0> second. Stand by...", perkTimeLimit>,
    //     landPosition, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
    //     Color.White, Spectators.DefaultVisibility);
    perkEffectAndText[1] = LastTextID();
    // set effect
    // package body
    CreateEffect(AllPlayers(), Effect.Orb, Color.Turquoise,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();
    // package flare
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.White,
        perkPosition, 5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[3] = LastCreatedEntity();
    // package sound
    CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White,
        perkPosition, MaxLength(), EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[4] = LastCreatedEntity();
    // landing zone smoke
    CreateEffect(AllPlayers(), Effect.Cloud, Color.Turquoise,
        landPosition, 5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[5] = LastCreatedEntity();
    // landing zone light shaft
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.Turquoise,
        landPosition, 0.1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[6] = LastCreatedEntity();
    // landing zone check icon
    CreateIcon(AllPlayers(), landPosition + (Up() * 2), Icon.Heart,
        IconRev.VisibleToAndPosition, Color.Turquoise, true);
    perkEffectAndText[7] = LastCreatedEntity();
}

rule: "Perk/Player/CarePackage/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText[0]);
    DestroyInWorldText(perkEffectAndText[1]);
    // reset effect
    DestroyEffect(perkEffectAndText[2]);
    DestroyEffect(perkEffectAndText[3]);
    DestroyEffect(perkEffectAndText[4]);
    DestroyEffect(perkEffectAndText[5]);
    DestroyEffect(perkEffectAndText[6]);
    StopChasingVariable(perkPosition);
    // reset icon
    DestroyIcon(perkEffectAndText[7]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/CarePackage/playPackageBooster"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 1.0);

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/CarePackage/dropPackage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using
){
    // set package at horizontal positions over 250
    perkPosition = EventPlayer() +
        Vector(0, 125, 0) + RandomPosition(0, 0, 0);
    // set package land position to player position
    landPosition = BelowPosition(EventPlayer());
    // start package move
    UpdateEveryFrame(perkPosition);
    ChaseVariableOverTime(
        perkPosition, landPosition, perkTimeLimit,
        TimeChaseReevaluation.DestinationAndDuration);
}

rule: "Perk/Player/CarePackage/landedToPoint"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.CarePackage &&
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    StopChasingVariable(perkPosition);

    // play landing effect
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosion,
        Color.Turquoise, perkPosition, 10);
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Turquoise, perkPosition, 10);
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, perkPosition, MaxLength());
    
    // Set perk crate count
    perkEffectStatus = RandomInteger(4, 6);
    // Use variables of enemy players who have not dropped the crate
    perkTargets = FilteredArray(
        AllPlayers(Team.Team2),
        ArrayElement().perkCrateState == PerkCrateState.NotDropped);
    if(CountOf(perkTargets) < perkEffectStatus){
        perkEffectStatus = CountOf(perkTargets);
    }
    // Set perk crate position to around of landPosition
    for(pLoopIndex = 0; pLoopIndex < perkEffectStatus; pLoopIndex++){
        perkTargets[pLoopIndex].perkCratePosition = NearestWalkablePosition(
            landPosition + RandomPosition(3, 0, 3)) + PositionOffset();    
        perkTargets[pLoopIndex].perkCrateState = PerkCrateState.Dropped;
    }
    perkState = PerkState.Non;
}

// TAG DeathFromAbove ----------
rule: "Perk/Player/DeathFromAbove/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Press ability1 button <0> to change weapon. now <1>.", ButtonGuide(Button.Ability1),
        IsInAlternateForm()? "5mm Minigun" : "20mm Auto Canon">);
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Press secondary fire button <0> to accelerate.", ButtonGuide(Button.SecondaryFire)>);
    perkEffectAndText[1] = LastTextID();
    CreatePerkEffectHud(<"Press jump button <0> to flying mode.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[2] = LastTextID();
    CreatePerkEffectHud(<"Press crouch button <0> to walking mode.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[3] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Bastion;
    perkHero.statusUnkillable = true;
    perkHero.secondaryFireEnabled = false;
    perkHero.maxHealth = 300;
    perkHero.healingReceived = 5.0;
    perkHero.gravity = 5;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // set status
    StartScalingPlayer(EventPlayer(), 1.5, false);
    StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);

    // fly and change mode
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    PressButton(EventPlayer(), Button.Jump);
    PressButton(EventPlayer(), Button.Ability1);
}

rule: "Perk/Player/DeathFromAbove/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Non
){
    // reset status
    ClearStatus(EventPlayer(), Status.Rooted);
    StopScalingPlayer(EventPlayer());
    StopModifyingHeroVoiceLines(EventPlayer());
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    DestroyHudText(perkEffectAndText[2]);
    DestroyHudText(perkEffectAndText[3]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/DeathFromAbove/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/DeathFromAbove/changeFlyingMode"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    SetStatus(EventPlayer(), null, Status.Rooted, MaxValue());
    SetGravity(EventPlayer(), 5);
    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/DeathFromAbove/changeToLandingMode"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    ClearStatus(EventPlayer(), Status.Rooted);
    SetGravity(EventPlayer(), 100);
    perkEffectStatus = PerkEffectStatus.Ready;
}

define keepHeight: 20;

rule: "Perk/Player/DeathFromAbove/flying"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    define distanceFromSurface = DistanceBetween(EventPlayer(), NearestWalkablePosition(EventPlayer()));
    
    // if near surface
    if(
        distanceFromSurface < keepHeight
    ){
        // float    
        ApplyImpulse(EventPlayer(), Up(),
            (keepHeight - distanceFromSurface) * 0.04,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }

    // if far surface
    if(
        distanceFromSurface > keepHeight
    ){
        // dive    
        ApplyImpulse(EventPlayer(), Down(),
            (distanceFromSurface - keepHeight) * 0.04,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    
    // if press SF button
    if(IsButtonHeld(EventPlayer(), Button.SecondaryFire)){
        // move forword
        ApplyImpulse(EventPlayer(), Forward(), 1.5,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    else{
        ApplyImpulse(EventPlayer(), Forward(), 0.05,
            Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DeathFromAbove/playAfterBurner"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    // play Afterburner
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Orange, PositionOf(EventPlayer()), 0.5);
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

define splashDamageRangeMinigun: 1.0;

rule: "Perk/Player/DeathFromAbove/splashDamageMinigun"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    IsInAlternateForm() &&
    IsFiringPrimary()
){
    // get aimPosition
    aimPosition = AimingPosition();
    define randomPosition = RandomPosition(0.625, 0.625, 0.625);
    // splash damage
    Damage(
        PlayersWithinRadius(
            aimPosition + randomPosition, splashDamageRangeMinigun,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 50);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Yellow,
        aimPosition + randomPosition,
        splashDamageRangeMinigun);
    WaitContinuousBlastCycle();

    LoopIfConditionIsTrue();
}

define splashDamageRangeAutoCanon: 2.0;

rule: "Perk/Player/DeathFromAbove/splashDamageAutoCanon"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    !IsInAlternateForm() &&
    IsFiringPrimary()
){
    // get aimPosition
    aimPosition = AimingPosition();
    landPosition = RandomPosition(1.25, 1.25, 1.25);

    // auto canon
    // splash damage
    Damage(
        PlayersWithinRadius(
            aimPosition + landPosition, splashDamageRangeAutoCanon,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 80);
    // play blast
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.GoodExplosion,
        Color.Orange, aimPosition + landPosition,
        splashDamageRangeAutoCanon);
    Wait(0.15, WaitBehavior.IgnoreCondition);
    
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DeathFromAbove/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DeathFromAbove/setTankModeDamageBuff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    SetDamageDealt(EventPlayer(), 200);
}

rule: "Perk/Player/DeathFromAbove/resetTankModeDamageBuff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DeathFromAbove &&
    perkState == PerkState.Using &&
    !IsUsingUltimate()
){
    SetDamageDealt(EventPlayer(), 100);
}

// TAG LegendalyNinja ----------
rule: "Perk/Player/LegendalyNinja/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold jump button <0> to shot grapple hook.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Genji;
    perkHero.statusInvincible = true;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/LegendalyNinja/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/LegendalyNinja/shotGrappleHook"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    AbortIf(perkEffectStatus == PerkEffectStatus.Triggered);
    WaitLongPressConfirm();

    perkTargets = AimingPlayer();
    if(perkTargets != null){
        SetStatus(perkTargets, EventPlayer(), Status.Stunned, 1.0);
        WaitEntityImpulse();
        // pull target
        if(DistanceBetween(EventPlayer(), perkTargets) <= 100){
            CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
                EventPlayer(), perkTargets,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(perkTargets, 
                VectorTowards(perkTargets, PositionOf(EventPlayer()) + Up()),
                DistanceBetween(perkTargets, EventPlayer()) * 2.0,
                Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    else{
        // move in air
        aimPosition = AimingPosition();
        if(DistanceBetween(EventPlayer(), aimPosition) <= 100){
            CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
                EventPlayer(), aimPosition,
                Color.Green, EffectRev.VisibleToPositionAndRadius);
            perkEffectAndText[1] = LastCreatedEntity();
            ApplyImpulse(EventPlayer(), VectorTowards(EventPlayer(), aimPosition),
                35, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    perkEffectStatus = PerkEffectStatus.Triggered;

    WaitPlayEffect();// show beam effect
    DestroyEffect(perkEffectAndText[1]);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/LegendalyNinja/addActivityTime"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using
){
    SmallMessage(EventPlayer(), "Added 2 seconds of activity time.");
    perkTimeLimit += 2;
}

rule: "Perk/Player/LegendalyNinja/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.LegendalyNinja &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 8));
    LoopIfConditionIsTrue();
}

// TAG MachDelivery ----------
rule: "Perk/Player/MachDelivery/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 240;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Tracer;
    perkHero.statusUnkillable = true;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
}

rule: "Perk/Player/MachDelivery/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Non
){
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/MachDelivery/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/MachDelivery/startBombDelifering"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    perkEffectStatus = PerkEffectStatus.Triggered;
    Wait(2.5, WaitBehavior.RestartWhenTrue);    // wait release delifering
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/MachDelivery/rechargeByBombCriticalDamage"
Event.OnDamageDealt
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    EventDamage() >= 300
){
    SetUltimateCharge(EventPlayer(), 100);
}

rule: "Perk/Player/MachDelivery/rechargeByBombKill"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    SetUltimateCharge(EventPlayer(), 100);
}

rule: "Perk/Player/MachDelivery/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.MachDelivery &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 6));
    LoopIfConditionIsTrue();
}

// TAG Juggernaut ----------
rule: "Perk/Player/Juggernaut/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Press secondary fire button <0> to shot gravity bomb.", ButtonGuide(Button.SecondaryFire)>);
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Orisa;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 300;
    perkHero.healingReceived = 5.0;
    perkHero.damageDealt = 150;
    perkHero.gravity = 300;
    perkHero.moveSpeed = 75;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    // set status
    StartScalingPlayer(EventPlayer(), 1.5, false);
    StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);

    // use secondary
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    PressButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Perk/Player/Juggernaut/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Non
){
    // reset status
    StopScalingPlayer(EventPlayer());
    StopModifyingHeroVoiceLines(EventPlayer());
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Juggernaut/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Juggernaut/setFiringSlow"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    IsFiringPrimary()
)
{
    SetMoveSpeed(EventPlayer(), 25);
}

rule: "Perk/Player/Juggernaut/resetFiringSlow"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    !IsFiringPrimary()
)
{
    SetMoveSpeed(EventPlayer(), 75);
}

rule: "Perk/Player/Juggernaut/splashDamage"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    IsFiringPrimary()
)
{
    // get aimPosition  
    aimPosition = AimingPosition();
    landPosition = RandomPosition(0.5, 0.5, 0.5);
    // splash damage
    Damage(
        PlayersWithinRadius(
            aimPosition + landPosition, splashDamageRangeMinigun,
            Team.Team2, RadiusLOS.Off),
        EventPlayer(), 40);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Green, aimPosition + landPosition, splashDamageRangeMinigun);
    
    WaitContinuousBlastCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Juggernaut/shotGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsFiringSecondary()
){
    perkEffectStatus = PerkEffectStatus.Disabled;
    aimPosition2 = AimingPositionIgnorePlayer();
    perkPosition2 = EyePosition();
    // show aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.LimeGreen,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // follow the original ability effect
    UpdateEveryFrame(perkPosition2);
    ChaseVariableAtRate(perkPosition2, aimPosition2,
        26, RateChaseReevaluation.DestinationAndRate);
    // wait can trigger
    Wait(0.2, WaitBehavior.IgnoreCondition);    
    perkEffectStatus = PerkEffectStatus.Triggered;
}

define gravityBombDamageRange: 6;

rule: "Perk/Player/Juggernaut/triggerGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    ExplodeGravityBomb();
}

rule: "Perk/Player/Juggernaut/landedGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    perkPosition2 == aimPosition2
){
    ExplodeGravityBomb();
}

rule: "Perk/Player/Juggernaut/timeoutGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    ExplodeGravityBomb();
}

void ExplodeGravityBomb()"ExplodeGravityBomb"{
    perkEffectStatus = PerkEffectStatus.SecondTriggered;
    // stop aura
    StopChasingVariable(perkPosition2);
    // hide aura
    DestroyEffect(perkEffectAndText[1]);
    // wait builtin ability effect play
    Wait(0.9, WaitBehavior.IgnoreCondition);
    // start change as cooldown
    perkEffectStatus = PerkEffectStatus.Reloading;
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition2, gravityBombDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perkTargets, perkPosition2, gravityBombDamageRange);
    // damage
    Damage(perkTargets, EventPlayer(), 600);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, perkPosition2, MaxLength());
    // play blast effect
    PlayContinuousBlast(
        Color.LimeGreen,
        perkPosition2,
        gravityBombDamageRange,
        5);
}

rule: "Perk/Player/Juggernaut/coolDownGravityBomb"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Juggernaut &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    Wait(5.25, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = PerkEffectStatus.Ready;
}

// TAG BeamSniper ----------
rule: "Perk/Player/BeamSniper/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = PerkEffectStatus.Reloading;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud("Critical damage chance when blinking blue");
    perkEffectAndText[0] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Widowmaker;
    perkHero.statusUnkillable = true;
    perkHero.damageDealt = 200;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);

    // use ult
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/BeamSniper/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Non
){
    // reset effect
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/BeamSniper/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/BeamSniper/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 6));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BeamSniper/startCharge"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire) &&
    IsFiringSecondary() &&
    !IsFiringPrimary()
){
    Wait(1.3, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/BeamSniper/cancelCharge"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    !IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    perkEffectStatus = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/BeamSniper/markTarget"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready
){
    perkTargets = FilteredArray(
        PlayersInViewAngle(EventPlayer(), Team.Team2, 1.25),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        PlayEffect(
            EventPlayer(), PlayEffect.GoodPickupEffect,
            Color.Aqua, perkTargets, 1.0);
        PlayEffect(
            EventPlayer(), PlayEffect.GoodExplosion,
            Color.Aqua, AimingPosition(), 0.01);
    }

    // Since the impact point will shift due to the recoil when shooting, get the position before shooting
    aimPosition = AimingPosition();     

    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

define beamSniperDamageRange: 3;

rule: "Perk/Player/BeamSniper/shotSniperBeam"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.BeamSniper &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    AbortIf(perkEffectStatus == PerkEffectStatus.Reloading);
    perkEffectStatus = PerkEffectStatus.Reloading;

    // give hit damage to enemy near penetration ballistic
    if(perkTargets != []){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Aqua, perkTargets, beamSniperDamageRange);
        Damage(perkTargets, EventPlayer(), 400);
    }
    // give splash damage to enemy near landed position
    perkTargets = FilteredArray(
        PlayersWithinRadius(aimPosition, beamSniperDamageRange, Team.Team2, RadiusLOS.Off),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        Damage(perkTargets, EventPlayer(), 100);
    }

    // set offset for gun sight
    perkPosition = EyePosition() - PositionOffset(); 

    // set landing position for penetration
    landPosition = EyePosition() +
        (FacingDirectionOf() * MaxLength());

    // play shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.Aqua, EventPlayer(), 100);
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Aqua, perkPosition + (FacingDirectionOf() * 1), 1.0);
    // play landed position blast
    PlayContinuousBlast(
        Color.Aqua,
        aimPosition,
        beamSniperDamageRange,
        3);

    // show ballistics for aiming
    CreateBeamEffect(AllPlayers(),
        BeamType.BadBeam, perkPosition, aimPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[1] = LastCreatedEntity();
    // show ballistic for penetration
    CreateBeamEffect(AllPlayers(),
        BeamType.BadBeam, aimPosition, landPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText[2] = LastCreatedEntity();

    WaitPlayEffect();
    DestroyEffect(perkEffectAndText[1]);
    DestroyEffect(perkEffectAndText[2]);
}

// TAG DragonStorm ----------
playervar define isInAir;
playervar define deployDragonNum;

rule: "Perk/Player/DragonStorm/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud("More hold to shot dragon storm.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Press ultimate button <0> to shot dragon strike.", ButtonGuide(Button.Ultimate)>);
    perkEffectAndText[1] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Hanzo;
    perkHero.statusUnkillable = true;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
}

rule: "Perk/Player/DragonStorm/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Non
){
    // reset status
    ClearStatus(EventPlayer(), Status.Rooted);
    StopFacing();
    if(isInAir){
        Teleport(EventPlayer(), PositionOf() + Vector(0, -60, 0));
    }
    isInAir = false;
    // hide enemy outline
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        EventPlayer()
    );
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/DragonStorm/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

define maxOfDragon: 9;
rule: "Perk/Player/DragonStorm/startDragonStorm"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Ready &&
    IsUsingUltimate()
){
    WaitLongPressConfirm();
    AbortIf(!IsButtonHeld(EventPlayer(), Button.Ultimate));

    CancelPrimaryAction();
    // jump movement
    ApplyImpulse(EventPlayer(), Up(),
        20, Relative.ToWorld, ContraryMotion.Cancel);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    // set position
    Teleport(EventPlayer(), PositionOf() + Vector(0, 60, 0));
    isInAir = true;
    perkPosition = PositionOf();
    // set status
    SetStatus(EventPlayer(), null, Status.Rooted, MaxValue());
    SetGravity(EventPlayer(), 0);
    SetDamageDealt(EventPlayer(), 700);
    // show enemy outline
    StartForcingPlayerOutlines(
        AllLivingPlayers(Team.Team2),
        EventPlayer(),
        true,
        Color.Red,
        OutlineType.Always
    );  
    // face enemy
    perkTargets = ClosestPlayerTo(EventPlayer(), Team.Team2);
    // start auto aim
    StartAutoAiming(perkTargets);
    Wait(0.25, WaitBehavior.IgnoreCondition);
    StopFacing();

    // wait aim
    Wait(0.5, WaitBehavior.IgnoreCondition);

    deployDragonNum = 0;
    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/DragonStorm/deployDragons"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    deployDragonNum < maxOfDragon &&
    !IsUsingUltimate()
){
    SetUltimateCharge(EventPlayer(), 100);
    SetProjectileSpeed(EventPlayer(), 5 + deployDragonNum);
    PressButton(EventPlayer(), Button.Ultimate);
    deployDragonNum ++;
}

rule: "Perk/Player/DragonStorm/finishDragonStorm"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Triggered &&
    deployDragonNum >= maxOfDragon
){
    // wait  final deploy
    Wait(5.5, WaitBehavior.AbortWhenFalse);
    // reset position
    Teleport(EventPlayer(), PositionOf() - Vector(0, 60, 0));
    isInAir = false;
    // reset status
    SetProjectileSpeed(EventPlayer(), DefaultPercentage());
    ClearStatus(EventPlayer(), Status.Rooted);
    SetGravity(EventPlayer(), DefaultPercentage());
    SetDamageDealt(EventPlayer(), 150);
    // hide enemy outline
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        EventPlayer()
    );
    // face enemy
    perkTargets = ClosestPlayerTo(EventPlayer(), Team.Team2);
    // start auto aim
    StartAutoAiming(perkTargets);
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    StopFacing();

    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/DragonStorm/keepPosition"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    isInAir &&
    DistanceBetween(EventPlayer(), perkPosition) >= 0.01
){
    ApplyImpulse(EventPlayer(), VectorTowards(EventPlayer(), perkPosition),
        DistanceBetween(EventPlayer(), perkPosition),
        Relative.ToWorld, ContraryMotion.Cancel);
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/DragonStorm/addActivityTime"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using
){
    SmallMessage(EventPlayer(), "Added 3 seconds of activity time.");
    perkTimeLimit += 3;
}

rule: "Perk/Player/DragonStorm/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.DragonStorm &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

// TAG Titan ----------
playervar define titanHealthPoolID;

rule: "Perk/Player/Titan/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = 0;
    rider = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(
        rider != 0 ?
            <"<0> <1> riding on your back.", rider, HeroIconString(HeroOf(rider))> :
            "Teammate can ride your back.");
    perkEffectAndText[0] = LastTextID();
    CreatePerkEffectHud(<"Hold crouch or crouch button <0> to get smaller.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[1] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Reinhardt;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 200;
    perkHero.healingReceived = 10.0;
    perkHero.damageDealt = 300;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // set pool health
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 1500, true, false);
    titanHealthPoolID = LastCreatedHealthPool();

    // start grow big
    PressButton(EventPlayer(), Button.Crouch);
}

rule: "Perk/Player/Titan/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Non
){
    // set param
    perkEffectStatus = 0;
    DetachPlayers(rider);
    Teleport(rider, EventPlayer());
    rider.ridingTitan = 0;
    rider = 0;
    // reset hud
    DestroyHudText(perkEffectAndText[0]);
    DestroyHudText(perkEffectAndText[1]);
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset status
    RemoveHealthPoolFromPlayer(titanHealthPoolID);
    StopScalingPlayer(EventPlayer());
    StopModifyingHeroVoiceLines(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Titan/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Titan/growBig"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    !(IsCrouching() || IsButtonHeld(EventPlayer(), Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);

    if(!( 0 <= perkEffectStatus && perkEffectStatus <= 1)) perkEffectStatus = 0;
    while(perkEffectStatus < 1){
        StartScalingPlayer(EventPlayer(), 1 + (perkEffectStatus * 1.25), false);
        perkEffectStatus += 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);
}

rule: "Perk/Player/Titan/getSmall"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    (IsCrouching() || IsButtonHeld(EventPlayer(), Button.Crouch))
){
    DetachPlayers(rider);
    Teleport(rider, EventPlayer());
    rider.ridingTitan = 0;
    rider = 0;

    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);

    if(!( 0 <= perkEffectStatus && perkEffectStatus <= 1)) perkEffectStatus = 1;
    while(perkEffectStatus > 0){
        StartScalingPlayer(EventPlayer(), 1 + (perkEffectStatus * 1.25), false);
        perkEffectStatus -= 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(EventPlayer(), 1.0, false);
}

rule: "Perk/Player/Titan/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Titan &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

define canRideRange : 6.0;
define nearTitan:
    FilteredArray(
        AllPlayers(Team.Team1),
        (
            ArrayElement() != EventPlayer() &&
            ArrayElement().perkType == PerkType.Titan &&
            ArrayElement().perkState == PerkState.Using &&
            ArrayElement().rider == 0 &&
            ArrayElement().perkEffectStatus == 1 &&
            DistanceBetween(EventPlayer(), ArrayElement()) <= canRideRange
        )
    );
define canRide:
    IsAlive() &&
    ridingTitan == 0 &&
    CountOf(nearTitan) > 0;

playervar define rider;

rule: "Perk/Player/Titan/showOperationGetOn"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    canRide
){
    // set hud
    CreatePerkEffectHud(<"Hold jump button <0> to get on titan.", ButtonGuide(Button.Jump)>);
    perkEffectAndText[200] = LastTextID();
}

rule: "Perk/Player/Titan/hideOperationGetOn"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !canRide
){
    DestroyHudText(perkEffectAndText[200]);
}

playervar define ridingTitan;

rule: "Perk/Player/Titan/getOnTitan"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    canRide &&
    IsButtonHeld(EventPlayer(), Button.Jump)
){
    WaitLongPressConfirm();

    SmallMessage(EventPlayer(), "Killed enemy on riding Titan, can add Titan's activity time.");
    ridingTitan = FirstOf(nearTitan);
    AttachPlayers(EventPlayer(), ridingTitan, Up() * 3.75);
    ridingTitan.rider = EventPlayer();
}

rule: "Perk/Player/Titan/showOperationGetOff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    ridingTitan != 0
){
    // set hud
    CreatePerkEffectHud(<"Press crouch button <0> to get off titan.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText[201] = LastTextID();
}

rule: "Perk/Player/Titan/hideOperationGetOff"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    ridingTitan == 0
){
    DestroyHudText(perkEffectAndText[201]);
}

rule: "Perk/Player/Titan/addActivityTime"
Event.OnFinalBlow
Team.Team1
Player.All
if(
    ridingTitan.perkType == PerkType.Titan &&
    ridingTitan.perkState == PerkState.Using
){
    SmallMessage(EventPlayer(), "Added 8 seconds of titan's activity time.");
    ridingTitan.perkTimeLimit += 8;
}

rule: "Perk/Player/Titan/getOffTitan"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    ridingTitan != 0 &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    DetachPlayers(ridingTitan.rider);
    Teleport(EventPlayer(), ridingTitan);
    ridingTitan.rider = 0;
    ridingTitan = 0;
}

// TAG Annihilator ----------
rule: "Perk/Player/Annihilator/activate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using
){
    // set time limit
    perkTimeLimit = 150;
    // set param
    perkEffectStatus = 0;
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Reaper;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 150;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(EventPlayer(), perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // use ult
    PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Perk/Player/Annihilator/deactivate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Non
){
    // reset param
    StopCamera(EventPlayer());
    perkEffectStatus = 0;
    // reset perk hero
    StopForcingPerkHero(EventPlayer());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Annihilator/brokenPerk //by helth 1"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    Health() <= 1
){
    WaitConditionConfirmed();// If the hero changes, the health is determined to be 0. Avoid waiting by adding waits.
    perkState = PerkState.Non;
}

rule: "Perk/Player/Annihilator/startAnnihilate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    SetDamageDealt(EventPlayer(), 400);
    SetMoveSpeed(EventPlayer(), 400);

    perkTargets = 
        SortedArray(
            FilteredArray(
                AllPlayers(Team.Team2), 
                (
                    IsAlive(ArrayElement()) &&
                    IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)
                )
            ),
            Health(ArrayElement())
        );
    // get target with insight and lowest health
    perkTargets = FirstOf(perkTargets);

    perkPosition = EyePosition();
    if(perkTargets != 0){
        // set camera
        StartCamera(EventPlayer(), perkPosition, EyePosition(), 10);
    }

    perkEffectStatus = 0;
}

rule: "Perk/Player/Annihilator/chaseNextTarget"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    IsUsingUltimate()
){
    perkEffectStatus ++;

    perkTargets = 
        SortedArray(
            FilteredArray(
                AllPlayers(Team.Team2), 
                (
                    IsAlive(ArrayElement()) &&
                    IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)
                )
            ),
            Health(ArrayElement())
        );
    if(perkEffectStatus <= 22){
        // get target with insight and lowest health for kill more
        perkTargets = FirstOf(perkTargets);
    }
    else{
        // get target with insight and highst health for deal finish damage
        perkTargets = LastOf(perkTargets);
    }

    if(perkTargets == 0){
        // get target with near random
        perkTargets = RandomValueInArray(perkTargets);
            RandomValueInArray(
                FilteredArray(
                    AllPlayers(Team.Team2), 
                    (
                        IsAlive(ArrayElement()) &&
                        DistanceBetween(EventPlayer(), ArrayElement()) <= 10
                    )
                )
            );
    }
    if(perkTargets != 0){
        // chase target
        ApplyImpulse(EventPlayer(),
            VectorTowards(EventPlayer(), perkTargets+ RandomPosition(1, 1, 1)),
            10000, Relative.ToWorld, ContraryMotion.Cancel);
        // play movement pulse
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Red, EventPlayer(), 1.0);

        // camera too far to player
        if(DistanceBetween(perkPosition, EyePosition()) > 20){
            // camera set to middle point
            perkPosition = (perkPosition + EyePosition()) / 2;
        }
        // camera too close to player
        if(DistanceBetween(perkPosition, EyePosition()) < 5){
            // camera move to backword
            perkPosition = perkPosition + (VectorTowards(perkTargets, perkPosition) * 1.5);
        }
        // camera blocked to player
        while(!IsInLineOfSight(perkPosition, EyePosition(), BarrierLOS.NoBarriersBlock)){
            // camera set to middle point
            perkPosition = (perkPosition + EyePosition()) / 2;
        }
        // update camera
        StartCamera(EventPlayer(), perkPosition, EyePosition(), 10);
    }

    WaitUpdateVeryShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Annihilator/finishAnnihilate"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    !IsUsingUltimate()
){
    // finish damage
    Damage(
        PlayersWithinRadius(PositionOf(EventPlayer()), 10, Team.Team2, RadiusLOS.Off ),
        EventPlayer(), MaxValue()
    );

    SetDamageDealt(EventPlayer(), 200);
    SetMoveSpeed(EventPlayer(), 150);
    StopCamera(EventPlayer());

    Wait(4, WaitBehavior.AbortWhenFalse);

    perkEffectStatus = 0;
    SetDamageDealt(EventPlayer(), 200);
    SetMoveSpeed(EventPlayer(), 150);
    StopCamera(EventPlayer());
}

rule: "Perk/Player/Annihilator/returnGround"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    perkEffectStatus > 0
){
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    if(
        DistanceBetween(
            EventPlayer(),
            NearestWalkablePosition(EventPlayer())
        ) >= 5
    ){
        // return to safe ground
        Teleport(EventPlayer(), NearestWalkablePosition(EventPlayer()));
        // play movement pulse
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Red, EventPlayer(), 1.0);
    }
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Annihilator/chargingUlt"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Annihilator &&
    perkState == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(EventPlayer(), (UltimateChargePercent() + 4));
    LoopIfConditionIsTrue();
}
