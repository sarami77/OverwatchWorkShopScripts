import "Utility.ostw";
import "Debug.ostw";

// Function enable team is Team1
globalvar define lotteryPerkList;
playervar define perkCratePosition;
playervar define perkCrateState;
enum PerkCrateState{
    NotDropped,
    Dropped
}
playervar define perkCrateEntitys;
playervar define perkType;
enum PerkType{  // TAG perk type
    Non,
    HighJump,
    GrapplingBeam,
    Sprinter,
    Adrenaline,
    Savior,
    Fearless,
    SteelFormation,
    PersonalShelter,
    BioticStation,
    TrapBeam,
    BattleFlag,
    ChainExplosion,
    IceAge,
    AimHack,
    Vampire,
    HotShot,
    ShotCaller,
    GrudgeFireBall,
    GrudgeThunderStrike,
    ArtilleryRequest,
    StrafingSupport,
    CruisingMissile,
    OrbitalLaser,
    CarePackage,
    DeathFromAbove,
    LegendalyNinja,
    MachDelivery,
    Juggernaut,
    BeamSniper,
    DragonStorm,
    Titan,
    Annihilator,
    End
}
playervar define perkState;
enum PerkState{
    Non,
    Ready,
    Using
}

globalvar define lotteryPerkListOrder;
playervar define perkHudEntitys;

void addLottelyPerk(define perkType, define count)"addLottelyPerk"{
    for(define countIdx = 0; countIdx < count; countIdx++)
        lotteryPerkList[CountOf(lotteryPerkList)] = perkType;
}

rule: "Perk/buildLotteryPerkList // list of parks you can pick up"
Event.OngoingGlobal
{
    lotteryPerkListOrder = 0;
    lotteryPerkList = [];     // TAG lottery perk list
    addLottelyPerk(PerkType.HighJump,               WorkshopSettingInteger("Perk Settings", "(High Jump) Included Amount",                  10, 0, 1000, 0)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.GrapplingBeam,          WorkshopSettingInteger("Perk Settings", "(Grappling Beam) Included Amount",             10, 0, 1000, 1)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Sprinter,               WorkshopSettingInteger("Perk Settings", "(Sprinter) Included Amount",                   10, 0, 1000, 2)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Adrenaline,             WorkshopSettingInteger("Perk Settings", "(Adrenaline) Included Amount",                 10, 0, 1000, 3)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Savior,                 WorkshopSettingInteger("Perk Settings", "(Savior) Included Amount",                     10, 0, 1000, 4)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Fearless,               WorkshopSettingInteger("Perk Settings", "(Fearless) Included Amount",                   10, 0, 1000, 5)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.SteelFormation,         WorkshopSettingInteger("Perk Settings", "(Steel Formation) Included Amount",            10, 0, 1000, 6)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.PersonalShelter,        WorkshopSettingInteger("Perk Settings", "(Personal Shelter) Included Amount",           10, 0, 1000, 7)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.BioticStation,          WorkshopSettingInteger("Perk Settings", "(Biotic Station) Included Amount",             10, 0, 1000, 8)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.TrapBeam,               WorkshopSettingInteger("Perk Settings", "(Trap Beam) Included Amount",                  10, 0, 1000, 9)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.BattleFlag,             WorkshopSettingInteger("Perk Settings", "(Battle Flag) Included Amount",                10, 0, 1000, 10)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.ChainExplosion,         WorkshopSettingInteger("Perk Settings", "(Chain Explosion) Included Amount",            10, 0, 1000, 11)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.IceAge,                 WorkshopSettingInteger("Perk Settings", "(Ice Age) Included Amount",                    10, 0, 1000, 12)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.AimHack,                WorkshopSettingInteger("Perk Settings", "(Aim Hack) Included Amount",                   10, 0, 1000, 13)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Vampire,                WorkshopSettingInteger("Perk Settings", "(Vampire) Included Amount",                    10, 0, 1000, 14)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.HotShot,                WorkshopSettingInteger("Perk Settings", "(Hot Shot) Included Amount",                   10, 0, 1000, 15)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.ShotCaller,             WorkshopSettingInteger("Perk Settings", "(Shot Caller) Included Amount",                10, 0, 1000, 16)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.GrudgeFireBall,         WorkshopSettingInteger("Perk Settings", "(Grudge Fire Ball) Included Amount",           10, 0, 1000, 17)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.GrudgeThunderStrike,    WorkshopSettingInteger("Perk Settings", "(Grudge Thunder Strike) Included Amount",      10, 0, 1000, 18)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.StrafingSupport,        WorkshopSettingInteger("Perk Settings", "(Strafing Support) Included Amount",           10, 0, 1000, 19)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.ArtilleryRequest,       WorkshopSettingInteger("Perk Settings", "(Artillery Request) Included Amount",          10, 0, 1000, 20)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.CruisingMissile,        WorkshopSettingInteger("Perk Settings", "(Cruising Missile) Included Amount",           10, 0, 1000, 21)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.OrbitalLaser,           WorkshopSettingInteger("Perk Settings", "(Orbital Laser) Included Amount",              10, 0, 1000, 22)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.CarePackage,            WorkshopSettingInteger("Perk Settings", "(Care Package) Included Amount",               10, 0, 1000, 23)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.DeathFromAbove,         WorkshopSettingInteger("Perk Settings", "(Death From Above) Included Amount",           10, 0, 1000, 24)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.LegendalyNinja,         WorkshopSettingInteger("Perk Settings", "(Legendaly Ninja) Included Amount",            10, 0, 1000, 25)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.MachDelivery,           WorkshopSettingInteger("Perk Settings", "(Mach Delivery) Included Amount",              10, 0, 1000, 26)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Juggernaut,             WorkshopSettingInteger("Perk Settings", "(Juggernaut) Included Amount",                 10, 0, 1000, 27)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.BeamSniper,             WorkshopSettingInteger("Perk Settings", "(Beam Sniper) Included Amount",                10, 0, 1000, 28)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.DragonStorm,            WorkshopSettingInteger("Perk Settings", "(Dragon Storm) Included Amount",               10, 0, 1000, 29)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Titan,                  WorkshopSettingInteger("Perk Settings", "(Titan) Included Amount",                      10, 0, 1000, 30)); lotteryPerkListOrder++;
    addLottelyPerk(PerkType.Annihilator,            WorkshopSettingInteger("Perk Settings", "(Annihilator) Included Amount",                10, 0, 1000, 31)); lotteryPerkListOrder++;
}

rule: "Perk/CreatState/NotDropped"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.NotDropped
){
    // Reset param
    perkCratePosition = 0;
    // Hide perk effect and text
    DestroyInWorldText(perkCrateEntitys[0]);
    DestroyEffect(perkCrateEntitys[1]);
}

rule: "Perk/CreatState/Dropped"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped
){
    // show perk effect and text
    CreateInWorldText(
        AllPlayers(), "Perk Crate", 
        perkCratePosition, 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkCrateEntitys[0] = LastTextID();
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkCratePosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkCrateEntitys[1] = LastCreatedEntity();
}

rule: "Perk/Enemy/dropPerkCrate // drop by some probability on death"
Event.OnDeath
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.NotDropped &&
    Attacker() != EventPlayer()
){
    // The more people who do not have a park, the higher the drop rate
    if(
        RandomReal(0, 100)
            <=
        ( 
            WorkshopSettingReal("Perk Settings", "Perk Crate Drop Rate When Enemy Kill", 8.0, 0, 100, -1)		// TAG perk drop rate
        )
    ){
        // Set perk crate position from killed enemry position
        perkCrateState = PerkCrateState.NotDropped;
        WaitChangeState();
        perkCratePosition = BelowPosition(PositionOf()) + PositionOffset();
        perkCrateState = PerkCrateState.Dropped;
    }
}

rule: "Perk/Enemy/clearPerkCrate //by 30second timer"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped
){
    // delete perk crate after a some time
    Wait(30, WaitBehavior.AbortWhenFalse);  // wait clear perk
    perkCrateState = PerkCrateState.NotDropped;
}

define pickupRange : 2.5;
playervar define playerClosestCrate;

rule: "Perk/Enemy/perkPickUpByPlayer //Giving a park to the player who touched the crate"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped &&
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                !ArrayElement().notPickupPerk &&
                TeamOf(ArrayElement()) == Team.Team1 &&
                ArrayElement().perkState == PerkState.Non &&
                DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
            )
        )
    ) > 0
){
    // When a player approaches the position where the perk crate drops,
    //  give the player a random perk
    WaitConditionConfirmed();
    playerClosestCrate = 
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    TeamOf(ArrayElement()) == Team.Team1 &&
                    ArrayElement().perkState == PerkState.Non &&
                    DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
                )
            )
        );
    // play pickup effect, message
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, playerClosestCrate, 1);
    PlayEffect(
        playerClosestCrate, PlayEffect.BuffExplosionSound,
        Color.White, playerClosestCrate, MaxLength());
    SmallMessage(playerClosestCrate, "Got perk. Check detail from left list.");
    // set perk
    if(dropedPerkType != PerkType.Non){
        playerClosestCrate.perkType = dropedPerkType;
        dropedPerkType = PerkType.Non;
    }
    else{
        playerClosestCrate.perkType = RandomValueInArray(lotteryPerkList);
    }
    playerClosestCrate.perkState = PerkState.Ready;
    // delete perk crate when picked up
    perkCrateState = PerkCrateState.NotDropped;
}

rule: "Perk/Enemy/alreadykPickUpByPlayer"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped &&
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                TeamOf(ArrayElement()) == Team.Team1 &&
                IsAlive(ArrayElement()) &&
                ArrayElement().perkState != PerkState.Non &&
                DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
            )
        )
    ) > 0
){
    WaitConditionConfirmed();
    playerClosestCrate = 
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    TeamOf(ArrayElement()) == Team.Team1 &&
                    IsAlive(ArrayElement()) &&
                    ArrayElement().perkState != PerkState.Non &&
                    DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
                )
            )
        );

    // If player already have perk
    SmallMessage(playerClosestCrate, "Already have perk.");
    SmallMessage(playerClosestCrate, <"First, double press interact button <0> to cancel current perk.", ButtonGuide(Button.Interact)> );
}

rule: "Perk/Player/ParkState/Non"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Non &&
    perkState == PerkState.Non
){
    // Hide perk hud
    HidePerkHUD();
}

rule: "Perk/Player/ParkState/Ready"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType != PerkType.Non &&
    perkState == PerkState.Ready
){
    // Update perk hud
    HidePerkHUD();
    ShowPerkHUD();
}

rule: "Perk/Player/ParkState/Using"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType != PerkType.Non &&
    perkState == PerkState.Using
){
    // Update perk hud
    HidePerkHUD();
    ShowPerkHUD();
}

// TAG Common Property ----------
class PerkHero{
    public define hero = null;
    public define statusUnkillable = false;
    public define statusInvincible = false;
    public define primaryFireEnabled = true;
    public define secondaryFireEnabled = true;
    public define ability1Enabled = true;
    public define ability2Enabled = true;
    public define maxHealth = 100;
    public define healingReceived = 100;
    public define damageDealt = 100;
    public define gravity = 100;
    public define moveSpeed = 100;
    public define projectileSpeed = 100;
    public define ultimateCharge = 0;
}

void ForcePlayerPerkHero(
    define target,
    PerkHero perkHero
)"ForcePlayerPerkHero"{
    // set hero
    if(perkHero.hero != null){
        target.originalHero = HeroOf(target);
        ForcePlayerHero(EventPlayer(), perkHero.hero);
    }
    
    // set primaryFireEnabled
    SetPrimaryFireEnabled(target, perkHero.primaryFireEnabled);
    // set secondaryFireEnabled
    SetSecondaryFireEnabled(target, perkHero.secondaryFireEnabled);
    // set ability1Enabled
    SetAbility1Enabled(target, perkHero.ability1Enabled);
    // set ability2Enabled
    SetAbility2Enabled(target, perkHero.ability2Enabled);
    
    // set damageDealt
    SetDamageDealt(target, perkHero.damageDealt);
    // set gravity
    SetGravity(target, perkHero.gravity);
    // set moveSpeed
    SetMoveSpeed(target, perkHero.moveSpeed);
    // set projectileSpeed
    SetProjectileSpeed(target, perkHero.projectileSpeed);

    // set maxHealth. 
    SetMaxHealth(target, perkHero.maxHealth);
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait change MaxHealth
    // heal to maxHealth. Heal before set healingReceived
    Heal(target, null, MaxValue());
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait heal
    // set healingReceived
    SetHealingReceived(target, perkHero.healingReceived);
    // set ultimateCharge
    SetUltimateCharge(target, perkHero.ultimateCharge);

    // set status Unkillable
    if(perkHero.statusUnkillable) SetStatus(target, null, Status.Unkillable, MaxValue());
    // set status Invincible
    if(perkHero.statusInvincible) SetStatus(target, null, Status.Invincible, MaxValue());
}

void StopForcingPerkHero(define target)"StopForcingPerkHero"{
    // reset hero
    ForcePlayerHero(target, target.originalHero);
    StopForcingHero(target);

    // reset primaryFireEnabled
    SetPrimaryFireEnabled(target, true);
    // reset secondaryFireEnabled
    SetSecondaryFireEnabled(target, true);
    // reset ability1Enabled
    SetAbility1Enabled(target, true);
    // reset ability2Enabled
    SetAbility2Enabled(target, true);

    // reset damageDealt
    SetDamageDealt(target, DefaultPercentage());
    // reset gravity
    SetGravity(target, DefaultPercentage());
    // reset moveSpeed
    SetMoveSpeed(target, DefaultPercentage());
    // reset projectileSpeed
    SetProjectileSpeed(target, DefaultPercentage());
    // reset ultimateCharge
    SetUltimateCharge(target, 0);

    // reset healingReceived
    SetHealingReceived(target, DefaultPercentage());
    // reset maxHealth
    SetMaxHealth(target, DefaultPercentage());
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait change MaxHealth
    // heal to maxHealth. Heal after reset healingReceived
    Heal(target, null, MaxValue());
    Wait(0.25, WaitBehavior.IgnoreCondition); // wait heal

    // reset statusUnkillble
    ClearStatus(target, Status.Unkillable);
    // reset statusInvincible
    ClearStatus(target, Status.Invincible);
}

playervar define perkTimeLimit;
playervar define originalHero;
playervar define perkName = "";
playervar define perkDetail = "";

playervar define perkEffectAndText;
playervar define perkEffectStatus;
enum PerkEffectStatus{
    Ready,
    Triggered,
    SecondTriggered,
    Reloading,
    Disabled
}
playervar define aimPosition;
playervar define aimPosition2;
playervar define landPosition;
playervar define landPosition2;
playervar define perkPosition;
playervar define perkPosition2;
playervar define perkTargets;

// show perk name and player name
define CreatePerkTitleHud(define title):
    CreateHudText(AllPlayers(),
        <"<0> <1> <2>", EventPlayer(), HeroIconString(HeroOf()), title>, null, null,
        Location.Left, (SlotOf() * 10) + 0,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk detail
define CreatePerkDetailHud(define detail):
    CreateHudText(AllPlayers(),
        null, <" <0>", detail>, null,
        Location.Left, (SlotOf() * 10) + 1,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk status and active time limit
define CreatePerkStatusHud():
    CreateHudText(AllPlayers(),
        null, null, 
        perkState == PerkState.Ready ? 
            <"  perk ready."> :
            <"  perk active until <0> second.", perkTimeLimit>,
        Location.Left, (SlotOf() * 10) + 2,
        Color.White, Color.White,
        perkState == PerkState.Ready ?
            Color.Yellow : Color.Orange,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk operation
define CreatePerkOperationHud():
    CreateHudText(EventPlayer(),
        null, null, 
        perkState == PerkState.Ready ?
            <"  Hold interact button <0> to activate.\n\r  Double press interact button <0> to drop as crate.", ButtonGuide(Button.Interact)> :
            <"  Double press interact button <0> to cancel.", ButtonGuide(Button.Interact)>,
        Location.Left, (SlotOf() * 10) + 3,
        Color.White, Color.White, 
        perkState == PerkState.Ready ?
            Color.Yellow : Color.Orange,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk effect status on top
define CreatePerkEffectHud(define text):
    CreateHudText(EventPlayer(),
        null, null, text,
        Location.Top, 4,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show active perk name on player head up
define CreateHeadUpText(define text):
    CreateInWorldText(
        AllPlayers(),
        text,
        EventPlayer(), 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);

// show each perk hud
void ShowPerkHUD()"ShowPerkHUD"{
    perkName = "";
    perkDetail = "";

    // TAG perk detail text HUD
    if(perkType == PerkType.HighJump){
        perkName = "High Jump";
        perkDetail = "Jump more higher and can stay in air a little. Can avoid danger, attack from high places.";
    }
    else if(perkType == PerkType.GrapplingBeam){
        perkName = "Grappling Beam";
        perkDetail = "Shot grappling beam and move quickly in air. If aiming enemy, pull enemy to you.";
    }
    else if(perkType == PerkType.Sprinter){
        perkName = "Sprinter";
        perkDetail = "Move faster when keep moving. Reset by stop or received damage.";
    }
    else if(perkType == PerkType.Adrenaline){
        perkName = "Adrenaline";
        perkDetail = "The less health you have, the faster you move. Ideal for avoiding danger.";
    }
    else if(perkType == PerkType.Savior){
        perkName = "Savior";
        perkDetail = "Instantly revives teammate. Attack enemy near weakened teammates will stun it.";
    }
    else if(perkType == PerkType.Fearless){
        perkName = "Fearless";
        perkDetail = "The more enemies around you, the more you deal damage and receive heal.";
    }
    else if(perkType == PerkType.SteelFormation){
        perkName = "Steel Formation";
        perkDetail = "Reduce half received damage of near teammate and you. Let's unite.";
    }
    else if(perkType == PerkType.PersonalShelter){
        perkName = "Personal Shelter";
        perkDetail = "Place safe shelter. but for personal use only. Recommend for sniper or support hero.";
    }
    else if(perkType == PerkType.BioticStation){
        perkName = "Biotic Station";
        perkDetail = "Place powerful healing field. But effective time is short.";
    }
    else if(perkType == PerkType.TrapBeam){
        perkName = "Trap Beam";
        perkDetail = "Place beam to between own position and aiming point, and stun touched enemy.";
    }
    else if(perkType == PerkType.BattleFlag){
        perkName = "Battle Flag";
        perkDetail = "Teammate can teleport at you from spawn room. Promote ultimate charge of near teammates and you.";
    }
    else if(perkType == PerkType.ChainExplosion){
        perkName = "Chain Explosion";
        perkDetail = "Killed enemy explodes and splash addtinal damage to around. Explosion is chain around.";
    }
    else if(perkType == PerkType.IceAge){
        perkName = "Ice Age";
        perkDetail = "killed enemy explode and splash freeze effect to around. Freeze time is short but range is wide.";
    }
    else if(perkType == PerkType.AimHack){
        perkName = "Aim Hack";
        perkDetail = "Automatically aim at enemy's head. No problem, bot can't report.";
    }
    else if(perkType == PerkType.Vampire){
        perkName = "Vampire";
        perkDetail = "When deal damage to enemy, absorbs half of dealt damage as own health.";
    }
    else if(perkType == PerkType.HotShot){
        perkName = "Hot Shot";
        perkDetail = "When kill enemy, ammo instantly reloaded and ability instantly recharged. barrier resource excluded.";
    }
    else if(perkType == PerkType.ShotCaller){
        perkName = "Shot Caller";
        perkDetail = "When use ultimate ability, teammate's ultimate ability instantly full charged.";
    }
    else if(perkType == PerkType.GrudgeFireBall){
        perkName = "Grudge Fire Ball";
        perkDetail = "Charge power by received damage, shot power as fire ball. More power make more damage and blast range.";
    }
    else if(perkType == PerkType.GrudgeThunderStrike){
        perkName = "Grudge Thunder Strike";
        perkDetail = "Charge power by received damage, shot power as thunder strike. More power make more strike count.";
    }
    else if(perkType == PerkType.ArtilleryRequest){
        perkName = "Artillery Request";
        perkDetail = "Request artillery fire to aim point. Attack wide area with 10-second shell barrage.";
    }
    else if(perkType == PerkType.StrafingSupport){
        perkName = "Strafing Support";
        perkDetail = "Request strafing of attack jet at aim point. Can be reused after cool down.";
    }
    else if(perkType == PerkType.CruisingMissile){
        perkName = "Cruising Missile";
        perkDetail = "Big missile that guiding to aim point. Destroy enemies of wide area.";
    }
    else if(perkType == PerkType.OrbitalLaser){
        perkName = "Orbital Laser";
        perkDetail = "Laser irradiation from orbital satellite. Can control irradiation point for 60 seconds.";
    }
    else if(perkType == PerkType.CarePackage){
        perkName = "Care Package";
        perkDetail = "Request drop of support supplies. Can get multiple perk crates.";
    }
    else if(perkType == PerkType.DeathFromAbove){
        perkName = "Death From Above";
        perkDetail = "Raining cannon shells and bullets from gunship. Turn the earth into hell!";
    }
    else if(perkType == PerkType.LegendalyNinja){
        perkName = "Legendaly Ninja";
        perkDetail = "Ninja with super agility, dragon blade, immortality. Can add activity time by kill enemy.";
    }
    else if(perkType == PerkType.MachDelivery){
        perkName = "Mach Delivery";
        perkDetail = "When kill or deal critical damage by pulse bomb, pulse bomb instantly full charged.";
    }
    else if(perkType == PerkType.Juggernaut){
        perkName = "Juggernaut";
        perkDetail = "Heavy mechanical infantry with plasma auto canon and powerful gravity bomb.";
    }
    else if(perkType == PerkType.BeamSniper){
        perkName = "Beam Sniper";
        perkDetail = "Sniper with powerful beam rifle. Penetrate wall and enemy body when max charge shot.";
    }
    else if(perkType == PerkType.DragonStorm){
        perkName = "Dragon Storm";
        perkDetail = "Many dragons fall from sky, massive damage enemy of wide area. Can add activity time by kill enemy.";
    }
    else if(perkType == PerkType.Titan){
        perkName = "Titan";
        perkDetail = "Giant with big barrier, big hammer, super toughness. Protect team and rampage!";
    }
    else if(perkType == PerkType.Annihilator){
        perkName = "Annihilator";
        perkDetail = "Execute in sight enemies one after another by super-fast attack like lightning bolt.";
    }

    // TAG perk common action
    perkHudEntitys = [];
    WaitRedraw();
    // show title hud
    CreatePerkTitleHud(perkName);
    perkHudEntitys[0] = LastTextID();
    WaitRedraw();
    // show detail hud
    CreatePerkDetailHud(perkDetail);
    perkHudEntitys[1] = LastTextID();
    WaitRedraw();
    // show status hud
    CreatePerkStatusHud();
    perkHudEntitys[2] = LastTextID();
    WaitRedraw();
    // show operation hud
    CreatePerkOperationHud();
    perkHudEntitys[3] = LastTextID();
    WaitRedraw();
    // show head up text
    if(perkState == PerkState.Using){
        CreateHeadUpText(perkName);
        perkHudEntitys[4] = LastTextID();
        WaitRedraw();
    }
    // show Aura effct
    if(perkState == PerkState.Using){
        CreateEffect(AllPlayers(), Effect.BadAura, Color.White,
            EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
        perkHudEntitys[5] = LastCreatedEntity();
        WaitRedraw();
    }
}

void HidePerkHUD()"HidePerkHUD"{
    DestroyHudText(perkHudEntitys[0]);
    DestroyHudText(perkHudEntitys[1]);
    DestroyHudText(perkHudEntitys[2]);
    DestroyHudText(perkHudEntitys[3]);
    DestroyInWorldText(perkHudEntitys[4]);
    DestroyEffect(perkHudEntitys[5]);
}

rule: "Perk/Player/usePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Ready &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    WaitLongPressConfirm();
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, EventPlayer(), 1);
    PlayEffect(
        EventPlayer(), PlayEffect.BuffExplosionSound,
        Color.White, EventPlayer(), MaxLength());
    perkState = PerkState.Using;
}

playervar define notPickupPerk;
playervar define dropedPerkType;

rule: "Perk/Player/dropPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Ready &&
    intaractDoublePressed
){
    WaitConditionConfirmed();
    notPickupPerk = true;
    dropedPerkType = perkType;
    perkCratePosition = BelowPosition(PositionOf()) + PositionOffset();
    perkCrateState = PerkCrateState.Dropped;
    perkState = PerkState.Non;
}

rule: "Perk/Player/releaseNotPickupPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    notPickupPerk
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    notPickupPerk = false;
}

rule: "Perk/Player/countDownTimeLimit"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit > 0
){
    // count down perk active limit time
    WaitUpdateMediumCycle();
    perkTimeLimit -= 1;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/timeLimitOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    // lose perk by active limit time out
    WaitConditionConfirmed();
    perkState = PerkState.Non;
}

rule: "Perk/Player/cancelPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Using &&
    intaractDoublePressed
){
    // lose perk by cancel operation of interact key hold
    WaitConditionConfirmed();
    PlayEffect(
        EventPlayer(), PlayEffect.DebuffImpactSound,
        Color.White, EventPlayer(), MaxLength());
    perkState = PerkState.Non;
}

rule: "Perk/Player/remindPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    SmallMessage(EventPlayer(), <"Forgotten perk? Hold interact button <0> to activate perk.", ButtonGuide(Button.Interact)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/losePerk //by dead"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsDead() &&
    perkState == PerkState.Using
){
    // lose perk by player dead
    SmallMessage(EventPlayer(), "Lost active perk due to death.");
    perkState = PerkState.Non;
}

// TAG Debug ----------
define enableDebugPerk: false;  // TAG enable Debug Perk

rule: "Debug/showDebugPerkHUD"
Event.OngoingGlobal
if(
    enableDebugPerk
){
    CreateHudText(
        HostPlayer(),
        null,
        null,
        <"enable Debug Perk. Relpeat press interact button <0> to select perk.", ButtonGuide(Button.Interact)>,
        Location.Left, -1,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
}

globalvar define backupPerkState;
globalvar define backupPerkType;

rule: "Debug/givePerkToSelf"
Event.OngoingPlayer
Team.All
Player.All
if(
    enableDebugPerk &&
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    WaitShortPressConfirm();
    AbortIf(IsButtonHeld(EventPlayer(), Button.Interact));
    AbortIf(perkState == PerkState.Using);

    backupPerkState = perkState;
    perkState = PerkState.Non;
    perkType = PerkType.Non;
    WaitChangeState();

    if(backupPerkState == PerkState.Non){
        if(backupPerkType == PerkType.Non){
            backupPerkType ++;
        }
        perkType = backupPerkType;
        perkState = PerkState.Ready;  
    }
    else if(backupPerkState == PerkState.Ready){
        if(backupPerkType < PerkType.End){
            perkType = backupPerkType + 1;
        }
        else{
            perkType = 1;
        }
        backupPerkType = perkType;
        perkState = PerkState.Ready;  
    }
    backupPerkState = perkState;
}

rule: "Debug/givePerkRandomToSelf"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.PrimaryFire)
){
    WaitLongPressConfirm();

    // Give perk to own player
    perkState = PerkState.Non;
    WaitChangeState();
    perkType = RandomValueInArray(lotteryPerkList);
    perkState = PerkState.Ready;   

    // Use perk by force
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    perkState = PerkState.Using;       
}

rule: "Debug/givePerkRandomToAll"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.SecondaryFire)
){
    WaitLongPressConfirm();

    // Give perk to all player
    AllPlayers(Team.Team1).perkState = PerkState.Non;   
    WaitChangeState();
    AllPlayers(Team.Team1).perkType = RandomValueInArray(lotteryPerkList);
    AllPlayers(Team.Team1).perkState = PerkState.Ready;

    // Use perk by force    
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    AllPlayers(Team.Team1).perkState = PerkState.Using;
}

disabled rule: "Debug/forceGetPerk // for bot only"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Non
){
    WaitContinuousBlastCycle();
    if(
        IsInLineOfSight(
            EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team2)) &&
        RandomInteger(1, 25) <= 100
    ){
        EventPlayer().perkType = RandomValueInArray(lotteryPerkList);
        EventPlayer().perkState = PerkState.Ready;
    }
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();    
}

disabled rule: "Debug/forceUsePerk // for bot only"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Ready
){
    WaitContinuousBlastCycle();
    if(
        IsInLineOfSight(
            EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team2)) &&
        RandomInteger(1, 50) <= 100
    ){
        StartHoldingButton(EventPlayer(), Button.Interact);
        Wait(1, WaitBehavior.IgnoreCondition);
        StopHoldingButton(EventPlayer(), Button.Interact);
    }
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();    
}

disabled rule: "Debug/forceUseMelee // for bot only"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    //enableBotOnly &&
    IsAlive() &&
    perkState == PerkState.Using
){
    WaitContinuousBlastCycle();
    if(
        IsInLineOfSight(
            EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team2)) &&
        RandomInteger(1, 75) <= 100
    ){
        StartHoldingButton(EventPlayer(), Button.Melee);
        Wait(1, WaitBehavior.IgnoreCondition);
        StopHoldingButton(EventPlayer(), Button.Melee);
    }
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();    
}

disabled rule: "Debug/overridePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using
){
    perkType = PerkType.StrafingSupport;
}