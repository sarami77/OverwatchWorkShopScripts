import "Utility.del";
import "Bot.del";

// TAG Buddy ----------
define followRangeMin: 4;
define followRangeMax: ActionRange.CanFind;
define followTryIntervalSecond: 1;
define followTryCountMax: 3;
define followHopEmpluseScale: 1.5;
playervar define followTarget;

rule: "Buddy/Teleport/initilaize"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot()
){
    StartForcingDummyBotName(ep, GetDummyName());
}

define FindNearPositionAlivePlayer(define position!):
    FirstOf(
        SortedArray(
            FilteredArray(
                AllLivingPlayers(playerTeam),
                (
                    !IsDummyBot(ae) &&
                    HasSpawned(ae)
                )
            ),
            DistanceBetween(ae, position)
        )
    );

define FindPlayer():
    FirstOf(
        FilteredArray(
            AllPlayers(playerTeam),
            (
                !IsDummyBot(ae) &&
                HasSpawned(ae)
            )
        )
    );

void SetFollowTarget()"SetFollowTarget"{
    // get current object position
    define objPos! = CurrentObjectOnPosition();
    // get near object alive player
    define alivePlayer! = FindNearPositionAlivePlayer(objPos);

    if(
        // not game in proress
        !IsGameInProgress()
    ){
        if(
            // find alive player
            alivePlayer != null
        ){
            // set player as followTarget
            followTarget = alivePlayer;
        }
        else{
            // set spawn point as followTarget
            followTarget = SpawnPoints(playerTeam)[0];
        }        
    }
    else{
        // game in proress
        if(
            // valid object
            objPos != null &&
            (
                // near to object
                DistanceBetween(ep, objPos) <= ActionRange.CanFind ||
                // has line to object
                IsInLineOfSight(ep, objPos) ||
                // enemy close win
                IsCloseWin(EnemyTeamOf(ep))
            )
        ){
            // set object as followTarget
            followTarget = objPos;
        }
        else if(
            // find alive player
            alivePlayer != null
        ){
            // set player as followTarget
            followTarget = alivePlayer;
        }
        else{
            // get player on team
            define player! = FindPlayer();
            if(
                // find player
                player != null
            ){
                // set spawn point as followTarget for wait player respawn and join
                followTarget = SpawnPoints(playerTeam)[0];
            }
            else{
                // set object as followTarget by non player
                followTarget = objPos;
            }
        }
    }
}

void TeleportToFollowTarget()"TeleportToFollowTarget"{
    define teleportPos!;

    WaitUntil(
        (
            // wait regroup
            NumberOfLivingPlayers(TeamOf()) >= (NumberOfPlayers(TeamOf()) / 2) ||
            // enemy close win
            IsCloseWin(EnemyTeamOf(ep))
        ),
        MaxValue()

    );
    
    if(
        // game not progress
        !IsGameInProgress() ||
        // enemy close win
        IsCloseWin(EnemyTeamOf(ep))
    ){
        // teleport to followTarget
        teleportPos = followTarget;
    }
    else{
        // teleport to followTarget offset position
        teleportPos = BlockedPositon(followTarget, DirectionTowards(followTarget, ep), followRangeMin * 4);
        teleportPos = teleportPos + DirectionTowards(ep, followTarget); // avoid map surface
        if(IsBelowAbyss(teleportPos)){
            teleportPos = followTarget;
        }
    }

    // wait by distance
    // Wait(DistanceBetween(ep, teleportPos) / walkMeterPerSec, WaitBehavior.AbortWhenFalse);
    
    // teleport
    Teleport(ep, teleportPos);
}

rule: "Buddy/Teleport/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // set follow target
    SetFollowTarget();
    // teleport to follow target
    TeleportToFollowTarget();
}

rule: "Buddy/Teleport/following"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // set follow target
    SetFollowTarget();

    // try follow movement by loop
    define followTryCount! = 0;
    while(followTryCount < followTryCountMax){
        // get distance to followTarget
        define dist! = DistanceBetween(ep, followTarget);
        define hasLine! = IsInLineOfSight(ep, followTarget);
        // is in of follow range min and has line
        if(
            // near followTarget
            dist <= followRangeMin &&
            // has line followTarget
            hasLine
        ){
            // stop follow
            StopFacing(ep);
            StopMove(ep);

            // exit loop
            break;           
        }
        // is in of follow range max
        else if(
            dist < followRangeMax
        ){
            // face to followTarget
            StartFacing(
                ep, DirectionTowards(EyePosition(),
                    HasSpawned(followTarget) ? EyePosition(followTarget) : PositionOf(followTarget),
                ),
                facingRate, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

            // start walk
            // has line
            if(hasLine){
                // move to forward straight
                moveDirFB = Forward();
                moveDirLR = NoDirection();
                // reset count by has line
                followTryCount = 0;
            }
            else{
                // move to random direction
                moveDirFB = Forward();
                moveDirLR = RandomValueInArray([Right(), Left()]);
                // count up try count by has not line
                followTryCount ++;
            }

            // move to followTarget
            StartMove(ep);

            if(
                ProbabilityTrue(50)
            ){
                // with jump
                StartHoldingButton(ep, Button.Jump);
                Wait(RandomReal(0.1, 1.0), WaitBehavior.IgnoreCondition);
                StopHoldingButton(ep, Button.Jump);
            }

            // wait for next loop
            Wait(followTryIntervalSecond, WaitBehavior.AbortWhenFalse);
        }
        // is out follow range max
        else{
            // follow by teleport
            // need teleport
            followTryCount = followTryCountMax;
            // exit loop
            break;
        } 
    }

    if(
        // try count over
        followTryCount >= followTryCountMax
    ){

        // stop follow
        StopMove(ep);

        // teleport to follow target
        TeleportToFollowTarget();
    }

    Wait(1, WaitBehavior.AbortWhenFalse);
    WaitRandomAfterServerFree();
    LoopIfConditionIsTrue();
}

playervar define prevNorHealth = 1.0;
playervar define prevMatchTime = MaxValue();

define ChangedNormalizedHealth():
    NormalizedHealth() - prevNorHealth;

define IsEnemyTeamKilled(): 
    // NumberOfPlayers(enemyTeam) > 0 &&
    NumberOfLivingPlayers(enemyTeam) <= 0;

define communicateTriggerProb: 30;

rule: "Buddy/communicate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    prevMatchTime = IsGameInProgress() ? MatchTime() : MaxValue();
    prevNorHealth = NormalizedHealth();
    
    Wait(
        RandomReal(2, 4),
        WaitBehavior.AbortWhenFalse
    );

    if(
        (
            // not in combat
            actionState == ActionState.Non &&
            (
                // in setup
                IsInSetup() ||
                // in spanwn room 
                IsInSpawnRoom()
            )
        )
    ){
        // say about greeting
        if(
            // hello prob
            ProbabilityTrue(communicateTriggerProb)
        ){
            define helloTarget!;
            // get player at random
            helloTarget = 
                RandomValueInArray(
                    FilteredArray(
                        AllPlayers(playerTeam),
                        (
                            !IsDummyBot(ae) &&
                            IsInLineOfSight(ep, ae)
                        )
                    )
                );

            if(helloTarget == null){
                // get bot any one 
                helloTarget = 
                    RandomValueInArray(
                        FilteredArray(
                            AllPlayers(playerTeam),
                            (
                                IsInLineOfSight(ep, ae)
                            )
                        )
                    );
            }

            if(helloTarget != null){
                // facing to communicat target eyes
                StartFacing(
                    ep, DirectionTowards(EyePosition(), EyePosition(helloTarget)),
                    facingRate, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
                // wait for turning
                Wait(RandomReal(0.25, 1), WaitBehavior.AbortWhenFalse);
                // hello
                Communicate(ep, Communication.Hello);

                if(
                    ProbabilityTrue(100)
                ){
                    // with T-bagging or jumping
                    define pressButton! = RandomValueInArray([Button.Jump, Button.Crouch, Button.Melee]);
                    define tbagInterval! = RandomReal(0.1, 0.3);
                    while(
                        ProbabilityTrue(90)
                    ){
                        StartHoldingButton(ep, pressButton);
                        Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                        StopHoldingButton(ep, pressButton);
                        Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                    }
                }
                // wait
                Wait(RandomReal(0.5, 3), WaitBehavior.AbortWhenFalse);
                StopFacing();
            }
        }
        // else
    }
    else{
        // say about game

        // say thanks
        if(
            // healed
            (
                // according healed health
                ProbabilityTrue(DefaultPercentage() * 1.0 * ChangedNormalizedHealth()) &&
                // heal by not spawn room
                !IsInSpawnRoom()
            ) ||
            // enemy team kill
            (
                ProbabilityTrue(communicateTriggerProb) &&
                // enemy team killed
                IsEnemyTeamKilled()
            ) ||
            // check point reached
            (
                ProbabilityTrue(communicateTriggerProb) &&
                // remain time added
                MatchTime() - prevMatchTime >= 60
            )
        ){
            Communicate(ep, Communication.Thanks);
        }
        // say need heal
        else if(
            // by health low
            ProbabilityTrue(DefaultPercentage() * 1.0 * (1 - NormalizedHealth())) &&
            // is alive
            IsAlive()
        ){
            Communicate(ep, Communication.NeedHealing);
        }
        // say help
        else if(
            // by lost health high
            ProbabilityTrue(DefaultPercentage() * 1.0 * -ChangedNormalizedHealth()) &&
            // is alive
            IsAlive()
        ){
            Communicate(ep, Communication.NeedHelp);
        }
        // say countdown and use ult
        else if(
            // in combat
            actionState != ActionState.Non &&
            // is alive
            IsAlive() &&
            // ult ready
            UltimateChargePercent() >= DefaultPercentage() &&
            // by enemy density
            ProbabilityTrue((communicateTriggerProb * 2) * EnemyDensityRateOfAimTargetNear(ActionRange.Close))
        ){
            Communicate(ep, Communication.Countdown);
            Wait(3, WaitBehavior.AbortWhenFalse);
            while(UltimateChargePercent() >= DefaultPercentage()){
                PressButton(ep, Button.Ultimate);
                Wait(0.1, WaitBehavior.AbortWhenFalse);
                PressButton(ep, Button.PrimaryFire);
                Wait(0.1, WaitBehavior.AbortWhenFalse);
            }
            // sync ult attack
            define rdyUltNearPlayers! = FilteredArray(
                AllLivingPlayers(playerTeam),
                (
                    IsDummyBot(ae) &&
                    ProbabilityTrue(75) &&
                    UltimateChargePercent(ae) >= DefaultPercentage()
                )
            );
            PressButton(rdyUltNearPlayers, Button.Ultimate);
            Wait(0.1, WaitBehavior.AbortWhenFalse);
            PressButton(rdyUltNearPlayers, Button.PrimaryFire);
        }
        // say fallback
        else if(
            ProbabilityTrue(communicateTriggerProb) &&
            // player team member 50% dead
            (NumberOfLivingPlayers(playerTeam) / NumberOfPlayers(playerTeam)) <= 0.5
        ){
            Communicate(ep, Communication.FallBack);
        }
        // say push
        else if(
            ProbabilityTrue(communicateTriggerProb) &&
            // enemy team member 50% dead
            (NumberOfLivingPlayers(enemyTeam) / NumberOfPlayers(enemyTeam)) <= 0.5
        ){
            Communicate(ep, Communication.PushForward);
        }
        // say sorry
        else if(
            ProbabilityTrue(communicateTriggerProb) &&
            // dead
            IsDead()
        ){
            Communicate(ep, Communication.Sorry);
        }
        // say about objective
        else if(
            ProbabilityTrue(communicateTriggerProb) &&
            IsOnObjective()
        ){
            if(ProbabilityTrue(DefaultPercentage() / 3)){
                Communicate(ep, Communication.GroupUp);
            }
            else if(ProbabilityTrue(DefaultPercentage() / 2)){
                Communicate(ep, Communication.Defending);
            }
            else{
                Communicate(ep, Communication.Go);
            }
        }
        // say other message
        else if(ProbabilityTrue(communicateTriggerProb)){
            if(
                actionState == ActionState.Non
            ){
                // say about follow/move
                if(ProbabilityTrue(DefaultPercentage() / 3)){
                    Communicate(ep, Communication.Go);
                }
                else if(ProbabilityTrue(DefaultPercentage() / 2)){
                    Communicate(ep, Communication.GoingIn);
                }
                else{
                    Communicate(ep, Communication.WithYou);
                }
            }
            else if(
                actionState == ActionState.Attack
            ){
                // say about attack
                if(ProbabilityTrue(DefaultPercentage() / 2)){
                    Communicate(ep, Communication.Attacking);
                }
                else{
                    Communicate(ep, Communication.Incoming);
                }
            }
            else if(
                actionState == ActionState.Support
            ){
                // say about support
                if(ProbabilityTrue(DefaultPercentage() / 2)){
                    Communicate(ep, Communication.WithYou);
                }
                else{
                    Communicate(ep, Communication.YouAreWelcome);
                }
            }
        }
        // say ult charge progress
        else if(
            // according ult charge
            ProbabilityTrue(communicateTriggerProb * 2 * (UltimateChargePercent() / DefaultPercentage()))
        ){
            Communicate(ep, Communication.UltimateStatus);
        }
    }

    WaitRandomAfterServerFree();
    LoopIfConditionIsTrue();
}
