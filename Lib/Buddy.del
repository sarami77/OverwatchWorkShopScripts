import "Utility.del";
import "Bot.del";

// TAG Buddy ----------

define followRange: 10;
define followIntervalSecond: 0.5;
define followHopTryCount: 6;
define followHopEmpluseScale: 2.2;
playervar define followPlayer;

rule: "Buddy/Teleport/followPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // try follow loop
    for(define notHasLineSecond! = 0; notHasLineSecond < followHopTryCount; notHasLineSecond ++){
        Wait(followIntervalSecond, WaitBehavior.AbortWhenFalse);
        
        // get followPlayer
        if(
            // has support target
            actionState == ActionState.Support &&
            target != 0
        )
        {
            followPlayer = target;
        }
        else{
            followPlayer = FirstOf(
                SortedArray(
                    FilteredArray(
                        AllLivingPlayers(playerTeam),
                        (
                            !IsDummyBot(ae) &&
                            HasSpawned(ae)
                        )
                    ),
                    DistanceBetween(ae, ep)
                )
            );
        }

        // set destination
        StopForcingDummyBotName(ep);
        if(
            followPlayer == null
        ){
            StartForcingDummyBotName(ep, <"No Follow Player">);
            if(IsGameInProgress()){
                followPlayer = CurrentObjectPosition();
            }
        }
        else{
            StartForcingDummyBotName(ep, <"Follower of <0>", followPlayer>);
        }

        // follow 
        define dist! = DistanceBetween(ep, followPlayer);
        define hasNearPlayer! = dist <= followRange;
        define hasLineNearPlayer = IsInLineOfSight(ep, followPlayer);
        if(
            hasNearPlayer &&
            hasLineNearPlayer
        ){
            // stop follow
            StopMove();
            // reset try count
            LoopIfConditionIsTrue();           
        }
        else{
            // start follow
            SetFacing(
                ep,
                DirectionTowards(ep, followPlayer),
                Relative.ToWorld);
            // timing distibute
            Wait(RandomReal(0, 0.3), WaitBehavior.IgnoreCondition);
            // near followRange
            if(dist <= followRange * 1.25){
                // by walk
                moveDir = Forward();
                StartMove();
            }
            else if(dist <= followRange * 3){
                // by hop
                ApplyImpulse(
                    ep, VectorTowards(
                        ep, PositionOf(followPlayer) + Vector(0, dist * 0.1, 0)
                    ),
                    DistanceBetween(ep, followPlayer) * followHopEmpluseScale,
                    Relative.ToWorld, ContraryMotion.Cancel);
            }
            else{
                // by teleport
                break;
            }
        }
    }

    // try follow count over
    Teleport(ep,
        NearestWalkablePosition(
            PositionOf(followPlayer) +
            DirectionTowards(followPlayer, ep)
        )
    );
    
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/sayHello"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    actionState == ActionState.Non
){
    Wait(RandomInteger(5, 15) ,WaitBehavior.AbortWhenFalse);
    define helloTarget! = 
        RandomValueInArray(
            FilteredArray(
                AllPlayers(playerTeam),
                (
                    DistanceBetween(ae, ep) <= 10
                )
            )
        );

    if(helloTarget != null){
        Communicate(ep, Communication.Hello);
        if(!IsMoving()){
            SetFacing(
                ep,
                DirectionTowards(ep, helloTarget),
                Relative.ToWorld);
        }
    }
    
    LoopIfConditionIsTrue();
}