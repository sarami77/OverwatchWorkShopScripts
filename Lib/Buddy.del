import "Utility.del";
import "Bot.del";

// TAG Buddy ----------

define followRange: (actionRangeMax / 4) + 4;
define followTryIntervalSecond: 0.5;
define followTryMaxCount: 6;
define followHopEmpluseScale: 2.2;
playervar define followTarget!;
playervar define followerText!;



rule: "Buddy/Teleport/followPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // try follow loop
    for(define notHasLineSecond! = 0; notHasLineSecond < followTryMaxCount; notHasLineSecond ++){
        Wait(followTryIntervalSecond, WaitBehavior.AbortWhenFalse);

        if(
            // has not target
            followTarget == null ||
            ProbabilityTrue(25)
        ){
            if(
                // has support target
                actionState == ActionState.Support &&
                target != 0
            ){
                // get target player
                followTarget = target;
                followerText = <"following <0>", followTarget>;
            }
            else{
                // get alive player near me
                followTarget =
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                AllLivingPlayers(playerTeam),
                                (
                                    !IsDummyBot(ae) &&
                                    HasSpawned(ae) &&
                                    IsAlive(ae)
                                )
                            ), DistanceBetween(ae, ep)));
                
                // not find player
                if(followTarget == null){
                    // game in progress
                    if(IsGameInProgress()){
                        // get object
                        followTarget = CurrentObjectPosition();
                        followerText = <"following object">;
                    }
                    else{
                        // get spawn point
                        followTarget = SpawnPoints(playerTeam)[0];
                        followerText = <"following spawn point">;
                    }
                }
                else{
                    followerText = <"following <0>", followTarget>;
                }
            }
        }

        // follow 
        define dist! = DistanceBetween(ep, followTarget);
        define hasNearPlayer! = dist <= followRange;
        define hasLineNearPlayer = IsInLineOfSight(ep, followTarget);
        if(
            hasNearPlayer &&
            hasLineNearPlayer
        ){
            SetMoveSpeed(ep, 100);
            // stop follow
            StopMove();
            // reset try count
            LoopIfConditionIsTrue();           
        }
        else if(dist < followRange * 5){
            // follow by walk
            SetFacing(
                ep,
                DirectionTowards(ep, followTarget),
                Relative.ToWorld);

            SetMoveSpeed(ep, 100 + (dist * 15));
            moveDir = Forward();
            StartMove();
        }
        else{
            // follow by teleport
            break;
        }
    }

    // try follow count over
    Teleport(ep,
        NearestWalkablePosition(
            PositionOf(followTarget) +
            (DirectionTowards(followTarget, ep) * (followRange / 3))
        )
    );
    
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/followPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState != ActionState.Non
){
    SetMoveSpeed(ep, 100);
}

playervar define prevNorHealth = 1.0;
playervar define waitSecondNextComm = 5;
rule: "Buddy/communicate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    prevNorHealth = NormalizedHealth();
    Wait(RandomReal(4, 6), WaitBehavior.AbortWhenFalse);

    // Wait(RandomReal(waitSecondNextComm, waitSecondNextComm + 5), WaitBehavior.AbortWhenFalse);

    if(
        IsInSpawnRoom()
    ){
        if(
            ProbabilityTrue(40)
        ){
            // hello
            Communicate(ep, Communication.Hello);
            if(!IsMoving()){
                define sayTarget! = 
                    RandomValueInArray(
                        FilteredArray(
                            AllPlayers(playerTeam),
                            DistanceBetween(ae, ep) <= 10));
                
                if(sayTarget != null){
                    SetFacing(
                        ep,
                        DirectionTowards(ep, sayTarget),
                        Relative.ToWorld);
                }
            }
        }
    }
    else{
        // status message
        if(
            (
                // 1/4 healed
                !IsInSpawnRoom() &&
                NormalizedHealth() - prevNorHealth >= 0.25
            ) ||
            // team kill
            NumberOfLivingPlayers(enemyTeam) <= 0
        ){
            Communicate(ep, Communication.Thanks);
        }
        else if(
            // dead
            NormalizedHealth() <= 0.0
        ){
            Communicate(ep, Communication.Sorry);
        }
        else if(
            // 40% health
            NormalizedHealth() <= 0.4
        ){
            Communicate(ep, Communication.NeedHealing);
        }
        else if(
            ProbabilityTrue(25) &&
            // 70% health
            NormalizedHealth() <= 0.7
        ){
            Communicate(ep, Communication.NeedHelp);
        }

        else if(
            ProbabilityTrue(50) &&
            // player member half dead
            NumberOfLivingPlayers(playerTeam) <= NumberOfPlayers(playerTeam) / 2
        ){
            Communicate(ep, Communication.FallBack);
        }
        else if(
            ProbabilityTrue(50) &&
            // enemy member half dead
            NumberOfLivingPlayers(enemyTeam) <= NumberOfPlayers(enemyTeam) / 2
        ){
            Communicate(ep, Communication.PushForward);
        }

        else if(
            ProbabilityTrue(25) &&
            // according ult charge
            ProbabilityTrue(UltimateChargePercent())
        ){
            Communicate(ep, Communication.UltimateStatus);
        }

        // situation message
        else if(ProbabilityTrue(10)){

            if(IsOnObjective()){
                if(ProbabilityTrue(40)){
                    Communicate(ep, Communication.GroupUp);
                }
                else if(ProbabilityTrue(40)){
                    Communicate(ep, Communication.Go);
                }
                else{
                    Communicate(ep, Communication.Defending);
                }
            }
            else{
                if(
                    actionState == ActionState.Non
                ){
                    if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.Go);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.GoingIn);
                    }
                    else{
                        Communicate(ep, Communication.WithYou);
                    }
                }
                else if(
                    actionState == ActionState.Attack
                ){
                    if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.Attacking);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.Incoming);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.PushForward);
                    }
                    else{
                        Communicate(ep, Communication.Go);
                    }
                }
                else if(
                    actionState == ActionState.Support
                ){
                    if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.NeedHealing);
                    }
                    else{
                        Communicate(ep, Communication.YouAreWelcome);
                    }
                }
            }
        }
    }

    LoopIfConditionIsTrue();
}


rule: "Buddy/resetDamage"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // reset prev damage for not say thanks
    prevNorHealth = 1;
}