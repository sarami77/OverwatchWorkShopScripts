import "Utility.del";
import "Bot.del";

// TAG Buddy ----------
define followRange: 5.5;
define followTryIntervalSecond: 0.5;
define followTryCountMax: 6;
define followHopEmpluseScale: 2.2;
playervar define followTarget!;
playervar define followerText!;
playervar define followTargetOffset!;

rule: "Buddy/Teleport/initilaize"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot()
){
    StartForcingDummyBotName(ep, GetDummyName());

    // CreateInWorldText(
    //     AllPlayers(), followerText, 
    //     ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
    //     Color.SkyBlue, Spectators.DefaultVisibility);

}

rule: "Buddy/Teleport/following"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    define objectPosition! = CurrentObjectPosition() + Vector(0, 2, 0);

    // get alive player near me
    followTarget =
        FirstOf(
            SortedArray(
                FilteredArray(
                    AllLivingPlayers(playerTeam),
                    (
                        !IsDummyBot(ae) &&
                        HasSpawned(ae) &&
                        IsAlive(ae)
                    )
                ),
                // DistanceBetween(ae, ep)
                DistanceBetween(ae, objectPosition)
            )
        );
    followerText = <"following <0>", followTarget>;

    // not game in proress
    if(!IsGameInProgress()){        
        // not find player
        if(followTarget == null){
            // force set spawn point as followTarget
            followTarget = SpawnPoints(playerTeam)[0];
            followerText = <"following spawn point">;
        }
    }
    else{
        if(
            // valid object
            objectPosition != 0 &&
            (
                // near or has line to object
                DistanceBetween(ep, objectPosition) <= 30 ||
                IsInLineOfSight(ep, objectPosition)
            )
        ){
            // set object as followTarget
            followTarget = objectPosition;
            followerText = <"following object">;
        }
        else{
            // not find player
            if(followTarget == null){
                // force set object as followTarget
                followTarget = objectPosition;
                followerText = <"following object">;
            }
        }
    }

    // try follow movement by loop
    define followTryCount! = 0;
    while(followTryCount < followTryCountMax){
        // get distance to followTarget
        define dist! = DistanceBetween(ep, followTarget);
        define hasLine1! = IsInLineOfSight(ep, followTarget);
        // is in follow range
        if(
            // near followTarget
            dist <= followRange &&
            // has line followTarget
            hasLine1
        ){
            // stop following
            // reset walk fast
            SetMoveSpeed(ep, DefaultPercentage());
            // stop follow
            StopFacing();
            StopMove();
            // exit loop
            break;           
        }
        // is out follow range
        else if(
            dist < followRange * 8
        ){
            // start following
            // set walk fast by dist
            SetMoveSpeed(ep, DefaultPercentage() + (dist * 15));
            // walk to followTarget
            StartFacing(
                ep, DirectionTowards(EyePosition(), followTarget),
                300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            // start follow
            define hasLine = IsInLineOfSight(ep, followTarget);
            moveDirFB = hasLine ?
                Forward() :
                RandomValueInArray([Forward(), Forward(), Backward()]);

            moveDirLR = hasLine ?
                NoDirection() :
                RandomValueInArray([NoDirection(), Right(), Left()]);
            StartMove();
            // with jump by followTryCount
            if(
                ProbabilityTrue(30)
            ){
                PressButton(ep, Button.Jump);
            }
            // wait for next loop
            Wait(followTryIntervalSecond, WaitBehavior.AbortWhenFalse);
            // count up try count
            followTryCount ++;
        }
        // is more out follow range
        else{
            // follow by teleport
            // need teleport
            followTryCount = followTryCountMax;
            // exit loop
            break;
        } 
    }

    if(
        // try count over
        followTryCount >= followTryCountMax
    ){
        // reset walk fast
        SetMoveSpeed(ep, DefaultPercentage());
        // stop follow
        StopMove();
        // teleport to range edge
        Teleport(ep,
            BlockedPositon(followTarget, DirectionTowards(followTarget, ep), followRange)
        );
    }

    Wait(1, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/unfollowPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState != ActionState.Non
){
    followerText = <"in combat">;
    SetMoveSpeed(ep, DefaultPercentage());
}

playervar define prevNorHealth! = 1.0;
playervar define prevMatchTime! = 0;

rule: "Buddy/communicate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    prevMatchTime = IsGameInProgress() ? MatchTime() : MaxValue();
    prevNorHealth = NormalizedHealth();
    
    Wait(RandomReal(4, 6), WaitBehavior.AbortWhenFalse);

    if(
        // in setup
        IsInSetup() ||
        // in spanwn room 
        IsInSpawnRoom() ||
        (
            // team kill
            NumberOfPlayers(enemyTeam) > 0 &&
            NumberOfLivingPlayers(enemyTeam) <= 0
        )
    ){
        if(
            ProbabilityTrue(40)
        ){
            define helloTarget!;
            // get not dummy player
            helloTarget = 
                RandomValueInArray(
                    FilteredArray(
                        AllPlayers(playerTeam),
                        (
                            !IsDummyBot(ae)
                        )));

            if(helloTarget == null){
                // get any one from all
                helloTarget = 
                    RandomValueInArray(
                        AllPlayers(playerTeam)
                    );
            }
            AbortIf(helloTarget == null);
            // facing to communicat target eyes
            StartFacing(
                ep, DirectionTowards(EyePosition(), EyePosition(helloTarget)),
                300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            // wait
            Wait(RandomReal(0.5, 1), WaitBehavior.AbortWhenFalse);
            // hello
            Communicate(ep, Communication.Hello);

            // and body action
            if(
                ProbabilityTrue(50)
            ){
                // and T-bagging or jumping
                define pressButton! = RandomValueInArray([Button.Jump, Button.Crouch]);
                define tbagInterval! = RandomReal(0.1, 0.3);
                while(
                    ProbabilityTrue(90)
                ){
                    StartHoldingButton(ep, pressButton);
                    Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                    StopHoldingButton(ep, pressButton);
                    Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                }
            }
            // wait
            Wait(RandomReal(0.5, 1), WaitBehavior.AbortWhenFalse);
            StopFacing();
        }
    }
    else{
        // status message
        // say thanks
        if(
            (
                // 1/4 healed
                !IsInSpawnRoom() &&
                NormalizedHealth() - prevNorHealth >= 0.25
            ) ||
            (
                // check point reached (remain time added.)
                MatchTime() - prevMatchTime >= 60
            ) ||
            (
                // team kill
                NumberOfPlayers(enemyTeam) > 0 &&
                NumberOfLivingPlayers(enemyTeam) <= 0
            )
            ||
            // match finished
            PayloadProgressPercentage() >= DefaultPercentage()
        ){
            Communicate(ep, Communication.Thanks);
        }
        // say sorry
        else if(
            ProbabilityTrue(30) &&
            // dead
            NormalizedHealth() <= 0.0
        ){
            Communicate(ep, Communication.Sorry);
        }
        // say need heal
        else if(
            // health under 50% 
            NormalizedHealth() <= 0.5
        ){
            Communicate(ep, Communication.NeedHealing);
        }
        // say help
        else if(
            ProbabilityTrue(50) &&
            // health under 75% 
            NormalizedHealth() <= 0.75
        ){
            Communicate(ep, Communication.NeedHelp);
        }
        // say countdown and use ult
        else if(
            ProbabilityTrue(50) &&
            actionState != ActionState.Non &&
            IsAlive() &&
            UltimateChargePercent() >= DefaultPercentage()
        ){
            Communicate(ep, Communication.UltimateStatus);
            Wait(3, WaitBehavior.AbortWhenFalse);
            Communicate(ep, Communication.Countdown);
            Wait(3, WaitBehavior.AbortWhenFalse);
            while(UltimateChargePercent() >= DefaultPercentage()){
                PressButton(ep, Button.Ultimate);
                Wait(0.2, WaitBehavior.AbortWhenFalse);
                PressButton(ep, Button.PrimaryFire);
                Wait(0.2, WaitBehavior.AbortWhenFalse);
            }
            // sync attack
            define rdyUltNearPlayers! = FilteredArray(
                AllLivingPlayers(playerTeam),
                (
                    IsDummyBot(ae) &&
                    UltimateChargePercent(ae) >= DefaultPercentage() &&
                    DistanceBetween(ep, ae) <= 10
                )
            );
            PressButton(rdyUltNearPlayers, Button.Ultimate);
            Wait(0.1, WaitBehavior.AbortWhenFalse);
            PressButton(rdyUltNearPlayers, Button.PrimaryFire);
        }
        // say fallback
        else if(
            ProbabilityTrue(50) &&
            // player member half dead
            NumberOfLivingPlayers(playerTeam) <= NumberOfPlayers(playerTeam) / 2
        ){
            Communicate(ep, Communication.FallBack);
        }
        // say push
        else if(
            ProbabilityTrue(25) &&
            // enemy member half dead
            NumberOfLivingPlayers(enemyTeam) <= NumberOfPlayers(enemyTeam) / 2
        ){
            Communicate(ep, Communication.PushForward);
        }
        // say ult charge progress
        else if(
            ProbabilityTrue(25) &&
            // according ult charge
            ProbabilityTrue(UltimateChargePercent())
        ){
            Communicate(ep, Communication.UltimateStatus);
        }

        // situation message
        else if(ProbabilityTrue(10)){
            if(IsOnObjective()){
                // say objective action
                if(ProbabilityTrue(40)){
                    Communicate(ep, Communication.GroupUp);
                    RandomValueInArray([Communication.GroupUp,Communication.GroupUp]);
                }
                else if(ProbabilityTrue(40)){
                    Communicate(ep, Communication.Go);
                }
                else{
                    Communicate(ep, Communication.Defending);
                }
            }
            else{
                if(
                    actionState == ActionState.Non
                ){
                    // say follow/move action
                    if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.Go);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else{
                        Communicate(ep, Communication.GoingIn);
                    }
                }
                else if(
                    actionState == ActionState.Attack
                ){
                    // say attack action
                    if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.Attacking);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.Incoming);
                    }
                }
                else if(
                    actionState == ActionState.Support
                ){
                    // say support action
                    if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.YouAreWelcome);
                    }
                    else{
                        Communicate(ep, Communication.NeedHealing);
                    }
                }
            }
        }
    }

    LoopIfConditionIsTrue();
}


rule: "Buddy/resetDamage"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // reset prev damage for not say thanks
    prevNorHealth = 1;
}
