import "Utility.del";
import "Bot.del";

// TAG Buddy ----------
define followRangeMin: 4;
define followRangeMax: ActionRange.Far;
define followTryIntervalSecond: 0.5;
define followTryCountMax: 6;
define followHopEmpluseScale: 2.2;
playervar define followTarget!;
playervar define followTargetOffset!;

rule: "Buddy/Teleport/initilaize"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot()
){
    StartForcingDummyBotName(ep, GetDummyName());
}

define FindNearPositionAlivePlayer(define position!):
    FirstOf(
        SortedArray(
            FilteredArray(
                AllLivingPlayers(playerTeam),
                (
                    !IsDummyBot(ae) &&
                    HasSpawned(ae)
                )
            ),
            DistanceBetween(ae, position)
        )
    );

define FindPlayer():
    FirstOf(
        FilteredArray(
            AllPlayers(playerTeam),
            (
                !IsDummyBot(ae) &&
                HasSpawned(ae)
            )
        )
    );

void SetFollowTarget()"SetFollowTarget"{
    // get current object position
    define objPos! = CurrentObjectOnPosition();
    // get near object alive player
    define alivePlayer! = FindNearPositionAlivePlayer(objPos);

    if(
        // not game in proress
        !IsGameInProgress()
    ){
        if(
            // find alive player
            alivePlayer != null
        ){
            // set player as followTarget
            followTarget = alivePlayer;
        }
        else{
            // set spawn point as followTarget
            followTarget = SpawnPoints(playerTeam)[0];
        }        
    }
    else{
        // game in proress
        if(
            // valid object
            objPos != 0 &&
            (
                // near or has line to object
                DistanceBetween(ep, objPos) <= ActionRange.CanFind &&
                IsInLineOfSight(ep, objPos)
            )
        ){
            // set object as followTarget
            followTarget = objPos;
        }
        else if(
            // find alive player
            alivePlayer != null
        ){
            // set player as followTarget
            followTarget = alivePlayer;
        }
        else{
            // get player on team
            define player! = FindPlayer();
            if(
                // find player
                player != null
            ){
                // set spawn point as followTarget for wait player respawn and join
                followTarget = SpawnPoints(playerTeam)[0];
            }
            else{
                // set object as followTarget by non player
                followTarget = objPos;
            }
        }
    }
}

void TeleportToFollowTarget()"TeleportToFollowTarget"{
    define teleportPos!;
    
    // teleport to facing direction from followTarget
    teleportPos = BlockedPositon(followTarget, DirectionTowards(followTarget, ep), followRangeMin * 3);
    teleportPos = ShiftedPosition(teleportPos, DirectionTowards(ep, followTarget), 1);    // avoid map surface

    // WaitRandomForDistributeServerLoad();
    // teleportPos = Midpoint(ep, followTarget);
    // teleportPos = NearestWalkablePosition(teleportPos);

    if(
        !IsGameInProgress() ||
        IsOverTime() ||
        IsBelowAbyss(teleportPos)
    ){
        // direct teleport to followTarget
        teleportPos = followTarget;
    }
    
    // teleport
    Teleport(ep, teleportPos);
}

rule: "Buddy/Teleport/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // set follow target
    SetFollowTarget();
    // teleport to follow target
    TeleportToFollowTarget();
}

rule: "Buddy/Teleport/following"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // set follow target
    SetFollowTarget();

    // try follow movement by loop
    define followTryCount! = 0;
    while(followTryCount < followTryCountMax){
        // get distance to followTarget
        define dist! = DistanceBetween(ep, followTarget);
        define hasLine! = IsInLineOfSight(ep, followTarget);
        // is in follow range min and has line
        if(
            // near followTarget
            dist <= followRangeMin &&
            // has line followTarget
            hasLine
        ){
            // stop following
            // reset walk fast
            SetMoveSpeed(ep, DefaultPercentage());
            // stop follow
            StopFacing(ep);
            StopMove(ep);
            // exit loop
            break;           
        }
        // is in follow range max
        else if(
            dist < followRangeMax
        ){
            // start following
            // set walk fast by dist
            SetMoveSpeed(ep, DefaultPercentage() + (dist * 10));
            // walk to followTarget
            StartFacing(
                ep, DirectionTowards(EyePosition(),
                    HasSpawned(followTarget) ? EyePosition(followTarget) : PositionOf(followTarget),
                ),
                facingRate, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            // start follow
            moveDirFB = hasLine ?
                Forward() :
                RandomValueInArray([NoDirection(), Forward(), Backward()]);
            moveDirLR = hasLine ?
                NoDirection() :
                RandomValueInArray([Right(), Left()]);
            // start move for avoid obstacle
            StartMove(ep);
            // with jump by followTryCount
            if(
                ProbabilityTrue(30)
            ){
                PressButton(ep, Button.Jump);
            }
            // wait for next loop
            Wait(followTryIntervalSecond, WaitBehavior.AbortWhenFalse);
            // count up try count
            followTryCount ++;
        }
        // is out follow range max
        else{
            // follow by teleport
            // need teleport
            followTryCount = followTryCountMax;
            // exit loop
            break;
        } 
    }

    if(
        // try count over
        followTryCount >= followTryCountMax
    ){
        // reset walk fast
        SetMoveSpeed(ep, DefaultPercentage());
        // stop follow
        StopMove(ep);

        // teleport to follow target
        TeleportToFollowTarget();
    }

    Wait(1, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/unfollowPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState != ActionState.Non
){
    SetMoveSpeed(ep, DefaultPercentage());
}

playervar define prevNorHealth! = 1.0;
playervar define prevMatchTime! = 0;

define ChangedNormalizedHealth(): NormalizedHealth() - prevNorHealth;

define IsEnemyTeamKilled(): 
    NumberOfPlayers(enemyTeam) > 0 &&
    NumberOfLivingPlayers(enemyTeam) <= 0;

rule: "Buddy/communicate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    prevMatchTime = IsGameInProgress() ? MatchTime() : MaxValue();
    prevNorHealth = NormalizedHealth();
    
    Wait(
        RandomReal(2, 4),
        WaitBehavior.AbortWhenFalse);

    if(
        // all commnication prob
        ProbabilityTrue(100)
    ){
        if(
            (
                // not in combat
                actionState == ActionState.Non &&
                (
                    // in setup
                    IsInSetup() ||
                    // in spanwn room 
                    IsInSpawnRoom()
                )
            )
        ){
            // say about greeting
            if(
                // hello prob
                ProbabilityTrue(25)
            ){
                define helloTarget!;
                // get player at random
                helloTarget = 
                    RandomValueInArray(
                        FilteredArray(
                            AllPlayers(playerTeam),
                            (
                                !IsDummyBot(ae) &&
                                IsInLineOfSight(ep, ae)
                            )
                        )
                    );

                if(helloTarget == null){
                    // get bot any one 
                    helloTarget = 
                        RandomValueInArray(
                            FilteredArray(
                                AllPlayers(playerTeam),
                                (
                                    IsInLineOfSight(ep, ae)
                                )
                            )
                        );
                }

                if(helloTarget != null){
                    // facing to communicat target eyes
                    StartFacing(
                        ep, DirectionTowards(EyePosition(), EyePosition(helloTarget)),
                        facingRate, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
                    // wait for turning
                    Wait(RandomReal(0.25, 1), WaitBehavior.AbortWhenFalse);
                    // hello
                    Communicate(ep, Communication.Hello);

                    if(
                        ProbabilityTrue(50)
                    ){
                        // with T-bagging or jumping
                        define pressButton! = RandomValueInArray([Button.Jump, Button.Crouch, Button.Melee]);
                        define tbagInterval! = RandomReal(0.1, 0.3);
                        while(
                            ProbabilityTrue(90)
                        ){
                            StartHoldingButton(ep, pressButton);
                            Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                            StopHoldingButton(ep, pressButton);
                            Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                        }
                    }
                    // wait
                    Wait(RandomReal(0.5, 3), WaitBehavior.AbortWhenFalse);
                    StopFacing();
                }

            }
        }
        else{
            // say about game

            // say thanks
            if(
                (
                    // heal by not spawn room
                    !IsInSpawnRoom() &&
                    // according healed health
                    ProbabilityTrue(150 * ChangedNormalizedHealth())
                ) ||
                // enemy team kill
                (
                    ProbabilityTrue(50) &&
                    IsEnemyTeamKilled()

                ) ||
                // check point reached (remain time added)
                (
                    ProbabilityTrue(50) &&
                    MatchTime() - prevMatchTime >= 60
                )
            ){
                Communicate(ep, Communication.Thanks);
            }
            // say need heal
            else if(
                // by health low
                ProbabilityTrue(100 * (1 - NormalizedHealth())) &&
                // is alive
                IsAlive()
            ){
                Communicate(ep, Communication.NeedHealing);
            }
            // say help
            else if(
                // by lost health high
                ProbabilityTrue(-150 * ChangedNormalizedHealth()) &&
                // is alive
                IsAlive()
            ){
                Communicate(ep, Communication.NeedHelp);
            }
            // say countdown and use ult
            else if(
                // use ult prob
                ProbabilityTrue(50 * EnemyDensityRateOfAimTarget(ActionRange.Close)) &&
                // is alive
                IsAlive() &&
                // in combat
                actionState != ActionState.Non &&
                // ult ready
                UltimateChargePercent() >= DefaultPercentage()
            ){
                Communicate(ep, Communication.Countdown);
                Wait(3, WaitBehavior.AbortWhenFalse);
                while(UltimateChargePercent() >= DefaultPercentage()){
                    PressButton(ep, Button.Ultimate);
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                    PressButton(ep, Button.PrimaryFire);
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                }
                // sync ult attack
                define rdyUltNearPlayers! = FilteredArray(
                    AllLivingPlayers(playerTeam),
                    (
                        IsDummyBot(ae) &&
                        ProbabilityTrue(75) &&
                        UltimateChargePercent(ae) >= DefaultPercentage()
                    )
                );
                PressButton(rdyUltNearPlayers, Button.Ultimate);
                Wait(0.1, WaitBehavior.AbortWhenFalse);
                PressButton(rdyUltNearPlayers, Button.PrimaryFire);
            }
            // say fallback
            else if(
                ProbabilityTrue(50) &&
                // player team member 50% dead
                (NumberOfLivingPlayers(playerTeam) / NumberOfPlayers(playerTeam)) <= 0.5
            ){
                Communicate(ep, Communication.FallBack);
            }
            // say push
            else if(
                ProbabilityTrue(50) &&
                // enemy team member 50% dead
                (NumberOfLivingPlayers(enemyTeam) / NumberOfPlayers(enemyTeam)) <= 0.5
            ){
                Communicate(ep, Communication.PushForward);
            }
            // say sorry
            else if(
                ProbabilityTrue(50) &&
                // dead
                IsDead()
            ){
                Communicate(ep, Communication.Sorry);
            }
            // say ult charge progress
            else if(
                // according ult charge
                ProbabilityTrue(0.5 * UltimateChargePercent())
            ){
                Communicate(ep, Communication.UltimateStatus);
            }
            // say about objective
            else if(
                ProbabilityTrue(50) &&
                IsOnObjective()
            ){
                if(ProbabilityTrue(100 / 3)){
                    Communicate(ep, Communication.GroupUp);
                }
                else if(ProbabilityTrue(100 / 2)){
                    Communicate(ep, Communication.Defending);
                }
                else{
                    Communicate(ep, Communication.Go);
                }
            }
            // say other message
            else if(ProbabilityTrue(30)){
                if(
                    actionState == ActionState.Non
                ){
                    // say about follow/move
                    if(ProbabilityTrue(100 / 3)){
                        Communicate(ep, Communication.Go);
                    }
                    else if(ProbabilityTrue(100 / 2)){
                        Communicate(ep, Communication.GoingIn);
                    }
                    else{
                        Communicate(ep, Communication.WithYou);
                    }
                }
                else if(
                    actionState == ActionState.Attack
                ){
                    // say about attack
                    if(ProbabilityTrue(100 / 2)){
                        Communicate(ep, Communication.Attacking);
                    }
                    else{
                        Communicate(ep, Communication.Incoming);
                    }
                }
                else if(
                    actionState == ActionState.Support
                ){
                    // say about support
                    if(ProbabilityTrue(100 / 2)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else{
                        Communicate(ep, Communication.YouAreWelcome);
                    }
                }
            }
        }
    }

    LoopIfConditionIsTrue();
}


rule: "Buddy/resetDamage"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // reset prev damage for not say thanks
    prevNorHealth = 1;
}
