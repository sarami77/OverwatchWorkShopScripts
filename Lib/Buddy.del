import "Utility.del";
import "Bot.del";

// TAG Buddy ----------
define followRangeMin: 4;
define followRangeMax: Bot_ActionRange_Far;
define followTryIntervalSecond: 0.5;
define followTryCountMax: 6;
define followHopEmpluseScale: 2.2;
playervar define followTarget!;
playervar define followTargetOffset!;

rule: "Buddy/Teleport/initilaize"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot()
){
    StartForcingDummyBotName(ep, GetDummyName());
}

define FindNearPositionAlivePlayer(define position!):
    FirstOf(
        SortedArray(
            FilteredArray(
                AllLivingPlayers(playerTeam),
                (
                    !IsDummyBot(ae) &&
                    HasSpawned(ae)
                )
            ),
            DistanceBetween(ae, position)
        )
    );

define FindPlayer():
    FirstOf(
        FilteredArray(
            AllPlayers(playerTeam),
            (
                !IsDummyBot(ae) &&
                HasSpawned(ae)
            )
        )
    );

define SetFollowTarget()"SetFollowTarget"{
    // get current object position
    define objPos! = CurrentObjectOnPosition();
    // get near object alive player
    define alivePlayer! = FindNearPositionAlivePlayer(objPos);

    if(
        // not game in proress
        !IsGameInProgress()
    ){
        if(
            // find alive player
            alivePlayer != null
        ){
            // set player as followTarget
            followTarget = alivePlayer;
        }
        else{
            // set spawn point as followTarget
            followTarget = SpawnPoints(playerTeam)[0];
        }        
    }
    else{
        // game in proress
        if(
            // valid object
            objPos != 0 &&
            (
                // near or has line to object
                DistanceBetween(ep, objPos) <= Bot_ActionRange_CanFind ||
                IsInLineOfSight(ep, objPos)
            )
        ){
            // set object as followTarget
            followTarget = objPos;
        }
        else if(
            // find alive player
            alivePlayer != null
        ){
            // set player as followTarget
            followTarget = alivePlayer;
        }
        else{
            // get player on team
            define player! = FindPlayer();
            if(
                // find player
                player != null
            ){
                // set spawn point as followTarget for wait player respawn and join
                followTarget = SpawnPoints(playerTeam)[0];
            }
            else{
                // set object as followTarget by non player
                followTarget = objPos;
            }
        }
    }
}

define TeleportToFollowTarget()"TeleportToFollowTarget"{
    // teleport to facing direction from followTarget
    define teleportPos! = BlockedPositon(followTarget, DirectionTowards(followTarget, ep), followRangeMin * 3);    // avoid map surface
    teleportPos = ShiftedPosition(teleportPos, DirectionTowards(ep, followTarget), 1);
    
    if(
        !IsGameInProgress() ||
        IsBelowAbyss(teleportPos)
    ){
        // if abyss, teleport to followTarget
        teleportPos = followTarget;
    }
    // teleport
    Teleport(ep, teleportPos);
}

rule: "Buddy/Teleport/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // set follow target
    SetFollowTarget();
    // teleport to follow target
    TeleportToFollowTarget();
}

rule: "Buddy/Teleport/following"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // set follow target
    SetFollowTarget();

    // try follow movement by loop
    define followTryCount! = 0;
    while(followTryCount < followTryCountMax){
        // get distance to followTarget
        define dist! = DistanceBetween(ep, followTarget);
        define hasLine! = IsInLineOfSight(ep, followTarget);
        // is in follow range min and has line
        if(
            // near followTarget
            dist <= followRangeMin &&
            // has line followTarget
            hasLine
        ){
            // stop following
            // reset walk fast
            SetMoveSpeed(ep, DefaultPercentage());
            // stop follow
            StopFacing(ep);
            StopMove(ep);
            // exit loop
            break;           
        }
        // is in follow range max
        else if(
            dist < followRangeMax
        ){
            // start following
            // set walk fast by dist
            SetMoveSpeed(ep, DefaultPercentage() + (dist * 10));
            // walk to followTarget
            StartFacing(
                ep, DirectionTowards(EyePosition(),
                    HasSpawned(followTarget) ? EyePosition(followTarget) : PositionOf(followTarget),
                ),
                300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            // start follow
            moveDirFB = hasLine ?
                Forward() :
                RandomValueInArray([NoDirection(), Forward()]);
            moveDirLR = hasLine ?
                NoDirection() :
                RandomValueInArray([Right(), Left()]);
            // start move for avoid obstacle
            StartMove(ep);
            // with jump by followTryCount
            if(
                ProbabilityTrue(30)
            ){
                PressButton(ep, Button.Jump);
            }
            // wait for next loop
            Wait(followTryIntervalSecond, WaitBehavior.AbortWhenFalse);
            // count up try count
            followTryCount ++;
        }
        // is out follow range max
        else{
            // follow by teleport
            // need teleport
            followTryCount = followTryCountMax;
            // exit loop
            break;
        } 
    }

    if(
        // try count over
        followTryCount >= followTryCountMax
    ){
        // reset walk fast
        SetMoveSpeed(ep, DefaultPercentage());
        // stop follow
        StopMove(ep);

        // teleport to follow target
        TeleportToFollowTarget();
    }

    Wait(1, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/unfollowPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState != ActionState.Non
){
    SetMoveSpeed(ep, DefaultPercentage());
}

playervar define prevNorHealth! = 1.0;
playervar define prevMatchTime! = 0;

define changedHealth: NormalizedHealth() - prevNorHealth;
define enemyTeamKilled: 
    NumberOfPlayers(enemyTeam) > 0 &&
    NumberOfLivingPlayers(enemyTeam) <= 0;

rule: "Buddy/communicate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    prevMatchTime = IsGameInProgress() ? MatchTime() : MaxValue();
    prevNorHealth = NormalizedHealth();
    
    Wait(RandomReal(4, 6), WaitBehavior.AbortWhenFalse);

    if(
        // in setup
        IsInSetup() ||
        // in spanwn room 
        IsInSpawnRoom() ||
        (
            // enemy team kill
            enemyTeamKilled
        )
    ){
        if(
            ProbabilityTrue(50)
        ){
            define helloTarget!;
            // get not dummy player
            helloTarget = 
                RandomValueInArray(
                    FilteredArray(
                        AllPlayers(playerTeam),
                        (
                            !IsDummyBot(ae)
                        )));

            if(helloTarget == null){
                // get any one from all
                helloTarget = 
                    RandomValueInArray(
                        AllPlayers(playerTeam)
                    );
            }
            AbortIf(helloTarget == null);
            // facing to communicat target eyes
            StartFacing(
                ep, DirectionTowards(EyePosition(), EyePosition(helloTarget)),
                300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
            // wait
            Wait(RandomReal(0.5, 1), WaitBehavior.AbortWhenFalse);
            // hello
            Communicate(ep, Communication.Hello);

            if(
                ProbabilityTrue(50)
            ){
                // with T-bagging or jumping
                define pressButton! = RandomValueInArray([Button.Jump, Button.Crouch]);
                define tbagInterval! = RandomReal(0.1, 0.3);
                while(
                    ProbabilityTrue(90)
                ){
                    StartHoldingButton(ep, pressButton);
                    Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                    StopHoldingButton(ep, pressButton);
                    Wait(tbagInterval, WaitBehavior.AbortWhenFalse);
                }
            }
            // wait
            Wait(RandomReal(0.5, 1), WaitBehavior.AbortWhenFalse);
            StopFacing();
        }
    }
    else{
        // status message
        // say thanks
        if(
            (
                // 1/4 healed
                !IsInSpawnRoom() &&
                // according healed health
                ProbabilityTrue(100 * changedHealth)
            )
                ||
            (
                // enemy team kill
                enemyTeamKilled
            )
                ||
            (
                // check point reached (remain time added.)
                MatchTime() - prevMatchTime >= 60
            ) 
        ){
            Communicate(ep, Communication.Thanks);
        }
        // say help
        else if(
            // according damaged health
            ProbabilityTrue(-100 * changedHealth)
        ){
            Communicate(ep, Communication.NeedHelp);
        }
        // say need heal
        else if(
            // according lose health
            ProbabilityTrue(100 * (1 - NormalizedHealth()))
        ){
            Communicate(ep, Communication.NeedHealing);
        }
        // say sorry
        else if(
            ProbabilityTrue(30) &&
            // dead
            IsDead()
        ){
            Communicate(ep, Communication.Sorry);
        }
        // say countdown and use ult
        else if(
            ProbabilityTrue(25) &&
            IsAlive() &&
            UltimateChargePercent() >= DefaultPercentage() &&
            actionState != ActionState.Non
        ){
            // Communicate(ep, Communication.UltimateStatus);
            // Wait(3, WaitBehavior.AbortWhenFalse);
            Communicate(ep, Communication.Countdown);
            Wait(3, WaitBehavior.AbortWhenFalse);
            while(UltimateChargePercent() >= DefaultPercentage()){
                PressButton(ep, Button.Ultimate);
                Wait(0.2, WaitBehavior.AbortWhenFalse);
                PressButton(ep, Button.PrimaryFire);
                Wait(0.2, WaitBehavior.AbortWhenFalse);
            }
            // sync attack
            define rdyUltNearPlayers! = FilteredArray(
                AllLivingPlayers(playerTeam),
                (
                    IsDummyBot(ae) &&
                    UltimateChargePercent(ae) >= DefaultPercentage() &&
                    DistanceBetween(ep, ae) <= 10
                )
            );
            PressButton(rdyUltNearPlayers, Button.Ultimate);
            Wait(0.1, WaitBehavior.AbortWhenFalse);
            PressButton(rdyUltNearPlayers, Button.PrimaryFire);
        }
        // say ult charge progress
        else if(
            ProbabilityTrue(20) &&
            // according ult charge
            ProbabilityTrue(UltimateChargePercent())
        ){
            Communicate(ep, Communication.UltimateStatus);
        }
        // say fallback
        else if(
            ProbabilityTrue(50) &&
            // player team half dead
            NumberOfLivingPlayers(playerTeam) <= NumberOfPlayers(playerTeam) / 2
        ){
            Communicate(ep, Communication.FallBack);
        }
        // say push
        else if(
            ProbabilityTrue(50) &&
            // enemy team half dead
            NumberOfLivingPlayers(enemyTeam) <= NumberOfPlayers(enemyTeam) / 2
        ){
            Communicate(ep, Communication.PushForward);
        }
        // situation message
        else if(ProbabilityTrue(20)){
            if(IsOnObjective()){
                // say about objective
                if(ProbabilityTrue(35)){
                    Communicate(ep, Communication.GroupUp);
                }
                else if(ProbabilityTrue(35)){
                    Communicate(ep, Communication.Defending);
                }
                else{
                    Communicate(ep, Communication.Go);
                }
            }
            else{
                if(
                    actionState == ActionState.Non
                ){
                    // say about follow/move
                    if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.Go);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.GoingIn);
                    }
                }
                else if(
                    actionState == ActionState.Attack
                ){
                    // say about attack
                    if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.Attacking);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.Incoming);
                    }
                }
                else if(
                    actionState == ActionState.Support
                ){
                    // say support action
                    if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else if(ProbabilityTrue(35)){
                        Communicate(ep, Communication.YouAreWelcome);
                    }
                }
            }
        }
    }

    LoopIfConditionIsTrue();
}


rule: "Buddy/resetDamage"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // reset prev damage for not say thanks
    prevNorHealth = 1;
}
