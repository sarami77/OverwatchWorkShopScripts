import "Utility.del";
import "Bot.del";

// TAG Buddy ----------

define followRange: actionRangeMax / 4;
define followIntervalSecond: 1;
define followHopTryCount: 3;
define followHopEmpluseScale: 2.2;
playervar define followPlayer!;
playervar define followerText!;
playervar define isFirstFollowOnSpawned! = true;



rule: "Buddy/Teleport/followPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // on buddy list reloaded, tereport to player near object
    if(isFirstFollowOnSpawned){
        isFirstFollowOnSpawned = false;

        CreateInWorldText(
            AllPlayers(), followerText, 
            ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.SkyBlue, Spectators.DefaultVisibility);

        if(IsGameInProgress()){
            Teleport(ep, ClosestPlayerTo(CurrentObjectPosition(), playerTeam));
        }
        else{
            Teleport(ep, SpawnPoints(playerTeam)[0]);
        }

    }

    // try follow loop
    for(define notHasLineSecond! = 0; notHasLineSecond < followHopTryCount; notHasLineSecond ++){
        Wait(followIntervalSecond, WaitBehavior.AbortWhenFalse);
        
        if(
            !(
                // already has followPlayer
                followPlayer != null &&
                // skip update by prob
                ProbabilityTrue(70)
            )
        ){
            // get followPlayer
            if(
                // has support target
                actionState == ActionState.Support &&
                target != 0
            )
            {
                followPlayer = target;
            }
            else{
                // get alive player near me
                followPlayer = FirstOf(
                    SortedArray(
                        FilteredArray(
                            AllLivingPlayers(playerTeam),
                            (
                                !IsDummyBot(ae) &&
                                HasSpawned(ae) &&
                                IsAlive(ae)
                            )
                        ),
                        DistanceBetween(ae, ep)
                    )
                );
            }
        }

        // set destination   
        if(
            followPlayer == null
        ){
            if(IsGameInProgress()){
                followPlayer = CurrentObjectPosition();
            }
            else{
                followPlayer = SpawnPoints(playerTeam)[0];
            }

            followerText = <"No Following">;
        }
        else{
            followerText = <"Following <0>", followPlayer>;
        }

        // follow 
        define dist! = DistanceBetween(ep, followPlayer);
        define hasNearPlayer! = dist <= followRange;
        define hasLineNearPlayer = IsInLineOfSight(ep, followPlayer);
        if(
            hasNearPlayer &&
            hasLineNearPlayer
        ){
            // stop follow
            StopMove();
            // reset try count
            LoopIfConditionIsTrue();           
        }
        else{
            // start follow
            SetFacing(
                ep,
                DirectionTowards(ep, followPlayer),
                Relative.ToWorld);
            // near followRange
            if(dist <= followRange * 1.5){
                // by walk
                moveDir = Forward();
                StartMove();
            }
            else if(dist <= followRange * 5){
                // by hop
                ApplyImpulse(
                    ep, VectorTowards(
                        ep, PositionOf(followPlayer) + Vector(0, dist * 0.1, 0)
                    ),
                    DistanceBetween(ep, followPlayer) * followHopEmpluseScale,
                    Relative.ToWorld, ContraryMotion.Cancel);
            }
            else{
                // by teleport
                break;
            }
        }
    }

    // try follow count over
    Teleport(ep,
        NearestWalkablePosition(
            PositionOf(followPlayer) +
            (DirectionTowards(followPlayer, ep) * (followRange / 2))
        )
    );
    
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/sayHello"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    actionState == ActionState.Non
){
    Wait(RandomInteger(5, 15) ,WaitBehavior.AbortWhenFalse);
    define helloTarget! = 
        RandomValueInArray(
            FilteredArray(
                AllPlayers(playerTeam),
                (
                    DistanceBetween(ae, ep) <= 10
                )
            )
        );

    if(helloTarget != null){
        Communicate(ep, Communication.Hello);
        if(!IsMoving()){
            SetFacing(
                ep,
                DirectionTowards(ep, helloTarget),
                Relative.ToWorld);
        }
    }
    
    LoopIfConditionIsTrue();
}