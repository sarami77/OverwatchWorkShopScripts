import "Utility.del";
import "Bot.del";

// TAG Buddy ----------
define followRange: (actionRangeMax / 4) + 4;
define followTryIntervalSecond: 0.5;
define followTryMaxCount: 6;
define followHopEmpluseScale: 2.2;
playervar define followTarget!;
playervar define followerText!;

rule: "Buddy/Teleport/followPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState == ActionState.Non
){
    // get alive player near me
    followTarget =
        FirstOf(
            SortedArray(
                FilteredArray(
                    AllLivingPlayers(playerTeam),
                    (
                        !IsDummyBot(ae) &&
                        HasSpawned(ae) &&
                        IsAlive(ae)
                    )
                ), DistanceBetween(ae, ep)));
    followerText = <"following <0>", followTarget>;

    // not game in proress
    if(!IsGameInProgress()){        
        // not find player
        if(followTarget == null){
            // force set spawn point as followTarget
            followTarget = SpawnPoints(playerTeam)[0];
            followerText = <"following spawn point">;
        }
    }
    else{
        if(
            // valid object
            CurrentObjectPosition() != 0 &&
            (
                // near or has line to object
                DistanceBetween(ep, CurrentObjectPosition()) <= 30 ||
                IsInLineOfSight(ep, CurrentObjectPosition())
            )
        ){
            // set object as followTarget
            followTarget = CurrentObjectPosition();
            followerText = <"following object">;
        }
        else{            
            // not find player
            if(followTarget == null){
                // force set object as followTarget
                followTarget = CurrentObjectPosition();
                followerText = <"following object">;
            }
        }
    }

    // try follow movement by loop
    define notHasLineSecond!;
    for(notHasLineSecond = 0; notHasLineSecond < followTryMaxCount; notHasLineSecond ++){
        // get distance to followTarget
        define dist! = DistanceBetween(ep, followTarget);
        // is in follow range
        if(
            // near followTarget
            dist <= followRange &&
            // has line followTarget
            IsInLineOfSight(ep, followTarget)
        ){
            // reset walk fast
            SetMoveSpeed(ep, 100);
            // stop follow
            StopMove();
            // reset try count
            break;           
        }
        // is out follow range
        else if(dist < followRange * 5){
            // set walk fast
            SetMoveSpeed(ep, 100 + (dist * 15));
            // walk to followTarget
            SetFacing(
                ep,
                DirectionTowards(ep, followTarget),
                Relative.ToWorld);
            moveDir = Forward();
            StartMove();
            if(ProbabilityTrue(30)){
                PressButton(ep, Button.Jump);
            }
            // wait
            Wait(followTryIntervalSecond, WaitBehavior.AbortWhenFalse);
            // count up try count
            continue;
        }
        // is more out follow range
        else{
            // teleport
            Teleport(ep,
                NearestWalkablePosition(
                    BlockedPositon(followTarget, DirectionTowards(followTarget, ep), followRange)
                )
            );
            // reset try count
            break;
        } 
    }

    // try count over
    if(notHasLineSecond >= followTryMaxCount){
        // teleport
        Teleport(ep,
            NearestWalkablePosition(
                BlockedPositon(followTarget, DirectionTowards(followTarget, ep), followRange)
            )
        );
    }

    Wait(1, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Buddy/Teleport/unfollowPlayer"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    IsAlive() &&
    actionState != ActionState.Non
){
    followerText = <"in combat">;
    SetMoveSpeed(ep, 100);
}

playervar define prevNorHealth = 1.0;
playervar define waitSecondNextComm = 5;
rule: "Buddy/communicate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    prevNorHealth = NormalizedHealth();
    
    Wait(RandomReal(4, 6), WaitBehavior.AbortWhenFalse);

    // Wait(RandomReal(waitSecondNextComm, waitSecondNextComm + 5), WaitBehavior.AbortWhenFalse);

    if(
        IsInSpawnRoom()
    ){
        if(
            ProbabilityTrue(40)
        ){
            // hello
            Communicate(ep, Communication.Hello);
            if(!IsMoving()){
                define sayTarget! = 
                    RandomValueInArray(
                        FilteredArray(
                            AllPlayers(playerTeam),
                            DistanceBetween(ae, ep) <= 10));
                
                if(sayTarget != null){
                    SetFacing(
                        ep,
                        DirectionTowards(ep, sayTarget),
                        Relative.ToWorld);
                }
            }
        }
    }
    else{
        // status message
        if(
            (
                // 1/4 healed
                !IsInSpawnRoom() &&
                NormalizedHealth() - prevNorHealth >= 0.25
            ) ||
            (
                // team kill
                NumberOfPlayers(enemyTeam) > 0 &&
                NumberOfLivingPlayers(enemyTeam) <= 0
            )
            
        ){
            Communicate(ep, Communication.Thanks);
        }
        else if(
            // dead
            NormalizedHealth() <= 0.0
        ){
            if(ProbabilityTrue(50)){
                Communicate(ep, Communication.Sorry);
            }
            else{
                Communicate(ep, Communication.NeedHelp);
            }
        }
        else if(
            // 30% health
            NormalizedHealth() <= 0.3
        ){
            Communicate(ep, Communication.NeedHealing);
        }
        else if(
            ProbabilityTrue(50) &&
            // 60% health
            NormalizedHealth() <= 0.6
        ){
            if(ProbabilityTrue(50)){
                Communicate(ep, Communication.GroupUp);
            }
            else{
                Communicate(ep, Communication.NeedHelp);
            }
        }
        else if(
            ProbabilityTrue(50) &&
            // player member half dead
            NumberOfLivingPlayers(playerTeam) <= NumberOfPlayers(playerTeam) / 2
        ){
            Communicate(ep, Communication.FallBack);
        }
        else if(
            ProbabilityTrue(25) &&
            // enemy member half dead
            NumberOfLivingPlayers(enemyTeam) <= NumberOfPlayers(enemyTeam) / 2
        ){
            Communicate(ep, Communication.PushForward);
        }

        else if(
            ProbabilityTrue(25) &&
            // according ult charge
            ProbabilityTrue(UltimateChargePercent())
        ){
            Communicate(ep, Communication.UltimateStatus);
        }

        // situation message
        else if(ProbabilityTrue(10)){

            if(IsOnObjective()){
                if(ProbabilityTrue(40)){
                    Communicate(ep, Communication.GroupUp);
                }
                else if(ProbabilityTrue(40)){
                    Communicate(ep, Communication.Go);
                }
                else{
                    Communicate(ep, Communication.Defending);
                }
            }
            else{
                if(
                    actionState == ActionState.Non
                ){
                    if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.Go);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.GoingIn);
                    }
                    else{
                        Communicate(ep, Communication.WithYou);
                    }
                }
                else if(
                    actionState == ActionState.Attack
                ){
                    if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.Attacking);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.Incoming);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.PushForward);
                    }
                    else{
                        Communicate(ep, Communication.Go);
                    }
                }
                else if(
                    actionState == ActionState.Support
                ){
                    if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.WithYou);
                    }
                    else if(ProbabilityTrue(40)){
                        Communicate(ep, Communication.NeedHealing);
                    }
                    else{
                        Communicate(ep, Communication.YouAreWelcome);
                    }
                }
            }
        }
    }

    LoopIfConditionIsTrue();
}


rule: "Buddy/resetDamage"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    IsInSpawnRoom()
){
    // reset prev damage for not say thanks
    prevNorHealth = 1;
}