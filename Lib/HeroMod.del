import "Debug.del";

// TAG HeroMod ----------
playervar define selectHeroMod!;
playervar define heroModName!;
playervar define heroModDetail!;

enum HeroModType{
    INIT = 0,
    NO_HERO_MOD,
    MEDIC,
    KILLER,
    ASSASSIN,
    SPRINTER,
    BIRD_MAN,
    HEAVY_ARMOR,
    FIXED_TURRET,
    TECHNICIAN,
    SURVIVALIST,
    SAVIOR,
    REVENGER,
    POWER_CHARGING,
    RAGE,
    SHOT_CALL,
    FAST_CHARGE,
    SUPER_ULT,
    ZOMBIE,
    LAST
}

enum HeroModTrigger{
    ACTIVATE,
    DEACTIVATE,
    TIME_PASSED,
    STOP,
    MOVING,
    MELEE,
    USING_ULT,
    NOT_USING_ULT,
    CHARGING_ULT,
    LOST_HEALTH,
    ELEMINATION,
    DEATH,
    TEAMMATE_DEATH
}

playervar define heroModOperationText!;

void UpdateHeroModAllText()"UpdateHeroModAllText"{
    DestroyHudText(heroModOperationText[0]);
    DestroyHudText(heroModOperationText[1]);
    DestroyInWorldText(heroModOperationText[2]);

    heroModOperationText[0] = CreateHudText(ep, null,
        (
            IsInSpawnRoom() &&
            !IsDummyBot()
        ) ? 
            <"You can change hero mods anytime in spawn room.\n\rPress melee key <0> to select hero mod.\n\r●Your hero mod = <1>", ButtonGuide(Button.Melee), heroModName> :
            <"●Your hero mod = <0>", heroModName>,
        null, Location.Left, 101, null, Color.Blue, null, HudTextRev.String, Spectators.DefaultVisibility);

    heroModOperationText[1] = CreateHudText(ep, null,
        heroModDetail,
        null, Location.Left, 102, null, Color.SkyBlue, null, HudTextRev.StringAndColor, Spectators.DefaultVisibility);

    heroModOperationText[2] = CreateInWorldText(AllPlayers(),
        heroModName,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.SkyBlue, Spectators.DefaultVisibility);
}

rule: "HeroMod/updateHeroModAllTextOnEnterSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    IsInSpawnRoom()
){
    UpdateHeroModAllText();
}

rule: "HeroMod/updateHeroModAllTextOnExitSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    !IsInSpawnRoom()
){
    UpdateHeroModAllText();
}

rule: "HeroMod/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    HasSpawned()
){
    selectHeroMod = HeroModType.NO_HERO_MOD;

    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE);
    UpdateHeroModAllText();
}

rule: "HeroMod/switchHeroMod"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Melee)
){
    // do heromod deactivate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEACTIVATE);

    selectHeroMod = selectHeroMod < HeroModType.LAST - 1 ? selectHeroMod + 1 : HeroModType.NO_HERO_MOD;

    // do heromod activate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE);

    // update text
    UpdateHeroModAllText();
}

// rule: "HeroMod/applyHeroModForBot"
// Event.OngoingPlayer
// if(
//     TeamOf() == playerTeam &&
//     IsDummyBot() &&
//     !IsAssemblingHeroes()
// ){
//     selectHeroMod = RandomValueInArray([
//         HeroModType.NO_HERO_MOD,
//         HeroModType.NO_HERO_MOD,
//         HeroModType.NO_HERO_MOD,
//         HeroModType.MEDIC,
//         HeroModType.KILLER,
//         HeroModType.ASSASSIN,
//         HeroModType.SPRINTER,
//         HeroModType.BIRD_MAN,
//         HeroModType.HEAVY_ARMOR,
//         HeroModType.FIXED_TURRET,
//         HeroModType.TECHNICIAN,
//         HeroModType.SURVIVALIST,
//         HeroModType.SAVIOR,
//         HeroModType.SAVIOR,
//         HeroModType.SAVIOR,
//         HeroModType.RAGE,
//         HeroModType.SHOT_CALL,
//         HeroModType.FAST_CHARGE,
//         HeroModType.SUPER_ULT,
//         HeroModType.ZOMBIE
//     ]);

//     // do heromod activate action
//     DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE);

//     // update text
//     UpdateHeroModAllText();
// }

void DoHeroModAction(define heromod!, define trigger!)"DoHeroModAction"{
    // common trigger action
    if(
        trigger == HeroModTrigger.TEAMMATE_DEATH
    ){
        define playerArray! = FilteredArray(
            AllPlayers(playerTeam),
            (
                ae != ep &&
                ae.selectHeroMod == HeroModType.RAGE
            )
        );
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            SetUltimateCharge(player, UltimateChargePercent(player) + 30);
        }
    }
    // each heromod trigger action
    else if(
        selectHeroMod == HeroModType.NO_HERO_MOD
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "NO MOD";
            heroModDetail = 
                "No modified";
        }
    }
    else if(
        selectHeroMod == HeroModType.MEDIC
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "MEDIC";
            heroModDetail = 
                "+ deal heal 150%"+ NL +
                "- deal damage 50%";
            SetHealingDealt(ep, 150);
            SetDamageDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingDealt(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.KILLER
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "KILLER";
            heroModDetail = 
                "+ deal damage 150%"+ NL +
                "- receive heal 50%";
            SetDamageDealt(ep, 150);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.SPRINTER
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SPRINTER";
            heroModDetail = 
                "+ move speed 150%"+ NL +
                "- max health 50%";
            SetMoveSpeed(ep, 150);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.BIRD_MAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "BIRD MAN";
            heroModDetail = 
                "+ gravity 10%"+ NL +
                "- max health 50%";
            SetGravity(ep, 10);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetGravity(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.HEAVY_ARMOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HEAVY ARMOR";
            heroModDetail = 
                "+ max health 300%"+ NL +
                "- move speed 50%"+ NL +
                "- receive heal 20%";
            SetMaxHealth(ep, 300);
            SetMoveSpeed(ep, 50);
            SetHealingReceived(ep, 20);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.ASSASSIN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "ASSASSIN";
            heroModDetail = 
                "+ deal damage 130%"+ NL +
                "+ move speed 130%"+ NL +
                "- max Health 50%";
            SetDamageDealt(ep, 130);
            SetMoveSpeed(ep, 130);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.FIXED_TURRET
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "FIXED TURRET";
            heroModDetail = 
                "+ in stop, deal damage 150%"+ NL +
                "+ in stop, max health 200%"+ NL +
                "- in moving, deal damage 30%";
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.STOP
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 150);
            SetMaxHealth(ep, 200);
        }
        else if(
            trigger == HeroModTrigger.MOVING
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 30);
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.TECHNICIAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "TECHNICIAN";
            heroModDetail = 
                "+ in finalblow enemy, reset cooldown ability2"+ NL +
                "+ in finalblow enemy, reset cooldown secondary fire ability"+ NL +
                "- reset re-trigger has 3 seconds interval"+ NL +
                "- deal damage 50%";
            SetDamageDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.ELEMINATION
        ){
            SetAbilityCooldown(ep, Button.Ability2, 0);
            if(AbilityCharge(ep, Button.Ability2) <= 0)
                SetAbilityCharge(ep, Button.Ability2, 1);

            SetAbilityCooldown(ep, Button.SecondaryFire, 0);
            if(AbilityCharge(ep, Button.SecondaryFire) <= 0)
                SetAbilityCharge(ep, Button.SecondaryFire, 1);

            Wait(3, WaitBehavior.IgnoreCondition);
        }
    }
    else if(
        selectHeroMod == HeroModType.SURVIVALIST
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SURVIVALIST";
            heroModDetail = 
                "+ in lost 50% health, reset cooldown ability1"+ NL +
                "+ in lost 50% health, reset cooldown jump ability"+ NL +
                "- reset re-trigger has 3 seconds interval"+ NL +
                "- receive heal 50%";
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.LOST_HEALTH
        ){
            SetAbilityCooldown(ep, Button.Ability1, 0);
            if(AbilityCharge(ep, Button.Ability1) <= 0)
                SetAbilityCharge(ep, Button.Ability1, 1);

            SetAbilityCooldown(ep, Button.Jump, 0);
            if(AbilityCharge(ep, Button.Jump) <= 0)
                SetAbilityCharge(ep, Button.Jump, 1);

            Wait(3, WaitBehavior.IgnoreCondition);
        }
    }
    else if(
        selectHeroMod == HeroModType.SAVIOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SAVIOR";
            heroModDetail = 
                "+ in use melee, revive near dead teammate"+ NL +
                "- in revive, consume 50% ult charge";
        }
        else if(
            trigger == HeroModTrigger.MELEE
        ){
            if(
                IsAlive()
            ){
                define player! = 
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                PlayersInViewAngle(
                                    ep,
                                    TeamOf(),
                                    90
                                ),
                                (
                                    IsDead(ae) &&
                                    DistanceBetween(ep, ae) <= 5
                                )
                            ),
                            DistanceBetween(ep, ae)
                        )
                    );
                if(
                    player != null
                ){
                    Resurrect(player);
                    SmallMessage(ep, "Revived "+ player + HeroIconString(HeroOf(player)));
                    SmallMessage(player, "Revived by "+ ep + HeroIconString(HeroOf(ep)));
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, player, 1.5);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.BuffExplosionSound, null, player, 100);
                    SetUltimateCharge(ep, UltimateChargePercent() - 50);
                }
            }
        }
    }
    else if(
        selectHeroMod == HeroModType.REVENGER
    ){
        define status!;

        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "REVENGER";
            heroModDetail = "";                 // set by TIME_PASSED trigger
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            status = DefaultPercentage() + RoundToInteger(((1 - NormalizedHealth()) * 100));
            SetDamageDealt(ep, status);
            SetMoveSpeed(ep, status);
            heroModDetail = 
                "+ more lost health, more deal damage (now "+ status +"%/200%)"+ NL +
                "+ more lost health, more move speed (now "+ status +"%/200%)"+ NL +
                "- receive heal 50%";
            Wait(1, WaitBehavior.AbortWhenFalse);
        }
    }
    else if(
        selectHeroMod == HeroModType.POWER_CHARGING
    ){
        define status!;

        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "POWER CHARGING";
            heroModDetail = "";                 // set by TIME_PASSED trigger
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            status = DefaultPercentage() + RoundToInteger((UltimateChargePercent() * 0.5));
            SetDamageDealt(ep, status);
            SetMoveSpeed(ep, status);
            heroModDetail = 
                "+ more ult charges, more deal damage (now "+ status +"%/150%)"+ NL +
                "+ more ult charges, more move speed (now "+ status +"%/150%)"+ NL +
                "- in dead, lose all ult charge";
            Wait(1, WaitBehavior.AbortWhenFalse);
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            SetUltimateCharge(ep, 0);
        }
    }
    else if(
        selectHeroMod == HeroModType.RAGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "RAGE";
            heroModDetail = 
                "+ in dead teammate, gain 30% ult charge"+ NL +
                "- in dead, lose all ult charge";
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            SetUltimateCharge(ep, 0);
        }
    }
    else if(
        selectHeroMod == HeroModType.SHOT_CALL
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SHOT CALL";
            heroModDetail = 
                "+ in use ult, all teammates gain ult full charge"+ NL +
                "- in every 3 second, lose 1% ult charge";
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            define playerArray! = FilteredArray(
                AllPlayers(playerTeam),
                (
                    ae != ep &&
                    ae.selectHeroMod != HeroModType.SHOT_CALL
                )
            );
            for(define index! = 0; index < CountOf(playerArray); index++){
                define player! = playerArray[index];
                SetUltimateCharge(player, 100);
                SmallMessage(player, "gained ult full charge by "+ ep + HeroIconString(HeroOf()));
                
                // bot use ult bt syc attack
                if(
                    IsDummyBot(player) &&
                    ProbabilityTrue(50)
                ){
                    PressButton(player, Button.Ultimate);
                    PressButton(player, Button.PrimaryFire);
                }
            }
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        selectHeroMod == HeroModType.FAST_CHARGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "FAST CHARGE";
            heroModDetail = 
                "+ in every 1 second, gain 3% ult charge"+ NL +
                "- max health 50%"+ NL +
                "- deal damage 50%"+ NL +
                "- deal heal 50%";
            SetMaxHealth(ep, 50);
            SetDamageDealt(ep, 50);
            SetHealingDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(1, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() + 3);
        }
    }
    else if(
        selectHeroMod == HeroModType.SUPER_ULT
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SUPER ULT";
            heroModDetail = 
                "+ in end of using ult, more gain ult full charge by 50% probility"+ NL +
                "+ in using ult, invincible status"+ NL +
                "+ in using ult, deal damage 400%"+ NL +
                "+ in using ult, deal heal 400%"+ NL +
                "+ in using ult, move speed 200%"+ NL +
                "+ in using ult, gravity 25%"+ NL +
                "- in every 3 second, lose 1% ult charge ";
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE ||
            trigger == HeroModTrigger.NOT_USING_ULT
        ){
            ClearStatus(ep, Status.PhasedOut);
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetGravity(ep, DefaultPercentage());
            if(
                ProbabilityTrue(50)
            ){
                SetUltimateCharge(ep, 100);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            SetStatus(ep, null, Status.PhasedOut, MaxValue());
            SetDamageDealt(ep, 400);
            SetHealingDealt(ep, 400);
            SetMoveSpeed(ep, 200);
            SetGravity(ep, 25);
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        selectHeroMod == HeroModType.ZOMBIE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "ZOMBIE";
            heroModDetail = 
                "+ in dead, auto revive after 5 seconds"+ NL +
                "- in over time, can not auto revive"+ NL +
                "- max health 50%" + NL +
                "- receive heal 50%";
            SetMaxHealth(ep, 50);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            if(
                !IsOverTime()
            ){
                Wait(5, WaitBehavior.AbortWhenFalse);
                if(IsDeadByAbyss()){
                    Teleport(ep, NearestWalkablePosition(ep));
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                }
                Resurrect(ep);
            }
        }
    }
}

// heromod trigger list ---------------------------------
// common trigger action
rule: "HeroModTrigger/TEAMMATE_DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    ep != Attacker()
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.TEAMMATE_DEATH);
}

// each heromod trigger action
rule: "HeroModTrigger/TIME_PASSED"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.REVENGER ||
        selectHeroMod == HeroModType.POWER_CHARGING
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.TIME_PASSED);
    LoopIfConditionIsTrue();
}

rule: "HeroModTrigger/STOP"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsMoving() &&
    (
        selectHeroMod == HeroModType.FIXED_TURRET
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.STOP);
}

rule: "HeroModTrigger/MOVING"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsMoving() &&
    (
        selectHeroMod == HeroModType.FIXED_TURRET
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.MOVING);
}

rule: "HeroModTrigger/MELEE"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    UltimateChargePercent() >= 50 &&
    (
        (!IsDummyBot() && IsButtonHeld(ep, Button.Melee)) ||
        (IsDummyBot() && IsButtonHeld(ep, Button.PrimaryFire))
    ) &&
    (
        selectHeroMod == HeroModType.SAVIOR
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.MELEE);
}

rule: "HeroModTrigger/USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsUsingUltimate() &&
    (
        selectHeroMod == HeroModType.SHOT_CALL ||
        selectHeroMod == HeroModType.SUPER_ULT
    ) 
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.USING_ULT);
}

rule: "HeroModTrigger/NOT_USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsUsingUltimate() &&
    (
        selectHeroMod == HeroModType.SUPER_ULT
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.NOT_USING_ULT);
}

rule: "HeroModTrigger/ULT_CHARGE"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    UltimateChargePercent(ep) < DefaultPercentage() &&
    (
        selectHeroMod == HeroModType.SHOT_CALL ||
        selectHeroMod == HeroModType.FAST_CHARGE ||
        selectHeroMod == HeroModType.SUPER_ULT
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.CHARGING_ULT);
    LoopIfConditionIsTrue();
}

rule: "HeroModTrigger/LOST_HEALTH"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    NormalizedHealth() <= 0.5 &&
    (
        selectHeroMod == HeroModType.SURVIVALIST
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.LOST_HEALTH);
}

rule: "HeroModTrigger/ELEMINATION"
Event.OnElimination
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.TECHNICIAN
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.ELEMINATION);
}

rule: "HeroModTrigger/DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.RAGE ||
        selectHeroMod == HeroModType.POWER_CHARGING ||
        selectHeroMod == HeroModType.ZOMBIE
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEATH);
}

