import "Debug.del";

// TAG HeroMod ----------
playervar define heroModType;
playervar define heroModName;
playervar define heroModDetail;

enum HeroModType{
    INIT,
    NO_MOD,
    MEDIC,
    HIT_MAN,
    ASSASSIN,
    SPRINTER,
    BIRD_MAN,
    LIGHT_ARMOR,
    HEAVY_ARMOR,
    FIXED_TURRET,
    ADRENALINE_RUSH,
    POWER_CHARGING,
    HEALING_SYRINGE,
    SAVIOR,
    POWERFUL_GIFT,
    TECHNICIAN,
    SURVIVALIST,
    ARTILLERY_SUPPORT,
    RAGE,
    SHOT_CALL,
    FAST_CHARGE,
    SUPER_ULT,
    GRUDGE_LIGHTNING,
    GRUDGE_FIRE_BALL,
    ARTILLERY_REQUEST,
    STRAFING_REQUEST,
    TITAN_FORM,
    BEAM_SNIPER,
    GUNSHIP_GUNNER,
    ZOMBIE,
    LAST
}

enum HeroModTrigger{
    ACTIVATE,
    DEACTIVATE,
    LONG_PRESS_MELEE_KEY,
    TIME_PASSED,
    STOP,
    MOVING,
    USING_PRIMARY,
    NOT_USING_PRIMARY,
    USING_SECONDARY,
    NOT_USING_SECONDARY,
    USING_ULT,
    NOT_USING_ULT,
    CHARGING_ULT,
    LOST_HEALTH,
    RECEIVE_DAMAGE,
    DEAL_HEAL,
    KILL,
    DEATH,
    TEAMMATE_DEATH
}

playervar define modOpeText;

define HM_AscKey: Button.Melee;
define HM_DisKey: Button.Crouch;

void UpdateHeroModText()"UpdateHeroModText"{
    DestroyHudText(modOpeText[0]);
    DestroyHudText(modOpeText[1]);
    DestroyInWorldText(modOpeText[2]);

    if(CanChangeHeroMod()){
        modOpeText[0] = CreateHudText(ep, null,
            <
                "You can change mod.\n\rPress <2>/<3> key while standing still to select mod.\n\r●Your mod = <0> <1>",
                heroModName,
                <"(<0>/<1>)", heroModType - 1, HeroModType.LAST - 2>,
                ButtonGuide(HM_AscKey),
                ButtonGuide(HM_DisKey)
            >,
            null, Location.Left, 101, null, Color.Blue, null, HudTextRev.String, Spectators.DefaultVisibility);
    }
    else{
        modOpeText[0] = CreateHudText(ep, null,
            <
                "You can change mod in respawn area anytime.\n\r●Your mod = <0> <1>",
                heroModName,
                <"(<0>/<1>)", heroModType - 1, HeroModType.LAST - 2>
            >,
            null, Location.Left, 101, null, Color.Blue, null, HudTextRev.String, Spectators.DefaultVisibility);
    }

    modOpeText[1] = CreateHudText(ep, null,
        heroModDetail,
        null, Location.Left, 102, null, Color.White, null, HudTextRev.StringAndColor, Spectators.DefaultVisibility);

    modOpeText[2] = CreateInWorldText(AllPlayers(),
        heroModName,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.SkyBlue, Spectators.DefaultVisibility);
}

define CanChangeHeroMod():
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    !isTransformed ;

rule: "HeroMod/updateHeroModAllTextOnEnterSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    CanChangeHeroMod()
){
    UpdateHeroModText();
}

rule: "HeroMod/updateHeroModAllTextOnExitSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !CanChangeHeroMod()
){
    UpdateHeroModText();
}

rule: "HeroMod/initSelectHeroMod"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned()
){
    if(
        !IsDummyBot()
    ){
        // player
        // select no mod as player
        heroModType = HeroModType.NO_MOD;
    }
    else{
        // dummy bot
        if(
            !IsSupportHero(HeroOf())
        ){
            // not support hero
            while(
                IsTrueForAny(HealerMods(), heroModType == ae) ||
                heroModType == 0
            ){
                // select mod by random
                heroModType = RandomInteger(HeroModType.INIT + 1, HeroModType.LAST - 1);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
        }
        else{
            // support hero
            if(
                ProbabilityTrue(50)
            ){
                // select mod by HealerMods
                heroModType = RandomValueInArray(HealerMods());
            }
            else{
                // select mod by random
                heroModType = RandomInteger(HeroModType.INIT + 1, HeroModType.LAST - 1);
            }
        }
    }

    DoHeroModAction(heroModType, HeroModTrigger.ACTIVATE, null);
    UpdateHeroModText();
}

define HealerMods():
    [
        HeroModType.MEDIC,
        HeroModType.GRUDGE_FIRE_BALL
    ];

rule: "HeroMod/switchSelectHeroMod"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    CanChangeHeroMod() &&
    (
        ( IsButtonHeld(ep, HM_AscKey) && !IsButtonHeld(ep, HM_DisKey) ) ||
        ( !IsButtonHeld(ep, HM_AscKey) && IsButtonHeld(ep, HM_DisKey) )
    )
){
    AbortIf(IsMoving());
    // do heromod deactivate action
    DoHeroModAction(heroModType, HeroModTrigger.DEACTIVATE, null);
    // switch mod
    heroModType = 
        ( IsButtonHeld(ep, HM_AscKey) && !IsButtonHeld(ep, HM_DisKey) ) ?
            heroModType < HeroModType.LAST - 1 ? heroModType + 1 : HeroModType.INIT + 1 :
            heroModType > HeroModType.INIT + 1 ? heroModType - 1 : HeroModType.LAST - 1 ;
    // do heromod activate action
    DoHeroModAction(heroModType, HeroModTrigger.ACTIVATE, null);
    // update text
    UpdateHeroModText();
    // play switch effect
    PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.White, ep, 1);
    PlayEffect(ep, PlayEffect.DebuffImpactSound, null, ep, 100);
}

// TAG HeroMod/Action ----------
void DoHeroModAction(define heromod!, define trigger!, define inputPayload!) playervar "DoHeroModAction"{
    // TAG HeroModTrigger Action
    switch(trigger){
        // TAG TEAMMATE_DEATH
        // give ult charge to player with RAGE
        case HeroModTrigger.TEAMMATE_DEATH:
        define playerArray! = FilteredArray(
            AllPlayers(playerTeam),
            (
                ae != ep &&
                ae.heroModType == HeroModType.RAGE
            )
        );
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            SetUltimateCharge(player, UltimateChargePercent(player) + 30);
        }
        break;
        default:
    }

    // TAG HeroModTypeAction
    switch(heromod){
        case HeroModType.NO_MOD:            HeroMod_Action_NO_MOD(trigger);                             break;
        case HeroModType.MEDIC:             HeroMod_Action_MEDIC(trigger);                              break;
        case HeroModType.HIT_MAN:           HeroMod_Action_HIT_MAN(trigger);                            break;
        case HeroModType.ASSASSIN:          HeroMod_Action_ASSASSIN(trigger);                           break;
        case HeroModType.SPRINTER:          HeroMod_Action_SPRINTER(trigger);                           break;
        case HeroModType.BIRD_MAN:          HeroMod_Action_BIRD_MAN(trigger);                           break;
        case HeroModType.LIGHT_ARMOR:       HeroMod_Action_LIGHT_ARMOR(trigger);                        break;
        case HeroModType.HEAVY_ARMOR:       HeroMod_Action_HEAVY_ARMOR(trigger);                        break;
        case HeroModType.FIXED_TURRET:      HeroMod_Action_FIXED_TURRET(trigger);                       break;
        case HeroModType.ADRENALINE_RUSH:   HeroMod_Action_ADRENALINE_RUSH(trigger);                    break;
        case HeroModType.POWER_CHARGING:    HeroMod_Action_POWER_CHARGING(trigger);                     break;
        case HeroModType.HEALING_SYRINGE:   HeroMod_Action_HEALING_SYRINGE(trigger);                    break;
        case HeroModType.SAVIOR:            HeroMod_Action_SAVIOR(trigger);                             break;
        case HeroModType.POWERFUL_GIFT:     HeroMod_Action_POWERFUL_GIFT(trigger);                      break;
        case HeroModType.TECHNICIAN:        HeroMod_Action_TECHNICIAN(trigger);                         break;
        case HeroModType.SURVIVALIST:       HeroMod_Action_SURVIVALIST(trigger);                        break;
        case HeroModType.ARTILLERY_SUPPORT: HeroMod_Action_ARTILLERY_SUPPORT(trigger);                  break;
        case HeroModType.RAGE:              HeroMod_Action_RAGE(trigger);                               break;
        case HeroModType.SHOT_CALL:         HeroMod_Action_SHOT_CALL(trigger);                          break;
        case HeroModType.FAST_CHARGE:       HeroMod_Action_FAST_CHARGE(trigger);                        break;
        case HeroModType.SUPER_ULT:         HeroMod_Action_SUPER_ULT(trigger);                          break;
        case HeroModType.GRUDGE_LIGHTNING:  HeroMod_Action_GRUDGE_LIGHTNING(trigger, inputPayload);     break;
        case HeroModType.GRUDGE_FIRE_BALL:  HeroMod_Action_GRUDGE_FIRE_BALL(trigger, inputPayload);     break;
        case HeroModType.ARTILLERY_REQUEST: HeroMod_Action_ARTILLERY_REQUEST(trigger);                  break;
        case HeroModType.STRAFING_REQUEST:  HeroMod_Action_STRAFING_REQUEST(trigger);                   break;
        case HeroModType.TITAN_FORM:        HeroMod_Action_TITAN_FORM(trigger);                         break;
        case HeroModType.BEAM_SNIPER:       HeroMod_Action_BEAM_SNIPER(trigger);                        break;
        case HeroModType.GUNSHIP_GUNNER:    HeroMod_Action_GUNSHIP_GUNNER(trigger);                     break;
        case HeroModType.ZOMBIE:            HeroMod_Action_ZOMBIE(trigger);                             break;
        default:
    }
}

// TAG HeroMod/Variable ----------
// TAG GRUDGE_FIRE_BALL & GRUDGE_LIGHTNING
playervar define grudgePower!;    
// TAG TITAN_FORM & BEAM_SNIPER
playervar define isTransformed!;
// TAG BEAM_SNIPER
playervar define beamAimPos!;
playervar define beamCharged!;

define CanTouchPlayerList():
    IsDummyBot(ep) ?
        AllPlayers(playerTeam) :
        PlayersInViewAngle(ep, playerTeam, 45);

define CanTouchAE():
    ae != ep &&
    DistanceBetween(ep, ae) <= (
        IsDummyBot(ep) ?
            6 :
            3
    );

// TAG HeroMod/Function ----------
// TAG NO_MOD
void HeroMod_Action_NO_MOD(define trigger!) playervar "HeroMod_Action_NO_MOD"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "NO MOD";
        heroModDetail = 
            "no modified" + NL +
            "no pros(+), no cons(-)";
    }
}
// TAG MEDIC
void HeroMod_Action_MEDIC(define trigger!) playervar "HeroMod_Action_MEDIC"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "MEDIC";
        heroModDetail = 
            "+ deal heal 150%" + NL +
            "- deal damage 50%";
        SetHealingDealt(ep, 150);
        SetDamageDealt(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingDealt(ep, DefaultPercentage());
        SetDamageDealt(ep, DefaultPercentage());
    }
}
// TAG HIT_MAN
void HeroMod_Action_HIT_MAN(define trigger!) playervar "HeroMod_Action_HIT_MAN"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "HIT MAN";
        heroModDetail = 
            "+ deal damage 150%" + NL +
            "- receive heal 50%";
        SetDamageDealt(ep, 150);
        SetHealingReceived(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetDamageDealt(ep, DefaultPercentage());
        SetHealingReceived(ep, DefaultPercentage());
    }

}
// TAG ASSASSIN
void HeroMod_Action_ASSASSIN(define trigger!) playervar "HeroMod_Action_ASSASSIN"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "ASSASSIN";
        heroModDetail = 
            "+ deal damage 125%" + NL +
            "+ move speed 125%" + NL +
            "- max Health 75%";
        SetDamageDealt(ep, 125);
        SetMoveSpeed(ep, 125);
        SetMaxHealth(ep, 75);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetDamageDealt(ep, DefaultPercentage());
        SetMoveSpeed(ep, DefaultPercentage());
        SetMaxHealth(ep, DefaultPercentage());
    }
}
// TAG SPRINTER
void HeroMod_Action_SPRINTER(define trigger!) playervar "HeroMod_Action_SPRINTER"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "SPRINTER";
        heroModDetail = 
            "+ move speed 150%" + NL +
            "- max health 75%";
        SetMoveSpeed(ep, 150);
        SetMaxHealth(ep, 75);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetMoveSpeed(ep, DefaultPercentage());
        SetMaxHealth(ep, DefaultPercentage());
    }

}
// TAG BIRD_MAN
void HeroMod_Action_BIRD_MAN(define trigger!) playervar "HeroMod_Action_BIRD_MAN"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "BIRD MAN";
        heroModDetail = 
            "+ gravity 5%" + NL +
            "  * long press melee key in air to dive" + NL +
            "- max health 50%";
        SetGravity(ep, 5);
        SetMaxHealth(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetGravity(ep, DefaultPercentage());
        SetMaxHealth(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        ApplyImpulse(ep, 
            Down(),
            20, Relative.ToWorld, ContraryMotion.Cancel);
    }
}
// TAG LIGHT_ARMOR
void HeroMod_Action_LIGHT_ARMOR(define trigger!) playervar "HeroMod_Action_LIGHT_ARMOR"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "LIGHT ARMOR";
        heroModDetail = 
            "+ max health 150%" + NL +
            "- move speed 75%" + NL +
            "- receive heal 50%";
        SetMaxHealth(ep, 150);
        SetMoveSpeed(ep, 75);
        SetHealingReceived(ep, 50);
        Heal(ep, null, MaxValue());
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetMaxHealth(ep, DefaultPercentage());
        SetMoveSpeed(ep, DefaultPercentage());
        SetHealingReceived(ep, DefaultPercentage());
    }
}
// TAG HEAVY_ARMOR
void HeroMod_Action_HEAVY_ARMOR(define trigger!) playervar "HeroMod_Action_HEAVY_ARMOR"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "HEAVY ARMOR";
        heroModDetail = 
            "+ max health 300%" + NL +
            "- move speed 50%" + NL +
            "- receive heal 25%";
        SetMaxHealth(ep, 300);
        SetMoveSpeed(ep, 50);
        SetHealingReceived(ep, 25);
        Heal(ep, null, MaxValue());
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetMaxHealth(ep, DefaultPercentage());
        SetMoveSpeed(ep, DefaultPercentage());
        SetHealingReceived(ep, DefaultPercentage());
    }
}
// TAG FIXED_TURRET
void HeroMod_Action_FIXED_TURRET(define trigger!) playervar "HeroMod_Action_FIXED_TURRET"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "FIXED TURRET";
        heroModDetail = 
            "in standing..." + NL +
            "  + deal damage 150%" + NL +
            "  + deal heal 150%" + NL +
            "  + max health 200%" + NL +
            "in moving..." + NL +
            "  - deal damage 50%" + NL +
            "  - deal heal 50%";
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetDamageDealt(ep, DefaultPercentage());
        SetHealingDealt(ep, DefaultPercentage());
        SetMaxHealth(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.STOP
    ){
        Wait(0.2, WaitBehavior.AbortWhenFalse);
        SetDamageDealt(ep, 150);
        SetHealingDealt(ep, 150);
        SetMaxHealth(ep, 200);
        if(IsDummyBot()){
            SetStatus(ep, null, Status.Rooted, RandomInteger(1, 10));
        }
    }
    else if(
        trigger == HeroModTrigger.MOVING
    ){
        Wait(0.2, WaitBehavior.AbortWhenFalse);
        SetDamageDealt(ep, 50);
        SetHealingDealt(ep, 50);
        SetMaxHealth(ep, DefaultPercentage());
    }
}
// TAG ADRENALINE_RUSH
void HeroMod_Action_ADRENALINE_RUSH(define trigger!) playervar "HeroMod_Action_ADRENALINE_RUSH"{
    if(
        trigger == HeroModTrigger.ACTIVATE ||
        trigger == HeroModTrigger.TIME_PASSED
    ){
        define addValue! = IsAlive() ? ((1 - NormalizedHealth()) * 100) : 0;
        heroModName = "ADRENALINE RUSH";
        heroModDetail = 
            "more lost health..." + NL +
            "  + more deal damage (now "+ RoundToInteger((DefaultPercentage() + addValue), Rounding.Nearest) +"% / 200%)" + NL +
            "  + more move speed (now "+ RoundToInteger((DefaultPercentage() + addValue), Rounding.Nearest) +"% / 200%)" + NL +
            "- receive heal 50%";

        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            SetDamageDealt(ep, (DefaultPercentage() + addValue));
            SetMoveSpeed(ep, (DefaultPercentage() + addValue));             
            Wait(1, WaitBehavior.AbortWhenFalse);
        }
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingReceived(ep, DefaultPercentage());
        SetMaxHealth(ep, DefaultPercentage());
        SetMoveSpeed(ep, DefaultPercentage());
    }
}
// TAG POWER_CHARGING
void HeroMod_Action_POWER_CHARGING(define trigger!) playervar "HeroMod_Action_POWER_CHARGING"{
    if(
        trigger == HeroModTrigger.ACTIVATE ||
        trigger == HeroModTrigger.TIME_PASSED
    ){
        define addValue! = (UltimateChargePercent());
        heroModName = "POWER CHARGING";
        heroModDetail = 
            "more ult charges..." + NL +
            "  + more deal damage (now "+ RoundToInteger((DefaultPercentage() + (addValue * 0.5)), Rounding.Nearest) +"% / 150%)" + NL +
            "  + more deal heal (now "+ RoundToInteger((DefaultPercentage() + (addValue * 0.5)), Rounding.Nearest) +"% / 150%)" + NL +
            "  + more move speed (now "+ RoundToInteger((DefaultPercentage() + (addValue * 0.5)), Rounding.Nearest) +"% / 150%)" + NL +
            "- at dead, lose all ult charge";

        if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            SetDamageDealt(ep, (DefaultPercentage() + (addValue * 0.5)));
            SetHealingDealt(ep, (DefaultPercentage() + (addValue * 0.5)));
            SetMoveSpeed(ep, (DefaultPercentage() + (addValue * 0.5)));
            Wait(1, WaitBehavior.AbortWhenFalse);
        }
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetDamageDealt(ep, DefaultPercentage());
        SetHealingDealt(ep, DefaultPercentage());
        SetMoveSpeed(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.DEATH
    ){
        SetUltimateCharge(ep, 0);
    }
}
// TAG HEALING_SYRINGE
void HeroMod_Action_HEALING_SYRINGE(define trigger!) playervar "HeroMod_Action_HEALING_SYRINGE"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "HEALING SYRINGE";
        heroModDetail = 
            "long press melee key..." + NL +
            "  + without near teammate to heal myself 200 health" + NL +
            "  + with near teammate to heal teammate 500 health" + NL +
            "  - consume 20% ult charge";
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        define consumeUltCharge! = 20;
        if(
            IsAlive() &&
            UltimateChargePercent() >= consumeUltCharge
        ){
            define target! = 
                FirstOf(
                    SortedArray(
                        FilteredArray(
                            CanTouchPlayerList(),
                            (
                                CanTouchAE() &&
                                IsAlive(ae) &&
                                IsDummyBot(ep) ?
                                    NormalizedHealth(ae) < 0.5 :
                                    NormalizedHealth(ae) < 1.0
                            )
                        ),
                        DistanceBetween(ep, ae)
                    )
                );

            if(
                target != null
            ){
                Heal(target, ep, 500);
                SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);

                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Yellow, target, 1.5);
                PlayEffect([ep, target], PlayEffect.BuffExplosionSound, null, target, 100);
                
                SmallMessage(ep, "Healed "+ target + HeroIconString(HeroOf(target)));
                SmallMessage(target, "Healed by "+ ep + HeroIconString(HeroOf(ep)));
            }
            else if(NormalizedHealth(ep) < 1.0){
                Heal(ep, ep, 200);
                SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);

                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Yellow, ep, 1.5);
                PlayEffect(ep, PlayEffect.BuffExplosionSound, null, ep, 100);
            }
        }
    }
}
// TAG SAVIOR
void HeroMod_Action_SAVIOR(define trigger!) playervar "HeroMod_Action_SAVIOR"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "SAVIOR";
        heroModDetail = 
            "long press melee key to near dead teammate..." + NL +
            "  + revive teammate" + NL +
            "  - consume 50% ult charge";
    }
    else if(
        trigger == HeroModTrigger.TIME_PASSED
    ){
        define targets! = AllDeadPlayers(playerTeam);
        for(define index! = 0; index < CountOf(targets); index++){
            // play white effect
            PlayEffect(
                ep, PlayEffect.GoodPickupEffect,
                Color.White, targets[index], 1);
        }
        Wait(2, WaitBehavior.AbortWhenFalse);
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        define consumeUltCharge! = 50;
        if(
            IsAlive() &&
            UltimateChargePercent() >= consumeUltCharge
        ){
            define target! = 
                FirstOf(
                    SortedArray(
                        FilteredArray(
                            CanTouchPlayerList(),
                            (
                                CanTouchAE() &&
                                IsDead(ae)
                            )
                        ),
                        DistanceBetween(ep, ae)
                    )
                );
            
            if(
                target != null
            ){
                Resurrect(target);
                SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);

                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Yellow, target, 1.5);
                PlayEffect([ep, target], PlayEffect.BuffExplosionSound, null, target, 100);

                SmallMessage(ep, "Revived "+ target + HeroIconString(HeroOf(target)));
                SmallMessage(target, "Revived by "+ ep + HeroIconString(HeroOf(ep)));
            }
        }
    }
}
// TAG POWERFUL_GIFT
void HeroMod_Action_POWERFUL_GIFT(define trigger!) playervar "HeroMod_Action_POWERFUL_GIFT"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "POWERFUL GIFT";
        heroModDetail = 
            "long press melee key to near teammate..." + NL +
            "  - give my ult charge to teammate" + NL +
            "  + gived ult charge increase to 150%" + NL +
            "    * overflowed ult charge return to myself ";
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        if(
            IsAlive() &&
            UltimateChargePercent() > 0
        ){
            define target! = 
                FirstOf(
                    SortedArray(
                        FilteredArray(
                            CanTouchPlayerList(),
                            (
                                CanTouchAE() &&
                                UltimateChargePercent(ae) < DefaultPercentage()
                            )
                        ),
                        DistanceBetween(ep, ae)
                    )
                );
            
            if(
                target != null
            ){
                define charge! = UltimateChargePercent() * 1.5;
                define fillableCharge! = DefaultPercentage() - UltimateChargePercent(target);
                define remainCharge! = charge - fillableCharge;
                SetUltimateCharge(target, UltimateChargePercent(target) + charge);
                SetUltimateCharge(ep, remainCharge);

                PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.SkyBlue, target, 1.5);
                PlayEffect([ep, target], PlayEffect.BuffExplosionSound, null, target, 100);

                SmallMessage(ep, "Ult charge gived "+ target + HeroIconString(HeroOf(target)));
                SmallMessage(target, "Ult charge gived by "+ ep + HeroIconString(HeroOf(ep)));
            }
        }
    }
}
// TAG TECHNICIAN
void HeroMod_Action_TECHNICIAN(define trigger!) playervar "HeroMod_Action_TECHNICIAN"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "TECHNICIAN";
        heroModDetail = 
            "kill enemy to..." + NL +
            "  + get 150% move speed status until 3 seconds" + NL +
            "  + reset cooldown ability2(default E) key" + NL +
            "  + reset cooldown secondary fire ability" + NL +
            "    * has 5 seconds cooldown to re-trigger" + NL + 
            "- receive heal 50%";
        SetHealingReceived(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingReceived(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.KILL
    ){
        // set fast status
        SetMoveSpeed(ep, 150);
        Wait(0.1, WaitBehavior.IgnoreCondition);

        // wait ability finish
        if(
            IsUsingAbility2()
        ){
            WaitUntil(!IsUsingAbility2(), 10);
        }

        define buttonList! = [
            Button.Ability2,
            Button.SecondaryFire
        ];

        // add ability stock
        for(define index! = 0; index < CountOf(buttonList); index++){
            AddAbilityStock(buttonList[index], 1);
        }

        Wait(3, WaitBehavior.IgnoreCondition);

        // reset fast status
        SetMoveSpeed(ep, DefaultPercentage());

        Wait(2, WaitBehavior.IgnoreCondition);
    }
}
// TAG SURVIVALIST
void HeroMod_Action_SURVIVALIST(define trigger!) playervar "HeroMod_Action_SURVIVALIST"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "SURVIVALIST";
        heroModDetail = 
            "lost 50% health..." + NL + 
            "  + get unkillable status until 3 seconds" + NL +
            "  + auto use ability1(default Shift) key and reset cooldown" + NL +
            "  + auto use jump ability and reset cooldown" + NL +
            "    * has 5 seconds cooldown to re-trigger" + NL + 
            "- receive heal 50%";
        SetHealingReceived(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingReceived(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.LOST_HEALTH
    ){
        // set unkillable status
        SetStatus(ep, ep, Status.Unkillable, 3);

        define buttonList! = [
            Button.Ability1,
            Button.Jump
        ];

        // add ability stock before auto use
        for(define index! = 0; index < CountOf(buttonList); index++){
            AddAbilityStock(buttonList[index], 1);
        }

        // use jump abiliry
        PressButton(ep, Button.Jump);
        Wait(0.1, WaitBehavior.IgnoreCondition);
        PressButton(ep, Button.Jump);   
        Wait(0.1, WaitBehavior.IgnoreCondition);

        // use Ability1 abiliry
        if(!IsUsingAbility1()){
            PressButton(ep, Button.Ability1);
        }
        Wait(0.1, WaitBehavior.IgnoreCondition);
        
        // wait ability finish
        if(
            IsUsingAbility1()
        ){
            WaitUntil(!IsUsingAbility1(), 10);
        }

        // add ability stock after auto use
        for(define index! = 0; index < CountOf(buttonList); index++){
            AddAbilityStock(buttonList[index], 1);
        }

        Wait(5, WaitBehavior.IgnoreCondition);
    }

}
// TAG ARTILLERY_SUPPORT
void HeroMod_Action_ARTILLERY_SUPPORT(define trigger!) playervar "HeroMod_Action_ARTILLERY_SUPPORT"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "ARTILLERY SUPPORT";
        heroModDetail = 
            "lost 50% health..." + NL + 
            "  + incoming artillery and attack enemy nearby myself for protect" + NL + 
            "    * has 10 seconds cooldown to re-trigger" + NL + 
            "- receive heal 50%";
        SetHealingReceived(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingReceived(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.LOST_HEALTH
    ){
        HeroMod_Action_ARTILLERY_FIRE(ARTILLERY_FIRE_TARGHET_MODE.NEAR_PLAYER, 30);
        Wait(10, WaitBehavior.IgnoreCondition);
    }
}
// TAG RAGE
void HeroMod_Action_RAGE(define trigger!) playervar "HeroMod_Action_RAGE"{
    // RAGE has HeroModTrigger Action TEAMMATE_DEATH
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "RAGE";
        heroModDetail = 
            "+ at teammate dead, gain 30% ult charge" + NL +
            "- at myself dead, lose all ult charge";
    }
    else if(
        trigger == HeroModTrigger.DEATH
    ){
        SetUltimateCharge(ep, 0);
    }
}
// TAG SHOT_CALL
void HeroMod_Action_SHOT_CALL(define trigger!) playervar "HeroMod_Action_SHOT_CALL"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "SHOT CALL";
        heroModDetail = 
            "+ use ult to all teammates gain ult full charge" + NL +
            "  * each bot teammate use ult with you for combo attack" + NL +
            "  * other SHOT CALL player is can't gain full charge" + NL +
            "- every 5 seconds passed to lose 1% ult charge";
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(5, WaitBehavior.AbortWhenFalse);
        if(UltimateChargePercent() < DefaultPercentage()){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
    ){
        define playerArray! = FilteredArray(
            AllPlayers(playerTeam),
            (
                ae != ep &&
                ae.heroModType != HeroModType.SHOT_CALL &&
                UltimateChargePercent(ae) < DefaultPercentage()
            )
        );

        // set ult full charge to players of teammate
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            SetUltimateCharge(player, 100);
            SmallMessage(player, "gained ult full charge by "+ ep + HeroIconString(HeroOf()));
            PlayEffect(player, PlayEffect.BuffExplosionSound, null, player, 100);
        }

        // sync use ult by buddy
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            if(
                IsDummyBot(player) &&
                ProbabilityTrue(70)
            ){
                // bot use ult bt syc attack
                PressButton(player, Button.Ultimate);
                Wait(0.1, WaitBehavior.AbortWhenFalse);
                if(!IsUsingUltimate(player)){
                    PressButton(player, Button.PrimaryFire);
                }
                // PressButton(player, Button.PrimaryFire);
                Wait(RandomReal(0.1, 0.3), WaitBehavior.AbortWhenFalse);
            }
        }
    }
}
// TAG FAST_CHARGE
void HeroMod_Action_FAST_CHARGE(define trigger!) playervar "HeroMod_Action_FAST_CHARGE"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "FAST CHARGE";
        heroModDetail = 
            "+ every 1 second passed to gain 3% ult charge" + NL +
            "- max health 50%";
        SetMaxHealth(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetMaxHealth(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(1, WaitBehavior.AbortWhenFalse);
        if(
            IsGameInProgress() &&
            UltimateChargePercent() < DefaultPercentage()
        ){
            SetUltimateCharge(ep, UltimateChargePercent() + 3);
        }
    }
}
// TAG SUPER_ULT
void HeroMod_Action_SUPER_ULT(define trigger!) playervar "HeroMod_Action_SUPER_ULT"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "SUPER ULT";
        heroModDetail = 
            "in ult using..." + NL +
            "  + get invincible status" + NL +
            "  + deal damage 300%" + NL +
            "  + deal heal 300%" + NL +
            "  + move speed 200%" + NL +
            "  + gravity 25%" + NL +
            "+ at ult end, gain more ult full charge by 50% probility" + NL +
            "- every 5 seconds passed to lose 1% ult charge";
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE ||
        trigger == HeroModTrigger.NOT_USING_ULT
    ){
        ClearStatus(ep, Status.PhasedOut);
        SetDamageDealt(ep, DefaultPercentage());
        SetHealingDealt(ep, DefaultPercentage());
        SetMoveSpeed(ep, DefaultPercentage());
        SetGravity(ep, DefaultPercentage());

        if(
            trigger == HeroModTrigger.NOT_USING_ULT &&
            // is ult using started by SUPER_ULT
            isUltUsed
        ){
            // reset ult using started by SUPER_ULT 
            isUltUsed = false;
            if(
                ProbabilityTrue(50)
            ){
                SetUltimateCharge(ep, 100);
                PlayEffect(ep, PlayEffect.BuffExplosionSound, null, ep, 100);
                SmallMessage(ep, "gained more ult full charge!");
            }
        }
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(5, WaitBehavior.AbortWhenFalse);
        if(UltimateChargePercent() < DefaultPercentage()){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
    ){
        // set ult using started by SUPER_ULT (for exclude change mod with ult using)
        isUltUsed = true;
        
        SetStatus(ep, null, Status.PhasedOut, MaxValue());
        SetDamageDealt(ep, 300);
        SetHealingDealt(ep, 300);
        SetMoveSpeed(ep, 200);
        SetGravity(ep, 25);
    }
}
// TAG GRUDGE_LIGHTNING
void HeroMod_Action_GRUDGE_LIGHTNING(define trigger!, define inputPayload!) playervar "HeroMod_Action_GRUDGE_LIGHTNING"{
    if(
        trigger == HeroModTrigger.ACTIVATE ||
        trigger == HeroModTrigger.TIME_PASSED
    ){
        define currentValue! = RoundToInteger(grudgePower, Rounding.Nearest);
        heroModName = "GRUDGE LIGHTNING";
        heroModDetail = 
            "+ receive damage to charge grudge power (now "+ currentValue +"% / 100%)" + NL +
            "+ hold melee key to shot grudge power as penetrate lightning and stun" + NL +
            "- receive heal 50%";

        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            SetHealingReceived(ep, 50);
            grudgePower = 0;
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            Wait(1, WaitBehavior.AbortWhenFalse);
        }
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingReceived(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.RECEIVE_DAMAGE
    ){
        if(DefaultPercentage() <= grudgePower){return;}
        define gainPower! = inputPayload * 0.1;
        if(grudgePower + gainPower > DefaultPercentage()){
            grudgePower = DefaultPercentage();
        }
        else{
            grudgePower = grudgePower + gainPower;
        }
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        if(
            IsAlive() &&
            grudgePower > 0
        ){
            if(IsDummyBot()){
                StartHoldingButton(ep, Button.Melee);
            }

            define landPos;
            define ballisticEffect! = CreateBeamEffect(AllPlayers(), BeamType.BadBeam,
                EyePosition() + Vector(0, -0.1, 0), landPos,
                Color.SkyBlue, EffectRev.VisibleToPositionAndRadius);

            define aimPos;
            define scatter;
            define targets;
            define count = 0;
            while(
                IsAlive() &&
                IsButtonHeld(ep, Button.Melee) &&
                grudgePower > 0
            ){
                if(count == 0){
                    grudgePower -= 3;
                    grudgePower = grudgePower < 0 ? 0 : grudgePower;

                    define currentValue! = RoundToInteger(grudgePower, Rounding.Nearest);
                    heroModDetail = 
                        "+ receive damage to charging grudge power (now "+ currentValue +"% / 100%)" + NL +
                        "+ hold melee key to shot grudge power as stunning lightning" + NL +
                        "- receive heal 50%";

                    define dist! = DistanceBetween(EyePosition(), landPos);
                    aimPos = AimingPosition(40, null);
                    scatter = dist * 0.04;

                    // get inside sight players
                    targets = PlayersInViewAngle(ep, EnemyTeamOf(ep), 4);
                    // add ryacast hit player
                    targets[Last(targets)] = AimingPlayer(40, EnemyTeamOf(ep));
                    SetStatus(targets, ep, Status.Stunned, 0.5);
                    Damage(targets, ep, 40);
                    PlayEffect(AllPlayers(), PlayEffect.DebuffImpactSound, Color.White, ep, 50);
                }

                landPos = aimPos + RandomPosition(scatter, scatter, scatter);

                count = count < 10 ? count + 1 : 0;
                Wait(0.01, WaitBehavior.IgnoreCondition);
            }
            DestroyEffect(ballisticEffect);
        }
    }
}
// TAG GRUDGE_FIRE_BALL
void HeroMod_Action_GRUDGE_FIRE_BALL(define trigger!, define inputPayload!) playervar "HeroMod_Action_GRUDGE_FIRE_BALL"{
    if(
        trigger == HeroModTrigger.ACTIVATE ||
        trigger == HeroModTrigger.TIME_PASSED
    ){
        define currentValue! = RoundToInteger(grudgePower, Rounding.Nearest);
        heroModName = "GRUDGE FIRE BALL";
        heroModDetail = 
            "+ heal teammate to charge grudge power (now "+ currentValue +"% / 100%)" + NL +
            "+ long press melee key to shot grudge power as fire ball and blast" + NL +
            "- receive heal 50%";

        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            SetHealingReceived(ep, 50);
            grudgePower = 0;
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            Wait(1, WaitBehavior.AbortWhenFalse);
        }
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetHealingReceived(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.DEAL_HEAL
    ){
        if(DefaultPercentage() <= grudgePower){return;}
        define gainPower! = inputPayload * 0.2;
        if(grudgePower + gainPower > DefaultPercentage()){
            grudgePower = DefaultPercentage();
        }
        else{
            grudgePower = grudgePower + gainPower;
        }
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        HeroMod_Action_FIRE_BALL_FIRE();
    }
}
// TAG ARTILLERY_REQUEST
void HeroMod_Action_ARTILLERY_REQUEST(define trigger!) playervar "HeroMod_Action_ARTILLERY_REQUEST"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "ARTILLERY REQUEST";
        heroModDetail = 
            "+ use ult to request artillery and attack enemy nearby aimming position" + NL +
            "- every 6 seconds passed to lose 1% ult charge";
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(6, WaitBehavior.AbortWhenFalse);
        if(UltimateChargePercent() < DefaultPercentage()){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
    ){
        HeroMod_Action_ARTILLERY_FIRE(ARTILLERY_FIRE_TARGHET_MODE.NEAR_AIM_POS, 40);
    }
}
// TAG STRAFING_REQUEST
void HeroMod_Action_STRAFING_REQUEST(define trigger!) playervar "HeroMod_Action_STRAFING_REQUEST"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "STRAFING REQUEST";
        heroModDetail = 
            "+ use ult to request strafing fire and attack aimming position with straight shape" + NL +
            "- every 6 seconds passed to lose 1% ult charge";
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(6, WaitBehavior.AbortWhenFalse);
        if(UltimateChargePercent() < DefaultPercentage()){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
    ){
        Wait(1.0, WaitBehavior.IgnoreCondition);

        // config value
        define strafReqAttackDistance! = 60;
        define strafReqAttackTime! = 2.0;
        define strafReqAttackInterval = 0.05;
        define strafReqScatterRange! = 8;
        define strafReqDamageRange! = 8;
        define strafReqDamage! = 180;

        // set attack angle base point from aimming position
        define attackPosition! = BelowPosition(AimingPosition(40, null));

        /// set entering angle
        define enteringAngle! = VectorWithOutY(FacingDirectionOf());
        // set start/end position
        define startPosition! = attackPosition + (-enteringAngle * strafReqAttackDistance / 2);
        define endPosition! =   attackPosition + ( enteringAngle * strafReqAttackDistance / 2);
        // move landAreaPosition
        define landAreaPosition = startPosition;
        ChaseVariableOverTime(
            landAreaPosition, endPosition,
            strafReqAttackTime,
            TimeChaseReevaluation.DestinationAndDuration);
        // create ballistic
        define landPosition;
        define ballisticEffect! = CreateBeamEffect(AllPlayers(), BeamType.BadBeam,
            endPosition - (enteringAngle * 200) + (Up() * 200), landPosition,
            Color.White, EffectRev.VisibleToPositionAndRadius);
        // blast animation
        for(define count = strafReqAttackTime / strafReqAttackInterval; count > 0; count --){
            // set landed point
            landPosition =
                landAreaPosition + 
                RandomPosition(
                    strafReqScatterRange,
                    0,
                    strafReqScatterRange
                );
            // play blast sound
            PlayEffect(
                AllPlayers(), PlayEffect.RingExplosionSound,
                Color.White,
                landPosition,
                MaxLength());
            // play blast
            PlayEffect(
                AllPlayers(), PlayEffect.BadExplosion,
                Color.White,
                landPosition,
                strafReqDamageRange);
            // damage
            Damage(
                PlayersWithinRadius(
                    landPosition, strafReqDamageRange,
                    EnemyTeamOf(ep), RadiusLOS.Off
                ),
                ep, strafReqDamage
            );
            Wait(strafReqAttackInterval, WaitBehavior.IgnoreCondition);
        }
        StopChasingVariable(landAreaPosition);
        DestroyEffect(ballisticEffect);
    }
}
// TAG TITAN_FORM
void HeroMod_Action_TITAN_FORM(define trigger!) playervar "HeroMod_Action_TITAN_FORM"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "TITAN FORM";
        heroModDetail = 
            "+ use ult to transform to titan and rampage until 20 second" + NL +
            "  * titan has super toughness, fast ability charge, wide range hammer attack" + NL +
            "- every 5 seconds passed to lose 1% ult charge";
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(5, WaitBehavior.AbortWhenFalse);
        if(
            !isTransformed &&
            UltimateChargePercent() < DefaultPercentage()
        ){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
    ){
        if(!isTransformed){
            isTransformed = true;

            CancelPrimaryAction();
            define prevHero! = HeroOf();
            ForcePlayerHero(ep, Hero.Reinhardt);
            SetHeroButtonControlPropety();
            SetMaxHealth(ep, 500);
            SetDamageDealt(ep, 250);
            Wait(0.1, WaitBehavior.IgnoreCondition);
            Heal(ep, null, MaxValue());
            define tianScale! = 2.5;
            for(define scale! = 1; scale < tianScale; scale += 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            StartModifyingHeroVoiceLines(ep, 0.1, false);

            for(define remainSecond! = 20; remainSecond > 0; remainSecond--){
                if(IsDead()){
                    break;
                }
                if(UltimateChargePercent() < DefaultPercentage()){
                    SetUltimateCharge(ep, UltimateChargePercent() + 25);
                }
                SetAbilityCooldown(ep, Button.Ability1, 0);
                SetAbilityCooldown(ep, Button.Ability2, 0);
                Wait(1, WaitBehavior.IgnoreCondition);
            }

            StopModifyingHeroVoiceLines(ep);
            for(define scale! = tianScale; scale > 1.0; scale -= 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            SetUltimateCharge(ep, 0);
            SetMaxHealth(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
            ForcePlayerHero(ep, prevHero);
            StopForcingHero(ep);
            SetHeroButtonControlPropety();
            // wait using ult fin for not retrigger (if hero not changed by some hero)
            WaitUntil(!IsUsingUltimate(), MaxValue());

            isTransformed = false;
        }
    }
}
// TAG BEAM_SNIPER
void HeroMod_Action_BEAM_SNIPER(define trigger!) playervar "HeroMod_Action_BEAM_SNIPER"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "BEAM SNIPER";
        heroModDetail = 
            "+ use ult to transform to beam sniper and rampage until 40 second" + NL +
            "  * beam sniper has powerful beam rifle with landed blast and penetrate wall" + NL +
            "- every 5 seconds passed to lose 1% ult charge";
        beamCharged = false;  // not charging
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(5, WaitBehavior.AbortWhenFalse);
        if(
            !isTransformed &&
            UltimateChargePercent() < DefaultPercentage()
        ){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
    ){
        if(!isTransformed){
            isTransformed = true;

            CancelPrimaryAction();
            define prevHero! = HeroOf();
            ForcePlayerHero(ep, Hero.Widowmaker);
            SetHeroButtonControlPropety();
            SetDamageDealt(ep, 300);

            for(define remainSecond! = 40; remainSecond > 0; remainSecond--){
                if(IsDead()){
                    break;
                }
                if(UltimateChargePercent() < DefaultPercentage()){
                    SetUltimateCharge(ep, UltimateChargePercent() + 20);
                }
                SetAbilityCooldown(ep, Button.Ability1, 0);
                SetAbilityCooldown(ep, Button.Ability2, 0);
                Wait(1, WaitBehavior.IgnoreCondition);
            }

            SetUltimateCharge(ep, 0);
            SetDamageDealt(ep, DefaultPercentage());
            ForcePlayerHero(ep, prevHero);
            StopForcingHero(ep);
            SetHeroButtonControlPropety();
            // wait using ult fin for not retrigger (if hero not changed by some hero)
            WaitUntil(!IsUsingUltimate(), MaxValue());

            isTransformed = false;
        }
    }
    else if(
        trigger == HeroModTrigger.USING_SECONDARY
    ){
        if(isTransformed){
            while(IsFiringSecondary()){
                // avoid infinite loop
                Wait(0.1, WaitBehavior.AbortWhenFalse);
                // waiting charge fin
                WaitUntil(IsFiringPrimary(), 1.2);
                // primary fire interrupted before charging fin
                if(IsFiringPrimary()){
                    // restart waiting
                    continue;
                }
                // scorping ended
                else if(!IsFiringSecondary()){
                    // clear waiting
                    Abort();
                }
                else if(IsFiringSecondary()){
                    // charge fin
                    beamCharged = true;
                    // update aim pos
                    while(beamCharged){
                        // pre set aim pos
                        beamAimPos = AimingPosition(MaxLength(), EnemyTeamOf(ep));
                        Wait(0.1, WaitBehavior.AbortWhenFalse);
                    }
                }
            }
        }
    }
    else if(
        trigger == HeroModTrigger.NOT_USING_SECONDARY
    ){
        if(isTransformed){
            beamCharged = false;
        }
    }

    else if(
        trigger == HeroModTrigger.USING_PRIMARY
    ){
        if(isTransformed){
            define beamSniperDamage! = 100;
            define beamSniperDamageRange! = 3;

            // charging fin
            if(beamCharged){
                // reset charge
                beamCharged = false;
                // deal damage to target on ballstic
                define targets! = FilteredArray(
                    PlayersInViewAngle(ep, EnemyTeamOf(ep), 2.5),
                    IsAlive(ae)
                );
                Damage(targets, ep, beamSniperDamage);

                // deal half damage to target in landed blast range
                targets = FilteredArray(
                    PlayersWithinRadius(beamAimPos, beamSniperDamageRange, EnemyTeamOf(ep), RadiusLOS.Off),
                    IsAlive(ae)
                );
                Damage(targets, ep, beamSniperDamage / 2);

                // set offset for gun sight
                define gunSightPos! = EyePosition() - Vector(0, 0.5, 0); 
                // set landing position for penetration
                define landPos! = EyePosition() +
                    (FacingDirectionOf() * MaxLength());

                // play shot sound
                PlayEffect(
                    AllPlayers(), PlayEffect.RingExplosionSound,
                    Color.Purple, ep, MaxLength());
                // play shot fire
                PlayEffect(
                    AllPlayers(), PlayEffect.BadExplosion,
                    Color.Purple, gunSightPos + (FacingDirectionOf() * 1), 1.0);
                // play big blast with sound
                PlayContinuousBlast(
                    Color.Purple,
                    beamAimPos,
                    beamSniperDamageRange,
                    3,
                    2
                );

                // show ballistics for aiming
                define beamEffect! = [];
                beamEffect[0] = CreateBeamEffect(AllPlayers(),
                    BeamType.BadBeam, gunSightPos, beamAimPos,
                    Color.Purple, EffectRev.VisibleToPositionAndRadius);
                // show ballistic for penetration
                beamEffect[1] =  CreateBeamEffect(AllPlayers(),
                    BeamType.BadBeam, beamAimPos, landPos,
                    Color.Purple, EffectRev.VisibleToPositionAndRadius);

                WaitPlayEffect();

                // hide ballistics
                DestroyEffect(beamEffect[0]);
                DestroyEffect(beamEffect[1]); 
            }
            else{
                // reset charge
                beamCharged = false;
            }
        }
    }
}
// TAG GUNSHIP_GUNNER
void HeroMod_Action_GUNSHIP_GUNNER(define trigger!) playervar "HeroMod_Action_GUNSHIP_GUNNER"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "GUNSHIP GUNNER";
        heroModDetail = 
            "+ use ult to transform to gunship and rampage until 30 second" + NL +
            "  * gunship has powerful auto cannon with splash blast and barrage" + NL +
            "  * long press melee key to shot ult charge as nuke cannon" + NL +
            "- every 3 seconds passed to lose 1% ult charge";
    }
    else if(
        trigger == HeroModTrigger.CHARGING_ULT
    ){
        Wait(3, WaitBehavior.AbortWhenFalse);
        if(
            !isTransformed &&
            UltimateChargePercent() < DefaultPercentage()
        ){
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        trigger == HeroModTrigger.USING_ULT
        
    ){
        if(!isTransformed){
            isTransformed = true;

            CancelPrimaryAction();
            define prevHero! = HeroOf();
            ForcePlayerHero(ep, Hero.Bastion);
            SetHeroButtonControlPropety();
            SetMaxHealth(ep, 300);
            SetGravity(ep, 1);
            PressButton(ep, Button.Jump);
            // SetStatus(ep, null, Status.Rooted, MaxValue());
            Wait(0.1, WaitBehavior.IgnoreCondition);
            Heal(ep, null, MaxValue());
            define tianScale! = 2.5;
            for(define scale! = 1; scale < tianScale; scale += 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            StartModifyingHeroVoiceLines(ep, 0.1, false);

            for(define remainSecond! = 30; remainSecond > 0; remainSecond--){
                if(IsDead()){
                    break;
                }
                if(UltimateChargePercent() < DefaultPercentage()){
                    SetUltimateCharge(ep, UltimateChargePercent() + 5);
                }
                if(AbilityCooldown(ep, Button.SecondaryFire) > 5){
                    SetAbilityCooldown(ep, Button.SecondaryFire, 5);
                }

                if(
                    !IsInAlternateForm() &&
                    !IsFiringSecondary()
                ){
                    SetAbilityCooldown(ep, Button.Ability1, 0);
                    PressButton(ep, Button.Ability1);
                    Wait(0.5, WaitBehavior.IgnoreCondition);
                }
                
                define dist! = DistanceBetween(ep, BelowPosition(ep));
                define faceDir! = FacingDirectionOf();
                define hightLimit! = 16;
                
                if(
                    // aim downward
                    YOf(faceDir) < 0 &&
                    // is front blocked
                    IsBlockedBetween(
                        EyePosition(),
                        ShiftedPosition(EyePosition(), VectorWithOutY(faceDir), 4)
                    )
                ){
                    // down with force
                    ApplyImpulse(ep, 
                        Down(),
                        2.0,
                        Relative.ToWorld,
                        ContraryMotion.Incorporate);
                }
                else{
                    define spd! = (hightLimit - dist) * 0.3;
                    // fly
                    ApplyImpulse(ep, 
                        dist < hightLimit ?
                            Up() :
                            NoDirection(),
                        dist < hightLimit ?
                            spd:
                            0,
                        Relative.ToWorld,
                        ContraryMotion.Incorporate);
                        
                    ApplyImpulse(ep, 
                        YOf(faceDir) < 0 ?
                            VectorWithOutY(faceDir) :
                            faceDir,
                        1.0,
                        Relative.ToWorld,
                        ContraryMotion.Incorporate);
                }
            
                Wait(1.0, WaitBehavior.IgnoreCondition);
            }

            StopModifyingHeroVoiceLines(ep);
            for(define scale! = tianScale; scale > 1.0; scale -= 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            SetUltimateCharge(ep, 0);
            SetMaxHealth(ep, DefaultPercentage());
            SetGravity(ep, DefaultPercentage());
            // ClearStatus(ep, Status.Rooted);
            ForcePlayerHero(ep, prevHero);
            StopForcingHero(ep);
            SetHeroButtonControlPropety();
            // wait using ult fin for not retrigger (if hero not changed by some hero)
            WaitUntil(!IsUsingUltimate(), MaxValue());
            
            isTransformed = false;
        }
    }
    else if(
        trigger == HeroModTrigger.USING_PRIMARY
    ){
        if(isTransformed){
            define splashDamageRangeMinigun!: 1.5;

            while(IsFiringPrimary()){
                // get aimPosition
                define aimPosition! = AimingPosition(40, EnemyTeamOf(ep));
                define scat! = DistanceBetween(EyePosition(), aimPosition) * 0.03;
                define landPosition! = aimPosition + RandomPosition(scat, scat, scat);
                // splash damage
                Damage(
                    PlayersWithinRadius(
                        landPosition, splashDamageRangeMinigun,
                        enemyTeam, RadiusLOS.Off),
                    ep, 25);
                // play blast
                PlayEffect(
                    AllPlayers(), PlayEffect.BadExplosion,
                    Color.Orange,
                    landPosition,
                    splashDamageRangeMinigun);

                Wait(
                    !IsInAlternateForm() ? 0.2 : 0.1,
                    WaitBehavior.IgnoreCondition);
            }
        }
    }
    else if(
        trigger == HeroModTrigger.USING_SECONDARY
    ){
        if(isTransformed){
            for(define remainShot! = 15; remainShot > 0; remainShot--)
            {
                if(
                    !isTransformed ||
                    IsDead()
                ){
                    break;
                }
                PressButton(ep, Button.SecondaryFire);
                CancelPrimaryAction();
                SetAbilityCooldown(ep, Button.SecondaryFire, 0);

                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
        }
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        if(
            isTransformed &&
            UltimateChargePercent(ep) > 0
        ){
            define chargeRate! = UltimateChargePercent() / 100;

            // play blast sound
            PlayEffect(
                AllPlayers(), PlayEffect.RingExplosionSound,
                Color.White,
                ep,
                chargeRate * 200);
            PlayEffect(
                AllPlayers(), PlayEffect.DebuffImpactSound,
                Color.White,
                ep,
                chargeRate * 200);
            // play blast
            PlayEffect(
                AllPlayers(), PlayEffect.GoodExplosion,
                Color.White,
                EyePosition() + (FacingDirectionOf() * 5),
                chargeRate * 10);
            PlayEffect(
                AllPlayers(), PlayEffect.BadExplosion,
                Color.Orange,
                EyePosition() + (FacingDirectionOf() * 5),
                chargeRate * 10);

            grudgePower = UltimateChargePercent();
            SetUltimateCharge(ep, 0);
            ApplyImpulse(ep, -1 * FacingDirectionOf(), chargeRate * 15, Relative.ToWorld, ContraryMotion.Incorporate);           

            HeroMod_Action_FIRE_BALL_FIRE();
        }
    }
}
// TAG ZOMBIE
void HeroMod_Action_ZOMBIE(define trigger!) playervar "HeroMod_Action_ZOMBIE"{
    if(
        trigger == HeroModTrigger.ACTIVATE
    ){
        heroModName = "ZOMBIE";
        heroModDetail = 
            "+ at dead, revive myself after 5 seconds" + NL +
            "  * in over time is excluded" + NL +
            "+ long press melee key in dead to force return to spawn room" + NL +
            "- max health 50%" + NL +
            "- receive heal 50%";
        SetMaxHealth(ep, 50);
        SetHealingReceived(ep, 50);
    }
    else if(
        trigger == HeroModTrigger.DEACTIVATE
    ){
        SetMaxHealth(ep, DefaultPercentage());
        SetHealingReceived(ep, DefaultPercentage());
    }
    else if(
        trigger == HeroModTrigger.DEATH
    ){
        if(
            !IsOverTime()
        ){
            Wait(5, WaitBehavior.AbortWhenFalse);
            if(IsDeadByAbyss()){
                Teleport(ep, NearestWalkablePosition(ep));
                Wait(0.1, WaitBehavior.AbortWhenFalse);
            }
            SetStatus(ep, null, Status.Invincible, 3);
            Resurrect(ep);
        }
    }
    else if(
        trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
    ){
        if(
            IsDead()
        ){
            Respawn();
        }
    }
}

// TAG HeroMod/SubFunction ----------
enum ARTILLERY_FIRE_TARGHET_MODE{
    NEAR_PLAYER,
    NEAR_AIM_POS
}

// TAG HeroMod_Action_ARTILLERY_FIRE
void HeroMod_Action_ARTILLERY_FIRE(define targetMode!, define attackCount!) playervar "HeroMod_Action_ARTILLERY_REQUEST_SUPPORT" {
    Wait(1.0, WaitBehavior.IgnoreCondition);

    // config value
    // define artilleryTargetRange! = 20;
    define artilleryAttackInterval! = 0.33;
    define artilleryScatterRange! = 8.0;
    define artilleryDamageRange! = 5.0;
    define artilleryDamage! = 120;

    // create shell
    define deployPosition = PositionOf(ep) + (VectorWithOutY(RandomDirection()) * 40) + (Up() * 80);
    define landPosition1;
    define landPosition2;
    define shellPosition1;
    define shellPosition2;
    define shellEffect1! = CreateEffect(AllPlayers(), Effect.Orb,
        Color.White,
        shellPosition1,
        1, EffectRev.PositionAndRadius
    );
    define shellEffect2! = CreateEffect(AllPlayers(), Effect.Orb,
        Color.White,
        shellPosition2,
        1, EffectRev.PositionAndRadius
    );
    define isFirstShot! = true;

    // blast animation
    for(define count = attackCount / 2; count > 0; count --){
        // get target by base position
        define basePosition! =
            targetMode == ARTILLERY_FIRE_TARGHET_MODE.NEAR_PLAYER ?   PositionOf(ep) :
            targetMode == ARTILLERY_FIRE_TARGHET_MODE.NEAR_AIM_POS ?  AimingPosition(40, EnemyTeamOf(ep)) :
            null;
        define target! = basePosition;
        // FirstOf(
        //     SortedArray(
        //         FilteredArray(
        //             AllLivingPlayers(EnemyTeamOf(ep)),
        //             DistanceBetween(basePosition, ae) <= artilleryTargetRange
        //         ),
        //         DistanceBetween(basePosition, ae)
        //     )
        // );

        
        define attackPosition!;
        if(
            target == null
        ){
            // if not found target, get attack position by base position
            attackPosition = basePosition;
        }
        else{
            // get attack position by target
            attackPosition = BelowPosition(PositionOf(target));
        }

        // land animation1
        // set landed position by attackPosition with random scatter
        landPosition1 =
            attackPosition + 
            RandomPosition(
                artilleryScatterRange,
                0,
                artilleryScatterRange
            );
        // shell land animation
        shellPosition1 = deployPosition;
        ChaseVariableOverTime(
            shellPosition1,
            landPosition1,
            artilleryAttackInterval * 2,
            TimeChaseReevaluation.None
        );
        
        Wait(artilleryAttackInterval, WaitBehavior.IgnoreCondition);

        // first attack
        if(isFirstShot){
            isFirstShot = false;
            // skip blast animation2
        }
        else{
            // blast animation2
            // play blast sound
            PlayEffect(
                AllPlayers(), PlayEffect.RingExplosionSound,
                Color .White,
                landPosition2,
                MaxLength());
            // play blast
            PlayEffect(
                AllPlayers(), PlayEffect.GoodExplosion,
                Color.Orange,
                landPosition2,
                artilleryDamageRange);
            // damage
            Damage(
                PlayersWithinRadius(
                    landPosition2, artilleryDamageRange,
                    EnemyTeamOf(ep), RadiusLOS.Off
                ),
                ep, artilleryDamage
            );
        }

        // land animation2
        // set landed position by attackPosition with random scatter
        landPosition2 =
            attackPosition + 
            RandomPosition(
                artilleryScatterRange,
                0,
                artilleryScatterRange
            );
        // shell land animation
        shellPosition2 = deployPosition;
        ChaseVariableOverTime(
            shellPosition2,
                landPosition2,
                artilleryAttackInterval * 2,
                TimeChaseReevaluation.None
            );

        Wait(artilleryAttackInterval, WaitBehavior.IgnoreCondition);
        
        // blast animation1
        // play blast sound
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosionSound,
            Color .White,
            landPosition1,
            MaxLength());
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Orange,
            landPosition1,
            artilleryDamageRange);
        // damage
        Damage(
            PlayersWithinRadius(
                landPosition1, artilleryDamageRange,
                EnemyTeamOf(ep), RadiusLOS.Off
            ),
            ep, artilleryDamage
        );
    }

    Wait(artilleryAttackInterval, WaitBehavior.IgnoreCondition);

    // final blast animation2
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color .White,
        landPosition2,
        MaxLength());
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Orange,
        landPosition2,
        artilleryDamageRange);
    // damage
    Damage(
        PlayersWithinRadius(
            landPosition2, artilleryDamageRange,
            EnemyTeamOf(ep), RadiusLOS.Off
        ),
        ep, artilleryDamage
    );

    StopChasingVariable(shellPosition1);
    StopChasingVariable(shellPosition2);
    DestroyEffect(shellEffect1);
    DestroyEffect(shellEffect2);
}

// TAG HeroMod_Action_FIRE_BALL_FIRE
void HeroMod_Action_FIRE_BALL_FIRE(){
    if(
        IsAlive() &&
        grudgePower > 0
    ){
        define ballSpeed! = 30;
        define ballSize! = grudgePower * 0.025;
        define ballDamage! = grudgePower * 5;
        define ballBlastRange! = grudgePower * 0.15;
        define ballBlastCount! = RoundToInteger(grudgePower / 25, Rounding.Down);
        ballBlastCount = ballBlastCount < 1 ? 1 : ballBlastCount;
        define minCollisionSize! = ballSpeed / 20;
        define collisionSize! = ballSize;
        collisionSize = collisionSize < minCollisionSize ? minCollisionSize : collisionSize;
        grudgePower = 0;

        define ballPos = EyePosition() + Vector(0, -0.1, 0);
        define aimPos! = AimingPosition(40, null);
        define effects! = CreateEffect(AllPlayers(), Effect.Sphere, Color.Orange,
            ballPos, ballSize, EffectRev.PositionAndRadius);

        ChaseVariableAtRate(
            ballPos, aimPos, ballSpeed,
            RateChaseReevaluation.DestinationAndRate);
        while(
            // not
            !(
                // hit aimed position
                DistanceBetween(ballPos, aimPos) <= 0 ||
                // hit enemy
                (
                    DistanceBetween(ballPos, ClosestPlayerTo(ballPos, EnemyTeamOf(ep))) <= collisionSize &&
                    IsAlive(ClosestPlayerTo(ballPos, EnemyTeamOf(ep)))
                )
            )
        ){
            PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Orange, ballPos, ballSize * 1.5);
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }
        StopChasingVariable(ballPos);
        DestroyEffect(effects);
        
        define targets! = PlayersWithinRadius(ballPos, collisionSize < minCollisionSize ? minCollisionSize : ballBlastRange, EnemyTeamOf(ep), RadiusLOS.Off);
        ApplyBlastImpulse(targets, ballPos, ballBlastRange);
        SetStatus(targets, ep, Status.Burning, 3);
        Damage(targets, ep, ballDamage);
        PlayContinuousBlast(Color.Orange, ballPos, ballBlastRange, ballBlastCount, ballBlastCount);
    }
}

// TAG HeroMod/Trigger ----------
playervar define isUltUsed!;

// TAG TIME_PASSED
rule: "HeroModTrigger/TIME_PASSED"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.SAVIOR ||
        heroModType == HeroModType.POWER_CHARGING ||
        heroModType == HeroModType.ADRENALINE_RUSH ||
        heroModType == HeroModType.GRUDGE_FIRE_BALL ||
        heroModType == HeroModType.GRUDGE_LIGHTNING
    ) &&
    IsGameInProgress()
){
    DoHeroModAction(heroModType, HeroModTrigger.TIME_PASSED, null);
    LoopIfConditionIsTrue();
}

// TAG STOP
rule: "HeroModTrigger/STOP"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.FIXED_TURRET
    ) &&
    !IsMoving()
){
    DoHeroModAction(heroModType, HeroModTrigger.STOP, null);
}

// TAG MOVING
rule: "HeroModTrigger/MOVING"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.FIXED_TURRET
    ) &&
    IsMoving()
){
    DoHeroModAction(heroModType, HeroModTrigger.MOVING, null);
}

// TAG LONG_PRESS_MELEE_KEY
rule: "HeroModTrigger/LONG_PRESS_MELEE_KEY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.BIRD_MAN ||
        heroModType == HeroModType.HEALING_SYRINGE ||
        heroModType == HeroModType.SAVIOR ||
        heroModType == HeroModType.POWERFUL_GIFT ||
        heroModType == HeroModType.GRUDGE_FIRE_BALL ||
        heroModType == HeroModType.GRUDGE_LIGHTNING ||
        heroModType == HeroModType.GUNSHIP_GUNNER ||
        heroModType == HeroModType.ZOMBIE
    ) &&
    (
        (
            !IsDummyBot() &&
            IsButtonHeld(ep, Button.Melee)
        ) ||
        (
            IsDummyBot() &&
            IsButtonHeld(ep, Button.PrimaryFire) &&
            ProbabilityTrue(50)
        )
    )
){
    WaitLongPressConfirm();
    DoHeroModAction(heroModType, HeroModTrigger.LONG_PRESS_MELEE_KEY, null);
}

// TAG USING_PRIMARY
rule: "HeroModTrigger/USING_PRIMARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.BEAM_SNIPER ||
        heroModType == HeroModType.GUNSHIP_GUNNER
    ) &&
    IsFiringPrimary()
){
    DoHeroModAction(heroModType, HeroModTrigger.USING_PRIMARY, null);
}

// TAG NOT_USING_PRIMARY
rule: "HeroModTrigger/NOT_USING_PRIMARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.BEAM_SNIPER
    ) &&
    !IsFiringPrimary()
){
    DoHeroModAction(heroModType, HeroModTrigger.NOT_USING_PRIMARY, null);
}

// TAG USING_SECONDARY
rule: "HeroModTrigger/USING_SECONDARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.BEAM_SNIPER ||
        heroModType == HeroModType.GUNSHIP_GUNNER
    ) &&
    IsFiringSecondary()
){
    DoHeroModAction(heroModType, HeroModTrigger.USING_SECONDARY, null);
}

// TAG NOT_USING_SECONDARY
rule: "HeroModTrigger/NOT_USING_SECONDARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.BEAM_SNIPER
    ) &&
    !IsFiringSecondary()
){
    DoHeroModAction(heroModType, HeroModTrigger.NOT_USING_SECONDARY, null);
}

// TAG USING_ULT
rule: "HeroModTrigger/USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.SHOT_CALL ||
        heroModType == HeroModType.SUPER_ULT ||
        heroModType == HeroModType.ARTILLERY_REQUEST ||
        heroModType == HeroModType.STRAFING_REQUEST ||
        heroModType == HeroModType.TITAN_FORM ||
        heroModType == HeroModType.BEAM_SNIPER ||
        heroModType == HeroModType.GUNSHIP_GUNNER
    ) &&
    IsUsingUltimate()
){
    if(IsMechCalling(ep)){return;}
    DoHeroModAction(heroModType, HeroModTrigger.USING_ULT, null);
}

// TAG NOT_USING_ULT
rule: "HeroModTrigger/NOT_USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.SUPER_ULT
    ) &&
    !IsUsingUltimate()
){
    DoHeroModAction(heroModType, HeroModTrigger.NOT_USING_ULT, null);
}

// TAG CHARGING_ULT
rule: "HeroModTrigger/CHARGING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.SHOT_CALL ||
        heroModType == HeroModType.FAST_CHARGE ||
        heroModType == HeroModType.SUPER_ULT ||
        heroModType == HeroModType.TITAN_FORM ||
        heroModType == HeroModType.BEAM_SNIPER ||
        heroModType == HeroModType.ARTILLERY_REQUEST ||
        heroModType == HeroModType.STRAFING_REQUEST ||
        heroModType == HeroModType.GUNSHIP_GUNNER
    ) &&
    UltimateChargePercent(ep) < DefaultPercentage()
){
    DoHeroModAction(heroModType, HeroModTrigger.CHARGING_ULT, null);
    LoopIfConditionIsTrue();
}

// TAG LOST_HEALTH
rule: "HeroModTrigger/LOST_HEALTH"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.SURVIVALIST ||
        heroModType == HeroModType.ARTILLERY_SUPPORT
    ) &&
    NormalizedHealth() <= 0.5
){
    DoHeroModAction(heroModType, HeroModTrigger.LOST_HEALTH, null);
}

// TAG RECEIVE_DAMAGE
rule: "HeroModTrigger/RECEIVE_DAMAGE"
Event.OnDamageTaken
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.GRUDGE_LIGHTNING
    ) &&
    Attacker() != ep
){
    DoHeroModAction(heroModType, HeroModTrigger.RECEIVE_DAMAGE, EventDamage());
}

// TAG DEAL_HEAL
rule: "HeroModTrigger/DEAL_HEAL"
Event.OnHealingDealt
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.GRUDGE_FIRE_BALL
    ) &&
    Healee() != ep
){
    DoHeroModAction(heroModType, HeroModTrigger.DEAL_HEAL, EventHealing());
}

// TAG KILL
rule: "HeroModTrigger/KILL"
Event.OnElimination
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.TECHNICIAN
    )
){
    DoHeroModAction(heroModType, HeroModTrigger.KILL, null);
}

// TAG DEATH
rule: "HeroModTrigger/DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    (
        heroModType == HeroModType.RAGE ||
        heroModType == HeroModType.POWER_CHARGING ||
        heroModType == HeroModType.ZOMBIE
    )
){
    DoHeroModAction(heroModType, HeroModTrigger.DEATH, null);
}

// TAG TEAMMATE_DEATH
rule: "HeroModTrigger/TEAMMATE_DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    ep != Attacker()
){
    DoHeroModAction(heroModType, HeroModTrigger.TEAMMATE_DEATH, null);
}
