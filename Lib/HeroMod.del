import "Debug.del";

// TAG HeroMod ----------
playervar define selectHeroMod;
playervar define heroModName;
playervar define heroModDetail;

enum HeroModType{
    INIT,
    NO_HERO_MOD,
    MEDIC,
    HIT_MAN,
    ASSASSIN,
    SPRINTER,
    BIRD_MAN,
    LIGHT_ARMOR,
    HEAVY_ARMOR,
    FIXED_TURRET,
    ADRENALINE_RUSH,
    POWER_CHARGING,
    HEALING_SYRINGE,
    SAVIOR,
    TECHNICIAN,
    SURVIVALIST,
    GUNSHIP_SUPPORT,
    RAGE,
    SHOT_CALL,
    FAST_CHARGE,
    SUPER_ULT,
    STRAFING_REQUEST,
    TITAN_FORM,
    BEAM_SNIPER,
    GRUDGE_LIGHTNING,
    GRUDGE_FIRE_BALL,
    ZOMBIE,
    LAST
}

enum HeroModTrigger{
    ACTIVATE,
    DEACTIVATE,
    LONG_PRESS_MELEE_KEY,
    TIME_PASSED,
    STOP,
    MOVING,
    USING_PRIMARY,
    NOT_USING_PRIMARY,
    USING_SECONDARY,
    NOT_USING_SECONDARY,
    USING_ULT,
    NOT_USING_ULT,
    CHARGING_ULT,
    LOST_HEALTH,
    RECEIVE_DAMAGE,
    DEAL_HEAL,
    KILL,
    DEATH,
    TEAMMATE_DEATH
}

playervar define modOpeText;

define HM_AscKey: Button.Melee;
define HM_DisKey: Button.Crouch;

void UpdateHeroModText()"UpdateHeroModText"{
    DestroyHudText(modOpeText[0]);
    DestroyHudText(modOpeText[1]);
    DestroyInWorldText(modOpeText[2]);

    if(CanChangeHeroMod()){
        modOpeText[0] = CreateHudText(ep, null,
            <
                "You can change mod.\n\rPress <2>/<3> to select mod.\n\r●Your mod = <0> <1>",
                heroModName,
                <"(<0>/<1>)", selectHeroMod - 1, HeroModType.LAST - 2>,
                ButtonGuide(HM_AscKey),
                ButtonGuide(HM_DisKey)
            >,
            null, Location.Left, 101, null, Color.Blue, null, HudTextRev.String, Spectators.DefaultVisibility);
    }
    else{
        modOpeText[0] = CreateHudText(ep, null,
            <
                "You can change mod in respawn area anytime.\n\r●Your mod = <0> <1>",
                heroModName,
                <"(<0>/<1>)", selectHeroMod - 1, HeroModType.LAST - 2>
            >,
            null, Location.Left, 101, null, Color.Blue, null, HudTextRev.String, Spectators.DefaultVisibility);
    }

    modOpeText[1] = CreateHudText(ep, null,
        heroModDetail,
        null, Location.Left, 102, null, Color.White, null, HudTextRev.StringAndColor, Spectators.DefaultVisibility);

    modOpeText[2] = CreateInWorldText(AllPlayers(),
        heroModName,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.SkyBlue, Spectators.DefaultVisibility);
}

define CanChangeHeroMod():
    !IsDummyBot() &&
    IsInSpawnRoom();

rule: "HeroMod/updateHeroModAllTextOnEnterSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    CanChangeHeroMod()
){
    UpdateHeroModText();
}

rule: "HeroMod/updateHeroModAllTextOnExitSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !CanChangeHeroMod()
){
    UpdateHeroModText();
}

rule: "HeroMod/initSelectHeroMod"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    HasSpawned()
){
    if(
        !IsDummyBot()
    ){
        // player
        // select no mod as player
        selectHeroMod = HeroModType.NO_HERO_MOD;
    }
    else{
        // dummy bot
        if(
            !IsSupportHero(HeroOf())
        ){
            // not support hero
            while(
                IsTrueForAny(HealerMods(), selectHeroMod == ae) ||
                selectHeroMod == 0
            ){
                // select mod by random
                selectHeroMod = RandomInteger(HeroModType.INIT + 1, HeroModType.LAST - 1);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
        }
        else{
            // support hero
            if(
                ProbabilityTrue(50)
            ){
                // select mod by HealerMods
                selectHeroMod = RandomValueInArray(HealerMods());
            }
            else{
                // select mod by random
                selectHeroMod = RandomInteger(HeroModType.INIT + 1, HeroModType.LAST - 1);
            }
        }
    }

    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE, null);
    UpdateHeroModText();
}

define HealerMods():
    [
        HeroModType.MEDIC,
        HeroModType.GRUDGE_FIRE_BALL
    ];

rule: "HeroMod/switchSelectHeroMod"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    CanChangeHeroMod() &&
    (
        ( IsButtonHeld(ep, HM_AscKey) && !IsButtonHeld(ep, HM_DisKey) ) ||
        ( !IsButtonHeld(ep, HM_AscKey) && IsButtonHeld(ep, HM_DisKey) )
    )
){
    AbortIf(IsMoving());
    // do heromod deactivate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEACTIVATE, null);
    // switch mod
    selectHeroMod = 
        ( IsButtonHeld(ep, HM_AscKey) && !IsButtonHeld(ep, HM_DisKey) ) ?
            selectHeroMod < HeroModType.LAST - 1 ? selectHeroMod + 1 : HeroModType.INIT + 1 :
            selectHeroMod > HeroModType.INIT + 1 ? selectHeroMod - 1 : HeroModType.LAST - 1 ;
    // do heromod activate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE, null);
    // update text
    UpdateHeroModText();
    // play switch effect
    PlayEffect(ep, PlayEffect.DebuffImpactSound, null, ep, 75);
}

// TAG HeroMod/Action ----------
void DoHeroModAction(define heromod!, define trigger!, define triggerPayload!) playervar "DoHeroModAction"{
    // TAG TEAMMATE_DEATH/RAGE
    if(
        trigger == HeroModTrigger.TEAMMATE_DEATH
    ){
        define playerArray! = FilteredArray(
            AllPlayers(playerTeam),
            (
                ae != ep &&
                ae.selectHeroMod == HeroModType.RAGE
            )
        );
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            SetUltimateCharge(player, UltimateChargePercent(player) + 30);
        }
    }

    // TAG NO_HERO_MOD
    if(
        selectHeroMod == HeroModType.NO_HERO_MOD
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "NO MOD";
            heroModDetail = 
                "no modified" + NL +
                "no pros(+), no cons(-)";
        }
    }
    // TAG MEDIC
    else if(
        selectHeroMod == HeroModType.MEDIC
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "MEDIC";
            heroModDetail = 
                "+ deal heal 150%" + NL +
                "- deal damage 50%";
            SetHealingDealt(ep, 150);
            SetDamageDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingDealt(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
        }
    }
    // TAG HIT_MAN
    else if(
        selectHeroMod == HeroModType.HIT_MAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HIT MAN";
            heroModDetail = 
                "+ deal damage 150%" + NL +
                "- receive heal 50%";
            SetDamageDealt(ep, 150);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    // TAG ASSASSIN
    else if(
        selectHeroMod == HeroModType.ASSASSIN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "ASSASSIN";
            heroModDetail = 
                "+ deal damage 130%" + NL +
                "+ move speed 130%" + NL +
                "- max Health 50%";
            SetDamageDealt(ep, 130);
            SetMoveSpeed(ep, 130);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    // TAG SPRINTER
    else if(
        selectHeroMod == HeroModType.SPRINTER
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SPRINTER";
            heroModDetail = 
                "+ move speed 150%" + NL +
                "- max health 50%";
            SetMoveSpeed(ep, 150);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    // TAG BIRD_MAN
    else if(
        selectHeroMod == HeroModType.BIRD_MAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "BIRD MAN";
            heroModDetail = 
                "+ long press melee key in air to dive" + NL +
                "+ gravity 5%" + NL +
                "- max health 50%";
            SetGravity(ep, 5);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetGravity(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            ApplyImpulse(ep, 
                Down(),
                20, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    // TAG LIGHT_ARMOR
    else if(
        selectHeroMod == HeroModType.LIGHT_ARMOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "LIGHT ARMOR";
            heroModDetail = 
                "+ max health 150%" + NL +
                "- move speed 80%" + NL +
                "- receive heal 50%";
            SetMaxHealth(ep, 150);
            SetMoveSpeed(ep, 80);
            SetHealingReceived(ep, 50);
            Heal(ep, null, MaxValue());
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    // TAG HEAVY_ARMOR
    else if(
        selectHeroMod == HeroModType.HEAVY_ARMOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HEAVY ARMOR";
            heroModDetail = 
                "+ max health 300%" + NL +
                "- move speed 50%" + NL +
                "- receive heal 25%";
            SetMaxHealth(ep, 300);
            SetMoveSpeed(ep, 50);
            SetHealingReceived(ep, 25);
            Heal(ep, null, MaxValue());
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    // TAG FIXED_TURRET
    else if(
        selectHeroMod == HeroModType.FIXED_TURRET
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "FIXED TURRET";
            heroModDetail = 
                "in standing..." + NL +
                "  + deal damage 150%" + NL +
                "  + deal heal 150%" + NL +
                "  + max health 200%" + NL +
                "in moving..." + NL +
                "  - deal damage 50%" + NL +
                "  - deal heal 50%";
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.STOP
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 150);
            SetHealingDealt(ep, 150);
            SetMaxHealth(ep, 200);
            if(IsDummyBot()){
                SetStatus(ep, null, Status.Rooted, RandomInteger(1, 10));
            }
        }
        else if(
            trigger == HeroModTrigger.MOVING
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 50);
            SetHealingDealt(ep, 50);
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    // TAG TECHNICIAN
    else if(
        selectHeroMod == HeroModType.TECHNICIAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "TECHNICIAN";
            heroModDetail = 
                "kill enemy to..." + NL +
                "  + get 150% move speed status until 3 seconds" + NL +
                "  + reset cooldown ability2(default E key)" + NL +
                "  + reset cooldown secondary fire ability" + NL +
                "    * has 5 seconds cooldown to re-trigger" + NL + 
                "- receive heal 50%";
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.KILL
        ){
            SetMoveSpeed(ep, 150);

            define buttonList! = [
                Button.Ability2,
                Button.SecondaryFire
            ];
            for(define index! = 0; index < CountOf(buttonList); index++){
                AddAbilityStock(buttonList[index], 1);
            }

            Wait(3, WaitBehavior.IgnoreCondition);
            SetMoveSpeed(ep, DefaultPercentage());

            Wait(2, WaitBehavior.IgnoreCondition);
        }
    }
    // TAG SURVIVALIST
    else if(
        selectHeroMod == HeroModType.SURVIVALIST
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SURVIVALIST";
            heroModDetail = 
                "lost 50% health..." + NL + 
                "  + get unkillable status until 3 seconds" + NL +
                "  + reset cooldown and auto use ability1(default Shift key)" + NL +
                "  + reset cooldown and auto use jump ability" + NL +
                "    * has 5 seconds cooldown to re-trigger" + NL + 
                "- receive heal 50%";
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.LOST_HEALTH
        ){
            SetStatus(ep, ep, Status.Unkillable, 3);

            define buttonList! = [
                Button.Ability1,
                Button.Jump
            ];
            for(define index! = 0; index < CountOf(buttonList); index++){
                AddAbilityStock(buttonList[index], 1);
            }

            PressButton(ep, Button.Jump);
            Wait(0.1, WaitBehavior.IgnoreCondition);
            PressButton(ep, Button.Jump);   // use jump button abiliry
            Wait(0.1, WaitBehavior.IgnoreCondition);
            PressButton(ep, Button.Ability1);

            Wait(5, WaitBehavior.IgnoreCondition);
        }
    }
    // TAG GUNSHIP_SUPPORT
    else if(
        selectHeroMod == HeroModType.GUNSHIP_SUPPORT
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "GUNSHIP SUPPORT";
            heroModDetail = 
                "lost 50% health..." + NL + 
                "  + gunship fire support incoming and attack near enemy" + NL + 
                "    * has 9 seconds cooldown to re-trigger" + NL + 
                "- receive heal 50%";
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.LOST_HEALTH
        ){
            DoGunshipSupport();
        }
    }
    // TAG HEALING_SYRINGE
    else if(
        selectHeroMod == HeroModType.HEALING_SYRINGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HEALING SYRINGE";
            heroModDetail = 
                "long press melee key..." + NL +
                "  + without near teammate to heal self 200 health" + NL +
                "  + with near teammate to heal teammate 500 health" + NL +
                "  - consume 20% ult charge";
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            define consumeUltCharge! = 20;
            if(
                IsAlive() &&
                UltimateChargePercent() >= consumeUltCharge
            ){
                define target! = 
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                IsDummyBot(ep) ? AllPlayers(playerTeam) : PlayersInViewAngle(ep, playerTeam, 45),
                                (
                                    ae != ep &&
                                    IsAlive(ae) &&
                                    (IsDummyBot(ep) ? NormalizedHealth(ae) < 0.5 : NormalizedHealth(ae) < 1.0) &&
                                    DistanceBetween(ep, ae) <= (IsDummyBot(ep) ? 6 : 3)
                                )
                            ),
                            DistanceBetween(ep, ae)
                        )
                    );

                if(
                    target != null
                ){
                    Heal(target, ep, 500);
                    SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, target, 1.5);
                    PlayEffect([ep,target], PlayEffect.BuffExplosionSound, null, target, 100);
                    
                    SmallMessage(ep, "Healed "+ target + HeroIconString(HeroOf(target)));
                    SmallMessage(target, "Healed by "+ ep + HeroIconString(HeroOf(ep)));
                }
                else if(NormalizedHealth(ep) < 1.0){
                    Heal(ep, ep, 200);
                    SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, ep, 1.5);
                    PlayEffect(ep, PlayEffect.BuffExplosionSound, null, ep, 100);
                }
            }
        }
    }
    // TAG SAVIOR
    else if(
        selectHeroMod == HeroModType.SAVIOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SAVIOR";
            heroModDetail = 
                "long press melee key to near dead teammate..." + NL +
                "  + revive teammate" + NL +
                "  - consume 50% ult charge";
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define targets! = AllDeadPlayers(playerTeam);
            for(define index! = 0; index < CountOf(targets); index++){
                // play white effect
                PlayEffect(
                    ep, PlayEffect.GoodPickupEffect,
                    Color.White, targets[index], 1);
            }
            Wait(2, WaitBehavior.AbortWhenFalse);
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            define consumeUltCharge! = 50;
            if(
                IsAlive() &&
                UltimateChargePercent() >= consumeUltCharge
            ){
                define target! = 
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                IsDummyBot(ep) ? AllPlayers(playerTeam) : PlayersInViewAngle(ep, playerTeam, 45),
                                (
                                    ae != ep &&
                                    IsDead(ae) &&
                                    DistanceBetween(ep, ae) <= (IsDummyBot(ep) ? 6 : 3)
                                )
                            ),
                            DistanceBetween(ep, ae)
                        )
                    );
                
                if(
                    target != null
                ){
                    Resurrect(target);
                    SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, target, 1.5);
                    PlayEffect([ep, target], PlayEffect.BuffExplosionSound, null, target, 100);
                    SmallMessage(ep, "Revived "+ target + HeroIconString(HeroOf(target)));
                    SmallMessage(target, "Revived by "+ ep + HeroIconString(HeroOf(ep)));
                }
            }
        }
    }
    // TAG GRUDGE_LIGHTNING
    else if(
        selectHeroMod == HeroModType.GRUDGE_LIGHTNING
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define currentValue! = RoundToInteger(grudgePower, Rounding.Nearest);
            heroModName = "GRUDGE LIGHTNING";
            heroModDetail = 
                "+ receive damage to charge grudge power (now "+ currentValue +"% / 100%)" + NL +
                "+ hold melee key to release grudge power as penetrate lightning and stun" + NL +
                "- receive heal 50%";

            if(
                trigger == HeroModTrigger.ACTIVATE
            ){
                SetHealingReceived(ep, 50);
                grudgePower = 0;
            }
            else if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.RECEIVE_DAMAGE
        ){
            if(DefaultPercentage() <= grudgePower){return;}
            define gainPower! = triggerPayload * 0.1;
            if(grudgePower + gainPower > DefaultPercentage()){
                grudgePower = DefaultPercentage();
            }
            else{
                grudgePower = grudgePower + gainPower;
            }
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            DoGrudgeLightning();
        }
    }

    // TAG GRUDGE_FIRE_BALL
    else if(
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define currentValue! = RoundToInteger(grudgePower, Rounding.Nearest);
            heroModName = "GRUDGE FIRE BALL";
            heroModDetail = 
                "+ heal teammate to charge grudge power (now "+ currentValue +"% / 100%)" + NL +
                "+ long press melee key to release grudge power as fire ball and blast" + NL +
                "- receive heal 50%";

            if(
                trigger == HeroModTrigger.ACTIVATE
            ){
                SetHealingReceived(ep, 50);
                grudgePower = 0;
            }
            else if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEAL_HEAL
        ){
            if(DefaultPercentage() <= grudgePower){return;}
            define gainPower! = triggerPayload * 0.2;
            if(grudgePower + gainPower > DefaultPercentage()){
                grudgePower = DefaultPercentage();
            }
            else{
                grudgePower = grudgePower + gainPower;
            }
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            DoGrudgeFireBall();
        }
    }
    // TAG ADRENALINE_RUSH
    else if(
        selectHeroMod == HeroModType.ADRENALINE_RUSH
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define addValue! = IsAlive() ? ((1 - NormalizedHealth()) * 100) : 0;
            heroModName = "ADRENALINE RUSH";
            heroModDetail = 
                "more lost health..." + NL +
                "  + more deal damage (now "+ RoundToInteger((DefaultPercentage() + addValue), Rounding.Nearest) +"% / 200%)" + NL +
                "  + more move speed (now "+ RoundToInteger((DefaultPercentage() + addValue), Rounding.Nearest) +"% / 200%)" + NL +
                "- receive heal 50%";

            if(
                trigger == HeroModTrigger.ACTIVATE
            ){
                SetHealingReceived(ep, 50);
            }
            else if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                SetDamageDealt(ep, (DefaultPercentage() + addValue));
                SetMoveSpeed(ep, (DefaultPercentage() + addValue));             
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
        }
    }
    // TAG POWER_CHARGING
    else if(
        selectHeroMod == HeroModType.POWER_CHARGING
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define addValue! = (UltimateChargePercent());
            heroModName = "POWER CHARGING";
            heroModDetail = 
                "more ult charges..." + NL +
                "  + more deal damage (now "+ RoundToInteger((DefaultPercentage() + (addValue * 1.0)), Rounding.Nearest) +"% / 150%)" + NL +
                "  + more deal heal (now "+ RoundToInteger((DefaultPercentage() + (addValue * 1.0)), Rounding.Nearest) +"% / 150%)" + NL +
                "  + more move speed (now "+ RoundToInteger((DefaultPercentage() + (addValue * 0.5)), Rounding.Nearest) +"% / 150%)" + NL +
                "- at dead, lose all ult charge";

            if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                SetDamageDealt(ep, (DefaultPercentage() + (addValue * 0.5)));
                SetHealingDealt(ep, (DefaultPercentage() + (addValue * 0.5)));
                SetMoveSpeed(ep, (DefaultPercentage() + (addValue * 0.5)));
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            SetUltimateCharge(ep, 0);
        }
    }
    // TAG RAGE
    else if(
        selectHeroMod == HeroModType.RAGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "RAGE";
            heroModDetail = 
                "+ at teammate dead, gain 30% ult charge" + NL +
                "- at self dead, lose all ult charge";
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            SetUltimateCharge(ep, 0);
        }
    }
    // TAG SHOT_CALL
    else if(
        selectHeroMod == HeroModType.SHOT_CALL
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SHOT CALL";
            heroModDetail = 
                "+ use ult to all teammates gain ult full charge" + NL +
                "  * each bot teammate use ult with you for combo attack" + NL +
                "  * other SHOT CALL player is can't gain full charge" + NL +
                "- every 3 seconds passed to lose 1% ult charge";
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(UltimateChargePercent() < DefaultPercentage()){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            define playerArray! = FilteredArray(
                AllPlayers(playerTeam),
                (
                    ae != ep &&
                    ae.selectHeroMod != HeroModType.SHOT_CALL
                )
            );

            for(define index! = 0; index < CountOf(playerArray); index++){
                // get ult full charge
                define player! = playerArray[index];
                SetUltimateCharge(player, 100);
                SmallMessage(player, "gained ult full charge by "+ ep + HeroIconString(HeroOf()));
                PlayEffect(player, PlayEffect.BuffExplosionSound, null, player, 100);
            }

            for(define index! = 0; index < CountOf(playerArray); index++){
                define player! = playerArray[index];
                if(
                    IsDummyBot(player) &&
                    ProbabilityTrue(70)
                ){
                    // bot use ult bt syc attack
                    PressButton(player, Button.Ultimate);
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                    if(!IsUsingUltimate(player)){
                        PressButton(player, Button.PrimaryFire);
                    }
                    // PressButton(player, Button.PrimaryFire);
                    Wait(RandomReal(0.1, 0.3), WaitBehavior.AbortWhenFalse);
                }
            }
        }
    }
    // TAG FAST_CHARGE
    else if(
        selectHeroMod == HeroModType.FAST_CHARGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "FAST CHARGE";
            heroModDetail = 
                "+ every 1 second passed to gain 3% ult charge" + NL +
                "- max health 50%" + NL +
                "- deal damage 50%" + NL +
                "- deal heal 50%";
            SetMaxHealth(ep, 50);
            SetDamageDealt(ep, 50);
            SetHealingDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(1, WaitBehavior.AbortWhenFalse);
            if(
                IsGameInProgress() &&
                UltimateChargePercent() < DefaultPercentage()
            ){
                SetUltimateCharge(ep, UltimateChargePercent() + 3);
            }
        }
    }
    // TAG SUPER_ULT
    else if(
        selectHeroMod == HeroModType.SUPER_ULT
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SUPER ULT";
            heroModDetail = 
                "in ult using..." + NL +
                "  + get invincible status" + NL +
                "  + deal damage 300%" + NL +
                "  + deal heal 300%" + NL +
                "  + move speed 200%" + NL +
                "  + gravity 25%" + NL +
                "+ at ult end, gain more ult full charge by 50% probility" + NL +
                "- every 3 seconds passed to lose 1% ult charge";
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE ||
            trigger == HeroModTrigger.NOT_USING_ULT
        ){
            ClearStatus(ep, Status.PhasedOut);
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetGravity(ep, DefaultPercentage());

            if(
                trigger == HeroModTrigger.NOT_USING_ULT &&
                isUltUsed
            ){
                isUltUsed = false;
                if(
                    ProbabilityTrue(50)
                ){
                    SetUltimateCharge(ep, 100);
                }
            }
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(UltimateChargePercent() < DefaultPercentage()){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            isUltUsed = true;
            
            SetStatus(ep, null, Status.PhasedOut, MaxValue());
            SetDamageDealt(ep, 300);
            SetHealingDealt(ep, 300);
            SetMoveSpeed(ep, 200);
            SetGravity(ep, 25);
        }
    }
    // TAG TITAN_FORM
    else if(
        selectHeroMod == HeroModType.TITAN_FORM
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "TITAN FORM";
            heroModDetail = 
                "+ use ult to transform to titan and rampage until 15 second" + NL +
                "  * titan has super toughness, fast ability charge, wide range hammer attack" + NL +
                "- every 3 seconds passed to lose 1% ult charge";
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(
                !isTransformed &&
                UltimateChargePercent() < DefaultPercentage()
            ){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            isTransformed = true;
            CancelPrimaryAction();
            define prevHero! = HeroOf();
            ForcePlayerHero(ep, Hero.Reinhardt);
            SetHeroButtonControlPropety();
            SetMaxHealth(ep, 500);
            SetDamageDealt(ep, 250);
            Wait(0.1, WaitBehavior.IgnoreCondition);
            Heal(ep, null, MaxValue());
            define tianScale! = 2.5;
            for(define scale! = 1; scale < tianScale; scale += 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            StartModifyingHeroVoiceLines(ep, 0.1, false);

            for(define remainSecond! = 15; remainSecond > 0; remainSecond--){
                if(IsDead()){
                    break;
                }
                if(UltimateChargePercent() < DefaultPercentage()){
                    SetUltimateCharge(ep, UltimateChargePercent() + 25);
                }
                SetAbilityCooldown(ep, Button.Ability1, 0);
                SetAbilityCooldown(ep, Button.Ability2, 0);
                Wait(1, WaitBehavior.IgnoreCondition);
            }

            StopModifyingHeroVoiceLines(ep);
            for(define scale! = tianScale; scale > 1.0; scale -= 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            SetUltimateCharge(ep, 0);
            SetMaxHealth(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
            ForcePlayerHero(ep, prevHero);
            StopForcingHero(ep);
            SetHeroButtonControlPropety();
            isTransformed = false;
            WaitUntil(!IsUsingUltimate(), MaxValue());
        }
    }
    // TAG BEAM_SNIPER
    else if(
        selectHeroMod == HeroModType.BEAM_SNIPER
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "BEAM SNIPER";
            heroModDetail = 
                "+ use ult to transform to beam sniper and rampage until 40 second" + NL +
                "  * beam sniper has powerful beam rifle with landed blast and penetrate wall" + NL +
                "- every 3 seconds passed to lose 1% ult charge";
            beamCharging = false;  // not charging
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(
                !isTransformed &&
                UltimateChargePercent() < DefaultPercentage()
            ){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            isTransformed = true;
            CancelPrimaryAction();
            define prevHero! = HeroOf();
            ForcePlayerHero(ep, Hero.Widowmaker);
            SetHeroButtonControlPropety();
            SetDamageDealt(ep, 200);

            for(define remainSecond! = 40; remainSecond > 0; remainSecond--){
                if(IsDead()){
                    break;
                }
                if(UltimateChargePercent() < DefaultPercentage()){
                    SetUltimateCharge(ep, UltimateChargePercent() + 20);
                }
                SetAbilityCooldown(ep, Button.Ability1, 0);
                SetAbilityCooldown(ep, Button.Ability2, 0);
                Wait(1, WaitBehavior.IgnoreCondition);
            }

            SetUltimateCharge(ep, 0);
            SetDamageDealt(ep, DefaultPercentage());
            ForcePlayerHero(ep, prevHero);
            StopForcingHero(ep);
            SetHeroButtonControlPropety();
            isTransformed = false;
            WaitUntil(!IsUsingUltimate(), MaxValue());
        }
        else if(
            trigger == HeroModTrigger.USING_PRIMARY
        ){
            if(isTransformed){
                DoBeamSniper();
            }
        }
        else if(
            trigger == HeroModTrigger.USING_SECONDARY
        ){
            if(isTransformed){
                while(IsFiringSecondary()){
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                    WaitUntil(IsFiringPrimary(), 1.2);
                    // primary fire interrupted before charging fin
                    if(IsFiringPrimary()){
                        continue;
                    }
                    // scorping ended
                    else if(!IsFiringSecondary()){
                        Abort();
                    }
                    else if(IsFiringSecondary()){
                        // charging fin
                        beamCharging = true;
                        // update aim pos
                        while(beamCharging){
                            // pre set aim pos
                            beamAimPos = AimingPosition(40, EnemyTeamOf(ep));
                            Wait(0.1, WaitBehavior.AbortWhenFalse);
                        }
                    }
                }
            }
        }
        else if(
            trigger == HeroModTrigger.NOT_USING_SECONDARY
        ){
            if(isTransformed){
                beamCharging = false;
            }
        }
    }
    // TAG STRAFING_REQUEST
    else if(
        selectHeroMod == HeroModType.STRAFING_REQUEST
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "STRAFING REQUEST";
            heroModDetail = 
                "+ use ult to strafing fire support incoming and attack aim position" + NL +
                "- every 3 seconds passed to lose 1% ult charge";
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(UltimateChargePercent() < DefaultPercentage()){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            DoStrafingRequest();
        }
    }
    // TAG ZOMBIE
    else if(
        selectHeroMod == HeroModType.ZOMBIE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "ZOMBIE";
            heroModDetail = 
                "+ at dead, revive self after 5 seconds" + NL +
                "  * in over time is excluded" + NL +
                "+ long press melee key in dead to force return to spawn room" + NL +
                "- max health 50%" + NL +
                "- receive heal 50%";
            SetMaxHealth(ep, 50);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            if(
                !IsOverTime()
            ){
                Wait(5, WaitBehavior.AbortWhenFalse);
                if(IsDeadByAbyss()){
                    Teleport(ep, NearestWalkablePosition(ep));
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                }
                SetStatus(ep, null, Status.Invincible, 3);
                Resurrect(ep);
            }
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            if(
                IsDead()
            ){
                Respawn();
            }
        }
    }
}

// TAG HeroMod/Variable ----------
playervar define grudgePower!;      // GRUDGE_FIRE_BALL, GRUDGE_LIGHTNING
playervar define isTransformed!;    // TITAN_FORM, BEAM_SNIPER
playervar define beamAimPos!;       // BEAM_SNIPER
playervar define beamCharging!;     // BEAM_SNIPER

// TAG HeroMod/Function ----------
void DoGrudgeLightning() playervar "DoGrudgeLightning"{
    if(
        IsAlive() &&
        grudgePower > 0
    ){
        if(IsDummyBot()){
            StartHoldingButton(ep, Button.Melee);
        }

        define landPos;
        define ballisticEffect! = CreateBeamEffect(AllPlayers(), BeamType.BadBeam,
            EyePosition() + Vector(0, -0.1, 0), landPos,
            Color.SkyBlue, EffectRev.VisibleToPositionAndRadius);

        define aimPos;
        define scatter;
        define targets;
        define count = 0;
        while(
            IsAlive() &&
            IsButtonHeld(ep, Button.Melee) &&
            grudgePower > 0
        ){
            if(count == 0){
                grudgePower -= 3;
                grudgePower = grudgePower < 0 ? 0 : grudgePower;

                define currentValue! = RoundToInteger(grudgePower, Rounding.Nearest);
                heroModDetail = 
                    "+ receive damage to charging grudge power (now "+ currentValue +"% / 100%)" + NL +
                    "+ hold melee key to release grudge power as stunning lightning" + NL +
                    "- receive heal 50%";

                define dist = DistanceBetween(EyePosition(), landPos);
                aimPos = AimingPosition(40, null);
                scatter = dist * 0.04;

                // get inside sight players
                targets = PlayersInViewAngle(ep, EnemyTeamOf(ep), 4);
                // add ryacast hit player
                targets[Last(targets)] = AimingPlayer(40, EnemyTeamOf(ep));
                SetStatus(targets, ep, Status.Stunned, 0.5);
                Damage(targets, ep, 40);
                PlayEffect(AllPlayers(), PlayEffect.DebuffImpactSound, Color.White, ep, 50);
            }

            landPos = aimPos + RandomPosition(scatter, scatter, scatter);

            count = count < 10 ? count + 1 : 0;
            Wait(0.01, WaitBehavior.IgnoreCondition);
        }
        DestroyEffect(ballisticEffect);
    }
}

void DoGrudgeFireBall() playervar "DoGrudgeFireBall"{
    if(
        IsAlive() &&
        grudgePower > 0
    ){
        define ballSpeed! = 30;
        define ballSize! = grudgePower * 0.025;
        define ballDamage! = grudgePower * 5;
        define ballBlastRange! = grudgePower * 0.15;
        define ballBlastCount! = RoundToInteger(grudgePower / 30, Rounding.Down);
        ballBlastCount = ballBlastCount < 1 ? 1 : ballBlastCount;
        define minCollisionSize! = ballSpeed / 20;
        define collisionSize! = ballSize;
        collisionSize = collisionSize < minCollisionSize ? minCollisionSize : collisionSize;
        grudgePower = 0;

        define ballPos = EyePosition() + Vector(0, -0.1, 0);
        define aimPos! = AimingPosition(40, null);
        define effects! = CreateEffect(AllPlayers(), Effect.Sphere, Color.Orange,
            ballPos, ballSize, EffectRev.PositionAndRadius);

        ChaseVariableAtRate(
            ballPos, aimPos, ballSpeed,
            RateChaseReevaluation.DestinationAndRate);
        while(
            // not
            !(
                // hit aimed position
                DistanceBetween(ballPos, aimPos) <= 0 ||
                // hit enemy
                (
                    DistanceBetween(ballPos, ClosestPlayerTo(ballPos, EnemyTeamOf(ep))) <= collisionSize &&
                    IsAlive(ClosestPlayerTo(ballPos, EnemyTeamOf(ep)))
                )
            )
        ){
            PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Orange, ballPos, ballSize * 1.5);
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }
        StopChasingVariable(ballPos);
        DestroyEffect(effects);
        
        define targets! = PlayersWithinRadius(ballPos, collisionSize < minCollisionSize ? minCollisionSize : ballBlastRange, EnemyTeamOf(ep), RadiusLOS.Off);
        ApplyBlastImpulse(targets, ballPos, ballBlastRange);
        SetStatus(targets, ep, Status.Burning, 3);
        Damage(targets, ep, ballDamage);
        PlayContinuousBlast(Color.Orange, ballPos, ballBlastRange, ballBlastCount, ballBlastCount);
    }
}

void DoStrafingRequest() playervar "DoStrafingRequest"{
    // set attack point from aimming position
    define attackPosition! = BelowPosition(AimingPosition(40, null));
    Wait(1.5, WaitBehavior.IgnoreCondition);

    // config value
    define strafReqAttackDistance! = 40;
    define strafReqAttackTime! = 2.0;
    define strafReqAttackInterval = 0.05;
    define strafReqScatterRange! = 3;
    define strafReqDamageRange! = 5;
    define strafReqDamage! = 180;

    define enteringAngle! = 
        VectorWithOutY(
            DirectionTowards(
                attackPosition,
                ClosestPlayerTo(
                    attackPosition,
                    EnemyTeamOf(ep)
                )
            )
        );
    // set start/end position
    define startPosition! = 
        attackPosition + 
            -enteringAngle *
            (strafReqAttackDistance / 2);
    define endPosition! = 
        attackPosition + 
            enteringAngle *
            (strafReqAttackDistance / 2);
    // move landRangePosition
    define landRangePosition = startPosition;
    ChaseVariableOverTime(
        landRangePosition, endPosition,
        strafReqAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);
    // create ballistic
    define landPosition;
    define ballisticEffect! = CreateBeamEffect(AllPlayers(), BeamType.BadBeam,
        endPosition - (enteringAngle * 200) + (Up() * 200), landPosition,
        Color.White, EffectRev.VisibleToPositionAndRadius);
    // blast animation
    for(define count = strafReqAttackTime / strafReqAttackInterval; count > 0; count --){
        // set landed point
        landPosition =
            landRangePosition + 
            RandomPosition(
                strafReqScatterRange,
                0,
                strafReqScatterRange
            );
        // play blast sound
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosionSound,
            Color.White,
            landPosition,
            MaxLength());
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.BadExplosion,
            Color.White,
            landPosition,
            strafReqDamageRange);
        // damage
        Damage(
            PlayersWithinRadius(
                landPosition, strafReqDamageRange,
                EnemyTeamOf(ep), RadiusLOS.Off
            ),
            ep, strafReqDamage
        );
        Wait(strafReqAttackInterval, WaitBehavior.IgnoreCondition);
        WaitUntilServerFree();
    }
    StopChasingVariable(landRangePosition);
    DestroyEffect(ballisticEffect);
}

void DoBeamSniper() playervar "DoBeamSniper"{
    define beamSniperDamage! = 200;
    define beamSniperDamageRange! = 3;

    // charging fin
    if(beamCharging){
        // reset charge
        beamCharging = false;
        // deal damage to target on ballstic
        define targets! = FilteredArray(
            PlayersInViewAngle(ep, EnemyTeamOf(ep), 2.5),
            IsAlive(ae)
        );
        Damage(targets, ep, beamSniperDamage);

        // deal damage to target in landed blast range
        targets = FilteredArray(
            PlayersWithinRadius(beamAimPos, beamSniperDamageRange, EnemyTeamOf(ep), RadiusLOS.Off),
            IsAlive(ae)
        );
        Damage(targets, ep, beamSniperDamage / 2);

        // set offset for gun sight
        define gunSightPos! = EyePosition() - Vector(0, 0.5, 0); 
        // set landing position for penetration
        define landPos! = EyePosition() +
            (FacingDirectionOf() * MaxLength());

        // play shot sound
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosionSound,
            Color.Purple, ep, MaxLength());
        // play shot fire
        PlayEffect(
            AllPlayers(), PlayEffect.BadExplosion,
            Color.Purple, gunSightPos + (FacingDirectionOf() * 1), 1.0);
        // play big blast with sound
        PlayContinuousBlast(
            Color.Purple,
            beamAimPos,
            beamSniperDamageRange,
            3,
            2);
        // show ballistics for aiming
        define beamEffect! = [];
        beamEffect[0] = CreateBeamEffect(AllPlayers(),
            BeamType.BadBeam, gunSightPos, beamAimPos,
            Color.Purple, EffectRev.VisibleToPositionAndRadius);
        // show ballistic for penetration
        beamEffect[1] =  CreateBeamEffect(AllPlayers(),
            BeamType.BadBeam, beamAimPos, landPos,
            Color.Purple, EffectRev.VisibleToPositionAndRadius);

        WaitPlayEffect();
        DestroyEffect(beamEffect[0]);
        DestroyEffect(beamEffect[1]); 
    }
    else{
        // reset charge
        beamCharging = false;
    }
}

void DoGunshipSupport() playervar "DoGunshipSupport" {
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // config value
    define gunSurAttackTime! = 5;
    define gunSurAttackInterval! = 0.3;
    define gunSurScatterRange! = 2.0;
    define gunSurDamageRange! = 3.0;
    define gunSurDamage! = 120;

    // create shell
    define deployPosition! = PositionOf(ep) + (VectorWithOutY(RandomDirection()) * 50) + (Up() * 100);
    define landPosition1!;
    define landPosition2!;
    define shellPosition1;
    define shellPosition2;
    define shellEffect1! = CreateEffect(AllPlayers(), Effect.Orb,
        Color.White,
        shellPosition1,
        1, EffectRev.PositionAndRadius
    );
    define shellEffect2! = CreateEffect(AllPlayers(), Effect.Orb,
        Color.White,
        shellPosition2,
        1, EffectRev.PositionAndRadius
    );
    // blast animation
    define isFirstShot! = true;
    for(define count = gunSurAttackTime / gunSurAttackInterval / 2; count > 0; count --){
        // set landRangePosition
        define landRangePosition = 
            BelowPosition(
                PositionOf(
                    FirstOf(
                        SortedArray(
                            AllLivingPlayers(EnemyTeamOf(ep)),
                            DistanceBetween(ep, ae)
                        )
                    )
                )
            );
        
        // set landed point
        landPosition1 =
            landRangePosition + 
            RandomPosition(
                gunSurScatterRange,
                0,
                gunSurScatterRange
            );
        // shell land animation
        shellPosition1 = deployPosition;
        ChaseVariableOverTime(
            shellPosition1,
            landPosition1,
            gunSurAttackInterval * 2,
            TimeChaseReevaluation.None
        );
        Wait(gunSurAttackInterval, WaitBehavior.IgnoreCondition);
        WaitUntilServerFree();

        // not first attack
        if(!isFirstShot){
            // blast animation2
            // play blast sound
            PlayEffect(
                AllPlayers(), PlayEffect.RingExplosionSound,
                Color .White,
                landPosition2,
                MaxLength());
            // play blast
            PlayEffect(
                AllPlayers(), PlayEffect.GoodExplosion,
                Color.Orange,
                landPosition2,
                gunSurDamageRange);
            // damage
            Damage(
                PlayersWithinRadius(
                    landPosition2, gunSurDamageRange,
                    EnemyTeamOf(ep), RadiusLOS.Off
                ),
                ep, gunSurDamage
            );
        }
        else{
            isFirstShot = false;
        }

        // land animation2
        // set landed point
        landPosition2 =
            landRangePosition + 
            RandomPosition(
                gunSurScatterRange,
                0,
                gunSurScatterRange
            );
        // shell land animation
        shellPosition2 = deployPosition;
        ChaseVariableOverTime(
            shellPosition2,
            landPosition2,
            gunSurAttackInterval * 2,
            TimeChaseReevaluation.None
        );
        Wait(gunSurAttackInterval, WaitBehavior.IgnoreCondition);
        WaitUntilServerFree();
        
        // blast animation1
        // play blast sound
        PlayEffect(
            AllPlayers(), PlayEffect.RingExplosionSound,
            Color .White,
            landPosition1,
            MaxLength());
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Orange,
            landPosition1,
            gunSurDamageRange);
        // damage
        Damage(
            PlayersWithinRadius(
                landPosition1, gunSurDamageRange,
                EnemyTeamOf(ep), RadiusLOS.Off
            ),
            ep, gunSurDamage
        );
    }

    Wait(gunSurAttackInterval, WaitBehavior.IgnoreCondition);

    // final blast animation2
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color .White,
        landPosition2,
        MaxLength());
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.GoodExplosion,
        Color.Orange,
        landPosition2,
        gunSurDamageRange);
    // damage
    Damage(
        PlayersWithinRadius(
            landPosition2, gunSurDamageRange,
            EnemyTeamOf(ep), RadiusLOS.Off
        ),
        ep, gunSurDamage
    );

    StopChasingVariable(shellPosition1);
    StopChasingVariable(shellPosition2);
    DestroyEffect(shellEffect1);
    DestroyEffect(shellEffect2);

    Wait(9, WaitBehavior.IgnoreCondition);
}


// TAG HeroMod/Trigger ----------
playervar define isUltUsed!;

// TAG TIME_PASSED
rule: "HeroModTrigger/TIME_PASSED"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.SAVIOR ||
        selectHeroMod == HeroModType.POWER_CHARGING ||
        selectHeroMod == HeroModType.ADRENALINE_RUSH ||
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL ||
        selectHeroMod == HeroModType.GRUDGE_LIGHTNING
    ) &&
    IsGameInProgress()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.TIME_PASSED, null);
    LoopIfConditionIsTrue();
}

// TAG STOP
rule: "HeroModTrigger/STOP"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.FIXED_TURRET
    ) &&
    !IsMoving()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.STOP, null);
}

// TAG MOVING
rule: "HeroModTrigger/MOVING"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.FIXED_TURRET
    ) &&
    IsMoving()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.MOVING, null);
}

// TAG LONG_PRESS_MELEE_KEY
rule: "HeroModTrigger/LONG_PRESS_MELEE_KEY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.BIRD_MAN ||
        selectHeroMod == HeroModType.HEALING_SYRINGE ||
        selectHeroMod == HeroModType.SAVIOR ||
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL ||
        selectHeroMod == HeroModType.GRUDGE_LIGHTNING ||
        selectHeroMod == HeroModType.ZOMBIE
    ) &&
    (
        (
            !IsDummyBot() &&
            IsButtonHeld(ep, Button.Melee)
        ) ||
        (
            IsDummyBot() &&
            IsButtonHeld(ep, Button.PrimaryFire) &&
            ProbabilityTrue(50)
        )
    )
){
    WaitLongPressConfirm();
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.LONG_PRESS_MELEE_KEY, null);
}

// TAG USING_PRIMARY
rule: "HeroModTrigger/USING_PRIMARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.BEAM_SNIPER
    ) &&
    IsFiringPrimary()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.USING_PRIMARY, null);
}

// TAG NOT_USING_PRIMARY
rule: "HeroModTrigger/NOT_USING_PRIMARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.BEAM_SNIPER
    ) &&
    !IsFiringPrimary()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.NOT_USING_PRIMARY, null);
}

// TAG USING_SECONDARY
rule: "HeroModTrigger/USING_SECONDARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.BEAM_SNIPER
    ) &&
    IsFiringSecondary()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.USING_SECONDARY, null);
}

// TAG NOT_USING_SECONDARY
rule: "HeroModTrigger/NOT_USING_SECONDARY"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.BEAM_SNIPER
    ) &&
    !IsFiringSecondary()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.NOT_USING_SECONDARY, null);
}

// TAG USING_ULT
rule: "HeroModTrigger/USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.SHOT_CALL ||
        selectHeroMod == HeroModType.SUPER_ULT ||
        selectHeroMod == HeroModType.STRAFING_REQUEST ||
        selectHeroMod == HeroModType.TITAN_FORM ||
        selectHeroMod == HeroModType.BEAM_SNIPER
    ) &&
    IsUsingUltimate()
){
    if(IsMechCalling(ep)){return;}
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.USING_ULT, null);
}

// TAG NOT_USING_ULT
rule: "HeroModTrigger/NOT_USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.SUPER_ULT
    ) &&
    !IsUsingUltimate()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.NOT_USING_ULT, null);
}

// TAG CHARGING_ULT
rule: "HeroModTrigger/CHARGING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.SHOT_CALL ||
        selectHeroMod == HeroModType.FAST_CHARGE ||
        selectHeroMod == HeroModType.SUPER_ULT ||
        selectHeroMod == HeroModType.TITAN_FORM ||
        selectHeroMod == HeroModType.BEAM_SNIPER ||
        selectHeroMod == HeroModType.STRAFING_REQUEST
    ) &&
    UltimateChargePercent(ep) < DefaultPercentage()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.CHARGING_ULT, null);
    LoopIfConditionIsTrue();
}

// TAG LOST_HEALTH
rule: "HeroModTrigger/LOST_HEALTH"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.SURVIVALIST ||
        selectHeroMod == HeroModType.GUNSHIP_SUPPORT
    ) &&
    NormalizedHealth() <= 0.5
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.LOST_HEALTH, null);
}

// TAG RECEIVE_DAMAGE
rule: "HeroModTrigger/RECEIVE_DAMAGE"
Event.OnDamageTaken
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.GRUDGE_LIGHTNING
    ) &&
    Attacker() != ep
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.RECEIVE_DAMAGE, EventDamage());
}

// TAG DEAL_HEAL
rule: "HeroModTrigger/DEAL_HEAL"
Event.OnHealingDealt
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL
    ) &&
    Healee() != ep
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEAL_HEAL, EventHealing());
}

// TAG KILL
rule: "HeroModTrigger/KILL"
Event.OnElimination
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.TECHNICIAN
    )
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.KILL, null);
}

// TAG DEATH
rule: "HeroModTrigger/DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.RAGE ||
        selectHeroMod == HeroModType.POWER_CHARGING ||
        selectHeroMod == HeroModType.ZOMBIE
    )
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEATH, null);
}

// TAG TEAMMATE_DEATH
rule: "HeroModTrigger/TEAMMATE_DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    ep != Attacker()
){
    WaitUntilServerFree();
    DoHeroModAction(selectHeroMod, HeroModTrigger.TEAMMATE_DEATH, null);
}