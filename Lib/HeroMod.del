import "Debug.del";

// TAG HeroMod ----------
playervar define selectHeroMod!;
playervar define heroModName!;
playervar define heroModDetail!;

enum HeroModType{
    INIT,
    NO_HERO_MOD,
    MEDIC,
    HIT_MAN,
    ASSASSIN,
    SPRINTER,
    BIRD_MAN,
    LIGHT_ARMOR,
    HEAVY_ARMOR,
    FIXED_TURRET,
    ADRENALINE_RUSH,
    POWER_CHARGING,
    HEALING_SYRINGE,
    SAVIOR,
    TECHNICIAN,
    SURVIVALIST,
    RAGE,
    SHOT_CALL,
    FAST_CHARGE,
    SUPER_ULT,
    STRAFING_REQUEST,
    TITAN_FORM,
    GRUDGE_FIRE_BALL,
    ZOMBIE,
    LAST
}

enum HeroModTrigger{
    ACTIVATE,
    DEACTIVATE,
    LONG_PRESS_MELEE_KEY,
    TIME_PASSED,
    STOP,
    MOVING,
    USING_ULT,
    NOT_USING_ULT,
    CHARGING_ULT,
    LOST_HEALTH,
    DEAL_HEAL,
    ELEMINATION,
    DEATH,
    TEAMMATE_DEATH
}

playervar define heroModOperationText!;

void UpdateHeroModAllText()"UpdateHeroModAllText"{
    DestroyHudText(heroModOperationText[0]);
    DestroyHudText(heroModOperationText[1]);
    DestroyInWorldText(heroModOperationText[2]);

    heroModOperationText[0] = CreateHudText(ep, null,
        (
            IsInSpawnRoom() &&
            !IsDummyBot()
        ) ? 
            <
                "You can change mod in respawn area anytime.\n\rPress <2>/<3> to select mod.\n\r●Your mod = <0> <1>",
                heroModName,
                <
                    "(<0>/<1>)", selectHeroMod, HeroModType.LAST - 1
                >,
                ButtonGuide(Button.Jump),
                ButtonGuide(Button.Crouch)>
                    :
            <
                "You can change mod in respawn area anytime.\n\r●Your mod = <0> <1>",
                heroModName,
                <
                    "(<0>/<1>)", selectHeroMod, HeroModType.LAST - 1
                >
            >,
        null, Location.Left, 101, null, Color.Blue, null, HudTextRev.String, Spectators.DefaultVisibility);

    heroModOperationText[1] = CreateHudText(ep, null,
        heroModDetail,
        null, Location.Left, 102, null, Color.SkyBlue, null, HudTextRev.StringAndColor, Spectators.DefaultVisibility);

    heroModOperationText[2] = CreateInWorldText(AllPlayers(),
        heroModName,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.SkyBlue, Spectators.DefaultVisibility);
}

rule: "HeroMod/updateHeroModAllTextOnEnterSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    IsInSpawnRoom()
){
    UpdateHeroModAllText();
}

rule: "HeroMod/updateHeroModAllTextOnExitSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    !IsInSpawnRoom()
){
    UpdateHeroModAllText();
}

rule: "HeroMod/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    HasSpawned()
){
    selectHeroMod = HeroModType.NO_HERO_MOD;

    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE, null);
    UpdateHeroModAllText();
}

rule: "HeroMod/switchHeroMod"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    (
        ( IsButtonHeld(ep, Button.Jump) && !IsButtonHeld(ep, Button.Crouch) ) ||
        ( !IsButtonHeld(ep, Button.Jump) && IsButtonHeld(ep, Button.Crouch) )
    )
){
    // do heromod deactivate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEACTIVATE, null);

    // switch mod
    selectHeroMod = 
        IsButtonHeld(ep, Button.Jump) ?
            selectHeroMod < HeroModType.LAST - 1 ? selectHeroMod + 1 : HeroModType.INIT + 1 :
            selectHeroMod > HeroModType.INIT + 1 ? selectHeroMod - 1 : HeroModType.LAST - 1 ;

    // do heromod activate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE, null);

    // update text
    UpdateHeroModAllText();
}

rule: "HeroMod/applyHeroModForBot"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    !IsAssemblingHeroes()
){
    selectHeroMod = RandomInteger(HeroModType.INIT + 1, HeroModType.LAST - 1);
    // do heromod activate action
    DoHeroModAction(selectHeroMod, HeroModTrigger.ACTIVATE, null);

    // update text
    UpdateHeroModAllText();
}

playervar define modStatus!;

void DoHeroModAction(define heromod!, define trigger!, define eventPayload!) playervar "DoHeroModAction"{
    // common trigger action
    if(
        trigger == HeroModTrigger.TEAMMATE_DEATH
    ){
        define playerArray! = FilteredArray(
            AllPlayers(playerTeam),
            (
                ae != ep &&
                ae.selectHeroMod == HeroModType.RAGE
            )
        );
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            SetUltimateCharge(player, UltimateChargePercent(player) + 30);
        }
    }
    // each heromod trigger action
    else if(
        selectHeroMod == HeroModType.NO_HERO_MOD
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "NO MOD";
            heroModDetail = 
                "No modified";
        }
    }
    else if(
        selectHeroMod == HeroModType.MEDIC
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "MEDIC";
            heroModDetail = 
                "+ deal heal 150%"+ NL +
                "- deal damage 50%";
            SetHealingDealt(ep, 150);
            SetDamageDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingDealt(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.HIT_MAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HIT MAN";
            heroModDetail = 
                "+ deal damage 150%"+ NL +
                "- receive heal 50%";
            SetDamageDealt(ep, 150);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.SPRINTER
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SPRINTER";
            heroModDetail = 
                "+ move speed 150%"+ NL +
                "- max health 50%";
            SetMoveSpeed(ep, 150);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.BIRD_MAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "BIRD MAN";
            heroModDetail = 
                "+ gravity 10%"+ NL +
                "- max health 50%";
            SetGravity(ep, 10);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetGravity(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.LIGHT_ARMOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "LIGHT ARMOR";
            heroModDetail = 
                "+ max health 150%"+ NL +
                "- move speed 80%"+ NL +
                "- receive heal 50%";
            SetMaxHealth(ep, 150);
            SetMoveSpeed(ep, 80);
            SetHealingReceived(ep, 50);
            Heal(ep, null, MaxValue());
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }

    else if(
        selectHeroMod == HeroModType.HEAVY_ARMOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HEAVY ARMOR";
            heroModDetail = 
                "+ max health 300%"+ NL +
                "- move speed 50%"+ NL +
                "- receive heal 25%";
            SetMaxHealth(ep, 300);
            SetMoveSpeed(ep, 50);
            SetHealingReceived(ep, 25);
            Heal(ep, null, MaxValue());
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.ASSASSIN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "ASSASSIN";
            heroModDetail = 
                "+ deal damage 130%"+ NL +
                "+ move speed 130%"+ NL +
                "- max Health 50%";
            SetDamageDealt(ep, 130);
            SetMoveSpeed(ep, 130);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.FIXED_TURRET
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "FIXED TURRET";
            heroModDetail = 
                "+ standing, deal damage 150%"+ NL +
                "+ standing, max health 200%"+ NL +
                "- moving, deal damage 30%";
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.STOP
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 150);
            SetMaxHealth(ep, 200);
        }
        else if(
            trigger == HeroModTrigger.MOVING
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 30);
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.TECHNICIAN
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "TECHNICIAN";
            heroModDetail = 
                "+ kill enemy, reset cooldown ability2"+ NL +
                "+ kill enemy, reset cooldown secondary fire ability"+ NL +
                "- reset re-trigger has 3 seconds interval"+ NL +
                "- deal damage 50%";
            SetDamageDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.ELEMINATION
        ){
            SetAbilityCooldown(ep, Button.Ability2, 0);
            if(AbilityCharge(ep, Button.Ability2) <= 0)
                SetAbilityCharge(ep, Button.Ability2, 1);

            SetAbilityCooldown(ep, Button.SecondaryFire, 0);
            if(AbilityCharge(ep, Button.SecondaryFire) <= 0)
                SetAbilityCharge(ep, Button.SecondaryFire, 1);

            Wait(3, WaitBehavior.IgnoreCondition);
        }
    }
    else if(
        selectHeroMod == HeroModType.SURVIVALIST
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SURVIVALIST";
            heroModDetail = 
                "+ lost 50% health, auto use ability1 and reset cooldown"+ NL +
                "+ lost 50% health, auto use jump ability and reset cooldown"+ NL +
                "- reset re-trigger has 1.5 seconds interval"+ NL +
                "- receive heal 50%";
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.LOST_HEALTH
        ){
            AbortIf(IsInSpawnRoom());

            SetAbilityCooldown(ep, Button.Ability1, 0);
            SetAbilityCooldown(ep, Button.Jump, 0);

            if(AbilityCharge(ep, Button.Ability1) <= 0) SetAbilityCharge(ep, Button.Ability1, 1);
            if(AbilityCharge(ep, Button.Jump) <= 0) SetAbilityCharge(ep, Button.Jump, 1);

            PressButton(ep, Button.Jump);
            Wait(0.1, WaitBehavior.IgnoreCondition);
            PressButton(ep, Button.Jump);

            if(!IsUsingAbility1()){
                PressButton(ep, Button.Ability1);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }

            WaitUntil(!IsUsingAbility1(), 10);
            SetAbilityCooldown(ep, Button.Ability1, 0);
            SetAbilityCooldown(ep, Button.Jump, 0);

            if(AbilityCharge(ep, Button.Jump) <= 0) SetAbilityCharge(ep, Button.Jump, 1);
            if(AbilityCharge(ep, Button.Ability1) <= 0) SetAbilityCharge(ep, Button.Ability1, 1);

            Wait(1.5, WaitBehavior.IgnoreCondition);
        }
    }
    else if(
        selectHeroMod == HeroModType.HEALING_SYRINGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "HEALING SYRINGE";
            heroModDetail = 
                "+ long press melee key without teammate, heal 200 health of own instantly"+ NL +
                "+ long press melee key to teammate, heal 500 health to teammate instantly"+ NL +
                "- in heal/deal health, consume 20% ult charge";
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            define consumeUltCharge! = 20;
            if(
                IsAlive() &&
                UltimateChargePercent() >= consumeUltCharge
            ){
                define target! = 
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                PlayersInViewAngle(ep, playerTeam, 45),
                                (
                                    IsAlive(ae) &&
                                    NormalizedHealth(ae) < 1.0 &&
                                    DistanceBetween(ep, ae) <= 3
                                )
                            ),
                            DistanceBetween(ep, ae)
                        )
                    );
                if(
                    target != null
                ){
                    Heal(target, ep, 500);
                    SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, target, 1.5);
                    PlayEffect([ep,target], PlayEffect.BuffExplosionSound, null, target, 100);
                    SmallMessage(ep, "Healed "+ target + HeroIconString(HeroOf(target)));
                    SmallMessage(target, "Healed by "+ ep + HeroIconString(HeroOf(ep)));
                }
                else if(NormalizedHealth(ep) < 1.0){
                    Heal(ep, ep, 200);
                    SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, ep, 1.5);
                    PlayEffect(ep, PlayEffect.BuffExplosionSound, null, ep, 100);
                }
            }
        }
    }

    else if(
        selectHeroMod == HeroModType.SAVIOR
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SAVIOR";
            heroModDetail = 
                "+ long press melee key to dead teammate, revive teammate"+ NL +
                "- in revive, consume 50% ult charge";
        }
        else if(
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define targets! = AllDeadPlayers(playerTeam);
            for(define index! = 0; index < CountOf(targets); index++){
                // play white effect
                PlayEffect(
                    ep, PlayEffect.GoodPickupEffect,
                    Color.White, targets[index], 1);
            }
            Wait(2, WaitBehavior.AbortWhenFalse);
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            define consumeUltCharge! = 50;
            if(
                IsAlive() &&
                UltimateChargePercent() >= consumeUltCharge
            ){
                define target! = 
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                PlayersInViewAngle(ep, playerTeam, 45),
                                (
                                    IsDead(ae) &&
                                    DistanceBetween(ep, ae) <= 3
                                )
                            ),
                            DistanceBetween(ep, ae)
                        )
                    );
                if(
                    target != null
                ){
                    Resurrect(target);
                    SetUltimateCharge(ep, UltimateChargePercent() - consumeUltCharge);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, target, 1.5);
                    PlayEffect([ep, target], PlayEffect.BuffExplosionSound, null, target, 100);
                    SmallMessage(ep, "Revived "+ target + HeroIconString(HeroOf(target)));
                    SmallMessage(target, "Revived by "+ ep + HeroIconString(HeroOf(ep)));
                }
            }
        }
    }
    else if(
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            heroModName = "GRUDGE FIRE BALL";
            heroModDetail = 
                "+ heal teammate, charging grudge power (now "+ modStatus +"% / 500%)"+ NL +
                "+ long press melee key, release grudge power as fire ball and blast"+ NL +
                "- receive heal 50%";

            if(
                trigger == HeroModTrigger.ACTIVATE
            ){
                SetHealingReceived(ep, 50);
            }
            else if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEAL_HEAL
        ){
            define maxPower! = 500;
            AbortIf(maxPower <= modStatus);

            define gainPower! = (eventPayload * 1.0);
            if(modStatus + gainPower > maxPower){
                modStatus = maxPower;
            }
            else{
                modStatus = RoundToInteger(modStatus + gainPower, Rounding.Nearest);
            }
        }
        else if(
            trigger == HeroModTrigger.LONG_PRESS_MELEE_KEY
        ){
            define ballSize! = modStatus / 200;
            define ballSpeed! = 30 - (modStatus / 50);
            define ballDamage! = modStatus;
            define ballBlastRange! = ballSize * 5.0;
            define ballBlastCount! = ballSize * 2 <= 5 ? ballSize * 2 : 5;
            modStatus = 0;

            define ballPos = EyePosition();
            define aimPos! = AimingPositionWithLimit(40);

            define effects = CreateEffect(AllPlayers(), Effect.Sphere, Color.Orange,
                ballPos, ballSize, EffectRev.PositionAndRadius);
            ChaseVariableAtRate(
                ballPos, aimPos, ballSpeed,
                RateChaseReevaluation.DestinationAndRate);
            PlayEffect(ep, PlayEffect.DebuffImpactSound, null, ep, 75);

            while(
                // not
                !(
                    // hit surface
                    DistanceBetween(ballPos, aimPos) <= (ballSize * 0.5) ||
                    // hit enemy
                    DistanceBetween(ballPos, ClosestPlayerTo(ballPos, enemyTeam)) <= (ballSize < 1 ? 1 : ballSize)

                )
            ){
                PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Orange, ballPos, ballSize * 1.5);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            StopChasingVariable(ballPos);
            DestroyEffect(effects);
            
            define targets! = PlayersWithinRadius(ballPos, ballBlastRange, enemyTeam, RadiusLOS.Off);
            ApplyBlastImpulse(targets, ballPos, ballBlastRange);
            Damage(targets, ep, ballDamage);
            PlayContinuousBlast(Color.Orange, ballPos, ballBlastRange, ballBlastCount, ballBlastCount);
        }
    }
    else if(
        selectHeroMod == HeroModType.ADRENALINE_RUSH
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define status! = IsAlive() ? 
                DefaultPercentage() + RoundToInteger(((1 - NormalizedHealth()) * 100)) :
                100;
            heroModName = "ADRENALINE RUSH";
            heroModDetail = 
                "+ more lost health, more deal damage (now "+ status +"% / 200%)"+ NL +
                "+ more lost health, more move speed (now "+ status +"% / 200%)"+ NL +
                "- receive heal 50%";

            if(
                trigger == HeroModTrigger.ACTIVATE
            ){
                SetHealingReceived(ep, 50);
            }
            else if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                SetDamageDealt(ep, status);
                SetMoveSpeed(ep, status);             
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
        }
    }
    else if(
        selectHeroMod == HeroModType.POWER_CHARGING
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE ||
            trigger == HeroModTrigger.TIME_PASSED
        ){
            define status! = DefaultPercentage() + RoundToInteger((UltimateChargePercent() * 0.5));
            heroModName = "POWER CHARGING";
            heroModDetail = 
                "+ more ult charges, more deal damage (now "+ status +"% / 150%)"+ NL +
                "+ more ult charges, more move speed (now "+ status +"% / 150%)"+ NL +
                "- in dead, lose all ult charge";

            if(
                trigger == HeroModTrigger.TIME_PASSED
            ){
                SetDamageDealt(ep, status);
                SetMoveSpeed(ep, status);
                Wait(1, WaitBehavior.AbortWhenFalse);
            }
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            SetUltimateCharge(ep, 0);
        }
    }
    else if(
        selectHeroMod == HeroModType.RAGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "RAGE";
            heroModDetail = 
                "+ dead teammate, gain 30% ult charge"+ NL +
                "- in dead, lose all ult charge";
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            SetUltimateCharge(ep, 0);
        }
    }
    else if(
        selectHeroMod == HeroModType.SHOT_CALL
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SHOT CALL";
            heroModDetail = 
                "+ use ult, all teammates gain ult full charge"+ NL +
                "- in every 3 second, lose 1% ult charge";
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            define playerArray! = FilteredArray(
                AllPlayers(playerTeam),
                (
                    ae != ep &&
                    ae.selectHeroMod != HeroModType.SHOT_CALL
                )
            );
            for(define index! = 0; index < CountOf(playerArray); index++){
                define player! = playerArray[index];
                SetUltimateCharge(player, 100);
                SmallMessage(player, "gained ult full charge by "+ ep + HeroIconString(HeroOf()));
                PlayEffect(player, PlayEffect.BuffExplosionSound, null, player, 100);
                
                // bot use ult bt syc attack
                if(
                    IsDummyBot(player) &&
                    ProbabilityTrue(50)
                ){
                    PressButton(player, Button.Ultimate);
                    PressButton(player, Button.PrimaryFire);
                }
            }
        }
    }
    else if(
        selectHeroMod == HeroModType.FAST_CHARGE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "FAST CHARGE";
            heroModDetail = 
                "+ every 1 second, gain 3% ult charge"+ NL +
                "- max health 50%"+ NL +
                "- deal damage 50%"+ NL +
                "- deal heal 50%";
            SetMaxHealth(ep, 50);
            SetDamageDealt(ep, 50);
            SetHealingDealt(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(1, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() + 3);
        }
    }
    else if(
        selectHeroMod == HeroModType.SUPER_ULT
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "SUPER ULT";
            heroModDetail = 
                "+ ult end, more gain ult full charge by 50% probility"+ NL +
                "+ ult using, invincible status"+ NL +
                "+ ult using, deal damage 400%"+ NL +
                "+ ult using, deal heal 400%"+ NL +
                "+ ult using, move speed 200%"+ NL +
                "+ ult using, gravity 25%"+ NL +
                "- every 3 second, lose 1% ult charge ";
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE ||
            trigger == HeroModTrigger.NOT_USING_ULT
        ){
            ClearStatus(ep, Status.PhasedOut);
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetGravity(ep, DefaultPercentage());

            if(
                trigger == HeroModTrigger.NOT_USING_ULT &&
                isUltUsed
            ){
                isUltUsed = false;
                if(
                    ProbabilityTrue(50)
                ){
                    SetUltimateCharge(ep, 100);
                }
            }
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(UltimateChargePercent() < DefaultPercentage()){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            isUltUsed = true;
            
            SetStatus(ep, null, Status.PhasedOut, MaxValue());
            SetDamageDealt(ep, 400);
            SetHealingDealt(ep, 400);
            SetMoveSpeed(ep, 200);
            SetGravity(ep, 25);
        }
    }
    else if(
        selectHeroMod == HeroModType.TITAN_FORM
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "TITAN FORM";
            heroModDetail = 
                "+ use ult, transform to titan and rampage while 15 second"+ NL +
                "+ titan has 400% deal damage and ability fast charge "+ NL +
                "- every 3 second, lose 1% ult charge ";
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(UltimateChargePercent() < DefaultPercentage()){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            CancelPrimaryAction();
            define tianScale = 2.5;
            define prevHero = HeroOf();
            ForcePlayerHero(ep, Hero.Reinhardt);
            SetMaxHealth(ep, 1000);
            SetDamageDealt(ep, 400);
            Wait(0.1, WaitBehavior.IgnoreCondition);
            Heal(ep, null, MaxValue());
            for(define scale = 1; scale < tianScale; scale += 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }

            for(define remainSecond = 15; remainSecond > 0; remainSecond--){
                if(IsDead()){
                    break;
                }
                if(UltimateChargePercent() < DefaultPercentage()){
                    SetUltimateCharge(ep, UltimateChargePercent() + 22);
                }
                SetAbilityCooldown(ep, Button.Ability1, 0);
                SetAbilityCooldown(ep, Button.Ability2, 0);
                Wait(1, WaitBehavior.IgnoreCondition);
            }

            for(define scale = tianScale; scale > 1.0; scale -= 0.1){
                StartScalingPlayer(ep, scale);
                Wait(0.1, WaitBehavior.IgnoreCondition);
            }
            SetUltimateCharge(ep, 0);
            SetMaxHealth(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
            ForcePlayerHero(ep, prevHero);
            StopForcingHero(ep);
        }
    }
    else if(
        selectHeroMod == HeroModType.ZOMBIE
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "ZOMBIE";
            heroModDetail = 
                "+ dead, auto revive after 5 seconds"+ NL +
                "- in over time, can not auto revive"+ NL +
                "- max health 50%" + NL +
                "- receive heal 50%";
            SetMaxHealth(ep, 50);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == HeroModTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == HeroModTrigger.DEATH
        ){
            if(
                !IsOverTime()
            ){
                Wait(5, WaitBehavior.AbortWhenFalse);
                if(IsDeadByAbyss()){
                    Teleport(ep, NearestWalkablePosition(ep));
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                }
                Resurrect(ep);
            }
        }
    }
    else if(
        selectHeroMod == HeroModType.STRAFING_REQUEST
    ){
        if(
            trigger == HeroModTrigger.ACTIVATE
        ){
            heroModName = "STRAFING REQUEST";
            heroModDetail = 
                "+ use ult, strafing fire support incoming to aim position"+ NL +
                "- every 3 second, lose 1% ult charge ";
        }
        else if(
            trigger == HeroModTrigger.CHARGING_ULT
        ){
            Wait(3, WaitBehavior.AbortWhenFalse);
            if(UltimateChargePercent() < DefaultPercentage()){
                SetUltimateCharge(ep, UltimateChargePercent() - 1);
            }
        }
        else if(
            trigger == HeroModTrigger.USING_ULT
        ){
            // set attack point from aimming position
            define attackPosition! = BelowPosition(AimingPositionWithLimit(40));

            Wait(1.5, WaitBehavior.IgnoreCondition);

            // config value
            define strafReqAttackDistance! = 40;
            define strafReqAttackTime! = 2;
            define strafReqAttackInterval = 0.05;
            define strafReqScatterRange! = 3;
            define strafReqDamageRange! = 5;
            define strafReqDamage! = 180;

            define enteringAngle! = 
                VectorWithOutY(
                    DirectionTowards(
                        attackPosition,
                        ClosestPlayerTo(
                            attackPosition,
                            enemyTeam
                        )
                    )
                );
            // set start/end position
            define startPosition! = 
                attackPosition + 
                    -enteringAngle *
                    (strafReqAttackDistance / 2);
            define endPosition! = 
                attackPosition + 
                    enteringAngle *
                    (strafReqAttackDistance / 2);
            // create Ballistic
            define landPosition;
            define ballisticEffect! = CreateBeamEffect(AllPlayers(), BeamType.BadBeam,
                endPosition - (enteringAngle * 200) + (Up() * 200), landPosition,
                Color.White, EffectRev.VisibleToPositionAndRadius);
            // move landRangePosition
            define landRangePosition = startPosition;
            ChaseVariableOverTime(
                landRangePosition, endPosition,
                strafReqAttackTime,
                TimeChaseReevaluation.DestinationAndDuration);
            // blast animation
            for(define count = strafReqAttackTime / strafReqAttackInterval; count > 0; count --){
                // set landed point
                landPosition =
                    landRangePosition + 
                    RandomPosition(
                        strafReqScatterRange / 1.5,
                        0,
                        strafReqScatterRange / 1.5
                    );
                // play blast sound
                PlayEffect(
                    AllPlayers(), PlayEffect.RingExplosionSound,
                    Color.White,
                    landPosition,
                    MaxLength());
                // play blast
                PlayEffect(
                    AllPlayers(), PlayEffect.BadExplosion,
                    Color.White,
                    landPosition,
                    strafReqDamageRange);
                // damage
                Damage(
                    PlayersWithinRadius(
                        landPosition, strafReqDamageRange,
                        enemyTeam, RadiusLOS.Off
                    ),
                    ep, strafReqDamage
                );
                Wait(strafReqAttackInterval, WaitBehavior.IgnoreCondition);
            }
            StopChasingVariable(landRangePosition);
            DestroyEffect(ballisticEffect);
        }
    }
}

// heromod trigger list ---------------------------------
playervar define isUltUsed!;

// common trigger action
rule: "HeroModTrigger/TEAMMATE_DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    ep != Attacker()
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.TEAMMATE_DEATH, null);
}

// each heromod trigger action
rule: "HeroModTrigger/TIME_PASSED"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.SAVIOR ||
        selectHeroMod == HeroModType.POWER_CHARGING ||
        selectHeroMod == HeroModType.ADRENALINE_RUSH ||
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.TIME_PASSED, null);
    LoopIfConditionIsTrue();
}

rule: "HeroModTrigger/STOP"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsMoving() &&
    (
        selectHeroMod == HeroModType.FIXED_TURRET
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.STOP, null);
}

rule: "HeroModTrigger/MOVING"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsMoving() &&
    (
        selectHeroMod == HeroModType.FIXED_TURRET
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.MOVING, null);
}

rule: "HeroModTrigger/MELEE"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    (
        (!IsDummyBot() && IsMeleeing()) ||
        (IsDummyBot() && IsFiringPrimary())
    ) &&
    (
        selectHeroMod == HeroModType.HEALING_SYRINGE ||
        selectHeroMod == HeroModType.SAVIOR ||
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL
    )
){
    WaitLongPressConfirm();
    DoHeroModAction(selectHeroMod, HeroModTrigger.LONG_PRESS_MELEE_KEY, null);
}

rule: "HeroModTrigger/USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsUsingUltimate() &&
    (
        selectHeroMod == HeroModType.SHOT_CALL ||
        selectHeroMod == HeroModType.SUPER_ULT ||
        selectHeroMod == HeroModType.STRAFING_REQUEST ||
        selectHeroMod == HeroModType.TITAN_FORM
    ) 
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.USING_ULT, null);
}

rule: "HeroModTrigger/NOT_USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsUsingUltimate() &&
    (
        selectHeroMod == HeroModType.SUPER_ULT
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.NOT_USING_ULT, null);
}

rule: "HeroModTrigger/CHARGING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    UltimateChargePercent(ep) < DefaultPercentage() &&
    (
        selectHeroMod == HeroModType.SHOT_CALL ||
        selectHeroMod == HeroModType.FAST_CHARGE ||
        selectHeroMod == HeroModType.SUPER_ULT ||
        selectHeroMod == HeroModType.TITAN_FORM ||
        selectHeroMod == HeroModType.STRAFING_REQUEST
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.CHARGING_ULT, null);
    LoopIfConditionIsTrue();
}

rule: "HeroModTrigger/LOST_HEALTH"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    NormalizedHealth() <= 0.5 &&
    (
        selectHeroMod == HeroModType.SURVIVALIST
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.LOST_HEALTH, null);
}

rule: "HeroModTrigger/DEAL_HEAL"
Event.OnHealingDealt
if(
    TeamOf() == playerTeam &&
    Healee() != ep &&
    (
        selectHeroMod == HeroModType.GRUDGE_FIRE_BALL
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEAL_HEAL, EventHealing());
}

rule: "HeroModTrigger/ELEMINATION"
Event.OnElimination
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.TECHNICIAN
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.ELEMINATION, null);
}

rule: "HeroModTrigger/DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    (
        selectHeroMod == HeroModType.RAGE ||
        selectHeroMod == HeroModType.POWER_CHARGING ||
        selectHeroMod == HeroModType.ZOMBIE
    )
){
    DoHeroModAction(selectHeroMod, HeroModTrigger.DEATH, null);
}

