// Function enable team
// Set team in import destination parent file
globalvar define DamageText_enableTeam!;
define DamageText_isEnableTeam:
    DamageText_enableTeam == TeamOf() ||
    DamageText_enableTeam == Team.All;

define minDisplayTime: 0.3;
define maxDisplayTime: 10;
playervar define damageTextEntity!;
playervar define damageTextDisplayTime!;
playervar define prevDamage!;

rule: "DamageFloatText/popup"
Event.OnDamageTaken
if(
    DamageText_isEnableTeam &&
    EventDamage() >= 1
)
{
    // less damage than before
    if(prevDamage > EventDamage()){
        // wait update text according to current display time because max damage
        Wait(damageTextDisplayTime * 0.1, WaitBehavior.RestartWhenTrue);
    }
    // same damage as before
    else if(prevDamage == EventDamage()){
        // reduces update frequently for good visibility
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }
    // more damage than before
    else{
        // update instantly with no wait
    }
    // hide current text
    DestroyInWorldText(damageTextEntity);
    // save current damage as previous damage
    prevDamage = EventDamage();
    // set position 
    define damageTextPosition = EyePosition(EventPlayer());
    // set size
    define damageTextSize! = 1 + (EventDamage() * 0.01);
    // set dislay time
    damageTextDisplayTime = EventDamage() * 0.01;
    // tune display time
    damageTextDisplayTime = Max(damageTextDisplayTime, minDisplayTime);
    damageTextDisplayTime = Min(damageTextDisplayTime, maxDisplayTime);
    // set color
    define damageTextColor!;
    if(200 <= EventDamage()){
        // show red in 200 damage over
        damageTextColor = Color.Red;      
    }
    else if(100 <= EventDamage()){
        // show orange in 100 damage over
        damageTextColor = Color.Orange;      
    }
    else if(50 <= EventDamage()){
        // show yellow in 50 damage over
        damageTextColor = Color.Yellow;    
    }
    else{
        // show white in 50 damage under
        damageTextColor = Color.White;   
    }
    // show text
    CreateInWorldText(AllPlayers(), RoundToInteger(EventDamage()), damageTextPosition,
        damageTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        damageTextColor, Spectators.DefaultVisibility);
    damageTextEntity = LastTextID();
    // start text popup
    UpdateEveryFrame(damageTextPosition);
    ChaseVariableAtRate(damageTextPosition, damageTextPosition + (Up() * 10),
        1.0, RateChaseReevaluation.DestinationAndRate);
    // wait hide text according to damage amount
    Wait(damageTextDisplayTime, WaitBehavior.RestartWhenTrue);
    DestroyInWorldText(damageTextEntity);
}