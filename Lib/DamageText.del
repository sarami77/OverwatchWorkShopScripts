import "Utility.del";

// Function enable team
// Set team in import destination parent file

// TAG public property
globalvar define damageTextEnableTeam;

define damageTextIsEnableTeam:
    damageTextEnableTeam == TeamOf() ||
    damageTextEnableTeam == Team.All;

define maxScaleDamage: 1000;
playervar define damageTextEntity;
playervar define damageTextPosition;
playervar define damageTextDisplayTime;
playervar define sumDamage;

rule: "DamageFloatText/show"
Event.OnDamageTaken
if(
    damageTextIsEnableTeam &&
    EventDamage() >= 1
){
    // add damage
    sumDamage += EventDamage();
    // set text size
    define damageTextSize! = 1 + (3 * (sumDamage / maxScaleDamage));
    damageTextSize = Min(damageTextSize, 4);
    // set text color
    define damageTextColor!;
    if(maxScaleDamage * 1 <= sumDamage){
        damageTextColor = Color.Purple;      
    }
    else if(maxScaleDamage * 0.75 <= sumDamage){
        damageTextColor = Color.Red;      
    }
    else if(maxScaleDamage * 0.5 <= sumDamage){
        damageTextColor = Color.Orange;      
    }
    else if(maxScaleDamage * 0.25 <= sumDamage){
        damageTextColor = Color.Yellow;    
    }
    else{
        damageTextColor = Color.White;   
    }
    // set text position 
    damageTextPosition = EyePosition(EventPlayer()) + PositionOffset();
    // set text display time according damage
    damageTextDisplayTime = 0.5 + (sumDamage / maxScaleDamage);
    damageTextDisplayTime = Min(damageTextDisplayTime, 1);
    // show text
    DestroyInWorldText(damageTextEntity);
    damageTextEntity = CreateInWorldText(
        AllPlayers(), RoundToInteger(sumDamage), damageTextPosition, damageTextSize,
        Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionStringAndColor,
        damageTextColor, Spectators.DefaultVisibility);
}

rule: "DamageFloatText/hide"
Event.OnDamageTaken
if(
    damageTextIsEnableTeam &&
    sumDamage > 0
){
    // wait for visual recognition
    Wait(damageTextDisplayTime, WaitBehavior.RestartWhenTrue);
    // hide text
    DestroyInWorldText(damageTextEntity);
    // claer sum damage
    sumDamage = 0;
}