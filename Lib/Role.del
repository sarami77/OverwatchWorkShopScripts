import "Debug.del";

// TAG Role ----------
playervar define selectRole!;
playervar define roleName!;
playervar define roleDetail!;

enum RoleType{
    INIT = 0,
    NO_ROLE,
    MEDIC,
    KILLER,
    ASSASSIN,
    SPRINTER,
    BIRD_MAN,
    HEAVY_ARMOR,
    FIXED_TURRET,
    COMBAT_TECHNIC,
    DANGER_AVOIDANCE,
    SAVIOR,
    RAGE,
    SHOT_CALL,
    FAST_CHARGE,
    SUPER_ULT,
    ZOMBIE,
    LAST
}

enum RoleTrigger{
    ACTIVATE,
    DEACTIVATE,
    STOP,
    MOVING,
    MELEE,
    USING_ULT,
    NOT_USING_ULT,
    CHARGING_ULT,
    LOST_HEALTH,
    ELEMINATION,
    DEATH,
    TEAMMATE_DEATH
}

playervar define roleOperationText!;

void UpdateRoleOperationText()"UpdateRoleOperationText"{
    DestroyHudText(roleOperationText[0]);
    DestroyHudText(roleOperationText[1]);
    DestroyInWorldText(roleOperationText[2]);

    roleOperationText = [];

        roleOperationText[0] = CreateHudText(ep, null,
            (
                IsInSpawnRoom() &&
                !IsDummyBot()
            ) ? 
                <"You can change mod while in spawn room.\n\rPress melee key <0> to select mod.\n\rYour mod = <1>", ButtonGuide(Button.Melee), roleName> :
                <"Your mod = <0>", roleName>,
            null, Location.Left, 101, null, Color.SkyBlue, null, HudTextRev.String, Spectators.VisibleNever);

        roleOperationText[1] = CreateHudText(ep, null,
            roleDetail,
            null, Location.Left, 102, null, Color.SkyBlue, null, HudTextRev.String, Spectators.VisibleNever);

    roleOperationText[2] = CreateInWorldText(AllPlayers(playerTeam),
        roleName,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.SkyBlue, Spectators.VisibleAlways);
}

rule: "Role/updateRoleOperationTextOnEnterSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    IsInSpawnRoom()
){
    UpdateRoleOperationText();
}

rule: "Role/updateRoleOperationTextOnExitSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    !IsInSpawnRoom()
){
    UpdateRoleOperationText();
}

rule: "Role/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    HasSpawned()
){
    selectRole = RoleType.NO_ROLE;

    DoRoleAction(selectRole, RoleTrigger.ACTIVATE);
    UpdateRoleOperationText();
}

rule: "Role/switchRole"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsDummyBot() &&
    IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Melee)
){
    // do role deactivate action
    DoRoleAction(selectRole, RoleTrigger.DEACTIVATE);

    selectRole = selectRole < RoleType.LAST - 1 ? selectRole + 1 : RoleType.NO_ROLE;

    // do role activate action
    DoRoleAction(selectRole, RoleTrigger.ACTIVATE);

    // update text
    UpdateRoleOperationText();
}

define NL: "\n\r";

void DoRoleAction(define role!, define trigger!)"DoRoleAction"{
    // common trigger action
    if(
        trigger == RoleTrigger.TEAMMATE_DEATH
    ){
        define playerArray! = FilteredArray(
            AllPlayers(playerTeam),
            (
                ae != ep &&
                ae.selectRole == RoleType.RAGE
            )
        );
        for(define index! = 0; index < CountOf(playerArray); index++){
            define player! = playerArray[index];
            SetUltimateCharge(player, UltimateChargePercent(player) + 30);
        }
    }
    // each role trigger action
    else if(
        selectRole == RoleType.NO_ROLE
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "NO MOD";
            roleDetail = 
                "No modified";
        }
    }
    else if(
        selectRole == RoleType.MEDIC
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "MEDIC";
            roleDetail = 
                "+ deal heal 150%"+ NL +
                "- deal damage 50%";
            SetHealingDealt(ep, 150);
            SetDamageDealt(ep, 50);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetHealingDealt(ep, DefaultPercentage());
            SetDamageDealt(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.KILLER
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "KILLER";
            roleDetail = 
                "+ deal damage 150%"+ NL +
                "- receive heal 50%";
            SetDamageDealt(ep, 150);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.SPRINTER
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "SPRINTER";
            roleDetail = 
                "+ move speed 150%"+ NL +
                "- max health 50%";
            SetMoveSpeed(ep, 150);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.BIRD_MAN
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "BIRD MAN";
            roleDetail = 
                "+ gravity 10%"+ NL +
                "- max health 50%";
            SetGravity(ep, 10);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetGravity(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.HEAVY_ARMOR
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "HEAVY ARMOR";
            roleDetail = 
                "+ max health 300%"+ NL +
                "- move speed 50%"+ NL +
                "- receive heal 20%";
            SetMaxHealth(ep, 300);
            SetMoveSpeed(ep, 50);
            SetHealingReceived(ep, 20);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.ASSASSIN
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "ASSASSIN";
            roleDetail = 
                "+ deal damage 130%"+ NL +
                "+ move speed 130%"+ NL +
                "- max Health 50%";
            SetDamageDealt(ep, 130);
            SetMoveSpeed(ep, 130);
            SetMaxHealth(ep, 50);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.FIXED_TURRET
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "FIXED TURRET";
            roleDetail = 
                "+ in stop, deal damage 150%"+ NL +
                "+ in stop, max health 200%"+ NL +
                "- in moving, deal damage 30%";
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
        else if(
            trigger == RoleTrigger.STOP
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 150);
            SetMaxHealth(ep, 200);
        }
        else if(
            trigger == RoleTrigger.MOVING
        ){
            Wait(0.2, WaitBehavior.AbortWhenFalse);
            SetDamageDealt(ep, 30);
            SetMaxHealth(ep, DefaultPercentage());
        }
    }
    else if(
        selectRole == RoleType.COMBAT_TECHNIC
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "COMBAT TECHNIC";
            roleDetail = 
                "+ in kill enemy, reset cooldown ability2 & secondary fire ability"+ NL +
                "- deal damage 70%";
            SetDamageDealt(ep, 70);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetDamageDealt(ep, DefaultPercentage());
        }
        else if(
            trigger == RoleTrigger.ELEMINATION
        ){
            SetAbilityCooldown(ep, Button.Ability2, 0);
            if(AbilityCharge(ep, Button.Ability2) <= 0)
                SetAbilityCharge(ep, Button.Ability2, 1);

            SetAbilityCooldown(ep, Button.SecondaryFire, 0);
            if(AbilityCharge(ep, Button.SecondaryFire) <= 0)
                SetAbilityCharge(ep, Button.SecondaryFire, 1);
        }
    }
    else if(
        selectRole == RoleType.DANGER_AVOIDANCE
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "DANGER AVOIDANCE";
            roleDetail = 
                "+ in lost 50% health, reset cooldown ability1 & jump ability"+ NL +
                "- receive heal 70%";
            SetHealingReceived(ep, 70);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == RoleTrigger.LOST_HEALTH
        ){
            SetAbilityCooldown(ep, Button.Ability1, 0);
            if(AbilityCharge(ep, Button.Ability1) <= 0)
                SetAbilityCharge(ep, Button.Ability1, 1);

            SetAbilityCooldown(ep, Button.Jump, 0);
            if(AbilityCharge(ep, Button.Jump) <= 0)
                SetAbilityCharge(ep, Button.Jump, 1);
        }
    }
    else if(
        selectRole == RoleType.SAVIOR
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "SAVIOR";
            roleDetail = 
                "+ in use melee, revive near dead teammate"+ NL +
                "- in revive, consume 50% ult charge";
        }
        else if(
            trigger == RoleTrigger.MELEE
        ){
            if(
                IsAlive()
            ){
                define player! = 
                    FirstOf(
                        SortedArray(
                            FilteredArray(
                                PlayersInViewAngle(
                                    ep,
                                    TeamOf(),
                                    90
                                ),
                                (
                                    IsDead(ae) &&
                                    DistanceBetween(ep, ae) <= 5
                                )
                            ),
                            DistanceBetween(ep, ae)
                        )
                    );
                if(
                    player != null
                ){
                    Resurrect(player);
                    SmallMessage(ep, "Revived "+ player);
                    SmallMessage(player, "Revived by"+ ep);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.GoodExplosion, Color.Yellow, player, 1.5);
                    PlayEffect(AllPlayers(playerTeam), PlayEffect.BuffExplosionSound, null, player, 100);
                    SetUltimateCharge(ep, UltimateChargePercent() - 50);
                }
            }
        }
    }
    else if(
        selectRole == RoleType.RAGE
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "RAGE";
            roleDetail = 
                "+ in dead teammate, gain 30% ult charge"+ NL +
                "- in every 4 second, lose 1% ult charge";
        }
        else if(
            trigger == RoleTrigger.CHARGING_ULT
        ){
            Wait(4, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        selectRole == RoleType.SHOT_CALL
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "SHOT CALL";
            roleDetail = 
                "+ in use own ult, all teammates gain ult full charge"+ NL +
                "- in every 4 second, lose 1% ult charge";
        }
        else if(
            trigger == RoleTrigger.USING_ULT
        ){
            define playerArray! = FilteredArray(
                AllPlayers(playerTeam),
                (
                    ae != ep &&
                    ae.selectRole != RoleType.SHOT_CALL
                )
            );
            for(define index! = 0; index < CountOf(playerArray); index++){
                define player! = playerArray[index];
                SetUltimateCharge(player, 100);
                SmallMessage(player, "gained ult full charge by "+ ep);

                // bot use ult bt syc attack
                if(
                    IsDummyBot(player) &&
                    ProbabilityTrue(50)
                ){
                    PressButton(player, Button.Ultimate);
                    PressButton(player, Button.PrimaryFire);
                }
            }
        }
        else if(
            trigger == RoleTrigger.CHARGING_ULT
        ){
            Wait(4, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        selectRole == RoleType.FAST_CHARGE
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "FAST CHARGE";
            roleDetail = 
                "+ in every 1 second, gain 3% ult charge"+ NL +
                "- receive heal 50%"+ NL +
                "- deal heal 50%"+ NL +
                "- max health 70%";
            SetHealingReceived(ep, 50);
            SetHealingDealt(ep, 50);
            SetMaxHealth(ep, 70);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetHealingReceived(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMaxHealth(ep, DefaultPercentage());
        }
        else if(
            trigger == RoleTrigger.CHARGING_ULT
        ){
            Wait(1, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() + 3);
        }
    }
    else if(
        selectRole == RoleType.SUPER_ULT
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "SUPER ULT";
            roleDetail = 
                "+ in using ult, deal damage 300%"+ NL +
                "+ in using ult, deal heal 200%"+ NL +
                "+ in using ult, move speed 200%"+ NL +
                "+ in using ult, gravity 25%"+ NL +
                "+ in using ult, unstopable stateus"+ NL +
                "- in every 4 second, lose 1% ult charge ";
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE ||
            trigger == RoleTrigger.NOT_USING_ULT
        ){
            SetDamageDealt(ep, DefaultPercentage());
            SetHealingDealt(ep, DefaultPercentage());
            SetMoveSpeed(ep, DefaultPercentage());
            SetGravity(ep, DefaultPercentage());
            ClearStatus(ep, Status.PhasedOut);
        }
        else if(
            trigger == RoleTrigger.USING_ULT
        ){
            SetDamageDealt(ep, 300);
            SetHealingDealt(ep, 200);
            SetMoveSpeed(ep, 200);
            SetGravity(ep, 25);
            SetStatus(ep, null, Status.PhasedOut, MaxValue());
        }
        else if(
            trigger == RoleTrigger.CHARGING_ULT
        ){
            Wait(4, WaitBehavior.AbortWhenFalse);
            SetUltimateCharge(ep, UltimateChargePercent() - 1);
        }
    }
    else if(
        selectRole == RoleType.ZOMBIE
    ){
        if(
            trigger == RoleTrigger.ACTIVATE
        ){
            roleName = "ZOMBIE";
            roleDetail = 
                "+ in dead & not over time, revive after 5 seconds"+ NL +
                "- max health 50%" + NL +
                "- receive heal 50%";
            SetMaxHealth(ep, 50);
            SetHealingReceived(ep, 50);
        }
        else if(
            trigger == RoleTrigger.DEACTIVATE
        ){
            SetMaxHealth(ep, DefaultPercentage());
            SetHealingReceived(ep, DefaultPercentage());
        }
        else if(
            trigger == RoleTrigger.DEATH
        ){
            if(
                !IsOverTime()
            ){
                Wait(5, WaitBehavior.AbortWhenFalse);
                if(IsDeadByAbyss()){
                    Teleport(ep, NearestWalkablePosition(ep));
                    Wait(0.1, WaitBehavior.AbortWhenFalse);
                }
                Resurrect(ep);
            }
        }
    }
}

// role trigger list ---------------------------------
// common trigger action
rule: "RoleTrigger/TEAMMATE_DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    ep != Attacker()
){
    DoRoleAction(selectRole, RoleTrigger.TEAMMATE_DEATH);
}

// each role trigger action
rule: "RoleTrigger/STOP"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsMoving() &&
    (
        selectRole == RoleType.FIXED_TURRET
    )
){
    DoRoleAction(selectRole, RoleTrigger.STOP);
}

rule: "RoleTrigger/MOVING"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsMoving() &&
    (
        selectRole == RoleType.FIXED_TURRET
    )
){
    DoRoleAction(selectRole, RoleTrigger.MOVING);
}

rule: "RoleTrigger/MELEE"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    UltimateChargePercent() >= 50 &&
    IsButtonHeld(ep, Button.Melee) &&
    (
        selectRole == RoleType.SAVIOR
    )
){
    DoRoleAction(selectRole, RoleTrigger.MELEE);
}

rule: "RoleTrigger/USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsUsingUltimate() &&
    (
        selectRole == RoleType.SHOT_CALL ||
        selectRole == RoleType.SUPER_ULT
    ) 
){
    DoRoleAction(selectRole, RoleTrigger.USING_ULT);
}

rule: "RoleTrigger/NOT_USING_ULT"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsUsingUltimate() &&
    (
        selectRole == RoleType.SUPER_ULT
    )
){
    DoRoleAction(selectRole, RoleTrigger.NOT_USING_ULT);
}

rule: "RoleTrigger/ULT_CHARGE"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    UltimateChargePercent(ep) < DefaultPercentage() &&
    (
        selectRole == RoleType.RAGE ||
        selectRole == RoleType.SHOT_CALL ||
        selectRole == RoleType.FAST_CHARGE ||
        selectRole == RoleType.SUPER_ULT
    )
){
    DoRoleAction(selectRole, RoleTrigger.CHARGING_ULT);
    LoopIfConditionIsTrue();
}

rule: "RoleTrigger/LOST_HEALTH"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    NormalizedHealth() <= 0.5 &&
    (
        selectRole == RoleType.DANGER_AVOIDANCE
    )
){
    DoRoleAction(selectRole, RoleTrigger.LOST_HEALTH);
}

rule: "RoleTrigger/ELEMINATION"
Event.OnElimination
if(
    TeamOf() == playerTeam &&
    (
        selectRole == RoleType.COMBAT_TECHNIC
    )
){
    DoRoleAction(selectRole, RoleTrigger.ELEMINATION);
}

rule: "RoleTrigger/DEATH"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    (
        selectRole == RoleType.ZOMBIE
    )
){
    DoRoleAction(selectRole, RoleTrigger.DEATH);
}

