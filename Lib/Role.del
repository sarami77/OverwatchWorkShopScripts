import "Debug.del";

// TAG Role ----------
playervar define selectRole!;
playervar define roleName!;
playervar define roleDetail!;

enum Role{
    CHANGING,
    NO_ROLE,
    MEDIC,
    SPRINTER,
    FROG_STEP,
    BIRD_MAN,
    HEAVY_ARMOR,
    SURVIVOR,
    KILLER,
    ASSASSIN,
    FIXED_TURRET,
    TECHNICIAN,
    RAGE,
    SHOT_CALL,
    FAST_CHARGE,
    SUPER_ULT
}

playervar define roleOperationText!;

void UpdateRoleOperationText()"UpdateRoleOperationText"{
    DestroyHudText(roleOperationText[0]);
    DestroyHudText(roleOperationText[1]);

    roleOperationText = [];

    roleOperationText[0] = CreateHudText(ep,
        null,
        IsInSpawnRoom()
            ? 
                <"You can change mod role while in spawn room.\n\rPress melee key <0> to select role.\n\rYour mod role = <1>",
                    ButtonGuide(Button.Melee), roleName>
            :
                <"Your mod role = <0>",
                    roleName>,
        null,
        Location.Left, 101,
        null, Color.SkyBlue, null,
        HudTextRev.StringAndColor, Spectators.DefaultVisibility);

    roleOperationText[1] = CreateHudText(ep,
        null, roleDetail, null,
        Location.Left, 102,
        null, Color.SkyBlue, null,
        HudTextRev.StringAndColor, Spectators.DefaultVisibility);
}

rule: "Role/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam
){
    selectRole = Role.NO_ROLE;
}

rule: "Role/updateRoleOperation_EnterSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsInSpawnRoom()
){
    UpdateRoleOperationText();
}

rule: "Role/updateRoleOperation_ExitSpawnRoom"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    !IsInSpawnRoom()
){
    UpdateRoleOperationText();
}

rule: "Role/switchRole"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsInSpawnRoom() &&
    IsAlive() &&
    IsButtonHeld(ep, Button.Melee)
){
    define nextRole! = selectRole >= Role.FIXED_TURRET ? Role.NO_ROLE : selectRole + 1;
    selectRole = Role.CHANGING;
    Wait(0.1, WaitBehavior.IgnoreCondition);    // reset param
    selectRole = nextRole;
    UpdateRoleOperationText();
}

// NO_ROLE ----------------------------
rule: "Role/NO_ROLE/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.NO_ROLE
){
    roleName = "NO ROLE";
    roleDetail = 
        "No modified";
}

// MEDIC ----------------------------
rule: "Role/MEDIC/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.MEDIC
){
    roleName = "MEDIC";
    roleDetail = 
        "+ deal heal 130%\n\r"+
        "- max health 70%";
    SetHealingDealt(ep, 130);
    SetMaxHealth(ep, 70);
}

rule: "Role/MEDIC/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.MEDIC
){
    SetHealingDealt(ep, DefaultPercentage());
    SetMaxHealth(ep, DefaultPercentage());
}

// SPRINTER ----------------------------
rule: "Role/SPRINTER/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.SPRINTER
){
    roleName = "SPRINTER";
    roleDetail = 
        "+ move speed 130%\n\r"+
        "- max health 70%";
    SetMoveSpeed(ep, 130);
    SetMaxHealth(ep, 70);
}

rule: "Role/SPRINTER/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.SPRINTER
){
    SetMoveSpeed(ep, DefaultPercentage());
    SetMaxHealth(ep, DefaultPercentage());
}

// FROG_STEP ----------------------------
rule: "Role/FROG_STEP/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.FROG_STEP
){
    roleName = "FROG STEP";
    roleDetail = 
        "+ gravity 50%\n\r"+
        "+ jump hight 150%\n\r"+
        "- move speed 70%";
    SetGravity(ep, 50);
    SetJumpVerticalSpeed(ep, 150);
    SetMoveSpeed(ep, 70);
}

rule: "Role/FROG_STEP/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.FROG_STEP
){
    SetGravity(ep, DefaultPercentage());
    SetJumpVerticalSpeed(ep, DefaultPercentage());
    SetMoveSpeed(ep, DefaultPercentage());
}

// BIRD_MAN ----------------------------
rule: "Role/BIRD_MAN/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.BIRD_MAN
){
    roleName = "BIRD MAN";
    roleDetail = 
        "+ gravity 10%\n\r"+
        "- max health 50%";
    SetGravity(ep, 10);
    SetMaxHealth(ep, 50);
}

rule: "Role/BIRD_MAN/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.BIRD_MAN
){
    SetGravity(ep, DefaultPercentage());
    SetMaxHealth(ep, DefaultPercentage());
}

// HEAVY_ARMOR ----------------------------
rule: "Role/HEAVY_ARMOR/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.HEAVY_ARMOR
){
    roleName = "HEAVY ARMOR";
    roleDetail = 
        "+ max health 300%\n\r"+
        "- move speed 50%\n\r"+
        "- receive heal 10%";
    SetMaxHealth(ep, 300);
    SetMoveSpeed(ep, 50);
    SetHealingReceived(ep, 10);
}

rule: "Role/BIRD_MAN/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.HEAVY_ARMOR
){
    SetMaxHealth(ep, DefaultPercentage());
    SetMoveSpeed(ep, DefaultPercentage());
    SetHealingReceived(ep, DefaultPercentage());
}

// SURVIVOR ----------------------------
rule: "Role/SURVIVOR/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.SURVIVOR
){
    roleName = "SURVIVOR";
    roleDetail = 
        "+ receive heal 130%\n\r"+
        "+ move speed 130%\n\r"+
        "- deal damage 50%";
    SetHealingReceived(ep, 130);
    SetMoveSpeed(ep, 130);
    SetDamageDealt(ep, 50);
}

rule: "Role/SURVIVOR/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.SURVIVOR
){
    SetHealingReceived(ep, DefaultPercentage());
    SetMoveSpeed(ep, DefaultPercentage());
    SetDamageDealt(ep, DefaultPercentage());
}

// KILLER ----------------------------
rule: "Role/KILLER/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.KILLER
){
    roleName = "KILLER";
    roleDetail = 
        "+ deal damage 130%\n\r"+
        "- max Health 70%";
    SetDamageDealt(ep, 130);
    SetMaxHealth(ep, 70);
}

rule: "Role/KILLER/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.KILLER
){
    SetDamageDealt(ep, DefaultPercentage());
    SetMaxHealth(ep, DefaultPercentage());
}

// ASSASSIN ----------------------------
rule: "Role/ASSASSIN/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.ASSASSIN
){
    roleName = "ASSASSIN";
    roleDetail = 
        "+ deal damage 130%\n\r"+
        "+ move speed 130%\n\r"+
        "- max Health 50%";
    SetDamageDealt(ep, 130);
    SetMoveSpeed(ep, 130);
    SetMaxHealth(ep, 50);
}

rule: "Role/ASSASSIN/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.ASSASSIN
){
    SetDamageDealt(ep, DefaultPercentage());
    SetMoveSpeed(ep, DefaultPercentage());
    SetMaxHealth(ep, DefaultPercentage());
}

// FIXED_TURRET ----------------------------
rule: "Role/FIXED_TURRET/activate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.FIXED_TURRET
){
    roleName = "FIXED TURRET";
    roleDetail = 
        "+ deal damage 150% in stop\n\r"+
        "+ max health 200% in stop\n\r"+
        "- deal damage 30% in moving";
}

rule: "Role/FIXED_TURRET/deactivate"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole != Role.FIXED_TURRET
){
    SetDamageDealt(ep, DefaultPercentage());
    SetMaxHealth(ep, DefaultPercentage());
}

rule: "Role/FIXED_TURRET/stop"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.FIXED_TURRET &&
    !IsMoving()
){
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    SetDamageDealt(ep, 150);
    SetMaxHealth(ep, 200);
    dbgHudTxt(<" = <0>", 150>);
}

rule: "Role/FIXED_TURRET/moving"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    selectRole == Role.FIXED_TURRET &&
    IsMoving()
){
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    SetDamageDealt(ep, 30);
    SetMaxHealth(ep, DefaultPercentage());
    dbgHudTxt(<" = <0>", 30>);
}

