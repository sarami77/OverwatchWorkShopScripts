import "Utility.del";

// TAG public property
globalvar define reviveEnableTeam! = Team.All;
globalvar define reviveTimeLimit! = 10;
globalvar define reviveRange! = 2.5;
globalvar define reviveCompleteSecond! = 3;

playervar define downPosition!;
playervar define reviveTimeRemain!;
playervar define needHelpEntitys!;

define reviveIsEnableTeam:
    reviveEnableTeam == TeamOf() ||
    reviveEnableTeam == Team.All;

define CanRevive():
    IsDead() &&
    IsOnGround();

define NearTeammate():
    CountOf(
        FilteredArray(
            AllPlayers(TeamOf()), (
                ep != ae &&
                HasSpawned(ae) &&
                IsAlive(ae) &&
                DistanceBetween(downPosition, ae) <= reviveRange
            )
        )
    ) > 0;

rule: "Player/Revive/setTimeLimit"
Event.OngoingPlayer
if(
    reviveIsEnableTeam &&
    IsDead()
){
    // set revive time limit by player dead
    DisableRespawning();    // not work in skirmish
    SetRespawnMaxTime(reviveTimeLimit);
    reviveTimeRemain = reviveTimeLimit;

    // failsafe respawn for respawn logic not working
    Wait(reviveTimeLimit + reviveCompleteSecond + 1, WaitBehavior.AbortWhenFalse);
    Respawn();
}

playervar define returnPosition!;

rule: "Player/Revive/saveReturnPosition"
Event.OngoingPlayer
if(
    reviveIsEnableTeam &&
    IsAlive() &&
    IsInAir()
){
    returnPosition = PositionOf();
    Wait(5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Player/Revive/returnGround"
Event.OngoingPlayer
if(
    reviveIsEnableTeam &&
    IsDead() &&
    !IsOnGround()
){
    if(IsDeadByAbyss()){
        Teleport(ep, NearestWalkablePosition(returnPosition));
        Abort();
    }
    LoopIfConditionIsTrue();
}

rule: "Player/Revive/showNeedHelp"
Event.OngoingPlayer
if(
    reviveIsEnableTeam &&
    CanRevive()
){
    // Display HELP on the downed player's position
    // As for the player position, the appearance position and the down position will not match the dead body where the ragdoll works
    // Therefore, save and use the position when down, not the position of the player
    // If down in the abyss of the map, can not revive, so do not display HELP
    if(!IsDeadByAbyss()){
        downPosition = PositionOf(ep);
        needHelpEntitys = [];
        
        CreateInWorldText(
            AllPlayers(), 
                <"Revive <0> <1> <2>", ep, HeroIconString(HeroOf(ep)), reviveTimeRemain>,
            downPosition, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
            Color.White, Spectators.VisibleAlways);
        needHelpEntitys[0] = LastTextID();

        CreateIcon(
            AllPlayers(), downPosition,
            Icon.Skull, IconRev.VisibleToAndPosition, Color.Red, true);
        needHelpEntitys[1] = LastCreatedEntity();

        CreateEffect(
            AllPlayers(), Effect.Ring, Color.White,
            downPosition, reviveRange, EffectRev.VisibleToPositionAndRadius);
        needHelpEntitys[2] = LastCreatedEntity();
    }
}

rule: "Player/Revive/hideNeedHelp"
Event.OngoingPlayer
if(
    reviveIsEnableTeam &&
    !CanRevive()
){
    // Hide HELP on the downed player's position
    DestroyEffect(needHelpEntitys[2]);
    DestroyIcon(needHelpEntitys[1]);
    DestroyInWorldText(needHelpEntitys[0]);
}

define isReviving:
        reviveIsEnableTeam &&
        CanRevive() &&
        NearTeammate();

rule: "Player/Revive/countDownTimeLimit"
Event.OngoingPlayer
if(
    reviveIsEnableTeam &&
    CanRevive() &&
    reviveTimeRemain >= 0
){
    // Count down revive time limit on the downed player's position
    WaitUpdateMediumCycle();
    // countdown
    if(reviveTimeRemain > 0){
        reviveTimeRemain -= 1;
    }
    // check timeout 
    if(
        reviveTimeRemain <= 0
    ){
        WaitUntil(!isReviving, reviveCompleteSecond);
        AbortIf(IsAlive());
        Respawn();

        reviveTimeoutCount ++;
        Abort();
    }
    LoopIfConditionIsTrue();
}

globalvar define reviveTimeoutCount! = 0;

playervar define reviveProgressRingSize;

playervar define reviver!;

rule: "Player/Revive/reviveByTeammate"
Event.OngoingPlayer
if(
    isReviving
){
    // revived when a teammate is nearby
    // The event player is the player who receives the revival.
    if(!IsDeadByAbyss()){
        // Save the reviver to display a message to the reviver
        reviver = ClosestPlayerTo(ep, reviveEnableTeam);

        // SmallMessage(reviver,
        //     <"reviving <0> <1>.", ep, HeroIconString(HeroOf(ep))>);
        SmallMessage(ep,
            <"<0> <1> reviving you.", reviver, HeroIconString(HeroOf(reviver))>);

        reviveProgressRingSize = reviveRange;
        CreateEffect(
            AllPlayers(), Effect.Ring, Color.Yellow,
            downPosition, reviveProgressRingSize, EffectRev.VisibleToPositionAndRadius);
        needHelpEntitys[3] = LastCreatedEntity();
        ChaseVariableOverTime(reviveProgressRingSize, 0, reviveCompleteSecond, TimeChaseReevaluation.None);

        // reviving effect and progress count
        for(define reviveProgressSecond = 0; reviveProgressSecond < reviveCompleteSecond; reviveProgressSecond ++){
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
                Color.Yellow, downPosition, 1);
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.BuffImpactSound,
                Color.Yellow, downPosition, MaxValue());
                
            define reviveCountDown! = reviveCompleteSecond - reviveProgressSecond;
            if(0 < reviveCountDown && reviveCountDown < reviveCompleteSecond){
                SmallMessage(ep,
                    <"<0>", reviveCountDown>);
            }
            Wait(1, WaitBehavior.AbortWhenFalse);
        }

        StopChasingVariable(reviveProgressRingSize);

        // revive conplete effect and sound
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.GoodPickupEffect,
            Color.Yellow, ep, 1);
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.BuffExplosionSound,
            Color.White, ep, MaxLength());
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.RingExplosion,
            Color.Yellow, ep, reviveRange * 2);

        Resurrect(ep);
        SetStatus(ep, null, Status.Invincible, 3);

        // SmallMessage(reviver,
        //     <"revived <0> <1>.", ep, HeroIconString(HeroOf(ep))>);
        SmallMessage(ep,
            <"<0> <1> revived you.", reviver, HeroIconString(HeroOf(reviver))>);
    }
}

rule: "Player/Revive/abortReviveByTeammate"
Event.OngoingPlayer
if(
    !isReviving
){
    DestroyEffect(needHelpEntitys[3]);
    StopChasingVariable(reviveProgressRingSize);

    if(IsDead()){
        SmallMessage(ep,
            <"revive aborted.">);
    }
}

// TAG Debug ----------
disabled rule: "Debug/forceReviveTeammate"  // for bot only
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    0 < NumberOfDeadPlayers(Team.Team1)
){
    define reviveTarget! =
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    IsDead(ae) &&
                    IsInLineOfSight(ep, ae)
                )
            )
        );

    if(
        reviveTarget != null
    ){
        ApplyImpulse(ep, 
            VectorTowards(ep, reviveTarget + PositionOffset()),
            DistanceBetween(ep, reviveTarget) * 1.3,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();    
}
