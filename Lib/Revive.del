import "Utility.del";

// TAG public property
globalvar define reviveEnableTeams! = [Team.Team1, Team.Team2];
define isReviveEnableTeam: IsTrueForAny(reviveEnableTeams, TeamOf(ep) == ae);

globalvar define reviveTimeLimit! = 10;
globalvar define reviveRange! = 2.5;
globalvar define reviveCompleteSecond! = 5;

playervar define downPosition!;
playervar define reviveTimeRemain!;
playervar define needHelpEntitys!;

define IsNeedRevive():
    IsDead() &&
    IsOnGround();

rule: "Player/Revive/setTimeLimit"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    IsDead()
){
    // set revive time limit by player dead
    reviveTimeRemain = reviveTimeLimit;
}

playervar define returnPosition!;

rule: "Player/Revive/saveReturnPosition"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    IsAlive() &&
    IsInAir()
){
    returnPosition = PositionOf();
    Wait(5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Player/Revive/returnGround"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    IsDead() &&
    !IsOnGround()
){
    WaitRandomForDistributeServerLoad();
    if(IsDeadByAbyss()){
        Teleport(ep, NearestWalkablePosition(returnPosition));
        Abort();
    }
}

playervar define reviveStatusMessage;

rule: "Player/Revive/showNeedHelp"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    IsNeedRevive()
){
    // Display HELP on the downed player's position
    // As for the player position, the appearance position and the down position will not match the dead body where the ragdoll works
    // Therefore, save and use the position when down, not the position of the player
    // If down in the abyss of the map, can not revive, so do not display HELP
    downPosition = PositionOf(ep);

    if(!IsDeadByAbyss()){
        needHelpEntitys = [];
        // set need rivive message
        needHelpEntitys[0] = CreateInWorldText(
            AllPlayers(TeamOf()),  reviveStatusMessage,
            downPosition, basicInWorldTextSize, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
            Color.White, Spectators.VisibleAlways);
        // set need rivive icon
        needHelpEntitys[1] = CreateIcon(
            AllPlayers(TeamOf()), downPosition,
            Icon.Skull, IconRev.VisibleToAndPosition, Color.Red, true);
        // set rivive range ring
        needHelpEntitys[2] = CreateEffect(
            AllPlayers(TeamOf()), Effect.Ring, Color.White,
            downPosition, reviveRange, EffectRev.VisibleToPositionAndRadius);
    }
}

rule: "Player/Revive/hideNeedHelp"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    !IsNeedRevive()
){
    // Hide HELP on the downed player's position
    DestroyEffect(needHelpEntitys[2]);
    DestroyIcon(needHelpEntitys[1]);
    DestroyInWorldText(needHelpEntitys[0]);
}

rule: "Player/Revive/countDownTimeLimit"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    IsNeedRevive() &&
    reviveTimeRemain >= 0
){
    if(reviver == null){
        reviveStatusMessage = <"Revive <0> <1> <2>", ep, HeroIconString(HeroOf(ep)), reviveTimeRemain>;
    }

    // Count down revive time limit on the downed player's position
    WaitUpdateASecond();
    
    // countdown
    if(reviveTimeRemain > 0){
        reviveTimeRemain -= 1;
    }
    
    // check timeout 
    if(
        reviveTimeRemain <= 0
    ){
        if(reviver == null){
            reviveTimeoutCount ++;
            Respawn();
            Abort();
        }
        else{
            WaitUntil(IsAlive(), reviveCompleteSecond);
            Abort();
        }
    }
    LoopIfConditionIsTrue();
}

globalvar define reviveTimeoutCount! = 0;

playervar define reviveProgressRingSize;

playervar define reviver!;

define CanRevive():
    IsNeedRevive() &&
    CountOf(
        FilteredArray(
            AllLivingPlayers(TeamOf()),
            (
                ep != ae &&
                DistanceBetween(downPosition, ae) <= reviveRange
            )
        )
    ) > 0;

rule: "Player/Revive/reviveByTeammate"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    CanRevive()
){
    DisableRespawning(ep);

    // revived when a teammate is nearby
    // The event player is the player who receives the revival.

    // Save the reviver to display a message to the reviver
    reviver = FirstOf(
            SortedArray(
                AllLivingPlayers(TeamOf()),
                DistanceBetween(ep, ae)
            )
        );

    // init revive progress ling size
    reviveProgressRingSize = reviveRange;
    // set revive progress ling
    needHelpEntitys[3] = CreateEffect(
        AllPlayers(TeamOf()), Effect.Ring, Color.Yellow,
        downPosition, reviveProgressRingSize, EffectRev.VisibleToPositionAndRadius);

    // start revive progress ling convergence
    ChaseVariableOverTime(reviveProgressRingSize, 0, reviveCompleteSecond, TimeChaseReevaluation.None);

    // reviving effect and progress count
    for(define reviveProgressSecond! = reviveCompleteSecond; reviveProgressSecond > 0; reviveProgressSecond --){
        // set revive progress message
        reviveStatusMessage = <"reviving <0> <1> <2>", ep, HeroIconString(HeroOf(ep)), reviveProgressSecond>;

        PlayEffect(
            AllPlayers(TeamOf()), PlayEffect.GoodPickupEffect,
            Color.Yellow, downPosition, 1);
        PlayEffect(
            AllPlayers(TeamOf()), PlayEffect.BuffImpactSound,
            Color.Yellow, downPosition, MaxValue());
            
        WaitUpdateASecond();
    }

    StopChasingVariable(reviveProgressRingSize);

    // revive
    revive(reviver, ep, reviveRange * 3);
}

rule: "Player/Revive/abortReviveByTeammate"
Event.OngoingPlayer
if(
    isReviveEnableTeam &&
    !CanRevive()
){
    EnableRespawning(ep);
    reviver = null;
    reviveStatusMessage = <"Revive <0> <1> <2>", ep, HeroIconString(HeroOf(ep)), reviveTimeRemain>;
    StopChasingVariable(reviveProgressRingSize);
    DestroyEffect(needHelpEntitys[3]);
    if(reviveTimeRemain <= 0){
        Respawn();
    }
}

// TAG Debug ----------
