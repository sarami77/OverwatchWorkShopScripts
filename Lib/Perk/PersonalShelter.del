import "PerkCore.del";

define shelterRange : 1.0;
define inShelter:
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                ArrayElement().perkType == PerkType.PersonalShelter &&
                ArrayElement().perkState  == PerkState.Using &&
                DistanceBetween(ep, ArrayElement().perkPosition) <= shelterRange
            )
        )
    ) > 0;

rule: "Perk/Player/PersonalShelter/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.PersonalShelter &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 60;
    // set param
    perkPosition = BelowPosition(PositionOf());
    // show text
    perk[Perk.perkEffectAndText] = [];
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", ep, HeroIconString(HeroOf()), "Personal Shelter">,
        perkPosition, basicInWorldTextSize, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perk[Perk.perkEffectAndText] [0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.White,
        perkPosition, shelterRange, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [1] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.LightShaft, Color.White,
        perkPosition, shelterRange, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [2] = LastCreatedEntity();        
}

rule: "Perk/Player/PersonalShelter/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.PersonalShelter &&
    perkState  == PerkState.Non
){
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [0]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [1]);
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    // reset param
    perkPosition = 0;
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/PersonalShelter/enableSafe"
Event.OngoingPlayer
Team.Team1
if(
    inShelter
){
    SetStatus(ep, null, Status.PhasedOut, MaxValue());
}

rule: "Perk/Player/PersonalShelter/disableSafe"
Event.OngoingPlayer
Team.Team1
if(
    !inShelter
){
    ClearStatus(ep, Status.PhasedOut);
}

rule: "Perk/Player/PersonalShelter/failsafeReset"
Event.OngoingPlayer
Team.Team1
if(
    HasStatus(ep, Status.PhasedOut) &&
    !IsInSpawnRoom()
){
    WaitUpdateLongCycle();
    if(!inShelter){
        ClearStatus(ep, Status.PhasedOut);   
        SetInvisible(ep, InvisibleTo.None);
    }
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/PersonalShelter/exclusiveOtherPlayer"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.PersonalShelter &&
    perkState  == PerkState.Using &&
    1 < CountOf(
            PlayersWithinRadius(
                perkPosition, shelterRange, Team.Team1, RadiusLOS.Off))
){
    perk[Perk.perkTargets] = PlayersWithinRadius(
                perkPosition, shelterRange, Team.Team1, RadiusLOS.Off);
    for(pLoopIndex = 0; pLoopIndex < CountOf(perk[Perk.perkTargets]); pLoopIndex++){
        if(perk[Perk.perkTargets][pLoopIndex] != ClosestPlayerTo(perkPosition, Team.Team1)){
            ApplyImpulse(perk[Perk.perkTargets][pLoopIndex],
                VectorTowards(perkPosition, perk[Perk.perkTargets][pLoopIndex] + PositionOffset()),
                10, Relative.ToWorld, ContraryMotion.Cancel);
        }
    }
    WaitApplyImpulseCycle();
    LoopIfConditionIsTrue();
}
