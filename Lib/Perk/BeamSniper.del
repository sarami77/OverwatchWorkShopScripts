import "PerkCore.del";

rule: "Perk/Player/BeamSniper/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = PerkEffectStatus.Reloading;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud("Beam pierces through walls and enemies when blinking blue.");
    perkEffectAndText [0] = LastTextID();
    // set perk hero
    PerkHero perkHero = GetPerkHero();
    perkHero.hero = Hero.Widowmaker;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 150;
    perkHero.damageDealt = 200;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(ep, perkHero);

    // use ult
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    PressButton(ep, Button.Ultimate);
}

rule: "Perk/Player/BeamSniper/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Non
){
    // reset effect
    DestroyEffect(perkEffectAndText [1]);
    DestroyEffect(perkEffectAndText [2]);
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    // reset perk hero
    StopForcingPerkHero(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/BeamSniper/brokenPerkTransform //by helth 1"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using &&
    Health() <= 1
){
    perkState = PerkState.Non;
}

rule: "Perk/Player/BeamSniper/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateASecond();
    SetUltimateCharge(ep, (UltimateChargePercent() + 6));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/BeamSniper/startCharge"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Reloading &&
    IsButtonHeld(ep, Button.SecondaryFire) &&
    IsFiringSecondary() &&
    !IsFiringPrimary()
){
    Wait(1.3, WaitBehavior.AbortWhenFalse);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/BeamSniper/cancelCharge"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using &&
    !IsButtonHeld(ep, Button.SecondaryFire)
){
    perkEffectStatus = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/BeamSniper/markTarget"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready
){
    perkTargets = FilteredArray(
        PlayersInViewAngle(ep, Team.Team2, 1.25),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        PlayEffect(
            ep, PlayEffect.GoodPickupEffect,
            Color.Aqua, perkTargets, 1.0);
        PlayEffect(
            ep, PlayEffect.GoodExplosion,
            Color.Aqua, AimingPosition(), 0.01);
    }

    // Since the impact point will shift due to the recoil when shooting, get the position before shooting
    aimPosition = AimingPosition();     

    WaitUpdateVeryShortCycle();
    LoopIfConditionIsTrue();
}

define beamSniperDamageRange: 3;

rule: "Perk/Player/BeamSniper/shotSniperBeam"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.BeamSniper &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready &&
    IsButtonHeld(ep, Button.SecondaryFire) &&
    IsButtonHeld(ep, Button.PrimaryFire)
){
    AbortIf(perkEffectStatus  == PerkEffectStatus.Reloading);
    perkEffectStatus = PerkEffectStatus.Reloading;

    // give hit damage to enemy near penetration ballistic
    if(perkTargets != []){
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Aqua, perkTargets, beamSniperDamageRange);
        Damage(perkTargets, ep, 400);
    }
    // give splash damage to enemy near landed position
    perkTargets = FilteredArray(
        PlayersWithinRadius(aimPosition, beamSniperDamageRange, Team.Team2, RadiusLOS.Off),
        IsAlive(ArrayElement()));
    if(perkTargets != []){
        Damage(perkTargets, ep, 100);
    }

    // set offset for gun sight
    perkPosition = EyePosition() - PositionOffset(); 

    // set landing position for penetration
    landPosition = EyePosition() +
        (FacingDirectionOf() * MaxLength());

    // play shot sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.Aqua, ep, MaxLength());
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Aqua, perkPosition + (FacingDirectionOf() * 1), 1.0);
    // play big blast with sound
    PlayContinuousBlast(
        Color.Aqua,
        aimPosition,
        beamSniperDamageRange,
        3,
        2);

    // show ballistics for aiming
    CreateBeamEffect(AllPlayers(),
        BeamType.BadBeam, perkPosition, aimPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [1] = LastCreatedEntity();
    // show ballistic for penetration
    CreateBeamEffect(AllPlayers(),
        BeamType.BadBeam, aimPosition, landPosition,
        Color.Aqua, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [2] = LastCreatedEntity();

    WaitPlayEffect();
    DestroyEffect(perkEffectAndText [1]);
    DestroyEffect(perkEffectAndText [2]);
}
