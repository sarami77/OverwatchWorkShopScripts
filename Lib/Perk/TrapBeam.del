import "PerkCore.del";

define patrolCycle: 0.25;
define trapBeamReloadTime: 30;

rule: "Perk/Player/TrapBeam/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set param
    StopChasingVariable(perkPosition2);
    perkEffectStatus = PerkEffectStatus.Ready;
    perkPosition = 0;
    aimPosition = 0;
    // show text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>", ep, HeroIconString(HeroOf()), "Trap Beam">,
        perkPosition, basicInWorldTextSize, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText [0] = LastTextID();
    // set hud
    CreatePerkEffectHud(
        perkEffectStatus  == PerkEffectStatus.Ready ?
            <"Hold melee button <0> to deplpy Trap Beam.", ButtonGuide(Button.Melee)> :
            <"Trap Beam in preparation until <0> seconds.", perkEffectCoolTime>
        );
    perkEffectAndText [1] = LastTextID();
    
    // first use
    StartHoldingButton(ep, Button.Melee);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopHoldingButton(ep, Button.Melee);
}

rule: "Perk/Player/TrapBeam/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Non
){
    // reset text
    DestroyInWorldText(perkEffectAndText [0]);
    DestroyHudText(perkEffectAndText [1]);
    // reset effect
    DestroyEffect(perkEffectAndText [2]);
    DestroyEffect(perkEffectAndText [3]);
    // reset param
    StopChasingVariable(perkPosition2);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/TrapBeam/remindTrapBeam"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SmallMessage(ep, <"Forgotten Trap Beam?"> );
    Wait(2, WaitBehavior.AbortWhenFalse);
    SmallMessage(ep, <"Hold melee button <0> to deploy Trap Beam.", ButtonGuide(Button.Melee)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/TrapBeam/deployTrapBeam"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready &&
    IsButtonHeld(ep, Button.Melee)
){
    WaitLongPressConfirm();
    // set position
    perkPosition = PositionOf() + PositionOffset();
    aimPosition = AimingPositionIgnorePlayer();
    // play deploy effect
    PlayEffect(
        ep, PlayEffect.GoodExplosion,
        Color.Yellow, perkPosition, 3);
    PlayEffect(
        ep, PlayEffect.GoodExplosion,
        Color.Yellow, aimPosition, 3);
    // play deploy sound
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxValue());

    // reset beam effect
    DestroyEffect(perkEffectAndText [2]);
    DestroyEffect(perkEffectAndText [3]);
    // set beam effect
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
        perkPosition, aimPosition,
        Color.Yellow, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [2] = LastCreatedEntity();
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Yellow,
        perkPosition2, 0.25, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [3] = LastCreatedEntity();

    // start reload
    perkEffectCoolTime = trapBeamReloadTime;
    perkEffectStatus = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/TrapBeam/reloadingTrapBeam"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    WaitUpdateASecond();
    // countdown
    perkEffectCoolTime -= 1;
    // if not zero
    if(perkEffectCoolTime > 0){
        LoopIfConditionIsTrue();
    }
    // if zero
    else{
        // play ready sound
        PlayEffect(
            ep, PlayEffect.BuffImpactSound,
            Color.White, ep, MaxLength());
        // set to ready
        perkEffectStatus = PerkEffectStatus.Ready;
    }
}

rule: "Perk/Player/TrapBeam/moveDetector"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Using
){
    perkPosition2 = perkPosition;
    UpdateEveryFrame(perkPosition2);
    ChaseVariableOverTime(perkPosition2, aimPosition,
        patrolCycle, TimeChaseReevaluation.DestinationAndDuration);
    Wait(patrolCycle, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/TrapBeam/stunByTouched"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.TrapBeam &&
    perkState  == PerkState.Using &&
    // Since the position of the player is judged by the feet,
    //  an offset is added and the collision judgment is shifted to the body.
    DistanceBetween(
        PositionOf(ClosestPlayerTo(perkPosition2, Team.Team2)) + PositionOffset(),
        perkPosition2)
    <= 1.25
){
    perkTargets = ClosestPlayerTo(perkPosition2, Team.Team2);
    if(
        IsAlive(perkTargets) &&
        !HasStatus(perkTargets, Status.Stunned)
    ){
        // set stun
        SetStatus(perkTargets, ep, Status.Stunned, 2.0);
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodExplosion,
            Color.Yellow, perkTargets, 1.0);
    }
}
