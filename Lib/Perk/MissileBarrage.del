import "PerkCore.del";

define missileDamageRange: 4;
define missileAttackTime: 5;
define missileAttackCount: 10;
define missleReloadTime: 15;

rule: "Perk/Player/MissileBarrage/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 300;
    // set status
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    landPosition2 = -1;  
    perk[Perk.perkEffectStatus] = 0; 
    // set hud
    perk[Perk.perkEffectAndText] = [];
    CreatePerkEffectHud(
        perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready ?
            <"Hold melee button <0> to call Missile Barrage.", ButtonGuide(Button.Melee)> :
            perk[Perk.perkEffectStatus]  == PerkEffectStatus.Reloading ?
                <"Missile barrage in preparation until <0> seconds.", perk[Perk.perkEffectCoolTime]> :
                "Missile incoming!"
        );
    perk[Perk.perkEffectAndText] [0] = LastTextID();

    // first use
    StartHoldingButton(ep, Button.Melee);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopHoldingButton(ep, Button.Melee);
}
rule: "Perk/Player/MissileBarrage/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [0]);
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    StopChasingVariable(landZonePosition);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/MissileBarrage/remindMissileBarrage"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SmallMessage(ep, <"Forgotten Missile Barrage?"> );
    Wait(2, WaitBehavior.AbortWhenFalse);
    SmallMessage(ep, <"Hold melee button <0> to call Missile Barrage.", ButtonGuide(Button.Melee)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/startMissile"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready &&
    IsButtonHeld(ep, Button.Melee)
){
    WaitLongPressConfirm();
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    StopChasingVariable(landZonePosition);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);

    // shell body1
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [2] = LastCreatedEntity();
    // shell body2
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkPosition2, 1, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [3] = LastCreatedEntity();
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/MissileBarrage/setLandingZone"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered
){
    // play set sound
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxValue());

    aimPosition = AimingPosition();
    perkPosition = InvalidPosition();
    perkPosition2 = InvalidPosition();

    // set missile land position to aiming position
    landZonePosition = AimingPosition();

   // landing zone text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\r<3> Missles incoming!", ep, HeroIconString(HeroOf()), "Missile Barrage", perk[Perk.perkEffectCount]>,
        landZonePosition + PositionOffset(), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    perk[Perk.perkEffectCount] = missileAttackCount;

    // set effect
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landZonePosition, missileDamageRange, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [4] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        landZonePosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [5] = LastCreatedEntity();

    Wait(2, WaitBehavior.AbortWhenFalse);
    DestroyEffect(perk[Perk.perkEffectAndText] [4]);

    perk[Perk.firstAnimationDelay] = true;
    perk[Perk.perkEffectStatus] = PerkEffectStatus.SecondTriggered;
}

rule: "Perk/Player/MissileBarrage/aimLandPoint"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    (
        perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered ||
        perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered
    )
){
    // chase missile land position to aiming position
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    aimPosition = AimingPosition();
    UpdateEveryFrame(landZonePosition);
    ChaseVariableAtRate(
        landZonePosition, aimPosition,
        DistanceBetween(landZonePosition, aimPosition) * 3.0,
        RateChaseReevaluation.DestinationAndRate);
        
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/playTrajectory"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] > 0
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition, 1.5);
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Orange, perkPosition2, 1.5);

    WaitUpdateVeryShortCycle();
    LoopIfConditionIsTrue();
}

define missleAttackSpeeed:
    (missileAttackTime / missileAttackCount) * parallelAnimationNum;

rule: "Perk/Player/MissileBarrage/launchMissile"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] > 0
){
    // set missle at random
    perkPosition = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(25, 0, 25);

    if(!isServerOverLoading){
        UpdateEveryFrame(perkPosition);
        ChaseVariableOverTime(
            perkPosition, landZonePosition, missleAttackSpeeed,
            TimeChaseReevaluation.DestinationAndDuration);
    }

    Wait(missleAttackSpeeed, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(perkPosition);
    // hide missle
    perkPosition = InvalidPosition();
    // on landed play blast
    async ExplodeMissile(landZonePosition);
    perk[Perk.perkEffectCount] -- ;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/MissileBarrage/launchMissle2"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using && 
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] > 0
){
    if(perk[Perk.firstAnimationDelay]){
        perk[Perk.firstAnimationDelay] = false;
        Wait(missleAttackSpeeed / 2, WaitBehavior.AbortWhenFalse);
    }

    // set missle at random
    perkPosition2 = landZonePosition +
        Vector(0, 50, 0) + RandomPosition(25, 0, 25);

    if(!isServerOverLoading){
        UpdateEveryFrame(perkPosition2);
        ChaseVariableOverTime(
            perkPosition2, landZonePosition, missleAttackSpeeed,
            TimeChaseReevaluation.DestinationAndDuration);
    }

    Wait(missleAttackSpeeed, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(perkPosition2);
    // hide missle
    perkPosition2 = InvalidPosition();
    // on landed play blast
    async ExplodeMissile(landZonePosition);
    perk[Perk.perkEffectCount] -- ;
    LoopIfConditionIsTrue();
}

void ExplodeMissile(define position)"ExplodeMissile"{
    // get target
    perk[Perk.perkTargets] = 
        PlayersWithinRadius(
            position, missileDamageRange,
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perk[Perk.perkTargets], position, missileDamageRange / 2);
    // damage
    Damage(perk[Perk.perkTargets], ep, 300);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White, position, 300);
    // play blast effect
    PlayContinuousBlast(
        Color.Orange,
        position,
        missileDamageRange,
        2);
}

rule: "Perk/Player/MissileBarrage/endMissile"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.SecondTriggered &&
    perk[Perk.perkEffectCount] <= 0
){
    // reset text
    DestroyInWorldText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    DestroyEffect(perk[Perk.perkEffectAndText] [5]);
    StopChasingVariable(landZonePosition);
    StopChasingVariable(perkPosition);
    StopChasingVariable(perkPosition2);
    // start reload
    perk[Perk.perkEffectCoolTime] = missleReloadTime;
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/MissileBarrage/reloadingMissileBarrage"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.MissileBarrage &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus] == PerkEffectStatus.Reloading
){
    WaitUpdateMediumCycle();
    // countdown
    perk[Perk.perkEffectCoolTime] -= 1;
    // if not zero
    if(perk[Perk.perkEffectCoolTime] > 0){
        LoopIfConditionIsTrue();
    }
    // if zero
    else{
        // play ready sound
        PlayEffect(
            ep, PlayEffect.BuffImpactSound,
            Color.White, ep, 100);
        // set to ready
        perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
    }
}