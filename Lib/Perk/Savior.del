import "PerkCore.del";

define saviorStunRange: 10;

rule: "Perk/Player/Savior/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Savior &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set param
    perkTargets = [];
}

rule: "Perk/Player/Savior/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Savior &&
    perkState  == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Savior/stunEnemy"
Event.OnDamageDealt
Team.Team1
if(
    perkType == PerkType.Savior &&
    perkState  == PerkState.Using
){
    if(Victim() != ep){
        if(!HasStatus(Victim(), Status.Stunned)){
            perkTargets = FilteredArray(
                AllPlayers(Team.Team1),
                (
                    ae != ep &&
                    Health(ae) <= MaxHealth(ae) / 2 &&
                    saviorStunRange >= DistanceBetween(Victim(), ae)
                )
            );
            if(perkTargets != []){
                // set stun
                SetStatus(Victim(), ep, Status.Stunned, 2.0);
                // play blast
                PlayEffect(
                    AllPlayers(), PlayEffect.GoodExplosion,
                    Color.Yellow, Victim(), 1.0);
            }
        }
    }
}

rule: "Perk/Player/Savior/instantyRevive"
Event.OngoingPlayer
Team.Team1
if(
    IsDead() &&
    IsOnGround() &&
    CountOf(
        FilteredArray(
            AllLivingPlayers(TeamOf()), 
            (
                ep != ae &&
                DistanceBetween(ep, ae) <= reviveRange &&
                ae.perkType == PerkType.Savior &&
                ae.perkState  == PerkState.Using
            )
        )
    ) > 0
){
    // revive
    revive(ClosestPlayerTo(ep, Team.Team1), ep, reviveRange * 3);
}
