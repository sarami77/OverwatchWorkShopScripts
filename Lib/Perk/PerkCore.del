import "../Utility.del";
import "../DoublePressed.del";

// TAG public property
globalvar define perkCorePerkDropProbability! = 1;

// TAG Perk/CreatState ----------

// Function enable team is Team1
playervar define perkCratePosition!;
playervar define perkCrateState!;
playervar define perkCrateEntitys!;
playervar define playerClosestCrate!;

playervar define notPickupPerk!;
playervar define dropedPerkType!;

playervar define originalHero;
playervar define perkType;
playervar define perkState;
playervar define perkHudEntitys;
playervar define perkTimeLimit;

playervar define perkName;
playervar define perkDetail;
playervar define perkEffectAndText;
playervar define perkEffectStatus;
playervar define perkTargets;
playervar define perkEffectCount;
playervar define perkEffectCoolTime;

playervar define perkPosition;
playervar define perkPosition2;
playervar define landPosition;
playervar define landPosition2;
playervar define landZonePosition;
playervar define aimPosition;
playervar define aimPosition2;

playervar define firstAnimationDelay!;
playervar define keepMovingSecond!;
playervar define fireBallSpeed!;
playervar define fireBallPower!;
playervar define fireBallSize!;
playervar define fireBallBlastRange!;
playervar define fireBallTriggerDelay!;
playervar define thunderStrikePower!;
playervar define approachingAngle!;
playervar define healthPoolID!;
playervar define rider!;
playervar define ridingTarget!;

enum PerkCrateState{
    NotDropped,
    Dropped
}

enum PerkType{  // TAG perk type
    Non,
    SuperLanding,
    GrapplingBeam,
    Sprinter,
    Adrenaline,
    HeroicAgility,
    MedicSyringe,
    Savior,
    Fearless,
    SteelFormation,
    PersonalShelter,
    BioticStation,
    TrapBeam,
    BattleFlag,
    ChainExplosion,
    IceAge,
    AimHack,
    Vampire,
    HotShot,
    ShotCaller,
    GrudgeFireBall,
    GrudgeThunderStrike,
    ArtilleryRequest,
    StrafingSupport,
    MissileBarrage,
    CruiseMissile,
    OrbitalLaser,
    CarePackage,
    DeathFromAbove,
    LegendalyNinja,
    MachBomber,
    OrbMaster,
    Juggernaut,
    BeamSniper,
    DragonStorm,
    Titan,
    Behemoth,
    Annihilator,
    End
}

enum PerkState{
    Non,
    Ready,
    Using
}

globalvar define lotteryPerkList!;
globalvar define lotteryPerkListOrder!;

void addLottelyPerk(define perk!, define count!)"addLottelyPerk"{
    for(define countIdx! = 0; countIdx < count; countIdx++)
        lotteryPerkList[CountOf(lotteryPerkList)] = perk;
}

rule: "Perk/CreatState/NotDropped"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.NotDropped
){
    // Reset param
    perkCratePosition = 0;
    // Hide perk effect and text
    DestroyInWorldText(perkCrateEntitys[0]);
    DestroyEffect(perkCrateEntitys[1]);
}

rule: "Perk/CreatState/Dropped"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped
){
    // show perk effect and text
    CreateInWorldText(
        AllPlayers(), "Perk Crate", 
        perkCratePosition, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkCrateEntitys[0] = LastTextID();
    CreateEffect(AllPlayers(), Effect.Orb, Color.White,
        perkCratePosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkCrateEntitys = LastCreatedEntity();
}

// TAG Perk/Enemy ----------
playervar define eachPerkDropProbability! = 1;

rule: "Perk/Enemy/dropPerkCrate // drop by some probability on death"
Event.OnDeath
Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.NotDropped &&
    Attacker() != ep
){
    // The more people who do not have a park, the higher the drop rate
    if(
        ProbabilityTrue(perkCorePerkDropProbability * eachPerkDropProbability)
    ){
        // Set perk crate position from killed enemry position
        perkCrateState = PerkCrateState.NotDropped;
        WaitChangeState();
        perkCratePosition = BelowPosition(PositionOf()) + PositionOffset();
        perkCrateState = PerkCrateState.Dropped;
    }
}

rule: "Perk/Enemy/clearPerkCrate //by 30second timer"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped
){
    // delete perk crate after a some time
    Wait(30, WaitBehavior.AbortWhenFalse);  // wait clear perk
    perkCrateState = PerkCrateState.NotDropped;
}

define pickupRange : 2.5;
define canPickupCratePlayers:
    FilteredArray(
        AllPlayers(Team.Team1),
        (
            IsAlive(ArrayElement()) &&
            ArrayElement().perkState == PerkState.Non &&
            ArrayElement().perkType == PerkType.Non &&
            DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange &&
            !(ArrayElement().notPickupPerk && ArrayElement() == ep)
        )
    );

rule: "Perk/Enemy/perkPickUpByPlayer //Giving a park to the player who touched the crate"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped &&
    CountOf(canPickupCratePlayers) > 0
){
    // When a player approaches the position where the perk crate drops,
    //  give the player a random perk
    WaitConditionConfirmed();
    playerClosestCrate = FirstOf(canPickupCratePlayers);
    // play pickup effect, message
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, playerClosestCrate, 1);
    PlayEffect(
        playerClosestCrate, PlayEffect.BuffExplosionSound,
        Color.White, playerClosestCrate, MaxLength());
    SmallMessage(playerClosestCrate, "Earned perk. Check top-left list for more details.");

    // set perk
    if(dropedPerkType != PerkType.Non){
        playerClosestCrate.perkType = dropedPerkType;
        dropedPerkType = PerkType.Non;
    }
    else{
        playerClosestCrate.perkType = RandomValueInArray(lotteryPerkList);
    }
    playerClosestCrate.perkState = PerkState.Ready;
    // delete perk crate when picked up
    perkCrateState = PerkCrateState.NotDropped;
}

rule: "Perk/Enemy/alreadykPickUpByPlayer"
Event.OngoingPlayer
//Team.Team2
Player.All
if(
    perkCrateState == PerkCrateState.Dropped &&
    CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            (
                TeamOf(ArrayElement()) == Team.Team1 &&
                IsAlive(ArrayElement()) &&
                ArrayElement().perkState != PerkState.Non &&
                DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
            )
        )
    ) > 0
){
    WaitConditionConfirmed();
    playerClosestCrate = 
        FirstOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                (
                    TeamOf(ArrayElement()) == Team.Team1 &&
                    IsAlive(ArrayElement()) &&
                    ArrayElement().perkState != PerkState.Non &&
                    DistanceBetween(perkCratePosition, ArrayElement()) <= pickupRange
                )
            )
        );

    // If player already have perk
    SmallMessage(playerClosestCrate, "Already have perk.");
    Wait(1.5, WaitBehavior.IgnoreCondition);
    SmallMessage(playerClosestCrate, <"Double press interact button <0> to swap for current perk.", ButtonGuide(Button.Interact)> );
}

// TAG Perk/Player ----------
rule: "Perk/Player/ParkState/Non"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType == PerkType.Non &&
    perkState == PerkState.Non
){
    // Hide perk hud
    HidePerkHUD();
}

rule: "Perk/Player/ParkState/Ready"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType != PerkType.Non &&
    perkState == PerkState.Ready
){
    // Update perk hud
    HidePerkHUD();
    ShowPerkHUD();
}

rule: "Perk/Player/ParkState/Using"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkType != PerkType.Non &&
    perkState == PerkState.Using
){
    // Update perk hud
    HidePerkHUD();
    ShowPerkHUD();
}

// TAG Common Property ----------
playervar define isPerkHero;

class PerkHero{
    public define hero;
    public define statusUnkillable;
    public define statusInvincible;
    public define primaryFireEnabled;
    public define secondaryFireEnabled;
    public define ability1Enabled;
    public define ability2Enabled;
    public define maxHealth;
    public define healingReceived;
    public define damageDealt;
    public define gravity;
    public define moveSpeed;
    public define jumpSpeed;
    public define projectileSpeed;
    public define ultimateCharge;
}

PerkHero GetPerkHero()"GetPerkHero"{
    PerkHero perkHero = new PerkHero();
    perkHero.hero = null;
    perkHero.statusUnkillable = false;
    perkHero.statusInvincible = false;
    perkHero.primaryFireEnabled = true;
    perkHero.secondaryFireEnabled = true;
    perkHero.ability1Enabled = true;
    perkHero.ability2Enabled = true;
    perkHero.maxHealth = DefaultPercentage();
    perkHero.healingReceived = DefaultPercentage();
    perkHero.damageDealt = DefaultPercentage();
    perkHero.gravity = DefaultPercentage();
    perkHero.moveSpeed = DefaultPercentage();
    perkHero.jumpSpeed = DefaultPercentage();
    perkHero.projectileSpeed = DefaultPercentage();
    perkHero.ultimateCharge = 0;
    return perkHero;
}

void ForcePlayerPerkHero(
    define perkTarget,
    PerkHero perkHero
)"ForcePlayerPerkHero"{
    // save now hero for reset
    perkTarget.originalHero = HeroOf(perkTarget);

    // set perk hero
    ForcePlayerHero(perkTarget, perkHero.hero);
    perkTarget.isPerkHero = true;

    // set primaryFireEnabled
    SetPrimaryFireEnabled(perkTarget, perkHero.primaryFireEnabled);
    // set secondaryFireEnabled
    SetSecondaryFireEnabled(perkTarget, perkHero.secondaryFireEnabled);
    // set ability1Enabled
    SetAbility1Enabled(perkTarget, perkHero.ability1Enabled);
    // set ability2Enabled
    SetAbility2Enabled(perkTarget, perkHero.ability2Enabled);
    
    // set damageDealt
    SetDamageDealt(perkTarget, perkHero.damageDealt);
    // set gravity
    SetGravity(perkTarget, perkHero.gravity);
    // set moveSpeed
    SetMoveSpeed(perkTarget, perkHero.moveSpeed);
    // set jumpSpeed
    SetJumpVerticalSpeed(perkTarget, perkHero.jumpSpeed);
    // set projectileSpeed
    SetProjectileSpeed(perkTarget, perkHero.projectileSpeed);

    // set maxHealth. 
    SetMaxHealth(perkTarget, perkHero.maxHealth);
    Wait(0.1, WaitBehavior.IgnoreCondition); // wait change MaxHealth
    // heal to maxHealth. Heal before set healingReceived
    Heal(perkTarget, null, MaxValue());
    Wait(0.1, WaitBehavior.IgnoreCondition); // wait heal
    // set healingReceived
    SetHealingReceived(perkTarget, perkHero.healingReceived);
    // set ultimateCharge
    SetUltimateCharge(perkTarget, perkHero.ultimateCharge);

    // set status Unkillable
    if(perkHero.statusUnkillable) SetStatus(perkTarget, null, Status.Unkillable, MaxValue());
    // set status Invincible
    if(perkHero.statusInvincible) SetStatus(perkTarget, null, Status.Invincible, MaxValue());
}

void StopForcingPerkHero(define perkTarget)"StopForcingPerkHero"{
    if(!isPerkHero) return;

    // reset hero
    ForcePlayerHero(perkTarget, perkTarget.originalHero);
    StopForcingHero(perkTarget);
    isPerkHero = false;

    // reset primaryFireEnabled
    SetPrimaryFireEnabled(perkTarget, true);
    // reset secondaryFireEnabled
    SetSecondaryFireEnabled(perkTarget, true);
    // reset ability1Enabled
    SetAbility1Enabled(perkTarget, true);
    // reset ability2Enabled
    SetAbility2Enabled(perkTarget, true);

    // reset damageDealt
    SetDamageDealt(perkTarget, DefaultPercentage());
    // reset gravity
    SetGravity(perkTarget, DefaultPercentage());
    // reset moveSpeed
    SetMoveSpeed(perkTarget, DefaultPercentage());
    // set jumpSpeed
    SetJumpVerticalSpeed(perkTarget, DefaultPercentage());
    // reset projectileSpeed
    SetProjectileSpeed(perkTarget, DefaultPercentage());
    // reset ultimateCharge
    SetUltimateCharge(perkTarget, 0);

    // reset healingReceived
    SetHealingReceived(perkTarget, DefaultPercentage());
    // reset maxHealth
    SetMaxHealth(perkTarget, DefaultPercentage());
    Wait(0.1, WaitBehavior.IgnoreCondition); // wait change MaxHealth
    // heal to maxHealth. Heal after reset healingReceived
    Heal(perkTarget, null, MaxValue());
    Wait(0.1, WaitBehavior.IgnoreCondition); // wait heal

    // reset statusUnkillble
    ClearStatus(perkTarget, Status.Unkillable);
    // reset statusInvincible
    ClearStatus(perkTarget, Status.Invincible);
}

enum PerkEffectStatus{
    Ready,
    Triggered,
    SecondTriggered,
    Reloading,
    Disabled
}

// show perk name and player name
define CreatePerkTitleHud(define title):
    CreateHudText(AllPlayers(),
        <"<0> <1> <2>", ep, HeroIconString(HeroOf()), title>, null, null,
        Location.Left, (SlotOf() * 10) + 0,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk detail
define CreateperkDetailHud(define detail):
    CreateHudText(AllPlayers(),
        null, <" <0>", detail>, null,
        Location.Left, (SlotOf() * 10) + 3,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk status and active time limit
define CreatePerkStatusHud():
    CreateHudText(AllPlayers(),
        null, 
        perkState == PerkState.Ready ? 
            <"perk ready.                                                           "> :
            <"perk active until <0> seconds.                                        ", perkTimeLimit>,
        null, 
        Location.Left, (SlotOf() * 10) + 1,
        Color.White,
        perkState == PerkState.Ready ?
            Color.Yellow : Color.Orange,
        Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk operation
define CreatePerkOperationHud():
    CreateHudText(ep,
        null, 
        perkState == PerkState.Ready ?
            <"Hold interact button <0> to activate perk.\n\rDouble press interact button <0> to drop perk as crate.",
                ButtonGuide(Button.Interact)> :
            <"Double press interact button <0> to abort perk.",
                ButtonGuide(Button.Interact)>,
        null, 
        Location.Left, (SlotOf() * 10) + 2,
        Color.White, 
        perkState == PerkState.Ready ?
            Color.Yellow : Color.Orange,
        Color.White, 
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

// show perk effect status on top
define CreatePerkEffectHud(define text):
    CreateHudText(ep,
        null, null, text,
        Location.Top, 5,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);


// show active perk name on player head up
define CreateHeadUpText(define text):
    CreateInWorldText(
        AllPlayers(),
        text,
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);

// show each perk hud
void ShowPerkHUD()"ShowPerkHUD"{
    // TAG perk detail text HUD
    if(perkType == PerkType.SuperLanding){
        perkName = "Super Landing";
        perkDetail = "Jump more higher and landing attack with impact.\n\rCan also hovering in air a little.";
    }
    else if(perkType == PerkType.GrapplingBeam){
        perkName = "Grappling Beam";
        perkDetail = "Shoot grappling beam and move quickly in air.\n\rCan also attract enemies until close range.";
    }
    else if(perkType == PerkType.Sprinter){
        perkName = "Sprinter";
        perkDetail = "Move faster while keep moving.\n\rReset by stop or received damage.";
    }
    else if(perkType == PerkType.Adrenaline){
        perkName = "Adrenaline";
        perkDetail = "More move speed and more deal damage in proportion to\n\rlost health. Survive the danger.";
    }
    else if(perkType == PerkType.HeroicAgility){
        perkName = "Heroic Agility";
        perkDetail = "Move speed and jump height are enhanced.\n\rFight with agility.";
    }
    else if(perkType == PerkType.MedicSyringe){
        perkName = "Medic Syringe";
        perkDetail = "Heal Full or instantly revive teammate of melee range.\n\rcan't use to self.";
    }
    else if(perkType == PerkType.Savior){
        perkName = "Savior";
        perkDetail = "Instantly revives teammate.\n\rAttack inflicts stun enemy near teammate of low health.";
    }
    else if(perkType == PerkType.Fearless){
        perkName = "Fearless";
        perkDetail = "Damage Dealt and Healing received continously increases\n\rwhile surrounded by enemies.";
    }
    else if(perkType == PerkType.SteelFormation){
        perkName = "Steel Formation";
        perkDetail = "Continue give additional armor to self and near teammates.\n\rLet's unite and defend.";
    }
    else if(perkType == PerkType.PersonalShelter){
        perkName = "Personal Shelter";
        perkDetail = "Place safe shelter.\n\rBut for personal use only.\n\rRecommend for sniper or support hero.";
    }
    else if(perkType == PerkType.BioticStation){
        perkName = "Biotic Station";
        perkDetail = "Place powerful healing field.\n\rBut effective time is short.";
    }
    else if(perkType == PerkType.TrapBeam){
        perkName = "Trap Beam";
        perkDetail = "Place beam to between self position and aiming point.\n\rBeam stuns touching enemies.";
    }
    else if(perkType == PerkType.BattleFlag){
        perkName = "Battle Flag";
        perkDetail = "Teammate can teleport at self from spawn room.\n\rPromote ultimate charge of self and near teammate.";
    }
    else if(perkType == PerkType.ChainExplosion){
        perkName = "Chain Explosion";
        perkDetail = "Killed enemy explodes and splash extra damage to around.\n\rExplosion is chain around.";
    }
    else if(perkType == PerkType.IceAge){
        perkName = "Ice Age";
        perkDetail = "killed enemy explode and splash freeze effect to around.\n\rFreeze time is short but range is wide.";
    }
    else if(perkType == PerkType.AimHack){
        perkName = "Aim Hack";
        perkDetail = "Automatically aim at enemy's head.\n\rNo problem, bot can't report.";
    }
    else if(perkType == PerkType.Vampire){
        perkName = "Vampire";
        perkDetail = "When deal damage to enemy,\n\rabsorbs half of dealt damage as self health.";
    }
    else if(perkType == PerkType.HotShot){
        perkName = "Hot Shot";
        perkDetail = "When kill enemy, ammo instantly reloaded and ability\n\rinstantly recharged. barrier resource excluded.";
    }
    else if(perkType == PerkType.ShotCaller){
        perkName = "Shot Caller";
        perkDetail = "When use ultimate ability, teammate's ultimate ability\n\rinstantly full charged.";
    }
    else if(perkType == PerkType.GrudgeFireBall){
        perkName = "Grudge Fire Ball";
        perkDetail = "Charge power by received damage, shot power as fire ball.\n\rMore power make more damage and blast range.";
    }
    else if(perkType == PerkType.GrudgeThunderStrike){
        perkName = "Grudge Thunder Strike";
        perkDetail = "Charge power by received damage, shot power as\n\rthunder strike. More power make more strike count.";
    }
    else if(perkType == PerkType.ArtilleryRequest){
        perkName = "Artillery Request";
        perkDetail = "Request artillery fire to aim point.\n\rAttack wide area with 10-second shell barrage.";
    }
    else if(perkType == PerkType.StrafingSupport){
        perkName = "Strafing Support";
        perkDetail = "Request strafing of attack jet at aim point.\n\rCan be re-request after cool down.";
    }
    else if(perkType == PerkType.MissileBarrage){
        perkName = "Missile Barrage";
        perkDetail = "Request 10 guide missiles at aim point.\n\rCan be re-request after cool down.";
    }
    else if(perkType == PerkType.CruiseMissile){
        perkName = "Cruise Missile";
        perkDetail = "Request big guide missile at aim point.\n\rDestroy enemies of wide area.";
    }
    else if(perkType == PerkType.OrbitalLaser){
        perkName = "Orbital Laser";
        perkDetail = "Laser irradiation from orbital satellite.\n\rCan control irradiation point for 60 seconds.";
    }
    else if(perkType == PerkType.CarePackage){
        perkName = "Care Package";
        perkDetail = "Request drop of support supplies.\n\rCan get multiple perk crates.";
    }
    else if(perkType == PerkType.DeathFromAbove){
        perkName = "Death From Above";
        perkDetail = "Rain many bullets and cannon shells as a gunship.\n\rTurn ground into hell!";
    }
    else if(perkType == PerkType.LegendalyNinja){
        perkName = "Legendaly Ninja";
        perkDetail = "Ninja with super agility, dragon blade, immortality.\n\rCan add activity time by kill enemy.";
    }
    else if(perkType == PerkType.MachBomber){
        perkName = "Mach Bomber";
        perkDetail = "When kill or deal critical damage by pulse bomb,\n\rpulse bomb instantly full charged.";
    }
    else if(perkType == PerkType.Juggernaut){
        perkName = "Juggernaut";
        perkDetail = "Heavy mechanical infantry with plasma auto canon and\n\rpowerful gravity bomb.";
    }
    else if(perkType == PerkType.BeamSniper){
        perkName = "Beam Sniper";
        perkDetail = "Sniper with powerful beam rifle.\n\rPenetrate wall and\n\renemy body when max charge shot.";
    }
    else if(perkType == PerkType.DragonStorm){
        perkName = "Dragon Storm";
        perkDetail = "Many dragons fall from sky, massive damage enemy\n\rof wide area. Can add activity time by kill enemy.";
    }
    else if(perkType == PerkType.Titan){
        perkName = "Titan";
        perkDetail = "Giant with big barrier, big hammer, super toughness.\n\rProtect team and rampage!";
    }
    else if(perkType == PerkType.Behemoth){
        perkName = "Behemoth";
        perkDetail = "Giant with explosive shotgun, hook without cooldown,\n\rsuper toughness. Trigger happy and rampage!";
    }
    else if(perkType == PerkType.Annihilator){
        perkName = "Annihilator";
        perkDetail = "Execute in sight enemies one after another by super-fast\n\rattack like lightning bolt.";
    }

    // TAG perk common action
    perkHudEntitys = [];
    WaitRedraw();
    // show title hud
    CreatePerkTitleHud(perkName);
    perkHudEntitys[0] = LastTextID();
    WaitRedraw();
    // show detail hud
    CreateperkDetailHud(perkDetail);
    perkHudEntitys[1] = LastTextID();
    WaitRedraw();
    // show status hud
    CreatePerkStatusHud();
    perkHudEntitys[2] = LastTextID();
    WaitRedraw();
    // show operation hud
    CreatePerkOperationHud();
    perkHudEntitys[3] = LastTextID();
    WaitRedraw();
    // show head up text
    if(perkState == PerkState.Using){
        CreateHeadUpText(perkName);
        perkHudEntitys[4] = LastTextID();
        WaitRedraw();
    }
    // show Aura effct
    if(perkState == PerkState.Using){
        CreateEffect(AllPlayers(), Effect.BadAura, Color.White,
            ep, 1, EffectRev.VisibleToPositionAndRadius);
        perkHudEntitys[5] = LastCreatedEntity();
        WaitRedraw();
    }
}

void HidePerkHUD()"HidePerkHUD"{
    DestroyHudText(perkHudEntitys[0]);
    DestroyHudText(perkHudEntitys[1]);
    DestroyHudText(perkHudEntitys[2]);
    DestroyHudText(perkHudEntitys[3]);
    DestroyInWorldText(perkHudEntitys[4]);
    DestroyEffect(perkHudEntitys[5]);
}

rule: "Perk/Player/usePerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    perkState == PerkState.Ready &&
    IsButtonHeld(ep, Button.Interact)
){
    WaitLongPressConfirm();
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);
    PlayEffect(
        ep, PlayEffect.BuffExplosionSound,
        Color.White, ep, MaxLength());
    perkState = PerkState.Using;
}

rule: "Perk/Player/dropPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Ready &&
    intaractDoublePressed
){
    WaitConditionConfirmed();
    notPickupPerk = true;
    dropedPerkType = perkType;
    perkCratePosition = BelowPosition(PositionOf()) + PositionOffset();
    perkCrateState = PerkCrateState.Dropped;
    perkType = PerkType.Non;
    perkState = PerkState.Non;
}

rule: "Perk/Player/releaseNotPickupPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    notPickupPerk
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    notPickupPerk = false;
}

rule: "Perk/Player/countDownTimeLimit"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit > 0
){
    // count down perk active limit time
    WaitUpdateASecond();
    perkTimeLimit -= 1;
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/timeLimitOut"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    perkTimeLimit <= 0
){
    // lose perk by active limit time out
    WaitConditionConfirmed();
    //perkType = PerkType.Non;  Don't for deactivate action
    perkState = PerkState.Non;
}

rule: "Perk/Player/abortPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Using &&
    intaractDoublePressed
){
    // lose perk by abort operation of interact key hold
    WaitConditionConfirmed();
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    perkState = PerkState.Non;
}

rule: "Perk/Player/remindPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    perkState == PerkState.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SmallMessage(ep, <"Forgotten perk?"> );
    Wait(2, WaitBehavior.AbortWhenFalse);
    SmallMessage(ep, <"Hold interact button <0> to activate perk.", ButtonGuide(Button.Interact)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/lostPerk"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsDead()
){
    AbortIf(perkState != PerkState.Using);
    // lose perk by player dead
    perkState = PerkState.Non;
    Wait(2, WaitBehavior.IgnoreCondition);
    SmallMessage(ep, "Lost active perk due by death.");
}

// TAG Debug ----------
define enableDebugPerk: false;  // TAG enable Debug Perk

rule: "Debug/showDebugPerkHUD"
Event.OngoingGlobal
if(
    enableDebugPerk
){
    CreateHudText(
        HostPlayer(),
        null,
        null,
        <"enable Debug Perk. Relpeat press interact button <0> to select perk.", ButtonGuide(Button.Interact)>,
        Location.Left, -1,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
}

rule: "Debug/givePerkRandomToSelf"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.PrimaryFire)
){
    WaitLongPressConfirm();

    // Give perk to self player
    perkState = PerkState.Non;
    WaitUntil(perkType == PerkType.Non, 1);
    Wait(0.1, WaitBehavior.IgnoreCondition);
    perkType = RandomValueInArray(lotteryPerkList);
    perkState = PerkState.Ready;   

    // Use perk by force
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    perkState = PerkState.Using;       
}

rule: "Debug/givePerkRandomToAll"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.SecondaryFire)
){
    WaitLongPressConfirm();

    // Give perk to all player
    AllPlayers(Team.Team1).perkState = PerkState.Non;   
    WaitUntil(AllPlayers(Team.Team1).perkType == PerkType.Non, 1);
    Wait(0.1, WaitBehavior.IgnoreCondition);
    AllPlayers(Team.Team1).perkType = RandomValueInArray(lotteryPerkList);
    AllPlayers(Team.Team1).perkState = PerkState.Ready;

    // Use perk by force    
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    AllPlayers(Team.Team1).perkState = PerkState.Using;
}
