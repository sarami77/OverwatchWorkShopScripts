import "PerkCore.del";

// TAG ShotCaller ----------
rule: "Perk/Player/ShotCaller/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.ShotCaller &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 300;

    SetUltimateCharge(ep, 100);
}

rule: "Perk/Player/ShotCaller/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.ShotCaller &&
    perkState  == PerkState.Non
){
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/ShotCaller/shotCall"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.ShotCaller &&
    perkState  == PerkState.Using &&
    IsUsingUltimate()
){
    perk[Perk.perkTargets] = 
        FilteredArray(
            AllPlayers(Team.Team1),
                !(
                    ArrayElement().perkType == PerkType.ShotCaller &&
                    ArrayElement().perkState  == PerkState.Using
                )
        );

    for(pLoopIndex = 0; pLoopIndex < CountOf(perk[Perk.perkTargets]); pLoopIndex++){
        if(perk[Perk.perkTargets][pLoopIndex] != ep){
            SetUltimateCharge(perk[Perk.perkTargets][pLoopIndex], 100);
        }
    }
}

rule: "Perk/Player/ShotCaller/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.ShotCaller &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(ep,
        UltimateChargePercent() +
        1 +
        (NumberOfSlots(Team.Team1) - NumberOfPlayers(Team.Team1)));
    LoopIfConditionIsTrue();
}