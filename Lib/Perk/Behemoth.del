import "PerkCore.del";

rule: "Perk/Player/Behemoth/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 120;
    // set param
    perk[Perk.perkEffectStatus] = 0;
    perk[Perk.rider] = 0;
    // set hud
    perk[Perk.perkEffectAndText] = [];
    // CreatePerkEffectHud(
    //     perk[Perk.rider] != 0 ?
    //         <"<0> <1> riding on your back.", perk[Perk.rider], HeroIconString(HeroOf(perk[Perk.rider]))> :
    //         "Teammate can ride your back.");
    // perk[Perk.perkEffectAndText] [0] = LastTextID();
    CreatePerkEffectHud(<"Hold crouch button <0> to shrink.", ButtonGuide(Button.Crouch)>);
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    // set perk hero
    PerkHero perkHero = GetPerkHero();
    perkHero.hero = Hero.Roadhog;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 200;
    perkHero.healingReceived = 10.0;
    perkHero.damageDealt = 125;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(ep, perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // use ult
    PressButton(ep, Button.Ultimate);

    // start grow big
    PressButton(ep, Button.Crouch);
}

rule: "Perk/Player/Behemoth/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Non
){
    // set param
    perk[Perk.perkEffectStatus] = 0;
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [0]);
    DestroyHudText(perk[Perk.perkEffectAndText] [1]);

    /*
    DestroyHudText(perk[Perk.rider].perk[Perk.perkEffectAndText] [200]);
    DestroyHudText(perk[Perk.rider].perk[Perk.perkEffectAndText] [201]);
    DetachPlayers(perk[Perk.rider]);
    Teleport(perk[Perk.rider], ep);
    perk[Perk.rider].perk[Perk.ridingTarget] = 0;
    perk[Perk.rider] = 0;
    */

    // reset perk hero
    StopForcingPerkHero(ep);
    // reset status
    StopScalingPlayer(ep);
    StopModifyingHeroVoiceLines(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Behemoth/brokenPerkTransform //by helth 1"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    Health() <= 1
){
    perkState = PerkState.Non;
}

rule: "Perk/Player/Behemoth/growBig"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    !(IsCrouching() || IsButtonHeld(ep, Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);

    if(!( 0 <= perk[Perk.perkEffectStatus]  && perk[Perk.perkEffectStatus]  <= 1)) perk[Perk.perkEffectStatus] = 0;
    while(perk[Perk.perkEffectStatus]  < 1){
        StartScalingPlayer(ep, 1 + (perk[Perk.perkEffectStatus]  * 1.25), false);
        perk[Perk.perkEffectStatus]  += 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(ep, 0.8, false);
}

rule: "Perk/Player/Behemoth/getSmall"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    (IsCrouching() || IsButtonHeld(ep, Button.Crouch))
){
    DetachPlayers(perk[Perk.rider]);
    Teleport(perk[Perk.rider], ep);
    perk[Perk.rider].perk[Perk.ridingTarget] = 0;
    perk[Perk.rider] = 0;

    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);

    if(!( 0 <= perk[Perk.perkEffectStatus]  && perk[Perk.perkEffectStatus]  <= 1)) perk[Perk.perkEffectStatus] = 1;
    while(perk[Perk.perkEffectStatus]  > 0){
        StartScalingPlayer(ep, 1 + (perk[Perk.perkEffectStatus]  * 1.25), false);
        perk[Perk.perkEffectStatus]  -= 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(ep, 1.0, false);
}

rule: "Perk/Player/Behemoth/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(ep, (UltimateChargePercent() + 10));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Behemoth/addtionalHeal"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    IsUsingAbility2()
){
    // heal
    Heal(ep, ep, 400);
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

define splashDamageRangeBehemothBullet: 2.0;

rule: "Perk/Player/Behemoth/splashDamage"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    (
        IsFiringPrimary() ||
        IsFiringSecondary() ||
        IsUsingUltimate()
    )
){
    aimPosition = AimingPositionWithObjectLimit(100);
    define distance! = DistanceBetween(EyePosition(), aimPosition) * 0.1;
    define splashRange! = IsUsingUltimate() ? distance * 3 : distance;
    define pelletCount! = IsUsingUltimate() ? 20 : 10;
    define damage! = IsUsingUltimate() ? 50 : 100;

    if(!IsUsingUltimate())
        Wait(distance * 0.08, WaitBehavior.IgnoreCondition);

    for(pLoopIndex = 0; pLoopIndex < pelletCount; pLoopIndex++){   
        landPosition = RandomPosition(
            splashRange,
            IsUsingUltimate() ? splashRange / 4 : splashRange,
            splashRange);
        // splash damage
        Damage(
            PlayersWithinRadius(
                aimPosition + landPosition,
                splashDamageRangeBehemothBullet,
                Team.Team2, RadiusLOS.Off),
            ep, damage);
        // play blast
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.BadExplosion,
            Color.Orange, aimPosition + landPosition,
            splashDamageRangeBehemothBullet);
        Wait(RandomReal(0, 0.016), WaitBehavior.IgnoreCondition);
    }

    if(IsUsingUltimate()){
        WaitContinuousBlastCycle();
        LoopIfConditionIsTrue();
    }
}

/*
rule: "Perk/Player/Behemoth/addActivityTime"
Event.OnFinalBlow
Team.Team1
if(
    perk[Perk.ridingTarget].perkType == PerkType.Behemoth &&
    perk[Perk.ridingTarget].perkState  == PerkState.Using &&
    perk[Perk.ridingTarget].perk[Perk.perkTimeLimit]  > 0
){
    SmallMessage(ep, "Added 10 seconds of Behemoth's activity time.");
    perk[Perk.ridingTarget].perk[Perk.perkTimeLimit]  += 10;
}

define canRideBehemoth:
    IsAlive() &&
    !isRidingBehemoth &&
    CountOf(nearCanRideBehemoth) > 0;

define nearCanRideBehemoth:
    FilteredArray(
        AllPlayers(Team.Team1),
        (
            DistanceBetween(ep, ArrayElement()) <= canRidingRange &&
            ArrayElement() != ep &&
            ArrayElement().perk[Perk.rider] == 0 &&
            ArrayElement().perk[Perk.perkEffectStatus]  == 1 &&
            ArrayElement().perkState  == PerkState.Using &&
            ArrayElement().perkType == PerkType.Behemoth
        )
    );


define isRidingBehemoth: 
    perk[Perk.ridingTarget] != 0 &&
    perk[Perk.ridingTarget].perk[Perk.rider] == ep &&
    perk[Perk.ridingTarget].perkState == PerkState.Using &&
    perk[Perk.ridingTarget].perkType == PerkType.Behemoth;

rule: "Perk/Player/Behemoth/showOperationGetOn"
Event.OngoingPlayer
Team.Team1
if(
    canRideBehemoth
){
    // set hud
    CreatePerkEffectHud(<"Can add Behemoth's activity time by kill enemy when riding Behemoth.">);
    perk[Perk.perkEffectAndText] [300] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to get on Behemoth.", ButtonGuide(Button.Jump)>);
    perk[Perk.perkEffectAndText] [301] = LastTextID();
}

rule: "Perk/Player/Behemoth/hideOperationGetOn"
Event.OngoingPlayer
Team.Team1
if(
    !canRideBehemoth
){
    DestroyHudText(perk[Perk.perkEffectAndText] [300]);
    DestroyHudText(perk[Perk.perkEffectAndText] [301]);
}

rule: "Perk/Player/Behemoth/showOperationGetOff"
Event.OngoingPlayer
Team.Team1
if(
    isRidingBehemoth
){
    // set hud
    CreatePerkEffectHud(<"Hold crouch button <0> to get off Behemoth.", ButtonGuide(Button.Crouch)>);
    perk[Perk.perkEffectAndText] [302] = LastTextID();
}

rule: "Perk/Player/Behemoth/hideOperationGetOff"
Event.OngoingPlayer
Team.Team1
if(
    !isRidingBehemoth
){
    DestroyHudText(perk[Perk.perkEffectAndText] [302]);
}

rule: "Perk/Player/Behemoth/getOn"
Event.OngoingPlayer
Team.Team1
if(
    canRideBehemoth &&
    IsButtonHeld(ep, Button.Jump)
){
    WaitLongPressConfirm();
    perk[Perk.ridingTarget] = FirstOf(nearCanRideBehemoth);
    AttachPlayers(ep, perk[Perk.ridingTarget], Up() * 3.75);
    perk[Perk.ridingTarget].perk[Perk.rider] = ep;
}

rule: "Perk/Player/Behemoth/getOff"
Event.OngoingPlayer
Team.Team1
if(
    isRidingBehemoth &&
    (
        IsButtonHeld(ep, Button.Crouch) ||
        IsDead(ep)
    )
){
    if(IsButtonHeld(ep, Button.Crouch))
        WaitLongPressConfirm();
    DetachPlayers(perk[Perk.ridingTarget].perk[Perk.rider]);
    Teleport(ep, perk[Perk.ridingTarget] + PositionOffset());
    perk[Perk.ridingTarget].perk[Perk.rider] = 0;
    perk[Perk.ridingTarget] = 0;
}
*/