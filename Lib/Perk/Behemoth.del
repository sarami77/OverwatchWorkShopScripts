import "PerkCore.del";

rule: "Perk/Player/Behemoth/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = 0;
    rider = 0;
    // set hud
    perkEffectAndText = [];
    // CreatePerkEffectHud(
    //     rider != 0 ?
    //         <"<0> <1> riding on your back.", rider, HeroIconString(HeroOf(rider))> :
    //         "Teammate can ride your back.");
    // perkEffectAndText [0] = LastTextID();
    CreatePerkEffectHud(<"Hold crouch button <0> to shrink.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText [1] = LastTextID();
    // set perk hero
    PerkHero perkHero = GetPerkHero();
    perkHero.hero = Hero.Roadhog;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 200;
    perkHero.healingReceived = 10.0;
    perkHero.damageDealt = 125;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(ep, perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // use ult
    PressButton(ep, Button.Ultimate);

    // start grow big
    PressButton(ep, Button.Crouch);
}

rule: "Perk/Player/Behemoth/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Non
){
    // set param
    perkEffectStatus = 0;
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    DestroyHudText(perkEffectAndText [1]);

    /*
    DestroyHudText(rider.perkEffectAndText [200]);
    DestroyHudText(rider.perkEffectAndText [201]);
    DetachPlayers(rider);
    Teleport(rider, ep);
    rider.ridingTarget = 0;
    rider = 0;
    */

    // reset perk hero
    StopForcingPerkHero(ep);
    // reset status
    StopScalingPlayer(ep);
    StopModifyingHeroVoiceLines(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Behemoth/brokenPerkTransform //by helth 1"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    Health() <= 1
){
    perkState = PerkState.Non;
}

rule: "Perk/Player/Behemoth/growBig"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    !(IsCrouching() || IsButtonHeld(ep, Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);

    if(!( 0 <= perkEffectStatus  && perkEffectStatus  <= 1)) perkEffectStatus = 0;
    while(perkEffectStatus  < 1){
        StartScalingPlayer(ep, 1 + (perkEffectStatus  * 1.25), false);
        perkEffectStatus  += 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(ep, 0.8, false);
}

rule: "Perk/Player/Behemoth/getSmall"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    (IsCrouching() || IsButtonHeld(ep, Button.Crouch))
){
    DetachPlayers(rider);
    Teleport(rider, ep);
    rider.ridingTarget = 0;
    rider = 0;

    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);

    if(!( 0 <= perkEffectStatus  && perkEffectStatus  <= 1)) perkEffectStatus = 1;
    while(perkEffectStatus  > 0){
        StartScalingPlayer(ep, 1 + (perkEffectStatus  * 1.25), false);
        perkEffectStatus  -= 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(ep, 1.0, false);
}

rule: "Perk/Player/Behemoth/chargingHook"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    AbilityCooldown(ep, Button.Ability1) > 0
){
    SetAbilityCooldown(ep, Button.Ability1, 0);
}

rule: "Perk/Player/Behemoth/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateASecond();
    SetUltimateCharge(ep, (UltimateChargePercent() + 10));
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Behemoth/addtionalHeal"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    IsUsingAbility2()
){
    // heal
    Heal(ep, ep, 2000);
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

define splashDamageRangeBehemothBullet: 2.5;

rule: "Perk/Player/Behemoth/splashDamage"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Behemoth &&
    perkState  == PerkState.Using &&
    (
        IsFiringPrimary() ||
        IsFiringSecondary() ||
        IsUsingUltimate()
    )
){
    aimPosition = AimingPositionWithObjectLimit(100);
    define distance! = DistanceBetween(EyePosition(), aimPosition) * 0.1;
    define splashRange! = IsUsingUltimate() ? distance * 3.5 : distance;

    if(!IsUsingUltimate()){
        Wait(distance * 0.1, WaitBehavior.IgnoreCondition);
    }

    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){   
        landPosition = RandomPosition(
            splashRange,
            IsUsingUltimate() ? splashRange / 4 : splashRange,
            splashRange);
        // splash damage
        Damage(
            PlayersWithinRadius(
                aimPosition + landPosition,
                splashDamageRangeBehemothBullet,
                Team.Team2, RadiusLOS.Off),
            ep, 100);
        // play blast
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.BadExplosion,
            Color.Orange, aimPosition + landPosition,
            splashDamageRangeBehemothBullet);
        Wait(0.01, WaitBehavior.IgnoreCondition);
    }

    if(IsUsingUltimate()){
        WaitContinuousBlastCycle();
        LoopIfConditionIsTrue();
    }
}
