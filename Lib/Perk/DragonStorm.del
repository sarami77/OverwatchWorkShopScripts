import "PerkCore.del";

rule: "Perk/Player/DragonStorm/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 120;
    // set param
    perkPosition = 0;
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
    // set hud
    perk[Perk.perkEffectAndText] = [];
    CreatePerkEffectHud(<"Hold ultimate button <0> to shot dragon storm. (summon 9 dragons.)", ButtonGuide(Button.Ultimate)>);
    perk[Perk.perkEffectAndText] [0] = LastTextID();
    CreatePerkEffectHud(<"Press ultimate button <0> to shot dragon strike. (summon 1 dragon.)", ButtonGuide(Button.Ultimate)>);
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    // set perk hero
    PerkHero perkHero = GetPerkHero();
    perkHero.hero = Hero.Hanzo;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 150;
    perkHero.damageDealt = 200;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(ep, perkHero);

    // use ult
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    StartHoldingButton(ep, Button.Ultimate);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopHoldingButton(ep, Button.Ultimate);
}

rule: "Perk/Player/DragonStorm/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Non
){
    // reset status
    ClearStatus(ep, Status.Rooted);
    ClearStatus(ep, Status.Invincible);
    StopForcingPlayerPosition(ep);
    if(perkPosition != 0)
        Teleport(ep, perkPosition);
    StopFacing();
    // hide enemy outline
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        ep
    );
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [0]);
    DestroyHudText(perk[Perk.perkEffectAndText] [1]);
    // reset perk hero
    StopForcingPerkHero(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/DragonStorm/brokenPerkTransform //by helth 1"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using &&
    Health() <= 1
){
    perkState = PerkState.Non;
}

define dragonStormDeployPosition: PositionOf() + Vector(0, 60, 0);

define maxOfDragon: 9;
rule: "Perk/Player/DragonStorm/startDragonStorm"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Ready &&
    IsUsingUltimate()
){
    WaitLongPressConfirm();
    AbortIf(!IsButtonHeld(ep, Button.Ultimate));

    CancelPrimaryAction();
    // jump movement
    ApplyImpulse(ep, Up(),
        25, Relative.ToWorld, ContraryMotion.Cancel);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    // set position
    perkPosition = PositionOf();
    StartForcingPlayerPosition(ep, dragonStormDeployPosition, false);
    // set status
    SetStatus(ep, null, Status.Rooted, MaxValue());
    SetStatus(ep, null, Status.Invincible, MaxValue());
    SetGravity(ep, 0);
    SetDamageDealt(ep, 700);
    // show enemy outline
    StartForcingPlayerOutlines(
        AllLivingPlayers(Team.Team2),
        ep,
        true,
        Color.Red,
        OutlineType.Always
    );  
    // face enemy
    autoAimingTarget = ClosestPlayerTo(ep, Team.Team2);
    StartAutoAiming();
    Wait(0.1, WaitBehavior.IgnoreCondition);
    StopFacing();
    // wait aim
    Wait(0.2, WaitBehavior.IgnoreCondition);

    perk[Perk.perkEffectCount] = 0;
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/DragonStorm/deployDragons"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered &&
    perk[Perk.perkEffectCount] < maxOfDragon &&
    !IsUsingUltimate()
){
    SetUltimateCharge(ep, 100);
    SetProjectileSpeed(ep, 5 + perk[Perk.perkEffectCount]);
    PressButton(ep, Button.Ultimate);
    perk[Perk.perkEffectCount] ++;
}

rule: "Perk/Player/DragonStorm/finishDragonStorm"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using &&
    perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered &&
    perk[Perk.perkEffectCount] >= maxOfDragon
){
    Wait(1.0, WaitBehavior.AbortWhenFalse);
    SetProjectileSpeed(ep, DefaultPercentage());
    // wait deploy dragon
    Wait(4.0, WaitBehavior.AbortWhenFalse);
    // reset position
    StopForcingPlayerPosition(ep);
    Teleport(ep, perkPosition);
    perkPosition = 0;
    // reset status
    SetProjectileSpeed(ep, DefaultPercentage());
    ClearStatus(ep, Status.Rooted);
    ClearStatus(ep, Status.Invincible);
    SetGravity(ep, DefaultPercentage());
    SetDamageDealt(ep, 150);
    // hide enemy outline
    StopForcingPlayerOutlines(
        AllPlayers(Team.Team2),
        ep
    );
    // face enemy
    autoAimingTarget = ClosestPlayerTo(ep, Team.Team2);
    StartAutoAiming();
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopFacing();

    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
}

rule: "Perk/Player/DragonStorm/addActivityTime"
Event.OnFinalBlow
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using &&
    perk[Perk.perkTimeLimit]  > 0
){
    SmallMessage(ep, "Added 4 seconds of activity time.");
    perk[Perk.perkTimeLimit]  += 4;
}

rule: "Perk/Player/DragonStorm/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.DragonStorm &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(ep, (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}
