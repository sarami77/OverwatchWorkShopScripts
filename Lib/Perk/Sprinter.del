import "PerkCore.del";

rule: "Perk/Player/Sprinter/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Sprinter &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    keepMovingSecond = 0;
    perkEffectStatus = DefaultPercentage();
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Move speed <0>%", perkEffectStatus >);
    perkEffectAndText [0] = LastTextID();
}

rule: "Perk/Player/Sprinter/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Sprinter &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    // reset status
    SetMoveSpeed(ep, DefaultPercentage());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Sprinter/updateMoveSpeed"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Sprinter &&
    perkState  == PerkState.Using &&
    IsMoving()
){
    if(keepMovingSecond < 10)
        keepMovingSecond += 1;
    perkEffectStatus = RoundToInteger((keepMovingSecond / 10) * 150);
    perkEffectStatus  += DefaultPercentage();
    SetMoveSpeed(ep, perkEffectStatus);
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Sprinter/resetMoveSpeedByStop"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Sprinter &&
    perkState  == PerkState.Using &&
    !IsMoving()
){
    WaitConditionConfirmed();

    keepMovingSecond = 0;
    perkEffectStatus = DefaultPercentage();
    SetMoveSpeed(ep, perkEffectStatus );
}

rule: "Perk/Player/Sprinter/resetMoveSpeedByDamage"
Event.OnDamageTaken
Team.Team1
if(
    perkType == PerkType.Sprinter &&
    perkState  == PerkState.Using &&
    1 <= EventDamage()
){
    keepMovingSecond = 0;
    perkEffectStatus = DefaultPercentage();
    SetMoveSpeed(ep, perkEffectStatus );
}

