import "PerkCore.del";

define strafReloadTime: 10;
define strafReqDamage: 250;
define strafReqScatterRange: 5;
define strafReqDamageRange: 3;
define strafReqAttackTime: 2.0;
define strafReqAttackDistance: 50;
define strafReqAttackInterval: 0.03;

rule: "Perk/Player/StrafingSupport/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkPosition = 0;
    perkPosition2 = 0;
    landPosition = -1;
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(
        perkEffectStatus  == PerkEffectStatus.Ready ?
            <"Hold melee button <0> to call Strafing Request.", ButtonGuide(Button.Melee)> :
            perkEffectStatus  == PerkEffectStatus.Reloading ?
                <"Strafing Request in preparation until <0> seconds.", perkEffectCoolTime> :
                "Strafing incoming!"
        );
    perkEffectAndText [0] = LastTextID();

    // first use
    StartHoldingButton(ep, Button.Melee);
    Wait(0.5, WaitBehavior.IgnoreCondition);
    StopHoldingButton(ep, Button.Melee);
}
rule: "Perk/Player/StrafingSupport/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    DestroyInWorldText(perkEffectAndText [1]);
    // reset effect
    DestroyEffect(perkEffectAndText [2]);
    DestroyEffect(perkEffectAndText [3]);
    DestroyEffect(perkEffectAndText [4]);
    StopChasingVariable(landPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/StrafingSupport/remindStrafingSupport"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready
){
    // remind use perk.
    Wait(30, WaitBehavior.AbortWhenFalse);
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxLength());
    SmallMessage(ep, <"Forgotten Strafing Support?"> );
    Wait(2, WaitBehavior.AbortWhenFalse);
    SmallMessage(ep, <"Hold melee button <0> to call Strafing Support.", ButtonGuide(Button.Melee)> );
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/StrafingSupport/startStrafing"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready &&
    IsButtonHeld(ep, Button.Melee)
){
    WaitLongPressConfirm();
    // reset hud
    DestroyInWorldText(perkEffectAndText [1]);
    // reset effect
    DestroyEffect(perkEffectAndText [2]);
    DestroyEffect(perkEffectAndText [3]);
    DestroyEffect(perkEffectAndText [4]);
    StopChasingVariable(landPosition);
    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/StrafingSupport/playLandingZone"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered
){
    // play set sound
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxValue());

    aimPosition = BelowPosition(AimingPosition());
    approachingAngle = DirectionTowards(
            aimPosition, ClosestPlayerTo(
                aimPosition,
                Team.Team2
            )
        );
    approachingAngle = VectorWithOutY(approachingAngle);
    // set start point
    perkPosition = 
        aimPosition + 
            // add random direction
            -approachingAngle *
            // add static distance
            (strafReqAttackDistance / 2);
    // set end point
    perkPosition2 = 
        aimPosition + 
            // add random direction
            approachingAngle *
            // add static distance
            (strafReqAttackDistance / 2);

    // landing zone text
    CreateInWorldText(
        AllPlayers(), <"<0> <1> <2>\n\rStrafing incoming!", ep, HeroIconString(HeroOf()), "Strafing Request">,
        aimPosition + PositionOffset(), basicInWorldTextSize, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    perkEffectAndText [1] = LastTextID();

    // set effect
    // landing zone blast range
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow,
        landPosition, strafReqScatterRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [2] = LastCreatedEntity();
    // landing zone position
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        aimPosition, 0.2, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [3] = LastCreatedEntity(); 

    // play landing animation
    landPosition = perkPosition;

    UpdateEveryFrame(landPosition);
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        strafReqAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);

    Wait(strafReqAttackTime, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(landPosition);
    DestroyEffect(perkEffectAndText [2]);
    // start attack
    perkEffectStatus = PerkEffectStatus.SecondTriggered;
}

rule: "Perk/Player/StrafingSupport/playLanding"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.SecondTriggered
){
    // create Ballistic
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam,
        landPosition2, landPosition2 - (approachingAngle * 200) + (Up() * 100),
        Color.White, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [4] = LastCreatedEntity(); 

    // chase landing position
    landPosition = perkPosition;

    UpdateEveryFrame(landPosition);
    ChaseVariableOverTime(
        landPosition, perkPosition2,
        strafReqAttackTime,
        TimeChaseReevaluation.DestinationAndDuration);

    Wait(strafReqAttackTime, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(landPosition);
    DestroyInWorldText(perkEffectAndText [1]);
    DestroyEffect(perkEffectAndText [3]);
    DestroyEffect(perkEffectAndText [4]);
    // start reload
    perkEffectCoolTime = strafReloadTime;
    perkEffectStatus = PerkEffectStatus.Reloading;
}

rule: "Perk/Player/StrafingSupport/landedToPoint"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.SecondTriggered
){
    // set landed point
    landPosition2 =
        landPosition + 
        RandomPosition(
            strafReqScatterRange / 1.5,
            0,
            strafReqScatterRange / 1.5
        );
    perkTargets =
        PlayersWithinRadius(
            landPosition2, strafReqDamageRange,
            Team.Team2, RadiusLOS.Off);
    // damage
    Damage(perkTargets, ep, strafReqDamage);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White,
        landPosition2,
        MaxLength());
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.White,
        landPosition2,
        strafReqDamageRange);
        
    Wait(strafReqAttackInterval, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/StrafingSupport/reloadingStrafingSupport"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus == PerkEffectStatus.Reloading
){
    WaitUpdateASecond();
    // countdown
    perkEffectCoolTime -= 1;
    // if not zero
    if(perkEffectCoolTime > 0){
        LoopIfConditionIsTrue();
    }
    // if zero
    else{
        // play ready sound
        PlayEffect(
            ep, PlayEffect.BuffImpactSound,
            Color.White, ep, MaxLength());
        // set to ready
        perkEffectStatus = PerkEffectStatus.Ready;
    }
}

rule: "Perk/Player/StrafingSupport/playAircraft"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StrafingSupport &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Reloading
){
    // set start point
    perkPosition =
        aimPosition +
        DirectionTowards(aimPosition, perkPosition) * 
        (strafReqAttackDistance * 25) +
        Vector(0, 200, 0); 
    // set end point
    perkPosition2 = 
        aimPosition +
        DirectionTowards(aimPosition, perkPosition2) *
        (strafReqAttackDistance * 25) +
        Vector(0, 1200, 0); 
    // air craft
    CreateEffect(AllPlayers(), Effect.Orb, Color.Red,
        landPosition, 1, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [2] = LastCreatedEntity();
    // air craft aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
        landPosition, 30, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [3] = LastCreatedEntity();

    // play air craft animation
    landPosition = perkPosition;
    
    if(!isServerOverLoading()){
        UpdateEveryFrame(landPosition);
        ChaseVariableOverTime(
            landPosition, perkPosition2,
            3,
            TimeChaseReevaluation.DestinationAndDuration);
    }

    Wait(3, WaitBehavior.IgnoreCondition);
    StopChasingVariable(landPosition);
    DestroyEffect(perkEffectAndText [2]);
    DestroyEffect(perkEffectAndText [3]);
}
