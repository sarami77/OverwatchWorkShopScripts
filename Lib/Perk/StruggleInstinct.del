import "PerkCore.del";

define StruggleInstinctRange : 15;

rule: "Perk/Player/StruggleInstinct/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StruggleInstinct &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 240;
    // set param
    perk[Perk.perkEffectStatus] = 100;
    perk[Perk.perkEffectCount] = 0;
    // set hud
    perk[Perk.perkEffectAndText] = [];
    CreatePerkEffectHud(<"<0> enemies around.", perk[Perk.perkEffectCount]>);
    perk[Perk.perkEffectAndText] [0] = LastTextID();
    CreatePerkEffectHud(
        perk[Perk.perkEffectStatus] >= 300 ?
        <"Damage dealt & healing received <0>% (Max Charge)", RoundToInteger(perk[Perk.perkEffectStatus], Rounding.Down)> :
        <"Damage dealt & healing received <0>%", RoundToInteger(perk[Perk.perkEffectStatus], Rounding.Down)>
    );
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue,
        ep, StruggleInstinctRange, EffectRev.VisibleToPositionAndRadius);
    perk[Perk.perkEffectAndText] [2] = LastCreatedEntity();
}

rule: "Perk/Player/StruggleInstinct/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StruggleInstinct &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [0]);
    DestroyHudText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    // reset status
    SetDamageDealt(ep, perk[Perk.perkEffectStatus] );
    SetHealingReceived(ep, perk[Perk.perkEffectStatus] );
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/StruggleInstinct/update"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StruggleInstinct &&
    perkState  == PerkState.Using
){
    // get enemy count of naer
    perk[Perk.perkEffectCount] = 
        CountOf(
            FilteredArray(
                AllPlayers(Team.Team2),
                (
                    DistanceBetween(ep, ae) <= StruggleInstinctRange &&
                    IsAlive(ae)
                )
            )
        );

    // change status value
    if(perk[Perk.perkEffectCount] > 0)
        perk[Perk.perkEffectStatus]  += (perk[Perk.perkEffectCount] * 1.0);
    
    else
        perk[Perk.perkEffectStatus]  -= 10;
    
    // round status value
    if(300 < perk[Perk.perkEffectStatus] )
        perk[Perk.perkEffectStatus] = 300;
    else if(100 > perk[Perk.perkEffectStatus] )
        perk[Perk.perkEffectStatus] = 100;
    
    SetDamageDealt(ep, perk[Perk.perkEffectStatus] );
    SetHealingReceived(ep, perk[Perk.perkEffectStatus] );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/StruggleInstinct/playAura"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.StruggleInstinct &&
    perkState  == PerkState.Using
){
    if(
        perk[Perk.perkEffectStatus] < 150
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.White, ep, MaxLength());
        Wait(1.25, WaitBehavior.AbortWhenFalse);
    }
    else if(
        150 <= perk[Perk.perkEffectStatus] && perk[Perk.perkEffectStatus] < 200
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Yellow, ep, MaxLength());
        Wait(1.00, WaitBehavior.AbortWhenFalse);
    }
    else if(
        200 <= perk[Perk.perkEffectStatus] && perk[Perk.perkEffectStatus] < 250
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Orange, ep, MaxLength());
        Wait(0.75, WaitBehavior.AbortWhenFalse);
    }
    else if(
        250 <= perk[Perk.perkEffectStatus] && perk[Perk.perkEffectStatus] < 300
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Red, ep, MaxLength());
        Wait(0.5, WaitBehavior.AbortWhenFalse);
    }
    else if(
        300 <= perk[Perk.perkEffectStatus]
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Purple, ep, MaxLength());
        Wait(0.25, WaitBehavior.AbortWhenFalse);
    }
    else{
        Wait(1.00, WaitBehavior.AbortWhenFalse);
    }
    
    LoopIfConditionIsTrue();
}