import "PerkCore.del";

define steelRange : 8;

rule: "Perk/Player/SteelFormation/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.SteelFormation &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 180;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Giving armor to <0> players inside formation.", perkEffectStatus >);
    perkEffectAndText [0] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.Orange,
        ep, steelRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [1] = LastCreatedEntity();
}

rule: "Perk/Player/SteelFormation/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.SteelFormation &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    // reset effect
    DestroyEffect(perkEffectAndText [1]);
    // reset type
    perkType = PerkType.Non;
}

playervar define isSteeling! = false;
playervar define steelingEffect!;
playervar define steeledHero!;

rule: "Perk/Player/SteelFormation/update"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.SteelFormation &&
    perkState  == PerkState.Using
){
    perkTargets = 
        FilteredArray(
            PlayersWithinRadius(
                ep, steelRange, Team.Team1, RadiusLOS.Off
            ),
            IsAlive(ae)
        );
    perkTargets.isSteeling = true;
    perkEffectStatus = CountOf(perkTargets);
    WaitUpdateASecond();
    LoopIfConditionIsTrue();
}

define giveArmorUnit: 25;
define maxArmorLimit: GetHeroOriginalHealth(HeroOf(ep)) + 100;

rule: "Perk/Player/SteelFormation/setSteel"
Event.OngoingPlayer
Team.Team1
if(
    isSteeling
){
    DestroyEffect(steelingEffect);
    steelingEffect = CreateEffect(AllPlayers(), Effect.Ring, Color.Orange, ep, 1.0, EffectRev.PositionAndRadius);
    steeledHero = HeroOf();
    while(
        IsAlive(ep) &&
        0 < CountOf(
            FilteredArray(
                PlayersWithinRadius(
                    ep, steelRange, Team.Team1, RadiusLOS.Off
                ), 
                (
                    ae.perkType == PerkType.SteelFormation &&
                    ae.perkState == PerkState.Using
                )
            )
        )
    ){
        if(
            maxArmorLimit > MaxHealth(ep)
        ){
            define giveArmor!;
            define diffArmor! = maxArmorLimit - MaxHealth(ep);
            if(diffArmor < giveArmorUnit){
                giveArmor = diffArmor;
            }
            else{
                giveArmor = giveArmorUnit;
            }
            AddHealthPoolToPlayer(ep, HealthType.Armor, giveArmor, false, false);
        }
        Wait(1, WaitBehavior.IgnoreCondition);
    }
    DestroyEffect(steelingEffect);
    isSteeling = false;
}

rule: "Perk/Player/SteelFormation/releaseSteel"
Event.OngoingPlayer
Team.Team1
if(
    steeledHero != HeroOf()
){
    RemoveAllHealthPoolsFromPlayer(ep);
    steeledHero = HeroOf();
}
