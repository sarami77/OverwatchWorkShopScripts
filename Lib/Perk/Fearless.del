import "PerkCore.del";

define fearlessRange : 16;
define fearlessMaxPercentage : 300;

rule: "Perk/Player/Fearless/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Fearless &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set param
    perkEffectStatus = DefaultPercentage();
    perkEffectCount = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"<0> enemies around.", perkEffectCount>);
    perkEffectAndText [0] = LastTextID();
    CreatePerkEffectHud(
        perkEffectStatus >= fearlessMaxPercentage ?
        <"Damage dealt & healing received <0>% (Max Charge)", RoundToInteger(perkEffectStatus, Rounding.Down)> :
        <"Damage dealt & healing received <0>%", RoundToInteger(perkEffectStatus, Rounding.Down)>
    );
    perkEffectAndText [1] = LastTextID();
    // set effect
    CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue,
        ep, fearlessRange, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [2] = LastCreatedEntity();
}

rule: "Perk/Player/Fearless/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Fearless &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    DestroyHudText(perkEffectAndText [1]);
    // reset effect
    DestroyEffect(perkEffectAndText [2]);
    // reset status
    SetDamageDealt(ep, DefaultPercentage());
    SetHealingReceived(ep, DefaultPercentage());
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Fearless/update"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Fearless &&
    perkState  == PerkState.Using
){
    // get enemy count of naer
    perkEffectCount = 
        CountOf(
            FilteredArray(
                AllPlayers(Team.Team2),
                (
                    DistanceBetween(ep, ae) <= fearlessRange &&
                    IsAlive(ae)
                )
            )
        );

    // change status value
    if(perkEffectCount > 0)
        perkEffectStatus  += (perkEffectCount * 1.2);
    
    else
        perkEffectStatus  -= 10;
    
    // round status value
    if(fearlessMaxPercentage < perkEffectStatus )
        perkEffectStatus = fearlessMaxPercentage;
    else if(DefaultPercentage() > perkEffectStatus )
        perkEffectStatus = DefaultPercentage();
    
    SetDamageDealt(ep, perkEffectStatus );
    SetHealingReceived(ep, perkEffectStatus );
    WaitUpdateASecond();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/Fearless/playAura"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Fearless &&
    perkState  == PerkState.Using
){
    if(
        perkEffectStatus < 150
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.White, ep, MaxLength());
        Wait(1.25, WaitBehavior.AbortWhenFalse);
    }
    else if(
        150 <= perkEffectStatus &&
        perkEffectStatus < 200
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Yellow, ep, MaxLength());
        Wait(1.00, WaitBehavior.AbortWhenFalse);
    }
    else if(
        200 <= perkEffectStatus &&
        perkEffectStatus < 250
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Orange, ep, MaxLength());
        Wait(0.75, WaitBehavior.AbortWhenFalse);
    }
    else if(
        250 <= perkEffectStatus &&
        perkEffectStatus < fearlessMaxPercentage
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Red, ep, MaxLength());
        Wait(0.5, WaitBehavior.AbortWhenFalse);
    }
    else if(
        fearlessMaxPercentage <= perkEffectStatus
    ){
        PlayEffect(
            AllPlayers(), PlayEffect.BadPickupEffect,
            Color.Purple, ep, MaxLength());
        Wait(0.25, WaitBehavior.AbortWhenFalse);
    }
    
    LoopIfConditionIsTrue();
}