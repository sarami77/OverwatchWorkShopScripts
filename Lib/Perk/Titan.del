import "PerkCore.del";

// TAG Titan ----------
rule: "Perk/Player/Titan/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Titan &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = 0;
    rider = 0;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(
        rider != 0 ?
            <"<0> <1> riding on your back.", rider, HeroIconString(HeroOf(rider))> :
            "Teammate can ride your back.");
    perkEffectAndText [0] = LastTextID();
    CreatePerkEffectHud(<"Hold crouch button <0> to shrink.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText [1] = LastTextID();
    // set perk hero
    PerkHero perkHero = GetPerkHero();
    perkHero.hero = Hero.Reinhardt;
    perkHero.statusUnkillable = true;
    perkHero.maxHealth = 200;
    perkHero.healingReceived = 10.0;
    perkHero.damageDealt = 300;
    perkHero.ultimateCharge = DefaultPercentage();
    ForcePlayerPerkHero(ep, perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // set pool health
    AddHealthPoolToPlayer(ep, HealthType.Armor, 1500, true, false);
    healthPoolID = LastCreatedHealthPool();

    // start grow big
    PressButton(ep, Button.Crouch);
}

rule: "Perk/Player/Titan/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Titan &&
    perkState  == PerkState.Non
){
    // set param
    perkEffectStatus = 0;
    // reset hud
    DestroyHudText(ep.perkEffectAndText [0]);
    DestroyHudText(ep.perkEffectAndText [1]);
    DestroyHudText(rider.perkEffectAndText [102]);
    DestroyHudText(rider.perkEffectAndText [103]);

    DetachPlayers(rider);
    rider.ridingTarget = 0;
    Teleport(rider, ep);
    rider = 0;

    // reset perk hero
    StopForcingPerkHero(ep);
    // reset status
    RemoveHealthPoolFromPlayer(healthPoolID);
    StopScalingPlayer(ep);
    StopModifyingHeroVoiceLines(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/Titan/brokenPerkTransform //by helth 1"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Titan &&
    perkState  == PerkState.Using &&
    Health() <= 1
){
    perkState = PerkState.Non;
}

define minBodyScale: 0;
define maxBodyScale: 1;

rule: "Perk/Player/Titan/getBig"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Titan &&
    perkState  == PerkState.Using &&
    !(IsCrouching() || IsButtonHeld(ep, Button.Crouch))
){
    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);

    if(!( minBodyScale <= perkEffectStatus  && perkEffectStatus  <= maxBodyScale))
    {
        perkEffectStatus = minBodyScale;
    }
    while(perkEffectStatus  < maxBodyScale){
        StartScalingPlayer(ep, 1 + (perkEffectStatus  * 1.5), false);
        perkEffectStatus  += 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(ep, 0.5, false);
}

rule: "Perk/Player/Titan/getSmall"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Titan &&
    perkState  == PerkState.Using &&
    (IsCrouching() || IsButtonHeld(ep, Button.Crouch)) &&
    !IsDummyBot()
){
    DetachPlayers(rider);
    rider.ridingTarget = 0;
    Teleport(rider, ep);
    rider = 0;

    PlayEffect(
        AllPlayers(), PlayEffect.GoodPickupEffect,
        Color.White, ep, 1);

    if(!( minBodyScale <= perkEffectStatus  && perkEffectStatus  <= maxBodyScale))
    {
        perkEffectStatus = maxBodyScale;
    }
    while(perkEffectStatus > minBodyScale){
        StartScalingPlayer(ep, 1 + (perkEffectStatus  * 1.5), false);
        perkEffectStatus  -= 0.1;
        WaitUpdateVeryShortCycle();
    }
    StartModifyingHeroVoiceLines(ep, 1.0, false);
}

rule: "Perk/Player/Titan/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.Titan &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < DefaultPercentage()
){
    WaitUpdateASecond();
    SetUltimateCharge(ep, (UltimateChargePercent() + 3));
    LoopIfConditionIsTrue();
}

define isRidingTitan:
    IsAlive(ep) &&
    ridingTarget.perkType == PerkType.Titan &&
    ridingTarget.perkState == PerkState.Using &&
    ridingTarget.rider == ep;

define nearCanRideTitan:
    FilteredArray(
        AllPlayers(Team.Team1),
        (
            ae != ep &&
            ae.perkType == PerkType.Titan &&
            ae.perkState  == PerkState.Using &&
            ae.perkEffectStatus  == maxBodyScale &&
            ae.rider == 0 &&
            DistanceBetween(ep, ae) <= canRidingRange
        )
    );

define canRideTitan:
    !isRidingTitan &&
    CountOf(nearCanRideTitan) > 0;

rule: "Perk/Player/TitanRider/showOperationGetOn"
Event.OngoingPlayer
Team.Team1
if(
    canRideTitan
){
    // set hud
    CreatePerkEffectHud(<"Can add titan's activity time by kill enemy when riding titan.">);
    perkEffectAndText [100] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to get on titan.", ButtonGuide(Button.Jump)>);
    perkEffectAndText [101] = LastTextID();
}

rule: "Perk/Player/Titan/hideOperationGetOn"
Event.OngoingPlayer
Team.Team1
if(
    !canRideTitan
){
    DestroyHudText(perkEffectAndText [100]);
    DestroyHudText(perkEffectAndText [101]);
}

rule: "Perk/Player/TitanRider/showOperationGetOff"
Event.OngoingPlayer
Team.Team1
if(
    isRidingTitan
){
    // set hud
    CreatePerkEffectHud(<"Can add titan's activity time by kill enemy when riding titan.">);
    perkEffectAndText [102] = LastTextID();
    CreatePerkEffectHud(<"Hold crouch button <0> to get off titan.", ButtonGuide(Button.Crouch)>);
    perkEffectAndText [103] = LastTextID();
}

rule: "Perk/Player/TitanRider/hideOperationGetOff"
Event.OngoingPlayer
Team.Team1
if(
    !isRidingTitan
){
    DestroyHudText(perkEffectAndText [102]);
    DestroyHudText(perkEffectAndText [103]);
}

rule: "Perk/Player/TitanRider/getOn"
Event.OngoingPlayer
Team.Team1
if(
    canRideTitan &&
    IsButtonHeld(ep, Button.Jump)
){
    AbortIf(
        IsDummyBot() &&
        IsProbabilityTrue(50)
    );

    WaitLongPressConfirm();

    ridingTarget = FirstOf(nearCanRideTitan);
    AttachPlayers(ep, ridingTarget, EyePosition(ridingTarget) - PositionOf(ridingTarget));
    ridingTarget.rider = ep;
}

rule: "Perk/Player/TitanRider/getOff"
Event.OngoingPlayer
Team.Team1
if(
    isRidingTitan &&
    IsButtonHeld(ep, Button.Crouch)
){
    AbortIf(
        IsDummyBot() &&
        IsProbabilityTrue(50)
    );

    WaitLongPressConfirm();

    DetachPlayers(ep);
    ridingTarget.rider = 0;
    Teleport(ep, ridingTarget);
    ridingTarget = 0;
}

rule: "Perk/Player/TitanRider/addActivityTime"
Event.OnFinalBlow
Team.Team1
if(
    ridingTarget.perkType == PerkType.Titan &&
    ridingTarget.perkState  == PerkState.Using &&
    ridingTarget.perkTimeLimit  > 0
){
    SmallMessage(ep, "Added 10 seconds of titan's activity time by rider's kill.");
    ridingTarget.perkTimeLimit  += 10;
}
