import "PerkCore.del";

define thunderStrikeLandingRange: 2;
define thunderStrikeDamageRange: 5;
define thunderStrikeChargeRate: 8.0;
//define thunderStrikeChargeRate: 80;    // for bot only
define thunderStrikeConsumePower: 100;

rule: "Perk/Player/GrudgeThunderStrike/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set status
    perkPosition = 0;
    landPosition = 0;
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Thunder strike power <0>", thunderStrikePower>);
    perkEffectAndText [0] = LastTextID();
    CreatePerkEffectHud(<"Continuous consumes power while button holding.">);
    perkEffectAndText [1] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to shot thunder strike.", ButtonGuide(Button.Melee)>);
    perkEffectAndText [2] = LastTextID();
}

rule: "Perk/Player/GrudgeThunderStrike/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Non
){
    // reset text
    DestroyHudText(perkEffectAndText [0]);
    DestroyHudText(perkEffectAndText [1]);
    DestroyHudText(perkEffectAndText [2]);
    // reset effect
    DestroyEffect(perkEffectAndText [3]);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/GrudgeThunderStrike/chargePowerByTakenDamage"
Event.OnDamageTaken
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Using &&
    Attacker() != ep &&
    EventDamage() > 0
){
    thunderStrikePower += RoundToInteger(EventDamage() * thunderStrikeChargeRate);
}

rule: "Perk/Player/GrudgeThunderStrike/shot"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready &&
    IsButtonHeld(ep, Button.Melee)
){
    WaitLongPressConfirm();
    AbortIf(thunderStrikePower <= 0);
    
    // create Trajectory of Thunder
    DestroyEffect(perkEffectAndText [3]);
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam,
        landPosition, landPosition2,
        Color.Blue, EffectRev.VisibleToPositionRadiusAndColor);
    perkEffectAndText [3] = LastCreatedEntity(); 

    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/GrudgeThunderStrike/cancelShot"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered &&
    !IsButtonHeld(ep, Button.Melee)
){
    DestroyEffect(perkEffectAndText [3]);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/GrudgeThunderStrike/cancelShotByEmpty"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered &&
    thunderStrikePower <= 0
){
    DestroyEffect(perkEffectAndText [3]);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/GrudgeThunderStrike/landedToPoint"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeThunderStrike &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered &&
    thunderStrikePower > 0
){
    // set land position
    landPosition = 
        AimingPosition() + 
        RandomPosition(
            thunderStrikeLandingRange,
            0,
            thunderStrikeLandingRange
        );
    
    landPosition2 =
        landPosition +
        (Up() * 50) +
        RandomPosition(
            thunderStrikeLandingRange * 5,
            0,
            thunderStrikeLandingRange * 5
        );

    // splash damage
    Damage(
        PlayersWithinRadius(
            landPosition, thunderStrikeDamageRange,
            Team.Team2, RadiusLOS.Off),
        ep, thunderStrikeConsumePower);
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Blue,
        landPosition,
        1);
    // play ring
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosion,
        Color.Blue,
        landPosition,
        thunderStrikeDamageRange);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.White,
        landPosition,
        100);

    // consume power
    thunderStrikePower =
        thunderStrikePower < thunderStrikeConsumePower ?
        0:
        thunderStrikePower - thunderStrikeConsumePower;

    WaitContinuousBlastCycle();
    LoopIfConditionIsTrue();
}
