import "PerkCore.del";

rule: "Perk/Player/LegendalyNinja/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using
){
    // set time limit
    perk[Perk.perkTimeLimit] = 120;
    // set param
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
    // set hud
    perk[Perk.perkEffectAndText] = [];
    CreatePerkEffectHud(<"Hold melee button <0> to attract enemy with grapple hook.", ButtonGuide(Button.Melee)>);
    perk[Perk.perkEffectAndText] [0] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to move in air with grapple hook.", ButtonGuide(Button.Jump)>);
    perk[Perk.perkEffectAndText] [1] = LastTextID();
    // set perk hero
    PerkHero perkHero = new PerkHero();
    perkHero.hero = Hero.Genji;
    perkHero.statusInvincible = true;
    perkHero.damageDealt = 150;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.jumpSpeed = 125;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(ep, perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // use ult
    PressButton(ep, Button.Ultimate);
}

rule: "Perk/Player/LegendalyNinja/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perk[Perk.perkEffectAndText] [0]);
    DestroyHudText(perk[Perk.perkEffectAndText] [1]);
    // reset effect
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    // reset perk hero
    StopForcingPerkHero(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/LegendalyNinja/moveInAir"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    IsButtonHeld(ep, Button.Jump)
){
    AbortIf(perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered);
    WaitLongPressConfirm();

    // move in air
    aimPosition = AimingPosition();
    if(
        DistanceBetween(ep, aimPosition) <= 100
    ){
        CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
            ep, aimPosition,
            Color.Green, EffectRev.VisibleToPositionAndRadius);
        perk[Perk.perkEffectAndText] [2] = LastCreatedEntity();
        ApplyImpulse(ep, 
            VectorTowards(ep, aimPosition + (Up() * 1)),
            DistanceBetween(ep, aimPosition) * 2.5 > minMoveImpulse ?
                DistanceBetween(ep, aimPosition) * 2.5 :
                minMoveImpulse,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Triggered;

    // show beam effect
    WaitPlayEffect();
    DestroyEffect(perk[Perk.perkEffectAndText] [2]);
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
}

rule: "Perk/Player/LegendalyNinja/pullTarget"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    IsButtonHeld(ep, Button.Melee)
){
    AbortIf(perk[Perk.perkEffectStatus]  == PerkEffectStatus.Triggered);
    WaitLongPressConfirm();
    
    // pull target
    perk[Perk.perkTargets] = AimingPlayer();
    if(
        DistanceBetween(ep, perk[Perk.perkTargets]) <= 100 &&
        perk[Perk.perkTargets] != null
    ){
        SetStatus(perk[Perk.perkTargets], ep, Status.Stunned, 1.0);
        // wait move stop
        Wait(0.1, WaitBehavior.IgnoreCondition);
        CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
            ep, perk[Perk.perkTargets],
            Color.Red, EffectRev.VisibleToPositionAndRadius);
        perk[Perk.perkEffectAndText] [3] = LastCreatedEntity();
        ApplyImpulse(perk[Perk.perkTargets], 
            VectorTowards(perk[Perk.perkTargets], PositionOf(ep) + (Up() * 2.0)),
            DistanceBetween(perk[Perk.perkTargets], ep) * 2.5,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Triggered;

    // show beam effect
    WaitPlayEffect();
    DestroyEffect(perk[Perk.perkEffectAndText] [3]);
    perk[Perk.perkEffectStatus] = PerkEffectStatus.Ready;
}

rule: "Perk/Player/LegendalyNinja/addActivityTime"
Event.OnFinalBlow
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    perk[Perk.perkTimeLimit]  > 0
){
    SmallMessage(ep, "Added 2 seconds of activity time.");
    perk[Perk.perkTimeLimit]  += 2;
}

rule: "Perk/Player/LegendalyNinja/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateMediumCycle();
    SetUltimateCharge(ep, (UltimateChargePercent() + 8));
    LoopIfConditionIsTrue();
}
