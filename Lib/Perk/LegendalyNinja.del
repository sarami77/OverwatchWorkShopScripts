import "PerkCore.del";

rule: "Perk/Player/LegendalyNinja/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 120;
    // set param
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Hold melee button <0> to attract enemy with grapple hook.", ButtonGuide(Button.Melee)>);
    perkEffectAndText [0] = LastTextID();
    CreatePerkEffectHud(<"Hold jump button <0> to move in air with grapple hook.", ButtonGuide(Button.Jump)>);
    perkEffectAndText [1] = LastTextID();
    // set perk hero
    PerkHero perkHero = GetPerkHero();
    perkHero.hero = Hero.Genji;
    perkHero.statusInvincible = true;
    perkHero.damageDealt = 200;
    perkHero.gravity = 75;
    perkHero.moveSpeed = 150;
    perkHero.jumpSpeed = 125;
    perkHero.ultimateCharge = 100;
    ForcePlayerPerkHero(ep, perkHero);
    Wait(0.5, WaitBehavior.AbortWhenFalse);

    // use ult
    PressButton(ep, Button.Ultimate);
}

rule: "Perk/Player/LegendalyNinja/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Non
){
    // reset hud
    DestroyHudText(perkEffectAndText [0]);
    DestroyHudText(perkEffectAndText [1]);
    // reset effect
    DestroyEffect(perkEffectAndText [2]);
    DestroyEffect(perkEffectAndText [3]);
    // reset perk hero
    StopForcingPerkHero(ep);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/LegendalyNinja/moveInAir"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    IsButtonHeld(ep, Button.Jump)
){
    AbortIf(perkEffectStatus  == PerkEffectStatus.Triggered);
    WaitLongPressConfirm();

    // move in air
    aimPosition = AimingPosition();
    if(
        DistanceBetween(ep, aimPosition) <= 100
    ){
        CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
            ep, aimPosition,
            Color.Green, EffectRev.VisibleToPositionAndRadius);
        perkEffectAndText [2] = LastCreatedEntity();
        ApplyImpulse(ep, 
            VectorTowards(ep, aimPosition + (Up() * 1)),
            DistanceBetween(ep, aimPosition) * 2.5 > minMoveImpulse ?
                DistanceBetween(ep, aimPosition) * 2.5 :
                minMoveImpulse,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    perkEffectStatus = PerkEffectStatus.Triggered;

    // show beam effect
    WaitPlayEffect();
    DestroyEffect(perkEffectAndText [2]);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/LegendalyNinja/pullTarget"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    IsButtonHeld(ep, Button.Melee)
){
    AbortIf(perkEffectStatus  == PerkEffectStatus.Triggered);
    WaitLongPressConfirm();
    
    // pull target
    perkTargets = AimingPlayer();
    if(
        DistanceBetween(ep, perkTargets) <= 100 &&
        perkTargets != null
    ){
        SetStatus(perkTargets, ep, Status.Stunned, 1.0);
        // wait move stop
        Wait(0.1, WaitBehavior.IgnoreCondition);
        CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam,
            ep, perkTargets,
            Color.Red, EffectRev.VisibleToPositionAndRadius);
        perkEffectAndText [3] = LastCreatedEntity();
        ApplyImpulse(perkTargets, 
            VectorTowards(perkTargets, PositionOf(ep) + (Up() * 2.0)),
            DistanceBetween(perkTargets, ep) * 2.5,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    perkEffectStatus = PerkEffectStatus.Triggered;

    // show beam effect
    WaitPlayEffect();
    DestroyEffect(perkEffectAndText [3]);
    perkEffectStatus = PerkEffectStatus.Ready;
}

rule: "Perk/Player/LegendalyNinja/addActivityTime"
Event.OnFinalBlow
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    perkTimeLimit  > 0
){
    SmallMessage(ep, "Added 3 seconds of activity time.");
    perkTimeLimit  += 3;
}

rule: "Perk/Player/LegendalyNinja/chargingUlt"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.LegendalyNinja &&
    perkState  == PerkState.Using &&
    !IsUsingUltimate() &&
    UltimateChargePercent() < 100
){
    WaitUpdateASecond();
    SetUltimateCharge(ep, (UltimateChargePercent() + 8));
    LoopIfConditionIsTrue();
}
