import "PerkCore.del";

define fireBallMinSpeed: 10;
define fireBallMaxSpeed: 50;
define fireBallMinCollisionRange: 2.0;
define fireBallChargeRate: 3.0;
// define fireBallChargeRate: 30;  // for bot only

rule: "Perk/Player/GrudgeFireBall/activate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using
){
    // set time limit
    perkTimeLimit = 300;
    // set status
    perkPosition = 0;
    landPosition = 0;
    perkEffectStatus = PerkEffectStatus.Ready;
    // set hud
    perkEffectAndText = [];
    CreatePerkEffectHud(<"Fire ball power <0>", fireBallPower>);
    perkEffectAndText [0] = LastTextID();
    CreatePerkEffectHud(<"Consume all power in one shot.">);
    perkEffectAndText [1] = LastTextID();
    CreatePerkEffectHud(<"Hold melee button <0> to shot fire ball.", ButtonGuide(Button.Melee)>);
    perkEffectAndText [2] = LastTextID();
}

rule: "Perk/Player/GrudgeFireBall/deactivate"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Non
){
    // reset text
    DestroyHudText(perkEffectAndText [0]);
    DestroyHudText(perkEffectAndText [1]);
    DestroyHudText(perkEffectAndText [2]);
    // reset effect
    DestroyEffect(perkEffectAndText [3]);
    DestroyEffect(perkEffectAndText [4]);
    StopChasingVariable(perkPosition);
    // reset type
    perkType = PerkType.Non;
}

rule: "Perk/Player/GrudgeFireBall/chargePowerByTakenDamage"
Event.OnDamageTaken
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using &&
    Attacker() != ep &&
    EventDamage() > 0
){
    fireBallPower += RoundToInteger(EventDamage() * fireBallChargeRate);
}

rule: "Perk/Player/GrudgeFireBall/shot"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Ready &&
    IsButtonHeld(ep, Button.Melee)
){
    WaitLongPressConfirm();
    AbortIf(fireBallPower <= 0);

    // play shot sound
    PlayEffect(
        ep, PlayEffect.DebuffImpactSound,
        Color.White, ep, MaxValue());

    // set fireball param
    fireBallSpeed = fireBallMaxSpeed - (fireBallPower * 0.045);
    fireBallSpeed = Max(fireBallMinSpeed, fireBallSpeed);
    fireBallSize = fireBallPower * 0.004;
    fireBallBlastRange = fireBallPower * 0.02;
    fireBallTriggerDelay = fireBallPower * 0.001;

    landPosition = AimingPositionIgnorePlayer();    
    perkPosition = EyePosition() + FacingDirectionOf(ep) * fireBallSize;

    // start movement
    UpdateEveryFrame(perkPosition);
    ChaseVariableAtRate(
        perkPosition, landPosition, fireBallSpeed,
        RateChaseReevaluation.DestinationAndRate);
    // show ball
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red,
        perkPosition, fireBallSize, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [3] = LastCreatedEntity();
    // show aura
    CreateEffect(AllPlayers(), Effect.GoodAura, Color.Red,
        perkPosition, fireBallSize * 1.5, EffectRev.VisibleToPositionAndRadius);
    perkEffectAndText [4] = LastCreatedEntity();
    // play shot fire
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Red, perkPosition, fireBallSize);

    perkEffectStatus = PerkEffectStatus.Triggered;
}

rule: "Perk/Player/GrudgeFireBall/playTrajectory"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered
){
    // play blast
    PlayEffect(
        AllPlayers(), PlayEffect.BadExplosion,
        Color.Red, perkPosition, fireBallSize * 1.5);

    WaitUpdateVeryShortCycle();
    LoopIfConditionIsTrue();
}

rule: "Perk/Player/GrudgeFireBall/landedToPoint"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered
){
    Wait(
        DistanceBetween(perkPosition, landPosition) / fireBallSpeed,
        WaitBehavior.AbortWhenFalse);
    Wait(fireBallTriggerDelay, WaitBehavior.IgnoreCondition);
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/hitToPlayer"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered &&
    IsAlive(ClosestPlayerTo(perkPosition, Team.Team2)) &&
    DistanceBetween(
        perkPosition,
        ClosestPlayerTo(perkPosition, Team.Team2))
            <= 
        Max(fireBallMinCollisionRange, fireBallSize)
){
    Wait(fireBallTriggerDelay / 2, WaitBehavior.IgnoreCondition);
    ExplodeFireBall();
}

rule: "Perk/Player/GrudgeFireBall/timeOut"
Event.OngoingPlayer
Team.Team1
if(
    perkType == PerkType.GrudgeFireBall &&
    perkState  == PerkState.Using &&
    perkEffectStatus  == PerkEffectStatus.Triggered
){
    Wait(5, WaitBehavior.AbortWhenFalse);
    ExplodeFireBall();
}

void ExplodeFireBall()"ExplodeFireBall"{
    AbortIf(perkEffectStatus  != PerkEffectStatus.Triggered);
    perkEffectStatus = PerkEffectStatus.SecondTriggered;

    // stop movement
    StopChasingVariable(perkPosition);
    // hide ball
    DestroyEffect(perkEffectAndText [3]);
    // hide aura
    DestroyEffect(perkEffectAndText [4]);
    // get target
    perkTargets = 
        PlayersWithinRadius(
            perkPosition, Max(fireBallMinCollisionRange, fireBallBlastRange),
            Team.Team2, RadiusLOS.Off);
    // apply blast impulse
    ApplyBlastImpulse(perkTargets, perkPosition, fireBallBlastRange);
    // damage
    Damage(perkTargets, ep, fireBallPower);
    // play blast sound
    PlayEffect(
        AllPlayers(), PlayEffect.RingExplosionSound,
        Color.Red, perkPosition, fireBallBlastRange * 50);
    // play big blast with sound
    PlayContinuousBlast(
        Color.Red,
        perkPosition,
        fireBallBlastRange,
        Min(7, RoundToInteger(fireBallBlastRange / 3, Rounding.Nearest)),
        Min(3, RoundToInteger(fireBallBlastRange / 6, Rounding.Nearest)),
    );

    // reset charge
    fireBallPower = 0;

    perkEffectStatus = PerkEffectStatus.Ready;
}