import "Utility.del";
import "Debug.del";

// TAG public property
globalvar define botAimScat = WorkshopSettingReal("Enemy Bot Settings", "Aim Scattering (0 is head shot)",              0.2, 0, 1000, 3);

// TAG Bot/Spawn ----------
enum BotAsset{
    EnemyType,
    Hero,
    Count
}

// TAG EnemyType ----------
playervar define enemyType;
enum EnemyType{
    None,
    Minion,
    Elite,
    Boss,
    GiantBoss
}

// TAG BotAsset ----------
define RandomHero: RandomValueInArray(AllHeroes());
define RandomTankHero: RandomValueInArray(AllTankHeroes());
define RandomDamageHero: RandomValueInArray(AllDamageHeroes());
define RandomSupportHero: RandomValueInArray(AllSupportHeroes());
globalvar define enemyTeamName! = "";

void CreateBotsByAssetList(define assetList, define team)"CreateBotsByAssetList"{
    define asset = ValueInArray(assetList, RandomInteger(0, CountOf(assetList) - 1));
    // set team name
    enemyTeamName = asset[0];
    // create bot by asset
    for(define assetIdx! = 1; assetIdx < CountOf(asset); assetIdx++){
        for(define botCount! = 0; botCount < asset[assetIdx][BotAsset.Count]; botCount++){
            // get empty slot
            define slot! = getEmptySlotNo(team);
            while(!HasSpawned(PlayersInSlot(slot, team))){
                // create bot
                CreateDummyBot(
                    asset[assetIdx][BotAsset.Hero],
                    team,
                    slot,
                    SpawnPoints(team)[0],
                    RandomDirection()
                );
                Wait(0.1, WaitBehavior.IgnoreCondition);
                WaitUntilServerFree();
            }
            // set Bot type as enemy type
            define bot! = PlayersInSlot(slot, team);
            bot.enemyType = asset[assetIdx][BotAsset.EnemyType];
        }
    }
}

void CreateBotsByHeroList(define heroList, define num, define team)"CreateBotsByHeroList"{
    // create bot by asset
    for(define slotIdx! = 0; slotIdx < num; slotIdx++){
        // get empty slot
        define slot! = getEmptySlotNo(team);
        while(!HasSpawned(PlayersInSlot(slot, team))){
            // create bot
            CreateDummyBot(
                RandomValueInArray(heroList),
                team,
                slot,
                SpawnPoints(team)[0],
                RandomDirection()
            );
            Wait(0.1, WaitBehavior.IgnoreCondition);
            WaitUntilServerFree();
        }
    }
}

void CreateBotsByHeroInput(define hero, define num, define team)"CreateBotsByHeroInput"{
    // create bot by asset
    for(define slotIdx! = 0; slotIdx < num; slotIdx++){
        // get empty slot
        define slot! = getEmptySlotNo(team);
        // create bot
        CreateDummyBot(
            hero,
            team,
            slot,
            SpawnPoints(team)[0],
            RandomDirection()
        );
        Wait(0.1, WaitBehavior.IgnoreCondition);
        WaitUntilServerFree();
    }
}

define builtinMaxSlotNum: 24;

void DestroyBots(define team!)"DestroyBots"{
    for(define slotIdx! = 0; slotIdx < builtinMaxSlotNum; slotIdx ++){
        DestroyDummyBot(
            team, slotIdx);
        Wait(0.01, WaitBehavior.IgnoreCondition);
    }
}

Number getEmptySlotNo(define team!)"getEmptySlotNo"{
    for(define slotNo! = 0; slotNo < builtinMaxSlotNum; slotNo++){
        if(PlayersInSlot(slotNo, team) == null) {
            return slotNo;
        }
    }
    errLog("getEmptySlotNo not found empty slot");
    return -1;
}

// TAG Bot/SetBotInfo ----------

playervar define heroName!;
playervar define supportPrioloty!;
playervar define supportButtons!;
playervar define attackButtons!;
playervar define canFireButtonCombination;

playervar define primaryFireButtonBehaivor;
playervar define primaryFireButtonReleaseMin;
playervar define primaryFireButtonReleaseMax;
playervar define primaryFireButtonPressMin;
playervar define primaryFireButtonPressMax;

playervar define secondaryFireButtonBehaivor;
playervar define secondaryFireButtonReleaseMin;
playervar define secondaryFireButtonReleaseMax;
playervar define secondaryFireButtonPressMin;
playervar define secondaryFireButtonPressMax;

playervar define ability1ButtonReleaseMin;
playervar define ability1ButtonReleaseMax;
playervar define ability1ButtonPressMin;
playervar define ability1ButtonPressMax;

playervar define ability2ButtonReleaseMin;
playervar define ability2ButtonReleaseMax;
playervar define ability2ButtonPressMin;
playervar define ability2ButtonPressMax;

playervar define ultimateButtonReleaseMin;
playervar define ultimateButtonReleaseMax;
playervar define ultimateButtonPressMin;
playervar define ultimateButtonPressMax;

playervar define actionRange!;
playervar define actionRangeMin!;
playervar define actionRangeMax!;

rule: "Bot/SetActionRoutine"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    SetHeroActionRoutine();
}

rule: "Bot/SetActionRoutine"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned() &&
    HeroOf() == Hero.Echo &&
    IsUsingUltimate()
){
    Wait(1, WaitBehavior.AbortWhenFalse);
    SetHeroActionRoutine();
}

void SetHeroActionRoutine()"SetHeroActionRoutine"{
        target = 0;
        
        heroName = "Default";
        actionRange = ActionRange.Middle;
        canFireButtonCombination = false;

        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        primaryFireButtonReleaseMin = 0;
        primaryFireButtonReleaseMax = 2.5;
        primaryFireButtonPressMin = 0;
        primaryFireButtonPressMax = 5;

        secondaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonReleaseMin = 0;
        secondaryFireButtonReleaseMax = 2.5;
        secondaryFireButtonPressMin = 0;
        secondaryFireButtonPressMax = 5;

        ability1ButtonReleaseMin = 0;
        ability1ButtonReleaseMax = 5;
        ability1ButtonPressMin = 0;
        ability1ButtonPressMax = 1;

        ability2ButtonReleaseMin = 0;
        ability2ButtonReleaseMax = 5;
        ability2ButtonPressMin = 0;
        ability2ButtonPressMax = 1;

        ultimateButtonReleaseMin = 0;
        ultimateButtonReleaseMax = 15;
        ultimateButtonPressMin = 0;
        ultimateButtonPressMax = 1;

        supportPrioloty = 0;
        supportButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        attackButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];


    switch(HeroOf()){
        case Hero.Ana:
        heroName = "Ana";
        actionRange = ActionRange.Far;
        canFireButtonCombination = true;
        secondaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonPressMin = 10;
        secondaryFireButtonPressMax = 15;
        supportPrioloty = 100;
        supportButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability2
        ];
        break;

        case Hero.Ashe:
        heroName = "Ashe";
        actionRange = ActionRange.Far;
        canFireButtonCombination = true;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleaseRepeat;
        secondaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonPressMin = 10;
        secondaryFireButtonPressMax = 10;
        break;

        case Hero.Baptiste:
        heroName = "Baptiste";
        actionRange = ActionRange.Far;
        canFireButtonCombination = true;
        supportPrioloty = 100;
        supportButtons = [
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        attackButtons = [
            Button.PrimaryFire,
            Button.Ability1
        ];
        break;

        case Hero.Bastion:
        heroName = "Bastion";
        actionRange = ActionRange.Far;
        primaryFireButtonReleaseMax = 1;
        break;

        case Hero.Brigitte:
        heroName = "Brigitte";
        actionRange = ActionRange.Melee;
        canFireButtonCombination = true;
        secondaryFireButtonReleaseMax = 15;
        secondaryFireButtonPressMin = 3;
        secondaryFireButtonPressMax = 6;
        ability2ButtonReleaseMax = 1;
        ultimateButtonReleaseMax = 30;
        supportPrioloty = 75;
        supportButtons = [
            Button.SecondaryFire,
            Button.Ability2
        ];
        break;

        case Hero.Cassidy:
        heroName = "Cassidy";
        actionRange = ActionRange.Close;
        secondaryFireButtonReleaseMax = 20;
        break;

        case Hero.Doomfist:
        heroName = "Doomfist";
        actionRange = ActionRange.Melee;
        primaryFireButtonReleaseMax = 10;
        secondaryFireButtonPressMin = 2;
        secondaryFireButtonPressMax = 2;
        secondaryFireButtonReleaseMax = 10;
        break;

        case Hero.Dva:
        heroName = "Dva";
        actionRange = ActionRange.Close;
        ultimateButtonReleaseMax = 40;
        break;

        case Hero.Echo:
        heroName = "Echo";
        actionRange = ActionRange.Middle;
        break;

        case Hero.Genji:
        heroName = "Genji";
        actionRange = ActionRange.Melee;
        break;

        case Hero.Hanzo:
        heroName = "Hanzo";
        actionRange = ActionRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        primaryFireButtonReleaseMax = 1;
        primaryFireButtonPressMin = 0.75;
        primaryFireButtonPressMax = 1.25;
        secondaryFireButtonBehaivor = ButtonBehaivor.Non;
        break;

        case Hero.Junkrat:
        heroName = "Junkrat";
        actionRange = ActionRange.Middle;
        break;

        case Hero.Lucio:
        heroName = "Lucio";
        actionRange = ActionRange.Middle;
        ultimateButtonReleaseMax = 15;
        supportPrioloty = 25;
        supportButtons = [
            Button.Ability1,
            Button.Ability2
        ];
        break;

        case Hero.Mei:
        heroName = "Mei";
        actionRange = ActionRange.Close;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        ultimateButtonReleaseMax = 30;
        break;

        case Hero.Mercy:
        heroName = "Mercy";
        actionRange = ActionRange.Far;
        primaryFireButtonReleaseMax = 1;
        secondaryFireButtonReleaseMax = 10;
        ability1ButtonReleaseMax = 2;
        ability2ButtonPressMax = 10;
        ability2ButtonReleaseMax = 1;
        supportPrioloty = 100;
        supportButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        break;

        case Hero.Moira:
        heroName = "Moira";
        actionRange = ActionRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        supportPrioloty = 100;
        supportButtons = [
            Button.PrimaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        attackButtons = [
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        break;

        case Hero.Orisa:
        heroName = "Orisa";
        actionRange = ActionRange.Close;
        primaryFireButtonPressMax = 15;        
        break;

        case Hero.Pharah:
        heroName = "Pharah";
        actionRange = ActionRange.Middle;
        break;

        case Hero.Reaper:
        heroName = "Reaper";
        actionRange = ActionRange.Close;
        primaryFireButtonPressMax = 20;
        ability2ButtonReleaseMax = 10;
        break;

        case Hero.Reinhardt:
        heroName = "Reinhardt";
        actionRange = ActionRange.Melee;
        secondaryFireButtonReleaseMax = 15;
        secondaryFireButtonPressMin = 3;
        secondaryFireButtonPressMax = 6;
        primaryFireButtonPressMax = 20;
        primaryFireButtonReleaseMax = 1;
        break;

        case Hero.Roadhog:
        heroName = "Roadhog";
        actionRange = ActionRange.Close;
        primaryFireButtonPressMax = 10;
        break;

        case Hero.Sigma:
        heroName = "Sigma";
        actionRange = ActionRange.Middle;
        primaryFireButtonReleaseMax = 0;
        secondaryFireButtonReleaseMax = 5;
        secondaryFireButtonPressMax = 1;
        ultimateButtonReleaseMax = 15;
        break;

        case Hero.Soldier76:
        heroName = "Soldier76";
        actionRange = ActionRange.Middle;
        break;

        case Hero.Sombra:
        heroName = "Sombra";
        actionRange = ActionRange.Close;
        secondaryFireButtonPressMin = 1.5;
        ability2ButtonReleaseMax = 10;
        ability2ButtonPressMax = 0.5;
        break;

        case Hero.Symmetra:
        heroName = "Symmetra";
        actionRange = ActionRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonPressMin = 1;
        secondaryFireButtonPressMax = 3;
        ability1ButtonReleaseMin = 1;
        ability1ButtonReleaseMax = 3;
        ability2ButtonReleaseMax = 30;
        break;

        case Hero.Torbjorn:
        heroName = "Torbjorn";
        actionRange = ActionRange.Middle;
        break;

        case Hero.Tracer:
        heroName = "Tracer";
        actionRange = ActionRange.Close;
        ultimateButtonReleaseMin = 1;
        ultimateButtonReleaseMax = 1;
        break;

        case Hero.Widowmaker:
        heroName = "Widowmaker";
        actionRange = ActionRange.Far;
        canFireButtonCombination = true;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        primaryFireButtonReleaseMin = 1;
        primaryFireButtonReleaseMax = 1.5;
        primaryFireButtonPressMin = 0;
        primaryFireButtonPressMax = 1;
        secondaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonPressMin = 20;
        secondaryFireButtonPressMax = 30;
        ability1ButtonReleaseMin = 20;
        ability1ButtonReleaseMax = 30;
        ability2ButtonReleaseMin = 20;
        ability2ButtonReleaseMax = 30;
        break;

        case Hero.Winston:
        heroName = "Winston";
        actionRange = ActionRange.Melee;
        ultimateButtonReleaseMax = 40;
        break;

        case Hero.WreckingBall:
        heroName = "WreckingBall";
        actionRange = ActionRange.Close;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        primaryFireButtonReleaseMax = 15;
        primaryFireButtonPressMax = 20;
        secondaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        secondaryFireButtonPressMin = 6;
        secondaryFireButtonPressMax = 15;
        ability1ButtonReleaseMin = 5;
        ability1ButtonReleaseMax = 10;
        break;

        case Hero.Zarya:
        heroName = "Zarya";
        actionRange = ActionRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        ability2ButtonPressMin = 0.5;
        ability2ButtonPressMax = 0.5;
        ability2ButtonReleaseMin = 0.5;
        ability2ButtonReleaseMax = 0.5;
        supportPrioloty = 25;
        supportButtons = [
            Button.Ability1,
            Button.Ability2
        ];
        break;

        case Hero.Zenyatta:
        heroName = "Zenyatta";
        actionRange = ActionRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.ReleasePress;
        primaryFireButtonReleaseMin = 1;
        secondaryFireButtonReleaseMin = 1;
        ability1ButtonPressMin = 0.5;
        ability1ButtonPressMax = 0.5;
        ability1ButtonReleaseMin = 0.5;
        ability1ButtonReleaseMax = 0.5;
        ability2ButtonPressMin = 0.5;
        ability2ButtonPressMax = 0.5;
        ability2ButtonReleaseMin = 0.5;
        ability2ButtonReleaseMax = 0.5;
        ultimateButtonReleaseMax = 30;
        supportPrioloty = 25;
        supportButtons = [
            Button.Ability1,
            Button.Ability2
        ];
        break;
    }

    // set Attack range
    switch(actionRange){
        case ActionRange.Melee:
            actionRangeMin = 0;
            actionRangeMax = 5;
            break;
        case ActionRange.Close:
            actionRangeMin = 0;
            actionRangeMax = 10;
            break;
        case ActionRange.Middle:
            actionRangeMin = 10;
            actionRangeMax = 20;
            break;
        case ActionRange.Far:
            actionRangeMin = 20;
            actionRangeMax = 30;
            break;
    }
}

enum ActionState{
    Non,
    Changing,
    Attack,
    Support
}

enum ActionRange{
    Non,
    Melee,
    Close,
    Middle,
    Far
}

enum ButtonBehaivor{
    Non,
    ReleasePress,
    ReleaseRepeat
}

// TAG Bot/ActionState/StateControl ----------
playervar define watchUpdateRate = 3;

define FindAttackTarget():
    FirstOf(
        SortedArray(
            FilteredArray(
                AllLivingPlayers(EnemyTeamOf()),
                (
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock) &&
                    !(
                        IsStealth(ae) &&
                        DistanceBetween(ae, ep) >= 4
                    )
                )
            ),
            DistanceBetween(ae, ep)
        )
    );

define FindSupportTarget():
    FirstOf(
        SortedArray(
            FilteredArray(
                AllLivingPlayers(TeamOf()),
                (
                    ae != ep &&
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock) &&
                    (
                        ProbabilityTrue((1 - NormalizedHealth(ae)) * supportPrioloty)
                    )
                )
            ),
            NormalizedHealth(ae)
        )
    );

define changeTargetProbForAttack: 50;

define WaitRandomForReduceServerLoad(){
    if(isServerOverLoading()){
        WaitUntilServerFree();
        Wait(RandomReal(0, 1), WaitBehavior.AbortWhenFalse);
    }
}

void ApplyNextActionState(define player!, define nextActionState!) playervar "ApplyNextActionState"{
    // if state changed
    if(nextActionState != player.actionState){
        // next state is not Non state
        if(nextActionState != ActionState.Non){
            // set Non state for restart button control
            player.actionState = ActionState.Changing;
            WaitChangeState();
        }       
        // set next state
        player.actionState = nextActionState;
    }
}

rule: "Bot/ActionState/StateControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    // get next state
    define nextActionState!;
    // is alive
    if(IsAlive())
    { 
        // get targetSighted
        define targetSighted! =
            target != 0 &&          // has not target
            IsAlive(target) &&      // target alive
            IsInLineOfSight(ep, target, BarrierLOS.NoBarriersBlock) &&  // in line
            !(
                IsStealth(target) &&
                DistanceBetween(target, ep) >= 4
            );

        define tryGetTarget! = false;
        // target not Sighted
        if(!targetSighted){
            tryGetTarget = true;
        }
        // is support role hero
        else if(0 < supportPrioloty){
            if(actionState == ActionState.Attack){
                // change target dependent on attack target helth & high healing prioloty
                if(
                    ProbabilityTrue(NormalizedHealth(target) * supportPrioloty * 2.0)
                ){
                    tryGetTarget = true;
                }
            }
            else if(actionState == ActionState.Support){
                // change target dependent on support target helth & low healing prioloty
                if(
                    ProbabilityTrue(NormalizedHealth(target) * supportPrioloty * 0.5)
                ){
                    tryGetTarget = true;
                }
                // heal completed
                else if(
                    NormalizedHealth(target) >= 1
                ){
                    tryGetTarget = true;
                }
            }
        }
        // is not support role hero
        else{
            // change target dependent on attack target helth & attack prob
            if(
                ProbabilityTrue(NormalizedHealth(target) * changeTargetProbForAttack)
            ){
                tryGetTarget = true;
            }
        }

        // get new target
        if(tryGetTarget){
            // is support role hero
            if(0 < supportPrioloty)
            {
                // find support target
                target = FindSupportTarget();
                // not found heal target
                if(target == 0){
                    // find attack target
                    target = FindAttackTarget();
                }
            }
            else{
                // find attack target
                target = FindAttackTarget();
            }
        }

        // has target
        if(
            target != 0 && target != null
        ){
            // target is enemy
            if(TeamOf() != TeamOf(target)){
                // Attack state
                nextActionState = ActionState.Attack;
            }
            else{
                // Support state
                nextActionState = ActionState.Support; 
            }
        }
        else{
            // Non state by target not found
            nextActionState = ActionState.Non;
        }       
    }
    else{
        // Non state by dead
        nextActionState = ActionState.Non; 
    }

    if(
        actionState != ActionState.Attack &&
        nextActionState == ActionState.Attack
    ){
        // call attack by trans to attack state
        CallAttackNearBot();
    }

    // apply next state
    ApplyNextActionState(ep, nextActionState);

    Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    WaitRandomForReduceServerLoad();
    LoopIfConditionIsTrue();
}

rule: "Bot/ActionState/CallAttackByDamageTaken"
Event.OnDamageTaken
if(
    IsDummyBot()
){
    // call attack by damage taken
    CallAttackNearBot();
}

globalvar define isCallAttackCoolDown! = false;

void CallAttackNearBot()"CallAttackNearBot"{
    if(isCallAttackCoolDown) return;
    isCallAttackCoolDown = true;

    WaitRandomForReduceServerLoad();

    define nearFriends! = FilteredArray(
        PlayersWithinRadius(
            ep, 10, TeamOf(), RadiusLOS.Off
        ),
        (
            IsDummyBot() &&
            IsAlive(ae) &&
            ae.actionState == ActionState.Non
        )
    );
    for(define nearFriendsIndex! = 0; nearFriendsIndex < CountOf(nearFriends); nearFriendsIndex ++){
        // set some target
        nearFriends[nearFriendsIndex].target = ep.target;
        // apply next state  
        ApplyNextActionState(nearFriends[nearFriendsIndex], ep.actionState);
        Wait(0.2, WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/ActionState/callAttackCoolDown"
Event.OngoingGlobal
if(
    isCallAttackCoolDown
){
    Wait(3, WaitBehavior.IgnoreCondition);
    isCallAttackCoolDown = false;
    LoopIfConditionIsTrue();
}

rule: "Bot/ActionState/ChangeTargetByDamageTaken"
Event.OnDamageTaken
if(
    IsDummyBot() &&
    actionState == ActionState.Attack
){
    // change target dependent on attack target helth & attack prob
    if(ProbabilityTrue(NormalizedHealth(target) * changeTargetProbForAttack)){
        // set attacker to target
        target = Attacker();
    }
    Wait(3, WaitBehavior.IgnoreCondition);
}

rule: "Bot/ActionState/ChangeTargetByTargetDead"
Event.OnElimination
if(
    IsDummyBot() &&
    actionState != ActionState.Non &&
    Victim() == target
){
    WaitRandomForReduceServerLoad();
    // is support role hero
    if(0 < supportPrioloty)
    {
        // find support target
        target = FindSupportTarget();
        // not found heal target
        if(target == 0){
            // find attack target
            target = FindAttackTarget();
        }
    }
    else{
        // find attack target
        target = FindAttackTarget();
    }
}

playervar define actionState;
playervar define prevActionState;
playervar define statusText;
playervar define target;
playervar define moveDir;
playervar define sideStepDir;

void StopMove()"StopMove"{
    StopThrottleInDirection();
} 

void StartMove() playervar "StartMove"{
    define confirmMoveDir! = moveDir + sideStepDir;
    define moveToPosition! = BlockedPositonByLocalVector(
        confirmMoveDir,
        walkMeterPerSec * watchUpdateRate
    );
    define isAbyss! = IsBelowAbyss(moveToPosition);
        
    // move to position is abyss
    if(
        IsBelowAbyss(moveToPosition)
    ){
        StopMove();
    }
    else{
        if(
            confirmMoveDir != NoDirection()
        ){
            StartThrottleInDirection(
                ep,
                confirmMoveDir,
                1,
                Relative.ToPlayer,
                ThrottleBehavior.ReplaceExistingThrottle,
                ThrottleRev.DirectionAndMagnitude
            );
        }
        else{
            StopMove();
        }
    }
}

void StartMoveInDir(define dir){
    StartThrottleInDirection(
        ep, dir, 1,
        Relative.ToPlayer,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude
    );
}

define stuckRange: 0.25;

playervar define prevPosition;

playervar define isInStuck;

void checkAndBreakStuck() playervar "checkAndBreakStuck"{
    if(
        (   // has move
            sideStepDir != NoDirection() ||
            moveDir != NoDirection()
        ) &&
        prevPosition != 0 &&
        DistanceBetween(ep, prevPosition) <= stuckRange    // not moved from prevPosition
    ){
        statusText = <"checkAndBreakStuck">;
        while(
            // keep try break stuck prob
            ProbabilityTrue(75) &&
            // not moved from prevPosition yet
            DistanceBetween(ep, prevPosition) <= stuckRange
        ){
            isInStuck = true;
            // try jump or croch
            define breakStuckButton! = RandomValueInArray([Button.Jump, Button.Crouch]);
            StartHoldingButton(ep, breakStuckButton);
            Wait(RandomReal(0.5, 1.0), WaitBehavior.IgnoreCondition);   // keep hold button
            StopHoldingButton(ep, breakStuckButton);
        }
    }
    else{
        isInStuck = false;
        prevPosition = PositionOf();
    }
}

void setMoveDir() playervar "setMoveDir"{
    // set move direction
    define distToTarget! = DistanceBetween(ep, target);

    // select dir
    // attack state
    if(actionState == ActionState.Attack){
        // target is far
        if(
            distToTarget > actionRangeMax
        ){
            moveDir = Forward();
        }
        // target is close
        else if(
            distToTarget < actionRangeMin
        ){
            moveDir = Backward();
        }
        else{
            // no moveDir
            moveDir = NoDirection();
        }
    }
    // support state
    else if(actionState == ActionState.Support){
        // target is far
        if(
            distToTarget > (actionRangeMax * 0.75)
        ){
            moveDir = Forward();
        }
        // target is close
        else if(
            distToTarget < (actionRangeMin * 0.75)
        ){
            moveDir = Backward();
        }
        else{
            // no moveDir
            moveDir = NoDirection();
        }
    }
}

void setSideStep() playervar "setSideStep"{
    // start sidestep by distance to target
    if(
        ProbabilityTrue((1 - (DistanceBetween(ep, target) / 30)) * DefaultPercentage())
    ){
        // start sidestep
        // already has sidestep
        if(sideStepDir != NoDirection()){
            if(ProbabilityTrue(75)){
                // reverse sidestep
                sideStepDir = -sideStepDir;
            }
            //else
        }
        else{
            if(ProbabilityTrue(50)){
                // right sidestep
                sideStepDir = Right();
            }
            else{
                // left sidestep
                sideStepDir = Left();
            }
        }
    }
    else{
        // stop sidestep
        sideStepDir = NoDirection();
    }
}

define aimingPosition:
    IsInAlternateForm(target) ?
    EyePosition(target) - Vector(0, 0.7, 0):
    EyePosition(target) + Vector(0, 0.2, 0);

void StartFacingTarget(){
    if(
        target != 0 &&
        target != null &&
        IsAlive(target)
    ){
        StartFacing(
            ep,
            DirectionTowards(
                EyePosition(),
                aimingPosition + RandomPosition(botAimScat, botAimScat, botAimScat)
            ),
            300,
            Relative.ToWorld, FacingRev.DirectionAndTurnRate
        );
    }
}

// TAG Bot/ActionState/Non ----------
rule: "Bot/ActionState/Non"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Non
){
    statusText = <"Non">;

    // hero unique action
    heroAction();

    moveDir = NoDirection();
    sideStepDir = NoDirection();
    target = 0;

    StopMove();
    StopFacing();
    Wait(0.1, WaitBehavior.AbortWhenFalse);

    while(actionState == ActionState.Non){
        define nearEnemy! = ClosestPlayerTo(ep, EnemyTeamOf());
        if(
            nearEnemy != null &&
            DistanceBetween(ep, nearEnemy) <= 30
        ){
            // set initial face direction
            SetFacing(
                ep,
                DirectionTowards(ep, nearEnemy),
                Relative.ToWorld);
        }
        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
        WaitRandomForReduceServerLoad();
    }    // action loop
}

// TAG Bot/ActionState/Attack ----------
rule: "Bot/ActionState/Attack"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Attack
){
    statusText = <"Attack">;

    // start facing direction
    StartFacingTarget();
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    
    while(actionState == ActionState.Attack){
        // hero unique action
        heroAction();

        // set moveDir direction
        setMoveDir();

        // set sidestep direction
        setSideStep();

        // start move by moveDir and sideStepDir
        StartMove();

        // check stuck
        checkAndBreakStuck();

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
        WaitRandomForReduceServerLoad();
    }    // action loop

}

// TAG Bot/ActionState/Support ----------
rule: "Bot/ActionState/Support"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Support
){
    statusText = <"Support">;

    // start facing direction
    StartFacingTarget();
    Wait(0.1, WaitBehavior.AbortWhenFalse);

    // action loop
    while(actionState == ActionState.Support){
        // hero unique action
        heroAction();
    
        // set moveDir direction
        setMoveDir();

        // no sidestepDir
        sideStepDir = NoDirection();

        // start move by moveDir and sideStepDir
        StartMove();
        
        // check stuck
        checkAndBreakStuck();

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
        WaitRandomForReduceServerLoad();
    }
}

// TAG Bot/HeroUniqueAction ----------
define MercyStaff: 1;
define MercyPistol: 2;

void heroAction(){
    // common action
    // melee
    while(
        actionState == ActionState.Attack &&
        IsAlive(target) &&
        Health(target) <= (25 * 2) &&
        DistanceBetween(ep, target) <= 2.5
    ){
        PressButton(ep, Button.Melee);
        Wait(0.5, WaitBehavior.AbortWhenFalse);
    }

    // reload
    if(
        actionState == ActionState.Non ||
        (MaxAmmo(ep, 0) > 0 && Ammo(ep, 0) <= 0) ||
        (MaxAmmo(ep, 1) > 0 && Ammo(ep, 1) <= 0)
    ){
        PressButton(ep, Button.Reload);
    }

    // ashe's cancel fire when reloading
    if(HeroOf() == Hero.Ashe){
        if(
            Ammo(ep, 0) <= MaxAmmo(ep, 0) / 2 ||
            IsReloading()
        ){
                StopHoldingButton(ep, Button.PrimaryFire);
                StopHoldingButton(ep, Button.SecondaryFire);
                StopHoldingButton(ep, Button.Ability1);
                StopHoldingButton(ep, Button.Ability2);
                PressButton(ep, Button.Reload);
        }
    }

    // hero unique action
    else if(
        actionState != ActionState.Non
    ){
        // Mercy's change weapon
        if(HeroOf() == Hero.Mercy){
            if(actionState == ActionState.Attack){
                SetWeapon(ep, MercyPistol);
            }
            else{
                SetWeapon(ep, MercyStaff);
            }
        }
        // WreckingBall's jump for pile driver and accsell for ball tackle
        else if(HeroOf() == Hero.WreckingBall){
            // jump for pile driver
            if(
                AbilityCooldown(ep, Button.Crouch) <= 0 &&
                IsButtonHeld(ep, Button.Crouch) &&
                IsOnGround(ep)
            ){
                ApplyImpulse(ep, Up(),
                    10, Relative.ToWorld, ContraryMotion.Cancel);
            }
            // accsell for ball tackle
            while(IsFiringSecondary(ep)){
                // for ball charge
                define boostDir! = RandomValueInArray([Right(), Forward(), Backward(), Left()]);
                ApplyImpulse(ep, boostDir,
                    30, Relative.ToWorld, ContraryMotion.Cancel);
                Wait(0.5, WaitBehavior.AbortWhenFalse);
            }
        }
    }
}

rule: "Bot/HeroUniqueAction/WhenUlt"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    IsUsingUltimate()
){
    // postion selecting when ult
    if(
        HeroOf() == Hero.Doomfist ||
        HeroOf() == Hero.Bastion ||
        HeroBeingDuplicated(ep) == Hero.Doomfist ||
        HeroBeingDuplicated(ep) == Hero.Bastion
    ){
        StartMoveInDir(Forward());
        Wait(RandomReal(1.25, 2.0), WaitBehavior.AbortWhenFalse);
        if(ProbabilityTrue(50)){
            StopMove();
        }
        define shotInterval! = RandomReal(0.1, 0.5);
        for(define shotCount! = 3; shotCount > 0; shotCount--){
            PressButton(ep, Button.PrimaryFire);
            Wait(shotInterval, WaitBehavior.AbortWhenFalse);
        }        
    }
}


// TAG Bot/ButtonControl ----------
enum ButtonControl{
    button,
    buttonOperation,
    releaseMin,
    releaseMax,
    pressMin,
    pressMax
}

define noShooting: false;   // for debug

playervar define isRepeating;
playervar define repeatMin;
playervar define repeatMax;

Boolean isMatchButton(define matchButton!, define butttons!){
    return IsTrueForAny(butttons, ae == matchButton);
}

define buttonControlTimeScale: 1;

void StartButtonControl(define bc){
    AbortIf(
        noShooting &&
        (
            bc[ButtonControl.button] == Button.PrimaryFire ||   
            bc[ButtonControl.button] == Button.SecondaryFire ||
            bc[ButtonControl.button] == Button.Ability1 ||
            bc[ButtonControl.button] == Button.Ability2 ||
            bc[ButtonControl.button] == Button.Ultimate
        )
    );

    define startButton! = false;
    define fireAndAbilityButtons! = [Button.PrimaryFire, Button.SecondaryFire, Button.Ability1, Button.Ability2];
    // if fire or ability button
    if(
        isMatchButton(bc[ButtonControl.button], fireAndAbilityButtons)
    ){
        // if match attack buttons
        if(
            actionState == ActionState.Attack &&
            isMatchButton(bc[ButtonControl.button], attackButtons)
        ){
            startButton = true;
        }
        // if match Support buttons
        else if(
            actionState == ActionState.Support &&
            isMatchButton(bc[ButtonControl.button], supportButtons)
        ){
            startButton = true;
        }
    }
    else{
        startButton = true;
    }

    // is not start button
    if(!startButton){
        // stop button
        StopHoldingButton(ep, bc[ButtonControl.button]);
    }
    else{
        // start button

        // not conbination fire
        if(!canFireButtonCombination){
            // if start primary button, release secondary button
            if(
                bc[ButtonControl.button] == Button.PrimaryFire &&
                IsButtonHeld(ep, Button.SecondaryFire)
            ){
                StopHoldingButton(ep, Button.SecondaryFire);
            }
            // if start secondary button, release primary button
            else if(
                bc[ButtonControl.button] == Button.SecondaryFire &&
                IsButtonHeld(ep, Button.PrimaryFire)
            ){
                StopHoldingButton(ep, Button.PrimaryFire);
            }
        }

        // release-press action
        if(bc[ButtonControl.buttonOperation] == ButtonBehaivor.ReleasePress){
            while(true){
                Wait(buttonControlTimeScale * RandomReal(bc[ButtonControl.releaseMin], bc[ButtonControl.releaseMax]), WaitBehavior.AbortWhenFalse);

                StartHoldingButton(ep, bc[ButtonControl.button]);
                Wait(buttonControlTimeScale * RandomReal(bc[ButtonControl.pressMin], bc[ButtonControl.pressMax]), WaitBehavior.AbortWhenFalse);

                StopHoldingButton(ep, bc[ButtonControl.button]);
            }
        }
        // release-repeat action
        else if(bc[ButtonControl.buttonOperation] == ButtonBehaivor.ReleaseRepeat){
            repeatMin = bc[ButtonControl.pressMin];
            repeatMax = bc[ButtonControl.pressMax];
            while(true){
                Wait(buttonControlTimeScale * RandomReal(bc[ButtonControl.releaseMin], bc[ButtonControl.releaseMax]), WaitBehavior.AbortWhenFalse);

                isRepeating = true;
                while(isRepeating){
                    PressButton(ep, bc[ButtonControl.button]); 
                    Wait(0.2, WaitBehavior.AbortWhenFalse);
                }
            }
        }
        // else
    }
}

rule: "Bot/ButtonControl/releaseIsRepeating"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    isRepeating
){
    Wait(RandomReal(repeatMin, repeatMax), WaitBehavior.AbortWhenFalse);
    isRepeating = false;
}

// TAG Bot/ButtonControl/PrimaryFire ----------
define enableButtonControlState:
    actionState == ActionState.Attack ||
    actionState == ActionState.Support;

rule: "Bot/ButtonControl/PrimaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.PrimaryFire,
            primaryFireButtonBehaivor,
            primaryFireButtonReleaseMin,
            primaryFireButtonReleaseMax,
            primaryFireButtonPressMin,
            primaryFireButtonPressMax
        ]
    );
}

// TAG Bot/ButtonControl/SecondaryFire ----------
rule: "Bot/ButtonControl/SecondaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.SecondaryFire,
            secondaryFireButtonBehaivor,
            secondaryFireButtonReleaseMin,
            secondaryFireButtonReleaseMax,
            secondaryFireButtonPressMin,
            secondaryFireButtonPressMax
        ]
    );
}

// TAG Bot/ButtonControl/Ability1 ----------
rule: "Bot/ButtonControl/Ability1/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.Ability1,
            ButtonBehaivor.ReleasePress,
            ability1ButtonReleaseMin,
            ability1ButtonReleaseMax,
            ability1ButtonPressMin,
            ability1ButtonPressMax
        ]
    );
}

// TAG Bot/ButtonControl/Ability2 ----------
rule: "Bot/ButtonControl/Ability2/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.Ability2,
            ButtonBehaivor.ReleasePress,
            ability2ButtonReleaseMin,
            ability2ButtonReleaseMax,
            ability2ButtonPressMin,
            ability2ButtonPressMax
        ]
    );
}

// TAG Bot/ButtonControl/Ultimate ----------
rule: "Bot/ButtonControl/Ultimate/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState &&
    UltimateChargePercent() >= DefaultPercentage()
){
    StartButtonControl(
        [
            Button.Ultimate,
            ButtonBehaivor.ReleasePress,
            ultimateButtonReleaseMin,
            ultimateButtonReleaseMax,
            ultimateButtonPressMin,
            ultimateButtonPressMax
        ]
    );
}

// TAG Bot/ButtonControl/Jump ----------
rule: "Bot/ButtonControl/Jump/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.Jump,
            ButtonBehaivor.ReleasePress,
            0,
            7.5,
            0.5,
            5
        ]
    );
}

// TAG Bot/ButtonControl/Crouch ----------
rule: "Bot/ButtonControl/Crouch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.Crouch,
            ButtonBehaivor.ReleasePress,
            5,
            15,
            0.5,
            2.5
        ]
    );
}

// TAG Bot/ButtonControl/Reload ----------
/*
disabled rule: "Bot/ButtonControl/Reload/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    enableButtonControlState
){
    StartButtonControl(
        [
            Button.Reload,
            ButtonBehaivor.ReleasePress,
            5,
            15,
            0,
            1
        ]
    );
}
*/

// TAG Bot/ButtonControl/StopButtonControl ----------
rule: "Bot/ButtonControl/StopButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    !enableButtonControlState
){
    StopHoldingButton(ep, Button.PrimaryFire);
    StopHoldingButton(ep, Button.SecondaryFire);
    StopHoldingButton(ep, Button.Ability1);
    StopHoldingButton(ep, Button.Ability2);
    StopHoldingButton(ep, Button.Ultimate);
    StopHoldingButton(ep, Button.Jump);
    StopHoldingButton(ep, Button.Crouch);
    // StopHoldingButton(ep, Button.Reload);
}

// TAG Debug ----------
