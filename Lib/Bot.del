import "Utility.del";
import "Debug.del";

// TAG duumy driver ----------

// TAG Bot/Spawn ----------
enum BotAsset{
    EnemyType,
    hero,
    count
}

// TAG EnemyType ----------
playervar define enemyType;
enum EnemyType{
    None,
    Minion,
    Elite,
    Boss,
    GiantBoss
}

// TAG BotAsset ----------
define RandomHero: RandomValueInArray(AllHeroes());
define RandomTankHero: RandomValueInArray(AllTankHeroes());
define RandomDamageHero: RandomValueInArray(AllDamageHeroes());
define RandomSupportHero: RandomValueInArray(AllSupportHeroes());

globalvar define botSlot;

void CreateAllBotByAsset(define assetList)"CreateAllBotByAsset"{
    DestroyAllBot();
    Wait(1, WaitBehavior.IgnoreCondition);
    // create bot by asset
    define asset = ValueInArray(assetList, RandomInteger(0, CountOf(assetList) - 1));
    for(define idx = 0; idx < CountOf(asset); idx++){
        for(define botCount = 0; botCount < asset[idx][BotAsset.count]; botCount++){
            // create bot
            CreateDummyBot(
                asset[idx][BotAsset.hero],
                Team.Team2,
                botSlot,
                SpawnPoints(Team.Team2)[0],
                RandomDirection()
            );
            Wait(0.1, WaitBehavior.IgnoreCondition);
            WaitUntil(!isServerOverLoading, 3);          

            // set Bot type as enemy type
            define spawnBot = PlayersInSlot(botSlot, Team.Team2);
            spawnBot.enemyType = asset[idx][BotAsset.EnemyType];
            Respawn(spawnBot);
            // next slot
            botSlot ++;
        }
    }
}

void DestroyAllBot()"DestroyAllBot"{
    if(0 < NumberOfPlayers(Team.Team2)){
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team2, idx);
        }
        botSlot = 0;
    }
}


void DebugCreateBot(define heroList, define num)"DebugCreateAllBot"{
    if(0 < NumberOfPlayers(Team.All)){
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team1, idx);
        }
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team2, idx);
        }
        botSlot = 0;
    }
    Wait(0.1, WaitBehavior.IgnoreCondition);

    // create bot by asset
    for(define idx = 0; idx < num; idx++){
        define team = idx % 2 == 1 ? Team.Team1 : Team.Team2;
        while(!HasSpawned(PlayersInSlot(botSlot, team))){
            // create bot
            CreateDummyBot(
                RandomValueInArray(heroList),
                team,
                botSlot,
                SpawnPoints(team)[0],
                RandomDirection()
            );
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }
        // next slot
        botSlot ++;
    }
}

// TAG Bot/SetBotInfo ----------
playervar define botInfo = [];
enum BotInfo{
    state,
    statusText,
    target,
    targetPos,
    watchUpdateRate,
    moveDir,
    sideStepDir,
    sideStepSecond,
    heroName,
    combatRange,
    combatRangeMin,
    combatRangeMax,
    primaryFireButtonBehaivor,
    primaryFireButtonReleaseMin,
    primaryFireButtonReleaseMax,
    primaryFireButtonHoldMin,
    primaryFireButtonHoldMax,
    secondaryFireButtonBehaivor,
    secondaryFireButtonReleaseMin,
    secondaryFireButtonReleaseMax,
    secondaryFireButtonHoldMin,
    secondaryFireButtonHoldMax,
    ability1ButtonReleaseMin,
    ability1ButtonReleaseMax,
    ability1ButtonHoldMin,
    ability1ButtonHoldMax,
    ability2ButtonReleaseMin,
    ability2ButtonReleaseMax,
    ability2ButtonHoldMin,
    ability2ButtonHoldMax,
    isRepeating,
    repeatDuringMin,
    repeatDuringMax,
    watchFriendProbability
}

define targetPosRange: 6;

rule: "Bot/SetCombatRoutine"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
        botInfo[BotInfo.heroName] = "Default";
        botInfo[BotInfo.watchFriendProbability] = 0;

        botInfo[BotInfo.combatRange] = CombatRange.Middle;

        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldOnly;
        botInfo[BotInfo.primaryFireButtonReleaseMin] = 0;
        botInfo[BotInfo.primaryFireButtonReleaseMax] = 5;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 5;

        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonReleaseMin] = 0;
        botInfo[BotInfo.secondaryFireButtonReleaseMax] = 5;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 5;

        botInfo[BotInfo.ability1ButtonReleaseMin] = 0;
        botInfo[BotInfo.ability1ButtonReleaseMax] = 5;
        botInfo[BotInfo.ability1ButtonHoldMin] = 0;
        botInfo[BotInfo.ability1ButtonHoldMax] = 5;

        botInfo[BotInfo.ability2ButtonReleaseMin] = 0;
        botInfo[BotInfo.ability2ButtonReleaseMax] = 5;
        botInfo[BotInfo.ability2ButtonHoldMin] = 0;
        botInfo[BotInfo.ability2ButtonHoldMax] = 5;


    switch(HeroOf()){
        case Hero.Ana:
        botInfo[BotInfo.heroName] = "Ana";
        botInfo[BotInfo.watchFriendProbability] = 100;
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 10;
        break;

        case Hero.Ashe:
        botInfo[BotInfo.heroName] = "Ashe";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.Repeat;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 10;
        break;

        case Hero.Baptiste:
        botInfo[BotInfo.heroName] = "Baptiste";
        botInfo[BotInfo.watchFriendProbability] = 75;
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Bastion:
        botInfo[BotInfo.heroName] = "Bastion";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.secondaryFireButtonReleaseMin] = 5;
        botInfo[BotInfo.secondaryFireButtonReleaseMax] = 10;
        break;

        case Hero.Brigitte:
        botInfo[BotInfo.heroName] = "Brigitte";
        botInfo[BotInfo.watchFriendProbability] = 50;
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.Doomfist:
        botInfo[BotInfo.heroName] = "Doomfist";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 2;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 3;
        break;

        case Hero.Dva:
        botInfo[BotInfo.heroName] = "Doomfist";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Echo:
        botInfo[BotInfo.heroName] = "Echo";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Genji:
        botInfo[BotInfo.heroName] = "Genji";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.Hanzo:
        botInfo[BotInfo.heroName] = "Hanzo";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonReleaseMin] = 0;
        botInfo[BotInfo.primaryFireButtonReleaseMax] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 1.5;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 2;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.Non;
        break;

        case Hero.Junkrat:
        botInfo[BotInfo.heroName] = "Junkrat";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Lucio:
        botInfo[BotInfo.heroName] = "Lucio";
        botInfo[BotInfo.watchFriendProbability] = 50;
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Mccree:
        botInfo[BotInfo.heroName] = "Mccree";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Mei:
        botInfo[BotInfo.heroName] = "Mei";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Mercy:
        botInfo[BotInfo.heroName] = "Mercy";
        botInfo[BotInfo.watchFriendProbability] = 100;
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        break;

        case Hero.Moira:
        botInfo[BotInfo.heroName] = "Moira";
        botInfo[BotInfo.watchFriendProbability] = 75;
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldOnly;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 3;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 6;
        break;

        case Hero.Orisa:
        botInfo[BotInfo.heroName] = "Orisa";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Pharah:
        botInfo[BotInfo.heroName] = "Pharah";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Reaper:
        botInfo[BotInfo.heroName] = "Reaper";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Reinhardt:
        botInfo[BotInfo.heroName] = "Reinhardt";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.Roadhog:
        botInfo[BotInfo.heroName] = "Reaper";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Sigma:
        botInfo[BotInfo.heroName] = "Sigma";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.secondaryFireButtonReleaseMin] = 0;
        botInfo[BotInfo.secondaryFireButtonReleaseMax] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 1;
        break;

        case Hero.Soldier76:
        botInfo[BotInfo.heroName] = "Soldier76";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Sombra:
        botInfo[BotInfo.heroName] = "Sombra";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Symmetra:
        botInfo[BotInfo.heroName] = "Symmetra";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Torbjorn:
        botInfo[BotInfo.heroName] = "Torbjorn";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        break;

        case Hero.Tracer:
        botInfo[BotInfo.heroName] = "Tracer";
        botInfo[BotInfo.combatRange] = CombatRange.Close;
        break;

        case Hero.Widowmaker:
        botInfo[BotInfo.heroName] = "Widowmaker";
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonReleaseMin] = 1;
        botInfo[BotInfo.primaryFireButtonReleaseMax] = 1.5;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 0;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 2;

        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.secondaryFireButtonReleaseMin] = 0;
        botInfo[BotInfo.secondaryFireButtonReleaseMax] = 5;
        botInfo[BotInfo.secondaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.secondaryFireButtonHoldMax] = 10;

        botInfo[BotInfo.ability1ButtonReleaseMin] = 10;
        botInfo[BotInfo.ability1ButtonReleaseMax] = 15;
        break;

        case Hero.Winston:
        botInfo[BotInfo.heroName] = "Winston";
        botInfo[BotInfo.combatRange] = CombatRange.Melee;
        break;

        case Hero.WreckingBall:
        botInfo[BotInfo.heroName] = "WreckingBall";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 5;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 15;

        botInfo[BotInfo.secondaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        botInfo[BotInfo.primaryFireButtonHoldMin] = 10;
        botInfo[BotInfo.primaryFireButtonHoldMax] = 15;
        break;

        case Hero.Zarya:
        botInfo[BotInfo.heroName] = "Zarya";
        botInfo[BotInfo.combatRange] = CombatRange.Middle;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Zenyatta:
        botInfo[BotInfo.heroName] = "Zenyatta";
        botInfo[BotInfo.watchFriendProbability] = 25;
        botInfo[BotInfo.combatRange] = CombatRange.Far;
        botInfo[BotInfo.primaryFireButtonBehaivor] = ButtonBehaivor.HoldAndRelease;
        break;
    }


    // set combat range
    switch(botInfo[BotInfo.combatRange]){
        case CombatRange.Melee:
            botInfo[BotInfo.combatRangeMin] = 1;
            botInfo[BotInfo.combatRangeMax] = 3;
            break;
        case CombatRange.Close:
            botInfo[BotInfo.combatRangeMin] = 1;
            botInfo[BotInfo.combatRangeMax] = 10;
            break;
        case CombatRange.Middle:
            botInfo[BotInfo.combatRangeMin] = 10;
            botInfo[BotInfo.combatRangeMax] = 20;
            break;
        case CombatRange.Far:
            botInfo[BotInfo.combatRangeMin] = 20;
            botInfo[BotInfo.combatRangeMax] = 30;
            break;
    }
}

enum State{
    Non,
    Combat,
    Searching
}

enum CombatRange{
    Non,
    Melee,
    Close,
    Middle,
    Far
}

enum ButtonBehaivor{
    Non,
    HoldOnly,
    HoldAndRelease,
    Repeat
}

// TAG Bot/ButtonControl ----------
enum ButtonControl{
    button,
    buttonOperation,
    waitDuringMin,
    waitDuringMax,
    holdDuringMin,
    holdDuringMax
}

define noShooting: false;

void StartButtonControl(define buttonControl){
    AbortIf(noShooting);

    if(buttonControl[ButtonControl.buttonOperation] == ButtonBehaivor.HoldOnly){
        while(true){
            StartHoldingButton(ep, buttonControl[ButtonControl.button]);
            Wait(RandomReal(buttonControl[ButtonControl.holdDuringMin], buttonControl[ButtonControl.holdDuringMax]), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, buttonControl[ButtonControl.button]);
        }
    }
    else if(buttonControl[ButtonControl.buttonOperation] == ButtonBehaivor.HoldAndRelease){
        while(true){
            Wait(RandomReal(buttonControl[ButtonControl.waitDuringMin], buttonControl[ButtonControl.waitDuringMax]), WaitBehavior.AbortWhenFalse);
            StartHoldingButton(ep, buttonControl[ButtonControl.button]);
            Wait(RandomReal(buttonControl[ButtonControl.holdDuringMin], buttonControl[ButtonControl.holdDuringMax]), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, buttonControl[ButtonControl.button]);
        }
    }
    else if(buttonControl[ButtonControl.buttonOperation] == ButtonBehaivor.Repeat){
        botInfo[BotInfo.repeatDuringMin] = buttonControl[ButtonControl.holdDuringMin];
        botInfo[BotInfo.repeatDuringMax] = buttonControl[ButtonControl.holdDuringMax];
        while(true){
            Wait(RandomReal(buttonControl[ButtonControl.waitDuringMin], buttonControl[ButtonControl.waitDuringMax]), WaitBehavior.AbortWhenFalse);
            botInfo[BotInfo.isRepeating] = true;
            while(botInfo[BotInfo.isRepeating]){
                PressButton(ep, buttonControl[ButtonControl.button]); 
                Wait(0.2, WaitBehavior.AbortWhenFalse);
            }
        }
    }
}

rule: "Bot/ButtonControl/isRepeating"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat &&
    botInfo[BotInfo.isRepeating]
){
    Wait(RandomReal(botInfo[BotInfo.repeatDuringMin], botInfo[BotInfo.repeatDuringMax]), WaitBehavior.AbortWhenFalse);
    botInfo[BotInfo.isRepeating] = false;
}

rule: "Bot/ButtonControl/PrimaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.PrimaryFire,
            botInfo[BotInfo.primaryFireButtonBehaivor],
            botInfo[BotInfo.primaryFireButtonReleaseMin],
            botInfo[BotInfo.primaryFireButtonReleaseMax],
            botInfo[BotInfo.primaryFireButtonHoldMin],
            botInfo[BotInfo.primaryFireButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/SeconaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.SecondaryFire,
            botInfo[BotInfo.secondaryFireButtonBehaivor],
            botInfo[BotInfo.secondaryFireButtonReleaseMin],
            botInfo[BotInfo.secondaryFireButtonReleaseMax],
            botInfo[BotInfo.secondaryFireButtonHoldMin],
            botInfo[BotInfo.secondaryFireButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/Ability1/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Ability1,
            ButtonBehaivor.HoldAndRelease,
            botInfo[BotInfo.ability1ButtonReleaseMin],
            botInfo[BotInfo.ability1ButtonReleaseMax],
            botInfo[BotInfo.ability1ButtonHoldMin],
            botInfo[BotInfo.ability1ButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/Ability2/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Ability2,
            ButtonBehaivor.HoldAndRelease,
            botInfo[BotInfo.ability2ButtonReleaseMin],
            botInfo[BotInfo.ability2ButtonReleaseMax],
            botInfo[BotInfo.ability2ButtonHoldMin],
            botInfo[BotInfo.ability2ButtonHoldMax]
        ]
    );
}

rule: "Bot/ButtonControl/Ultimate/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat &&
    UltimateChargePercent() >= 100
){
    StartButtonControl(
        [
            Button.Ultimate,
            ButtonBehaivor.HoldAndRelease,
            0,
            10,
            0,
            1
        ]
    );
}

rule: "Bot/ButtonControl/Jump/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Jump,
            ButtonBehaivor.HoldAndRelease,
            0,
            5,
            0,
            5
        ]
    );
}

rule: "Bot/ButtonControl/Crouch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Crouch,
            ButtonBehaivor.HoldAndRelease,
            5,
            10,
            0,
            3
        ]
    );
}

rule: "Bot/ButtonControl/Reload/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    StartButtonControl(
        [
            Button.Reload,
            ButtonBehaivor.HoldAndRelease,
            5,
            15,
            0,
            1
        ]
    );
}

rule: "Bot/ButtonControl/WeaponSwitch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    while(true){
        Wait(RandomReal(0, 30), WaitBehavior.AbortWhenFalse);
        SetWeapon(ep, RandomInteger(0, 1));
    }
}

rule: "Bot/ButtonControl/StopButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] != State.Combat
){
    StopHoldingButton(ep, Button.PrimaryFire);
    StopHoldingButton(ep, Button.SecondaryFire);
    StopHoldingButton(ep, Button.Ability1);
    StopHoldingButton(ep, Button.Ability2);
    StopHoldingButton(ep, Button.Ultimate);
    StopHoldingButton(ep, Button.Jump);
    StopHoldingButton(ep, Button.Crouch);
}


// TAG Bot/StateControl ----------
define basicUpdateRate: isServerOverLoading ? 3 : 1.5;

define AttackTarget():
    FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(OppositeTeamOf(TeamOf())),
                (
                    HasSpawned(ae) &&
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock) &&
                    IsAlive(ae)
                )
            ),
            DistanceBetween(ep, ae)
        )
    );

define HealTarget():
    FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(TeamOf()),
                (
                    ae != ep &&
                    HasSpawned(ae) &&
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock) &&
                    IsAlive(ae) &&
                    NormalizedHealth(ae) <= 0.9
                )
            ),
            DistanceBetween(ep, ae)
        )
    );

rule: "Bot/State/StateControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    define target;

    // check target
    if(
        ProbabilityTrue(25) ||                                  // Probability
        botInfo[BotInfo.target] == 0 ||                         // no target
        !IsInLineOfSight(ep, botInfo[BotInfo.target]) ||        // targhet lost
        IsDead(botInfo[BotInfo.target]) ||                      // target dead
        (   
            TeamOf(botInfo[BotInfo.target]) == TeamOf(ep) &&    // heal target almost full health
            NormalizedHealth(botInfo[BotInfo.target]) >= 0.9
        )       
    ){
        // set target
        if(
            ProbabilityTrue(botInfo[BotInfo.watchFriendProbability])    // each support hero Probability
        ){
            // set heal target
            target = HealTarget();
            // no heal target
            if(target == 0){
                // set attack target
                target = AttackTarget();
            }
        }
        else{
            // set attack target
            target = AttackTarget();
        }

        // has target
        if(target != 0){
            // set target
            botInfo[BotInfo.target] = target;
            botInfo[BotInfo.targetPos] = PositionOf(target);
        }
        else{
            // reset target, keep targetPos
            botInfo[BotInfo.target] = 0;
        }
    }

    // change state
    if(
        IsDead()
    ){
        // non by dead
        botInfo[BotInfo.state] = State.Non; 
    }
    else
    { 
        if(botInfo[BotInfo.target] != 0){
            // combat by contact player
            botInfo[BotInfo.state] = State.Combat; 
        }
        else
        {
            if(botInfo[BotInfo.targetPos] != 0){
                // searching by target lost
                botInfo[BotInfo.state] = State.Searching;
            }
            else{
                // non by target not found
                botInfo[BotInfo.state] = State.Non;
            }       
        }
    }
    Wait(basicUpdateRate, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

define StartMoveInDir(define dir):
    StartThrottleInDirection(
        ep, dir, 1,
        Relative.ToPlayer,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude);

define StopMove(): StopThrottleInDirection();

void StartMove()"StartMove"{
    if(botInfo[BotInfo.moveDir] != 0 && botInfo[BotInfo.sideStepDir] != 0){
        StartMoveInDir(botInfo[BotInfo.moveDir] + botInfo[BotInfo.sideStepDir]);
    }
    else if(botInfo[BotInfo.moveDir] == 0 && botInfo[BotInfo.sideStepDir] != 0){
        StartMoveInDir(botInfo[BotInfo.sideStepDir]);
    }
    else if(botInfo[BotInfo.moveDir] != 0 && botInfo[BotInfo.sideStepDir] == 0){
        StartMoveInDir(botInfo[BotInfo.moveDir]);
    }
    else{
        StopMove();
    }
}

define stackRange: 0.75;

playervar define prevPosition;

void checkStackAndBreak()"checkStackAndBreak"{
    if(
        prevPosition != 0 &&
        botInfo[BotInfo.sideStepDir] != 0 &&
        botInfo[BotInfo.moveDir] != 0 &&
        DistanceBetween(PositionOf(), prevPosition) < stackRange
    ){
        botInfo[BotInfo.statusText] = <"Combat/BreakStack">;
        
        while(
            DistanceBetween(PositionOf(), prevPosition) < stackRange &&
            ProbabilityTrue(70)
        ){
            botInfo[BotInfo.sideStepDir] = RandomValueInArray([Right(), Left(), 0]);
            botInfo[BotInfo.moveDir] = RandomValueInArray([Forward(), Forward(), Backward(), 0]);
            StartMove();

            if(ProbabilityTrue(50)){
                // try jump
                StartHoldingButton(ep, Button.Jump);
                Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
                StopHoldingButton(ep, Button.Jump);
            }
            else{
                // try croch
                StartHoldingButton(ep, Button.Crouch);
                Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
                StopHoldingButton(ep, Button.Crouch);                
            }
        }
    }
    else{
        prevPosition = PositionOf();
    }
}

// TAG Bot/State/Non ----------
rule: "Bot/State/Non"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Non
){
    botInfo[BotInfo.statusText] = <"Non">;
    botInfo[BotInfo.target] = 0;
    botInfo[BotInfo.targetPos] = 0;
    StopMove();
    StopFacing();
}


// TAG Bot/State/Searching ----------
rule: "Bot/State/Searching"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Searching
){
    botInfo[BotInfo.statusText] = <"Searching">;
    // reload
    PressButton(ep, Button.Reload);

    // set initial status
    botInfo[BotInfo.watchUpdateRate] = basicUpdateRate;

    // convert targetpPos to rechable position
    botInfo[BotInfo.targetPos] = BelowPosition(botInfo[BotInfo.targetPos]);

    // set face direction to target lost posotion
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            botInfo[BotInfo.targetPos]),
        300,
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );

    if(botInfo[BotInfo.sideStepDir] == 0){
        //botInfo[BotInfo.sideStepDir] = RandomValueInArray([Right(),Left()]);
        botInfo[BotInfo.sideStepDir] = 0;
    }
    else{
        // set reverse side step for find player
        botInfo[BotInfo.sideStepDir] = -botInfo[BotInfo.sideStepDir];
    }
    
    // action loop
    while(true){
        // set move directiion
        if(!IsBelowAbyss(ForwardSensor())){
            botInfo[BotInfo.moveDir] = Forward();
            botInfo[BotInfo.statusText] = <"Searching/Walking">;
        }
        else{
            botInfo[BotInfo.moveDir] = 0;
            botInfo[BotInfo.statusText] = <"Searching/Keep_Distance">;
        }

        // reached target lost position
        if(DistanceBetween(botInfo[BotInfo.targetPos], ep) <= targetPosRange){
            Wait(1, WaitBehavior.AbortWhenFalse);

            botInfo[BotInfo.statusText] = <"Searching/Canceled">;
            Wait(1, WaitBehavior.AbortWhenFalse);
            botInfo[BotInfo.state] = State.Non;
        }

        // set move direction
        StartMove();

        // check stack
        checkStackAndBreak();

        Wait(botInfo[BotInfo.watchUpdateRate], WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/State/Searching/timeout"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Searching
){
    Wait(8, WaitBehavior.AbortWhenFalse);

    botInfo[BotInfo.statusText] = <"Searching/Timeout">;
    Wait(1, WaitBehavior.IgnoreCondition);
    botInfo[BotInfo.state] = State.Non;
}

// TAG Bot/State/Combat ----------
rule: "Bot/State/Combat"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    botInfo[BotInfo.state] == State.Combat
){
    botInfo[BotInfo.statusText] = <"Combat">;

    // set initial status
    botInfo[BotInfo.watchUpdateRate] = basicUpdateRate;
    botInfo[BotInfo.moveDir] = 0;
    botInfo[BotInfo.sideStepDir] = 0;

    // set face direction
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            EyePosition(botInfo[BotInfo.target])),
        300,
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );   
    
    // action loop
    while(true){
        // set move direction
        define distToTarget = DistanceBetween(ep, botInfo[BotInfo.target]);
        // target is enemy
        // if(TeamOf(botInfo[BotInfo.target]) != TeamOf()){
            // target is far
            if(
                distToTarget > botInfo[BotInfo.combatRangeMax] &&
                !IsBelowAbyss(ForwardSensor())
            ){
                botInfo[BotInfo.moveDir] = Forward();
                botInfo[BotInfo.statusText] = <"Combat/Forward">;
            }
            // target is close
            else if(
                distToTarget < botInfo[BotInfo.combatRangeMin] &&
                !IsBelowAbyss(BackwardSensor())
            ){
                botInfo[BotInfo.moveDir] = Backward();
                botInfo[BotInfo.statusText] = <"Combat/Backward">;
            }
            else{
                botInfo[BotInfo.moveDir] = 0;
                botInfo[BotInfo.statusText] = <"Combat/Keep_Distance">;
            }
        // }
        // // target is friend
        // else{
        //     // target is far
        //     if(
        //         distToTarget > 10 &&
        //         !IsBelowAbyss(ForwardSensor())
        //     ){
        //         botInfo[BotInfo.moveDir] = Forward();
        //         botInfo[BotInfo.statusText] = <"Combat/Forward">;
        //     }
        //     else{
        //         botInfo[BotInfo.moveDir] = 0;
        //         botInfo[BotInfo.statusText] = <"Combat/Keep_Distance">;
        //     }
        // }

        // set sidestep direction
        if(
            botInfo[BotInfo.sideStepSecond] == 0
        ){
            if(ProbabilityTrue(50)){
                if(ProbabilityTrue(50)){
                    botInfo[BotInfo.sideStepDir] = Right();
                    botInfo[BotInfo.sideStepSecond] = RandomInteger(0, 3);
                }
                else{
                    botInfo[BotInfo.sideStepDir] = Left();
                    botInfo[BotInfo.sideStepSecond] = RandomInteger(0, 3);
                }
            }
            else{
                botInfo[BotInfo.sideStepDir] = 0;
                botInfo[BotInfo.sideStepSecond] = RandomInteger(0, 3);
            }
        }

        // set move direction
        StartMove();

        // check stack
        checkStackAndBreak();

        Wait(botInfo[BotInfo.watchUpdateRate], WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/Bot/State/Combat/sideStepSecond"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    0 < botInfo[BotInfo.sideStepSecond]
){
    while(true){
        Wait(1, WaitBehavior.AbortWhenFalse);
        botInfo[BotInfo.sideStepSecond] --;
    }
}

// Debug -----------------------------------------------
define maxBotNum: 6;
disabled rule: "Debug/SpawnOneBot"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Interact)
){
    WaitLongPressConfirm();
    define team = botSlot % 2 == 0 ? Team.Team2 : Team.Team1;
    DestroyDummyBot(team, botSlot);
    CreateDummyBot(RandomValueInArray(AllHeroes()), team, botSlot,
        AimingPosition(), FacingDirectionOf()
    );
    if(
        botSlot < maxBotNum &&
        team == Team.Team2
    )
        botSlot ++;
    else
        botSlot = 0;
}

disabled rule: "Debug/ShowDebugInfo"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){  
    // show status text
    CreateInWorldText(
        HostPlayer(), botInfo[BotInfo.statusText],
        ep + (Up() * 1.5), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    // show targetPos path
    CreateBeamEffect(
            ep.botInfo[BotInfo.state] == State.Combat ||
            ep.botInfo[BotInfo.state] == State.Searching ?
                HostPlayer() : null,
        BeamType.GoodBeam,
        EyePosition(),
            botInfo[BotInfo.state] == State.Combat ?
                botInfo[BotInfo.target] :
                botInfo[BotInfo.targetPos],
            botInfo[BotInfo.state] == State.Combat ?
                TeamOf(botInfo[BotInfo.target]) != TeamOf() ?
                    Color.Red :
                    Color.Blue :
                Color.White,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show targetPos
    CreateEffect(
        ep.botInfo[BotInfo.state] == State.Searching ? HostPlayer() : null,
        Effect.Ring, Color.Red,
        botInfo[BotInfo.targetPos], targetPosRange, EffectRev.VisibleToPositionAndRadius);
}
