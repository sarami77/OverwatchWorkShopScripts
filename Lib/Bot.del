import "Utility.del";
import "Debug.del";

// TAG duumy driver ----------

// TAG Bot/Spawn ----------
enum BotAsset{
    EnemyType,
    hero,
    count
}

// TAG EnemyType ----------
playervar define enemyType;
enum EnemyType{
    None,
    Minion,
    Elite,
    Boss,
    GiantBoss
}

// TAG BotAsset ----------
define RandomHero: RandomValueInArray(AllHeroes());
define RandomTankHero: RandomValueInArray(AllTankHeroes());
define RandomDamageHero: RandomValueInArray(AllDamageHeroes());
define RandomSupportHero: RandomValueInArray(AllSupportHeroes());

globalvar define botSlot;

void CreateAllBotByAsset(define assetList)"CreateAllBotByAsset"{
    DestroyAllBot();
    Wait(1, WaitBehavior.IgnoreCondition);
    // create bot by asset
    define asset = ValueInArray(assetList, RandomInteger(0, CountOf(assetList) - 1));
    for(define idx = 0; idx < CountOf(asset); idx++){
        for(define botCount = 0; botCount < asset[idx][BotAsset.count]; botCount++){
            // create bot
            CreateDummyBot(
                asset[idx][BotAsset.hero],
                Team.Team2,
                botSlot,
                SpawnPoints(Team.Team2)[0],
                RandomDirection()
            );
            Wait(0.1, WaitBehavior.IgnoreCondition);
            WaitUntil(!isServerOverLoading, 3);          

            // set Bot type as enemy type
            define spawnBot = PlayersInSlot(botSlot, Team.Team2);
            spawnBot.enemyType = asset[idx][BotAsset.EnemyType];
            Respawn(spawnBot);
            // next slot
            botSlot ++;
        }
    }
}

void DestroyAllBot()"DestroyAllBot"{
    if(0 < NumberOfPlayers(Team.Team2)){
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team2, idx);
        }
        botSlot = 0;
    }
}


void DebugCreateBot(define heroList, define num)"DebugCreateAllBot"{
    if(0 < NumberOfPlayers(Team.All)){
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team1, idx);
        }
        for(define idx = 0; idx < 24; idx ++){
            define spawnBot = PlayersInSlot(idx, Team.Team2);
            spawnBot.enemyType = EnemyType.None;
            DestroyDummyBot(
                Team.Team2, idx);
        }
        botSlot = 0;
    }
    Wait(0.1, WaitBehavior.IgnoreCondition);

    // create bot by asset
    for(define idx = 0; idx < num; idx++){
        define team = idx % 2 == 1 ? Team.Team1 : Team.Team2;
        while(!HasSpawned(PlayersInSlot(botSlot, team))){
            // create bot
            CreateDummyBot(
                RandomValueInArray(heroList),
                team,
                botSlot,
                SpawnPoints(team)[0],
                RandomDirection()
            );
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }
        // next slot
        botSlot ++;
    }
}

// TAG Bot/SetBotInfo ----------

playervar define heroName!;

playervar define supportFriendProbability!;
playervar define supportAbilityButtons!;

playervar define attackAbilityButtons!;

playervar define primaryFireButtonBehaivor!;
playervar define primaryFireButtonReleaseMin!;
playervar define primaryFireButtonReleaseMax!;
playervar define primaryFireButtonHoldMin!;
playervar define primaryFireButtonHoldMax!;
playervar define secondaryFireButtonBehaivor!;
playervar define secondaryFireButtonReleaseMin!;
playervar define secondaryFireButtonReleaseMax!;
playervar define secondaryFireButtonHoldMin!;
playervar define secondaryFireButtonHoldMax!;
playervar define ability1ButtonReleaseMin!;
playervar define ability1ButtonReleaseMax!;
playervar define ability1ButtonHoldMin!;
playervar define ability1ButtonHoldMax!;
playervar define ability2ButtonReleaseMin!;
playervar define ability2ButtonReleaseMax!;
playervar define ability2ButtonHoldMin!;
playervar define ability2ButtonHoldMax!;


playervar define AttackRange!;
playervar define AttackRangeMin!;
playervar define AttackRangeMax!;

define targetPosRange: 6;

rule: "Bot/SetAttackRoutine"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
        heroName = "Default";
        supportFriendProbability = 0;
        supportAbilityButtons = [];
        attackAbilityButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        AttackRange = AttackRange.Middle;

        primaryFireButtonBehaivor = ButtonBehaivor.HoldOnly;
        primaryFireButtonReleaseMin = 0;
        primaryFireButtonReleaseMax = 5;
        primaryFireButtonHoldMin = 0;
        primaryFireButtonHoldMax = 5;

        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonReleaseMin = 0;
        secondaryFireButtonReleaseMax = 5;
        secondaryFireButtonHoldMin = 0;
        secondaryFireButtonHoldMax = 5;

        ability1ButtonReleaseMin = 0;
        ability1ButtonReleaseMax = 5;
        ability1ButtonHoldMin = 0;
        ability1ButtonHoldMax = 5;

        ability2ButtonReleaseMin = 0;
        ability2ButtonReleaseMax = 5;
        ability2ButtonHoldMin = 0;
        ability2ButtonHoldMax = 5;

    switch(HeroOf()){
        case Hero.Ana:
        heroName = "Ana";
        supportFriendProbability = 100;
        supportAbilityButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        AttackRange = AttackRange.Far;
        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonHoldMin = 10;
        secondaryFireButtonHoldMax = 10;
        break;

        case Hero.Ashe:
        heroName = "Ashe";
        AttackRange = AttackRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.Repeat;
        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonHoldMin = 10;
        secondaryFireButtonHoldMax = 10;
        break;

        case Hero.Baptiste:
        heroName = "Baptiste";
        supportFriendProbability = 100;
        supportAbilityButtons = [
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.PrimaryFire
        ];
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Bastion:
        heroName = "Bastion";
        AttackRange = AttackRange.Far;
        secondaryFireButtonReleaseMin = 5;
        secondaryFireButtonReleaseMax = 10;
        break;

        case Hero.Brigitte:
        heroName = "Brigitte";
        supportFriendProbability = 50;
        supportAbilityButtons = [
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1
        ];
        AttackRange = AttackRange.Melee;
        break;

        case Hero.Doomfist:
        heroName = "Doomfist";
        AttackRange = AttackRange.Melee;
        secondaryFireButtonHoldMin = 2;
        secondaryFireButtonHoldMax = 3;
        break;

        case Hero.Dva:
        heroName = "Doomfist";
        AttackRange = AttackRange.Close;
        break;

        case Hero.Echo:
        heroName = "Echo";
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Genji:
        heroName = "Genji";
        AttackRange = AttackRange.Melee;
        break;

        case Hero.Hanzo:
        heroName = "Hanzo";
        AttackRange = AttackRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        primaryFireButtonReleaseMin = 0;
        primaryFireButtonReleaseMax = 0;
        primaryFireButtonHoldMin = 1.5;
        primaryFireButtonHoldMax = 2;
        secondaryFireButtonBehaivor = ButtonBehaivor.Non;
        break;

        case Hero.Junkrat:
        heroName = "Junkrat";
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Lucio:
        heroName = "Lucio";
        supportFriendProbability = 50;
        supportAbilityButtons = [
            Button.Ability1,
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Mccree:
        heroName = "Mccree";
        AttackRange = AttackRange.Close;
        break;

        case Hero.Mei:
        heroName = "Mei";
        AttackRange = AttackRange.Close;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Mercy:
        heroName = "Mercy";
        supportFriendProbability = 100;
        supportAbilityButtons = [
            Button.PrimaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.PrimaryFire
        ];
        AttackRange = AttackRange.Far;
        break;

        case Hero.Moira:
        heroName = "Moira";
        supportFriendProbability = 100;
        supportAbilityButtons = [
            Button.PrimaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.SecondaryFire,
            Button.Ability1,
            Button.Ability2
        ];
        AttackRange = AttackRange.Close;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonBehaivor = ButtonBehaivor.HoldOnly;
        primaryFireButtonHoldMin = 3;
        primaryFireButtonHoldMax = 6;
        break;

        case Hero.Orisa:
        heroName = "Orisa";
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Pharah:
        heroName = "Pharah";
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Reaper:
        heroName = "Reaper";
        AttackRange = AttackRange.Close;
        break;

        case Hero.Reinhardt:
        heroName = "Reinhardt";
        AttackRange = AttackRange.Melee;
        break;

        case Hero.Roadhog:
        heroName = "Reaper";
        AttackRange = AttackRange.Close;
        break;

        case Hero.Sigma:
        heroName = "Sigma";
        AttackRange = AttackRange.Middle;
        secondaryFireButtonReleaseMin = 0;
        secondaryFireButtonReleaseMax = 10;
        secondaryFireButtonHoldMin = 0;
        secondaryFireButtonHoldMax = 1;
        break;

        case Hero.Soldier76:
        heroName = "Soldier76";
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Sombra:
        heroName = "Sombra";
        AttackRange = AttackRange.Close;
        break;

        case Hero.Symmetra:
        heroName = "Symmetra";
        AttackRange = AttackRange.Close;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Torbjorn:
        heroName = "Torbjorn";
        AttackRange = AttackRange.Middle;
        break;

        case Hero.Tracer:
        heroName = "Tracer";
        AttackRange = AttackRange.Close;
        break;

        case Hero.Widowmaker:
        heroName = "Widowmaker";
        AttackRange = AttackRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        primaryFireButtonReleaseMin = 1;
        primaryFireButtonReleaseMax = 1.5;
        primaryFireButtonHoldMin = 0;
        primaryFireButtonHoldMax = 2;

        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        secondaryFireButtonReleaseMin = 0;
        secondaryFireButtonReleaseMax = 5;
        secondaryFireButtonHoldMin = 10;
        secondaryFireButtonHoldMax = 10;

        ability1ButtonReleaseMin = 10;
        ability1ButtonReleaseMax = 15;
        break;

        case Hero.Winston:
        heroName = "Winston";
        AttackRange = AttackRange.Melee;
        break;

        case Hero.WreckingBall:
        heroName = "WreckingBall";
        AttackRange = AttackRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        primaryFireButtonHoldMin = 5;
        primaryFireButtonHoldMax = 15;

        secondaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        primaryFireButtonHoldMin = 10;
        primaryFireButtonHoldMax = 15;
        break;

        case Hero.Zarya:
        heroName = "Zarya";
        AttackRange = AttackRange.Middle;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        break;

        case Hero.Zenyatta:
        heroName = "Zenyatta";
        supportFriendProbability = 50;
        supportAbilityButtons = [
            Button.Ability2
        ];
        attackAbilityButtons = [
            Button.PrimaryFire,
            Button.SecondaryFire,
            Button.Ability1
        ];
        AttackRange = AttackRange.Far;
        primaryFireButtonBehaivor = ButtonBehaivor.HoldAndRelease;
        break;
    }

    // set Attack range
    switch(AttackRange){
        case AttackRange.Melee:
            AttackRangeMin = 1;
            AttackRangeMax = 3;
            break;
        case AttackRange.Close:
            AttackRangeMin = 1;
            AttackRangeMax = 10;
            break;
        case AttackRange.Middle:
            AttackRangeMin = 10;
            AttackRangeMax = 20;
            break;
        case AttackRange.Far:
            AttackRangeMin = 20;
            AttackRangeMax = 30;
            break;
    }
}

enum ActionState{
    Non,
    Attack,
    Support,
    Search
}

enum AttackRange{
    Non,
    Melee,
    Close,
    Middle,
    Far
}

enum ButtonBehaivor{
    Non,
    HoldOnly,
    HoldAndRelease,
    Repeat
}

// TAG Bot/ButtonControl ----------
enum ButtonControl{
    button,
    buttonOperation,
    waitMin,
    waitMax,
    holdMin,
    holdMax
}

define noShooting: false;

playervar define isRepeating!;
playervar define repeatMin!;
playervar define repeatMax!;

void StartButtonControl(define bc){
    AbortIf(noShooting);

    define startButton = false;

    // if fire or ability button
    if(
        IsTrueForAny(
            [
                Button.PrimaryFire,
                Button.SecondaryFire,
                Button.Ability1,
                Button.Ability2
            ],
            ae == bc[ButtonControl.button]
        )
    ){
        // if match attack buttons
        if(
            actionState == ActionState.Attack &&
            isMatchButton(bc[ButtonControl.button], attackAbilityButtons)
        ){
            startButton = true;
        }
        // if match attack buttons
        else if(
            actionState == ActionState.Support &&
            !isMatchButton(bc[ButtonControl.button], supportAbilityButtons)
        ){
            startButton = true;
        }
    }

        // debug
        if(
            NumberOfSlots(Team.Team1) == 0 &&
            bc[ButtonControl.button] == Button.PrimaryFire
        ){
            if(!startButton)
                dbgMsg(<"Stop Button <0>", ButtonGuide(bc[ButtonControl.button])>);
            else
                dbgMsg(<"Start Button <0>", ButtonGuide(bc[ButtonControl.button])>);
        }

    // is not start button
    if(!startButton){
        // stop button
        StopHoldingButton(ep, bc[ButtonControl.button]);
    }
    else{       
        // start button
        if(bc[ButtonControl.buttonOperation] == ButtonBehaivor.HoldOnly){
            while(true){
                StartHoldingButton(ep, bc[ButtonControl.button]);
                Wait(RandomReal(bc[ButtonControl.holdMin], bc[ButtonControl.holdMax]), WaitBehavior.AbortWhenFalse);

                StopHoldingButton(ep, bc[ButtonControl.button]);
            }
        }
        else if(bc[ButtonControl.buttonOperation] == ButtonBehaivor.HoldAndRelease){
            while(true){
                Wait(RandomReal(bc[ButtonControl.waitMin], bc[ButtonControl.waitMax]), WaitBehavior.AbortWhenFalse);

                StartHoldingButton(ep, bc[ButtonControl.button]);
                Wait(RandomReal(bc[ButtonControl.holdMin], bc[ButtonControl.holdMax]), WaitBehavior.AbortWhenFalse);

                StopHoldingButton(ep, bc[ButtonControl.button]);
            }
        }
        else if(bc[ButtonControl.buttonOperation] == ButtonBehaivor.Repeat){
            repeatMin = bc[ButtonControl.holdMin];
            repeatMax = bc[ButtonControl.holdMax];
            while(true){
                Wait(RandomReal(bc[ButtonControl.waitMin], bc[ButtonControl.waitMax]), WaitBehavior.AbortWhenFalse);

                isRepeating = true;
                while(isRepeating){
                    PressButton(ep, bc[ButtonControl.button]); 
                    Wait(0.2, WaitBehavior.AbortWhenFalse);
                }
            }
        }
    }
}

rule: "Bot/ButtonControl/isRepeating"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    isRepeating
){
    Wait(RandomReal(repeatMin, repeatMax), WaitBehavior.AbortWhenFalse);
    isRepeating = false;
}

Boolean isMatchButton(define matchButton, define butttons)"isMatchButton"{
    return IsTrueForAny(butttons, ae == matchButton);
}

rule: "Bot/ButtonControl/PrimaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.PrimaryFire,
            primaryFireButtonBehaivor,
            primaryFireButtonReleaseMin,
            primaryFireButtonReleaseMax,
            primaryFireButtonHoldMin,
            primaryFireButtonHoldMax
        ]
    );
}

rule: "Bot/ButtonControl/SeconaryFire/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.SecondaryFire,
            secondaryFireButtonBehaivor,
            secondaryFireButtonReleaseMin,
            secondaryFireButtonReleaseMax,
            secondaryFireButtonHoldMin,
            secondaryFireButtonHoldMax
        ]
    );
}

rule: "Bot/ButtonControl/Ability1/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.Ability1,
            ButtonBehaivor.HoldAndRelease,
            ability1ButtonReleaseMin,
            ability1ButtonReleaseMax,
            ability1ButtonHoldMin,
            ability1ButtonHoldMax
        ]
    );
}

rule: "Bot/ButtonControl/Ability2/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.Ability2,
            ButtonBehaivor.HoldAndRelease,
            ability2ButtonReleaseMin,
            ability2ButtonReleaseMax,
            ability2ButtonHoldMin,
            ability2ButtonHoldMax
        ]
    );
}

rule: "Bot/ButtonControl/Ultimate/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    ) &&
    UltimateChargePercent() >= 100
){
    StartButtonControl(
        [
            Button.Ultimate,
            ButtonBehaivor.HoldAndRelease,
            0,
            10,
            0,
            1
        ]
    );
}

rule: "Bot/ButtonControl/Jump/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.Jump,
            ButtonBehaivor.HoldAndRelease,
            0,
            5,
            0,
            5
        ]
    );
}

rule: "Bot/ButtonControl/Crouch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.Crouch,
            ButtonBehaivor.HoldAndRelease,
            5,
            10,
            0,
            3
        ]
    );
}

rule: "Bot/ButtonControl/Reload/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    (
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StartButtonControl(
        [
            Button.Reload,
            ButtonBehaivor.HoldAndRelease,
            5,
            15,
            0,
            1
        ]
    );
}

rule: "Bot/ButtonControl/WeaponSwitch/StartButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Attack
){
    while(true){
        Wait(RandomReal(0, 30), WaitBehavior.AbortWhenFalse);
        SetWeapon(ep, RandomInteger(0, 1));
    }
}

rule: "Bot/ButtonControl/StopButtonControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    !(
        actionState == ActionState.Attack ||
        actionState == ActionState.Support
    )
){
    StopHoldingButton(ep, Button.PrimaryFire);
    StopHoldingButton(ep, Button.SecondaryFire);
    StopHoldingButton(ep, Button.Ability1);
    StopHoldingButton(ep, Button.Ability2);
    StopHoldingButton(ep, Button.Ultimate);
    StopHoldingButton(ep, Button.Jump);
    StopHoldingButton(ep, Button.Crouch);
}


// TAG Bot/ActionState/MainControl ----------
playervar define actionState!;
playervar define prevActionState!;
playervar define statusText!;
playervar define target!;
playervar define targetPos!;
playervar define moveDir!;
playervar define sideStepDir!;
playervar define sideStepSecond!;

define AttackTarget():
    FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(OppositeTeamOf(TeamOf())),
                (
                    HasSpawned(ae) &&
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock) &&
                    IsAlive(ae)
                )
            ),
            DistanceBetween(ep, ae)
        )
    );

define HealTarget():
    FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(TeamOf()),
                (
                    ae != ep &&
                    HasSpawned(ae) &&
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock) &&
                    IsAlive(ae) &&
                    NormalizedHealth(ae) <= 0.9
                )
            ),
            DistanceBetween(ep, ae)
        )
    );

define watchUpdateRate:
    isServerOverLoading ? 2 : 1;

rule: "Bot/ActionState/StateControl"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){
    // check target
    if(
        ProbabilityTrue(25) ||                 // Probability
        target == 0 ||                         // no target
        !IsInLineOfSight(ep, target) ||        // targhet lost
        IsDead(target) ||                      // target dead
        (   
            TeamOf(target) == TeamOf(ep) &&    // heal target almost full health
            NormalizedHealth(target) >= 0.9
        )       
    ){
        // set target
        if(
            ProbabilityTrue(supportFriendProbability)    // each support hero Probability
        ){
            // set heal target
            target = HealTarget();
            // no heal target
            if(target == 0){
                // set attack target
                target = AttackTarget();
            }
        }
        else{
            // set attack target
            target = AttackTarget();
        }

        // has target
        if(target != 0){
            // set target
            targetPos = PositionOf(target);
        }
    }

    // change state
    prevActionState = actionState;

    if(
        IsDead()
    ){
        // non by dead
        actionState = ActionState.Non; 
    }
    else
    { 
        if(target != 0){
            if(TeamOf() != TeamOf(target)){
                // Attack by contact player
                actionState = ActionState.Attack; 
            }
            else{
                // Support by contact player
                actionState = ActionState.Support; 
            }
        }
        else
        {
            if(targetPos != 0){
                // Search by target lost
                actionState = ActionState.Search;
            }
            else{
                // non by target not found
                actionState = ActionState.Non;
            }       
        }
    }

    // save 
    Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

define StartMoveInDir(define dir):
    StartThrottleInDirection(
        ep, dir, 1,
        Relative.ToPlayer,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude);

define StopMove(): StopThrottleInDirection();

void StartMove()"StartMove"{
    if(moveDir != 0 && sideStepDir != 0){
        StartMoveInDir(moveDir + sideStepDir);
    }
    else if(moveDir == 0 && sideStepDir != 0){
        StartMoveInDir(sideStepDir);
    }
    else if(moveDir != 0 && sideStepDir == 0){
        StartMoveInDir(moveDir);
    }
    else{
        StopMove();
    }
}

define stackRange: 0.75;

playervar define prevPosition;

void checkStackAndBreak()"checkStackAndBreak"{
    if(
        prevPosition != 0 &&
        sideStepDir != 0 &&
        moveDir != 0 &&
        DistanceBetween(PositionOf(), prevPosition) < stackRange
    ){
        statusText = <"Attack/BreakStack">;
        
        while(
            DistanceBetween(PositionOf(), prevPosition) < stackRange &&
            ProbabilityTrue(70)
        ){
            // change move direction
            sideStepDir = RandomValueInArray([0, 0, Right(), Left()]);
            moveDir = RandomValueInArray([Forward(), Forward(), Backward()]);
            StartMove();
            // try jump or croch
            define breakStackButton = RandomValueInArray([Button.Jump, Button.Crouch]);
            StartHoldingButton(ep, breakStackButton);
            Wait(RandomReal(1, 2), WaitBehavior.AbortWhenFalse);
            StopHoldingButton(ep, breakStackButton);
        }
    }
    else{
        prevPosition = PositionOf();
    }
}

// TAG Bot/ActionState/Non ----------
rule: "Bot/ActionState/Non"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Non
){
    statusText = <"Non">;
    target = 0;
    targetPos = 0;
    StopMove();
    StopFacing();
}

// TAG Bot/ActionState/Searching ----------
rule: "Bot/ActionState/Searching"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Search
){
    statusText = <"Searching">;
    // reload
    PressButton(ep, Button.Reload);

    // set initial status

    // convert targetpPos to rechable position
    targetPos = BelowPosition(targetPos);

    // set face direction to target lost posotion
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            targetPos),
        300,
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );

    if(sideStepDir == 0){
        //sideStepDir = RandomValueInArray([Right(),Left()]);
        sideStepDir = 0;
    }
    else{
        // set reverse side step for find player
        sideStepDir = -sideStepDir;
    }
    
    // action loop
    while(true){
        // set move directiion
        if(!IsBelowAbyss(ForwardSensor())){
            moveDir = Forward();
            statusText = <"Searching/Walking">;
        }
        else{
            moveDir = 0;
            statusText = <"Searching/Keep_Distance">;
        }

        // reached target lost position
        if(DistanceBetween(targetPos, ep) <= targetPosRange){
            Wait(1, WaitBehavior.AbortWhenFalse);

            statusText = <"Searching/Canceled">;
            Wait(1, WaitBehavior.AbortWhenFalse);
            actionState = ActionState.Non;
        }

        // set move direction
        StartMove();

        // check stack
        checkStackAndBreak();

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/ActionState/Searching/timeout"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Search
){
    Wait(8, WaitBehavior.AbortWhenFalse);

    statusText = <"Searching/Timeout">;
    Wait(1, WaitBehavior.IgnoreCondition);
    actionState = ActionState.Non;
}

// TAG Bot/ActionState/Attack ----------
rule: "Bot/ActionState/Attack"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Attack
){
    statusText = <"Attack">;

    // set initial status
    moveDir = 0;
    sideStepDir = 0;

    // set face direction
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            EyePosition(target)),
        300,
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );   
    
    // action loop
    while(true){
        // set move direction
        define distToTarget = DistanceBetween(ep, target);
        // target is far
        if(
            distToTarget > AttackRangeMax &&
            !IsBelowAbyss(ForwardSensor())
        ){
            moveDir = Forward();
            statusText = <"Attack/Forward">;
        }
        // target is close
        else if(
            distToTarget < AttackRangeMin &&
            !IsBelowAbyss(BackwardSensor())
        ){
            moveDir = Backward();
            statusText = <"Attack/Backward">;
        }
        else{
            moveDir = 0;
            statusText = <"Attack/Keep_Distance">;
        }

        // set sidestep direction
        if(
            sideStepSecond == 0
        ){
            if(ProbabilityTrue(50)){
                if(ProbabilityTrue(50)){
                    sideStepDir = Right();
                    sideStepSecond = RandomInteger(0, 3);
                }
                else{
                    sideStepDir = Left();
                    sideStepSecond = RandomInteger(0, 3);
                }
            }
            else{
                sideStepDir = 0;
                sideStepSecond = RandomInteger(0, 3);
            }
        }

        // set move direction
        StartMove();

        // check stack
        checkStackAndBreak();

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

rule: "Bot/Bot/ActionState/Attack/sideStepSecond"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    0 < sideStepSecond
){
    while(true){
        Wait(1, WaitBehavior.AbortWhenFalse);
        sideStepSecond --;
    }
}

// TAG Bot/ActionState/Support ----------
rule: "Bot/ActionState/Support"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    actionState == ActionState.Support
){
    statusText = <"Support">;

    // set initial status
    moveDir = 0;
    sideStepDir = 0;

    // set face direction
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            EyePosition(target)),
        300,
        Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );   
    
    // action loop
    while(true){
        // set move direction
        define distToTarget = DistanceBetween(ep, target);
        // target is far
        if(
            distToTarget > AttackRangeMax &&
            !IsBelowAbyss(ForwardSensor())
        ){
            moveDir = Forward();
            statusText = <"Support/Forward">;
        }
        // target is close
        else if(
            distToTarget < AttackRangeMin &&
            !IsBelowAbyss(BackwardSensor())
        ){
            moveDir = Backward();
            statusText = <"Support/Backward">;
        }
        else{
            moveDir = 0;
            statusText = <"Support/Keep_Distance">;
        }

        // set move direction
        StartMove();

        // check stack
        checkStackAndBreak();

        Wait(watchUpdateRate, WaitBehavior.AbortWhenFalse);
    }
}

// Debug -----------------------------------------------
define maxBotNum: 6;
disabled rule: "Debug/SpawnOneBot"
Event.OngoingPlayer
if(
    ep == HostPlayer() &&
    IsButtonHeld(ep, Button.Interact)
){
    WaitLongPressConfirm();
    define team = botSlot % 2 == 0 ? Team.Team2 : Team.Team1;
    DestroyDummyBot(team, botSlot);
    CreateDummyBot(RandomValueInArray(AllHeroes()), team, botSlot,
        AimingPosition(), FacingDirectionOf()
    );
    if(
        botSlot < maxBotNum &&
        team == Team.Team2
    )
        botSlot ++;
    else
        botSlot = 0;
}

rule: "Debug/ShowDebugInfo"
Event.OngoingPlayer
if(
    IsDummyBot() &&
    HasSpawned()
){  
    // show status text
    CreateInWorldText(
        HostPlayer(), statusText,
        ep + (Up() * 1), 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString,
        Color.White, Spectators.DefaultVisibility);
    // show targetPos path
    CreateBeamEffect(
            actionState == ActionState.Attack ||
            actionState == ActionState.Support ||
            actionState == ActionState.Search ?
                HostPlayer() : null,
        BeamType.GoodBeam,
        EyePosition(),
            actionState == ActionState.Attack ||
            actionState == ActionState.Support ?
                target :
                targetPos,
            actionState == ActionState.Search ?
                Color.White:
                actionState == ActionState.Attack ?
                    Color.Red :
                    Color.Blue,
        EffectRev.VisibleToPositionRadiusAndColor);
    // show targetPos
    CreateEffect(
        ep.actionState == ActionState.Search ? HostPlayer() : null,
        Effect.Ring, Color.White,
        targetPos, targetPosRange, EffectRev.VisibleToPositionAndRadius);
}
