import "Debug.del";

// TAG Alias ----------
define ap(in define team): AllPlayers(team);
define ep: EventPlayer();
define hp: HostPlayer();
define ae: ArrayElement();
define ta: Team.All;
define t1: Team.Team1;
define t2: Team.Team2;
define rva(in define array): RandomValueInArray(array);
define Last(define array) : CountOf(array);
define NL: "\n\r";
void wm(){ Wait(0.02, WaitBehavior.IgnoreCondition); }

// TAG LoopIndex ----------
// If Wait occurs during a loop, it conflicts with other processing and the loop index, so use a separate variable.
globalvar define gLoopIndex!;
playervar define pLoopIndex!;

// TAG Constants ----------
// Maximum value in game script
// Use in unlimited changing status, unlimited dealt heal or damage, etc
define MaxValue(): 1000000;
define MinValue(): 0.001;

// Maximum distance when aiming
// If the value is extremely larger than 1000, the aiming position will shift, so 1000 is recommended.
define MaxLength(): 1000;

// Default value of parcentage
define DefaultPercentage(): 100;
define DefaultRespawnTime(): 10;

// An offset in the Y direction because the point is buried in the surface
define PositionOffset(): Vector(0, 0.6, 0);

define PositionOffsetY1(): Vector(0, 1, 0);

define VectorWithOutY(in define vector):
    Normalize(
        Vector(
            XOf(vector), 0, ZOf(vector)
        )
    );

define VectorScaledY(in define vector, in define scale):
    Vector(XOf(vector), YOf(vector * scale), ZOf(vector));

define BodyPosition(in define player): 
    PositionOf(player) +
    Vector(
        0,
        DistanceBetween(PositionOf(player), EyePosition(player)) * 0.7,
        0
    );

define MaxMatchTime(): maxMatchTime;
globalvar define maxMatchTime;
rule: "Utility/GetMaxMatchTime"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    Wait(0.5, WaitBehavior.IgnoreCondition);
    maxMatchTime = RoundToInteger(MatchTime(), Rounding.Up);
}

// TAG Object ----------
define IsTeamOnObject(define team): (0 < NumberOfPlayersOnObjective(team));



define FinaleProgress(): 95;
define FinalWaveProgress(): 90;
define FinaleRemainTime(): 10;

define IsHybridMap() globalvar "IsHybridMap"{
    define isHybridMap!;
    define map! = CurrentMap();
    if(
        map == Map.Blizzard_World ||
        map == Map.Blizzard_World_Winter ||
        map == Map.Eichenwalde ||
        map == Map.Eichenwalde_Halloween ||
        map == Map.Hollywood ||
        map == Map.Hollywood_Halloween ||
        map == Map.Kings_Row ||
        map == Map.Kings_Row_Winter ||
        map == Map.Midtown ||
        map == Map.Numbani ||
        map == Map.Paraiso
    ){
        isHybridMap = true;
    }
    return isHybridMap;
}

define GameProgressDiff(define team!) globalvar "GameProgressDiff"{
    define prgDiff! = 0;

    if(!IsGameInProgress()){
        prgDiff = 0;
    }
    else{
        define objPrg! = ObjectProgress(team);
        // get match time progress
        define timePrg! = (1 - (MatchTime() / MaxMatchTime())) * 100;
        prgDiff = objPrg - timePrg;
        prgDiff = RoundToInteger(prgDiff, Rounding.Down);
    }

    return prgDiff;
}

define ObjectProgressScaledInterval(define team!, define intervalMin!, define intervalMax!) globalvar "ObjectProgressScaledInterval"{
    define intarval! = (intervalMax - intervalMin);
    intarval *= (1 - (ObjectProgress(team) / DefaultPercentage()));
    intarval += intervalMin;
    intarval = intarval < 0 ? 0 : intarval;
    return intarval;
}

define ObjectProgress(define team!) globalvar "ObjectProgress"{
    define progress!;

    if(!IsGameInProgress()){
        progress = 0;
    }
    else{
        if(!IsHybridMap()){
            progress = PayloadProgressPercentage();
        }
        else{
            define objIdx! = ObjectiveIndex();

            if(objIdx == 0){
                progress = (PointCapturePercentage() * 0.3);
            }
            else{
                progress = 30 + (PayloadProgressPercentage() * 0.7);
            }
        }
    }
    return progress;
}

define IsCloseWin(define team!)"IsCloseWin"{
    define isCloseWin! = false;
    if(IsGameInProgress()){
        if(IsTeamOnDefense(team)){
            isCloseWin =
                (
                    MatchTime() <= FinaleRemainTime()   // include over time
                );
        }
        else if(IsTeamOnOffense(team)){
            isCloseWin =
                (
                    ObjectProgress(team) >= FinaleProgress()
                );
        }
        else{
            isCloseWin =
                (
                    MatchTime() <= FinaleRemainTime() ||   // include over time
                    ObjectProgress(team) >= FinaleProgress()
                );
        }
    }
    return isCloseWin;
}

define IsOverTime():
    IsGameInProgress() &&
    // HasMatchTime() &&
    MatchTime() <= 0;

define CurrentObjectOnPosition(): CurrentObjectPosition() + Vector(0, 4, 0);

define CurrentObjectPosition() globalvar "CurrentObjectPosition"{
    define objPos!;
    
    if(!IsHybridMap()){
        objPos = PayloadPosition();
    }
    else{
        define objIdx! = ObjectiveIndex();

        if(objIdx == 0){
            objPos = ObjectivePosition(objIdx);
        }
        else{
            objPos = PayloadPosition();
        }
    }

    return objPos;
}

define HumanPlayerNum(define team!):
    CountOf(FilteredArray(AllPlayers(team), !IsDummyBot(ae)));

// TAG IsTrueProbability ----------
define IsTrueProbability(in define probability):
    RandomReal(0.001, 100.000) <= probability;

// TAG IsTrueEverySeconds ----------
define IsTrueEverySeconds(define seconds):
    RoundToInteger(MatchTime() % seconds, Rounding.Down) == 0;

// TAG Wait ----------
// Wait for the large message to be erased for the player to read
void WaitBigMessageHide(){ Wait(4, WaitBehavior.AbortWhenFalse); }

// Wait time before switching the game to the next phase
void WaitNextPhase(){ Wait(3, WaitBehavior.AbortWhenFalse); }

// Waiting time to confirm the button long press operation
void WaitShortPressConfirm(){ Wait(0.15, WaitBehavior.IgnoreCondition); }
void WaitLongPressConfirm(){ Wait(0.3, WaitBehavior.AbortWhenFalse); }

// Waiting time to confirm the cancel operation
void WaitCancelPressConfirm(){ Wait(1.2, WaitBehavior.AbortWhenFalse); }

// Timer for drawing objects such as text HUD
// If many HUDs are created at once, they will be dropped.
void WaitRedraw(){ Wait(0.01, WaitBehavior.AbortWhenFalse); }

// The fixed wait time from when the bound conditions are met until the action is executed.
// If the condition changes frequently, the server load will be high, so wait for the action to be executed.
void WaitConditionConfirmed(){ Wait(0.2, WaitBehavior.AbortWhenFalse); }

// Wait time to show PlayEffect generated to entity
// If teleport an entity immediately after PlayEffect, use PlayEffect because it will not be visible.
void WaitPlayEffect(){ Wait(0.6, WaitBehavior.IgnoreCondition); }

// Wait timer for apply impulses of entity
// To ensure that the dead body immediately after ApplyImpulse can obtain thrust
void WaitEntityImpulse(){ Wait(0.05, WaitBehavior.IgnoreCondition); }

// Wait timer for applying continuous impulses in a cycle
// Used when expelling an entity from a prohibited area, etc
void WaitApplyImpulseCycle(){ Wait(0.1, WaitBehavior.AbortWhenFalse); }

// Wait timer for playing continuous blast in a cycle
// Used for flashy productions such as big explosions
void WaitContinuousBlastCycle(){ Wait(0.1, WaitBehavior.IgnoreCondition); }

// Wait timer for processing that needs updating in a short loop cycle
// Used for processing that should have a particularly precise processing interval such as repeat give heal, repeat apply impulse
void WaitUpdateVeryShortCycle(){ Wait(0.1, WaitBehavior.AbortWhenFalse); }

// Wait timer for processing that needs updating in a short loop cycle
// Used for processing that should have a particularly precise processing interval such as repeat give heal, repeat apply impulse
void WaitUpdateShortCycle(){ Wait(1, WaitBehavior.AbortWhenFalse); }

// Wait timer for processing that needs updating in a medium loop cycle
// Used for processing related to general enemy gameplay such as player regeneration
void WaitUpdateMediumCycle(){ Wait(3, WaitBehavior.AbortWhenFalse); }

// Wait timer for processing that needs updating in a long loop cycle
// Used for processing related to events that do not occur frequently such as player entry and exit
void WaitUpdateLongCycle(){ Wait(5, WaitBehavior.AbortWhenFalse); }

void WaitUpdateASecond(){ Wait(1, WaitBehavior.AbortWhenFalse); }

// A wait to immediately force the operation associated with the changed state property.
void WaitChangeState(){ Wait(0.001, WaitBehavior.IgnoreCondition); }

// TAG ButtonGuide ----------
define ButtonGuide(in Button button):
    <"[<0>]", InputBindingString(button)>;

// TAG Constants ----------
define parallelAnimationNum: 2;
define minMoveImpulse: 20;
define canRidingRange : 6.0;
define meleeDamage: 25.0;
define meleeRange: 3.0;
define IsOutOfAmmo():
        (
            MaxAmmo(ep, 0) > 0 &&
            Ammo(ep, 0) <= 0
        ) ||
        (
            MaxAmmo(ep, 1) > 0 &&
            Ammo(ep, 1) <= 0
        );

define IsCanFillAmmo():
        (
            MaxAmmo(ep, 0) > Ammo(ep, 0)
        ) ||
        (
            MaxAmmo(ep, 1) > Ammo(ep, 1)
        );

// TAG BlockDetect ----------
define walkMeterPerSec: 5.5; // avarage hero speed

define IsBlockedBetween(define position1!, define position2!)"IsBlockedBetween"{
    Boolean isBlocked = false;

    define hitPosition! = BlockedPositon(
        position1,
        VectorTowards(position1, position2),
        DistanceBetween(position1, position2)
    );

    if(
        DistanceBetween(position1, hitPosition) < DistanceBetween(position1, position2)
    ){
        isBlocked = true;
    }
    return isBlocked;
}

define BlockedPositon(define position!, define direction!, define distance!)"BlockedPositon"{
    define hitPosition! = RayCastHitPosition(
        position,
        position + (Normalize(direction) * distance),
        null,
        null,
        false
    );
    return hitPosition;
}

define BlockedPositonByLocalVector(define player!, define localVector!, define distance!)"BlockedPositonByLocalVector"{
    define blockedPosition! = BlockedPositon(
        EyePosition(player), 
        WorldVectorOf(localVector, player),
        distance
    );
    return blockedPosition;
}

define GetWallDirection(define player!, define detectDist!, define orderList!)"GetWallDirection"{
    define hasWallDir!;

    for(define index! = 0; index < CountOf(orderList); index++){
        if(
            IsBlockedBetween(
                EyePosition(),
                EyePosition() + (WorldVectorOf(orderList[index], player) * detectDist)
            )
        ){
            hasWallDir = orderList[index];
            break;
        }
    }
    return hasWallDir;
}

define GetGrapplePosition(define hasWallDir!, define detectDist!) playervar "GetGrapplePosition"{
    define blockedPos! = BlockedPositon(ep, WorldVectorOf(hasWallDir, ep), detectDist);
    define blockedDist! = DistanceBetween(ep, blockedPos);
    define cutoutDist! = detectDist - blockedDist;
    define wallposition! =
        // blocked as base
        blockedPos +
        // add hight by cutout
        Vector(0, cutoutDist * 0.7, 0) +
        // too close to wall
        (
            blockedDist <= 2.5
            ?
                // aim without random for touch wall
                RandomPosition(0, 0, 0)
            :
                // aim with random
                RandomPosition(5, 5, 5)
        );
    return wallposition;
}

void StartFacingPlayer(define player!, define facingRate!) playervar "StartFacingPlayer"{
    if(
        player != null &&
        HasSpawned(player)
    ){
        StartFacing(
            ep, DirectionTowards(EyePosition(), EyePosition(player)),
            facingRate, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    }
}

void StartFacingPosition(define position!)"StartFacingPosition"{
    StartFacing(
        ep,
        DirectionTowards(
            EyePosition(),
            position
        ),
        400, Relative.ToWorld, FacingRev.DirectionAndTurnRate
    );
}



// TAG IsBelowAbyss ----------
define detectAbyssLength: 6;

define IsBelowAbyss(define basePos)"IsBelowAbyss"{
    return !IsBlockedBetween(basePos, basePos + (Down() * detectAbyssLength));
}

// Determine if death by Abyss
// Binding the NearestWalkablePosition to a Condition is too much for the server, so call it as a function
define IsDeadByAbyss():
    IsDead() &&
    !IsOnGround() &&
    DistanceBetween(ep, NearestWalkablePosition(ep)) > 5;

// TAG IsAboveCeiling ----------
define detectRoofLength: 6;

define IsAboveCeiling(define basePos)"IsAboveCeiling"{
    return IsBlockedBetween(basePos, basePos + (Up() * detectRoofLength));
}

// TAG Direction ----------
define NoDirection(): Vector(0,0,0);

define RandomDirection(): 
    DirectionFromAngles(RandomReal(0, 360), RandomReal(0, 360));

// TAG Position ----------
// Random position within a specified vector
define RandomPosition(in define x, in define y, in define z):
    Vector(
        RandomReal(-x, x),
        RandomReal(-y, y), 
        RandomReal(-z, z)
    );

define ShiftedPosition(define position, define direction, define distance)"ShiftedPosition"{
    Vector movedPosition = position + (Normalize(direction) * distance);
    return movedPosition;
}

// Aiming position of EventPlayer
define AimingPosition(define limit!, define includeTeam!) {
    return RayCastHitPosition(
        EyePosition(ep),
        EyePosition(ep) + (FacingDirectionOf(ep) * limit),
        includeTeam == null ? null : AllPlayers(includeTeam),
        ep,
        false
    );
}

define AimingPlayer(in define limit!, in define includeTeam!) {
    return RayCastHitPlayer(
        EyePosition(ep),
        EyePosition(ep) + (FacingDirectionOf(ep) * limit),
        includeTeam == null ? null : AllPlayers(includeTeam),
        ep,
        false
    );
}

define BelowPosition(in define position):
    RayCastHitPosition(
        (position + Vector(0, 0.01, 0)),
        (position + Vector(0, 0.01, 0)) + (Down() * MaxLength()),
        null,
        null,
        false
    );

define InvalidPosition():
        Vector(0, -MaxLength(), 0);

define IsInSpawnRoomPosition(in define pos, in define team):
    IsTrueForAny(
        SpawnPoints(team),
        (
            IsInLineOfSight(ae + Up(), pos + Up())
        )
    );


// TAG Player ----------
define IsHostPlayerInGame(){
    return IsTrueForAny(AllPlayers(), ae == HostPlayer());
}

define PlayersAsHero(define hero): 
    FilteredArray(AllPlayers(), HeroOf(ae) == hero);

// Aiming Player of EventPlayer.
define AimingPlayer():
    FirstOf(
        SortedArray(
            FilteredArray(
                PlayersInViewAngle(
                    ep,
                    EnemyTeamOf(ep),
                    15
                ),
                (
                    IsAlive(ae) &&
                    IsInLineOfSight(ep, ae, BarrierLOS.NoBarriersBlock)
                )
            ),
            DistanceBetween(ep, ae)
        )
    );

define EnemyDensityRateOfTargetNear(define target!, define dist!) playervar "EnemyDensityRateOfTargetNear"{
    return 
        CountOf(
            FilteredArray(
                AllLivingPlayers(EnemyTeamOf(ep)),
                DistanceBetween(target, ae) <= dist
            )
        )
            /
        NumberOfPlayers(EnemyTeamOf(ep));
}

// TAG Team ----------
define EnemyTeamOf(in define player!): 
    OppositeTeamOf(TeamOf(player));

// define GetTeamNormalizedHealth()"GetTeamNormalizedHealth"{
//     define teamHealth = 0;
//     define teamList! = AllPlayers(Team.Team1);
//     for(define idx! = 0; idx < CountOf(teamList); idx++){
//         teamHealth += NormalizedHealth(teamList[idx]);
//     }
//     teamHealth /= CountOf(teamList);
//     return teamHealth;
// }

// TAG Balance ----------
// Buff scale value applied to the disadvantaged team depending on the unbalanced number of team members
define ConvertToBalancedValue(define scale!, define team!)"ConvertToBalancedValue"{
    define playerNum! = 
        CountOf(
            FilteredArray(
                AllPlayers(team),
                HasSpawned(ae)
            )
        );
    playerNum = Max(playerNum, 1);
    define amount! = NumberOfSlots(team) / playerNum;
    amount -= 1;
    amount *= scale;
    amount += 1;
    return amount;
}

// TAG Communication ----------
// void PlayRandomVoiceLine(define player!)"PlayRandomVoiceLine"{
//     switch(RandomInteger(0, 3)){
//         case 0:
//         Communicate(player, Communication.VoiceLineUp);
//         break;
//         case 1:
//         Communicate(player, Communication.VoiceLineDown);
//         break;
//         case 2:
//         Communicate(player, Communication.VoiceLineLeft);
//         break;
//         case 3:
//         Communicate(player, Communication.VoiceLineRight);
//         break;
//         default:
//     }
// }

// void PlayRandomEmote(define player!)"PlayRandomEmote"{
//     switch(RandomInteger(0, 3)){
//         case 0:
//         Communicate(player, Communication.EmoteUp);
//         break;
//         case 1:
//         Communicate(player, Communication.EmoteDown);
//         break;
//         case 2:
//         Communicate(player, Communication.EmoteLeft);
//         break;
//         case 3:
//         Communicate(player, Communication.EmoteRight);
//         break;
//         default:
//     }
// }

// TAG Effect ----------
// Conspicuous explosion that repeatedly plays effects
void PlayContinuousBlast(in Color color!, in define position!, in define size!, define effectCount!, define soundCount!){
    while(
        0 < effectCount ||
        0 < soundCount
    ){
        // play blast
        if(0 < effectCount){
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.BadExplosion,
                color, position, size * 2.0);
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.RingExplosion,
                color, position, size * 3.0);
            effectCount--;
        }

        // play blast sound
        if(0 < soundCount){
            PlayEffect(
                AllPlayers(Team.All), PlayEffect.RingExplosionSound,
                Color.White, position, MaxLength());
            soundCount --;
        }

        // has remain count
        if(
            0 < effectCount ||
            0 < soundCount
        ){
            Wait(0.1, WaitBehavior.IgnoreCondition);
        }
    }
}

// TAG Impulse ----------
void ApplyBlastImpulse(define targets!, define blastCenter!, define blastRange!, define forceScale!)"ApplyBlastImpulse"{
    // apply Impulse
    for(gLoopIndex = 0; gLoopIndex < CountOf(targets); gLoopIndex++){
        ApplyImpulse(
            targets[gLoopIndex],
            VectorTowards(
                blastCenter,
                targets[gLoopIndex] + (Up() * 4)
            ),
            blastRange * forceScale,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    WaitEntityImpulse();
}

// TAG AutoAim ----------
// define autoAimingPosition:
//     IsInAlternateForm(autoAimingTarget) ?
//     EyePosition(autoAimingTarget) - Vector(0, 0.7, 0):
//     EyePosition(autoAimingTarget) + Vector(0, 0.2, 0);

// playervar define autoAimingTarget!;
// playervar define autoAimTryCount!;

// void StartAutoAiming()"StartAutoAiming"{
//     autoAimTryCount = 0;
//     while(
//         !IsInViewAngle(
//             ep, autoAimingPosition, 10) &&
//         autoAimTryCount <= 10
//     ){
//         StartFacing(
//             ep,
//             DirectionTowards(
//                 EyePosition(),
//                 autoAimingPosition
//             ),
//             MaxValue(),
//             Relative.ToWorld, FacingRev.DirectionAndTurnRate
//         );   
//         Wait(0.1, WaitBehavior.AbortWhenFalse);
//         autoAimTryCount ++;
//     }
// }

// TAG TextSize ----------
define basicInWorldTextSize: 0.8;

// TAG Bot ----------
define builtinMaxSlotNum: 24;

define botCount: CountOf(FilteredArray(AllPlayers(Team.All), IsDummyBot(ae)));

define canCreateBot: (botCount < builtinMaxSlotNum);

define GetEmptySlotNo(define team!)"getEmptySlotNo"{
    for(define slotNo! = 0; slotNo < builtinMaxSlotNum; slotNo++){
        if(PlayersInSlot(slotNo, team) == null) {
            return slotNo;
        }
    }
    return -1;
}

define GetAvgUltChgOfDummyBot(define team!)"GetAvgUltChgOfDummyBot"{
    define botList! = FilteredArray(AllPlayers(team), IsDummyBot(ae));
    define ultCharge! = 0;
    for(define botListIndex! = 0; botListIndex < CountOf(botList); botListIndex++){
        if(IsUsingUltimate(botList[botListIndex])){
            ultCharge += DefaultPercentage();
        }
        else{
            ultCharge += UltimateChargePercent(botList[botListIndex]);
        }
    }
    ultCharge /= CountOf(botList);
    return ultCharge;
}

void SetAvgUltChgOfDummyBot(define team!, define ultCharge!)"SetAvgUltChgOfDummyBot"{
    define botList! = FilteredArray(AllPlayers(team), IsDummyBot(ae));
    for(define botListIndex! = 0; botListIndex < CountOf(botList); botListIndex++){
        SetUltimateCharge(botList[botListIndex], ultCharge);
    }
}

enum ActionRange{
    Melee = 0,
    Close = 10,
    Middle = 20,
    Far = 30,
    CanFind = 40
}

// TAG ability ----------
void AddAbilityStock(define button!, define addStock!)"AddAbilityStock"{
    define currentStock! = AbilityCharge(ep, button);
    for(define tryCount! = 0; tryCount < 2; tryCount++){

        // try add charge
        SetAbilityCharge(ep, button, currentStock + addStock);
        Wait(0.01, WaitBehavior.IgnoreCondition);

        // charge added
        if(AbilityCharge(ep, button) >= currentStock + addStock){
            return;
        }
        else{
            // try reset cooldown
            SetAbilityCooldown(ep, button, 0);
            Wait(0.01, WaitBehavior.IgnoreCondition);

            // cooldown reseted
            if(AbilityCooldown(ep, button) <= 0){
                return;
            }

            Wait(0.01, WaitBehavior.IgnoreCondition);
        }
    }
}

define IsNemesisForm(in define player!):
    HeroOf(player) == Hero.Ramattra &&
    (
        IsUsingAbility1() ||
        IsUsingUltimate()
    );

define IsMechCalling(in define player!){
    define isCalling!;
    if(
        HeroOf(player) == Hero.Dva &&
        IsUsingUltimate()
    ){
        // wait entering to mech
        Wait(1.8, WaitBehavior.IgnoreCondition);
        if(
            // mech mode
            !IsInAlternateForm()
        ){
            isCalling = true;
        }
        else{
            isCalling = false;
        }
    }
    else{
        isCalling = false;
    }
    return isCalling;
}

// TAG hero ----------
define RandomHero(): rva(AllHeroes());
define RandomTankHero(): rva(AllTankHeroes());
define RandomDamageHero(): rva(AllDamageHeroes());
define RandomSupportHero(): rva(AllSupportHeroes());

define IsTankHero(define hero!): IsMatchInArray(hero, AllTankHeroes());
define IsDamageHero(define hero!): IsMatchInArray(hero, AllDamageHeroes());
define IsSupportHero(define hero!): IsMatchInArray(hero, AllSupportHeroes());

define IsMatchInArray(define value!, define valueArray!)"IsMatchInArray"{
    define isMatch! = false;
    for(define index! = 0; index < CountOf(valueArray); index++){
        if(valueArray[index] == value){
            isMatch = true;
            break;
        }
    }
    return isMatch;
}

globalvar define FavoriteDamageHeroList! =
    [
        Hero.Soldier76, Hero.Soldier76,
        Hero.Cassidy, Hero.Cassidy,
        Hero.Reaper, Hero.Reaper,
        Hero.Sojourn,
        Hero.Bastion,
        Hero.Tracer,
        Hero.Pharah,
        Hero.Hanzo,
        Hero.Widowmaker
    ];

define FavoriteDamageHero():
    rva(FavoriteDamageHeroList);

globalvar define FavoriteTankHeroList! =
    [
        Hero.Reinhardt, Hero.Reinhardt,
        Hero.Roadhog, Hero.Roadhog, 
        Hero.Sigma, Hero.Sigma,
        Hero.Doomfist,
        Hero.Ramattra
    ];

define FavoriteTankHero():
    rva(FavoriteTankHeroList);

globalvar define FavoriteSupportHeroList! =
    [
        Hero.Mercy, Hero.Mercy,
        Hero.Ana, Hero.Ana,
        Hero.Kiriko, Hero.Kiriko,
        Hero.Baptiste,
        Hero.Moira
    ];

define FavoriteSupportHero():
    rva(FavoriteSupportHeroList);

// TAG PlayerName ----------
define GetDummyName()"GetDummyName"{
    define name! = rva([
        "Adie",
        "Adrian",
        "Albert",

        "Ben",
        "Bob",
        "Billy",

        "Chris",
        "Charly",
        "Charles",

        "Dan",
        "Dom",
        "Danny",

        "Eddy",
        "Eric",
        "Ernie",

        "Fred",
        "Freddy",
        "Francis",

        "Gil",
        "Gene",
        "Gabby",

        "Hank",
        "Harry",
        "Harold",

        "Iris",
        "Ike",
        "Isaac",
        
        "Jack",
        "Jeff",
        "James",
        
        "Ken",
        "Kenneth",
        "Kenny",

        "Leo",        
        "Lenny",
        "Leonard",
        
        "Martin",
        "Mickey",
        "Michael",

        "Nick",        
        "Nathan",
        "Nicolas",

        "Peter",        
        "Patrick",
        "Phillip",

        "Rob",
        "Raymond",
        "Richard",
        
        "Sam",
        "Steven",
        "Stuart",
        
        "Ted",
        "Tim",
        "Tony",

        "Vic",
        "Victor",
        "Vincent",

        "Willy",
        "Walter",
        "William",

        "Xman",
        "Xander",
        "Xandres",

        "Zak",
        "Zach",
        "Zachary"
    ]);
    return name;
}
