
define ep: EventPlayer();

// Loop Index
// If Wait occurs during a loop, it conflicts with other processing and the loop index, so use a separate variable.
globalvar define gLoopIndex;
playervar define pLoopIndex;

// Maximum value in game script
// Use in unlimited changing status, unlimited dealt heal or damage, etc
define MaxValue(): 10000;

// Maximum distance when aiming
// If the value is extremely larger than 1000, the aiming position will shift, so 1000 is recommended.
define MaxLength(): 1000;

// Default value of parcentage
define DefaultPercentage(): 100;

// An offset in the Y direction because the point is buried in the surface
define PositionOffset(): Vector(0, 0.6, 0);

// Random position within a specified vector
define RandomPosition(define x, define y, define z): Vector(
        RandomReal(-x, x),
        RandomReal(-y, y), 
        RandomReal(-z, z)
    );

// Wait for the large message to be erased for the player to read
define WaitBigMessageHide(): Wait(4, WaitBehavior.AbortWhenFalse);

// Wait time before switching the game to the next phase
define WaitNextPhase(): Wait(5, WaitBehavior.AbortWhenFalse);

// Waiting time to confirm the button long press operation
define WaitShortPressConfirm(): Wait(0.2, WaitBehavior.IgnoreCondition);

define WaitLongPressConfirm(): Wait(0.4, WaitBehavior.AbortWhenFalse);

// Waiting time to confirm the cancel operation
define WaitCancelPressConfirm(): Wait(1.2, WaitBehavior.AbortWhenFalse);

// Timer for drawing objects such as text HUD
// If many HUDs are created at once, they will be dropped.
define WaitRedraw(): Wait(0.01, WaitBehavior.AbortWhenFalse);

// The fixed wait time from when the bound conditions are met until the action is executed.
// If the condition changes frequently, the server load will be high, so wait for the action to be executed.
define WaitConditionConfirmed(): Wait(0.2, WaitBehavior.AbortWhenFalse);

// Wait time to show PlayEffect generated to entity
// If teleport an entity immediately after PlayEffect, use PlayEffect because it will not be visible.
define WaitPlayEffect(): Wait(0.6, WaitBehavior.IgnoreCondition);

// Wait timer for apply impulses of entity
// To ensure that the dead body immediately after ApplyImpulse can obtain thrust
define WaitEntityImpulse(): Wait(0.1, WaitBehavior.IgnoreCondition);

// Wait timer for applying continuous impulses in a cycle
// Used when expelling an entity from a prohibited area, etc
define WaitApplyImpulseCycle(): Wait(0.1, WaitBehavior.AbortWhenFalse);

// Wait timer for playing continuous blast in a cycle
// Used for flashy productions such as big explosions
define WaitContinuousBlastCycle(): Wait(0.1, WaitBehavior.IgnoreCondition);

// Wait timer for processing that needs updating in a short loop cycle
// Used for processing that should have a particularly precise processing interval such as repeat give heal, repeat apply impulse
define WaitUpdateVeryShortCycle(): Wait(0.1, WaitBehavior.AbortWhenFalse);

// Wait timer for processing that needs updating in a short loop cycle
// Used for processing that should have a particularly precise processing interval such as repeat give heal, repeat apply impulse
define WaitUpdateShortCycle(): Wait(0.2, WaitBehavior.AbortWhenFalse);

// Wait timer for processing that needs updating in a medium loop cycle
// Used for processing related to general enemy gameplay such as player regeneration
define WaitUpdateMediumCycle(): Wait(1, WaitBehavior.AbortWhenFalse);

// Wait timer for processing that needs updating in a long loop cycle
// Used for processing related to events that do not occur frequently such as player entry and exit
define WaitUpdateLongCycle(): Wait(10, WaitBehavior.AbortWhenFalse);

// A wait to immediately force the operation associated with the changed state property.
define WaitChangeState(): Wait(0.1, WaitBehavior.IgnoreCondition);

Vector ShiftedPosition(define position, define direction, define distance)"ShiftedPosition"{
    Vector movedPosition = position + (Normalize(direction) * distance);
    return movedPosition;
}

Boolean IsBlockedBetween(define position, define position2)"IsBlockedBetween"{
    Boolean isBlocked = false;
    define hitPosition = RayCastHitPosition(
        position,
        position + (Normalize(VectorTowards(position, position2)) * DistanceBetween(position, position2)),
        null,
        EventPlayer(),
        false);
    if(
        DistanceBetween(position, hitPosition) < DistanceBetween(position, position2)
    ){
        isBlocked = true;
    }
    return isBlocked;
}

Vector BlockedPositon(define position, define direction, define distance)"BlockedPositon"{
    define hitPosition = RayCastHitPosition(
        position,
        position + (Normalize(direction) * distance),
        null,
        EventPlayer(),
        false);
    return hitPosition;
}

// Aiming position of EventPlayer
define AimingPosition():
    RayCastHitPosition(
        EyePosition(EventPlayer()),
        EyePosition(EventPlayer()) +
            (FacingDirectionOf(EventPlayer()) * MaxLength()),
        AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))),
        EventPlayer(), false);

// Aiming position of EventPlayer
define AimingPositionWithLimit(define limit):
    RayCastHitPosition(
        EyePosition(EventPlayer()),
        EyePosition(EventPlayer()) +
            (FacingDirectionOf(EventPlayer()) * limit),
        AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))),
        EventPlayer(), false);

// Aiming position of EventPlayer. but sight line collision ignore player entity
define AimingPositionIgnorePlayer():
    RayCastHitPosition(
        EyePosition(EventPlayer()),
        EyePosition(EventPlayer()) + FacingDirectionOf(
            EventPlayer()
        ) * MaxLength(),
        null,
        EventPlayer(), false);

define BelowPosition(define position):
    RayCastHitPosition(
        (position + Vector(0, 0.1, 0)),
        (position + Vector(0, 0.1, 0)) + (Down() * MaxLength()),
        AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))),
        EventPlayer(), false);

define InvalidPosition():
        Vector(0, -MaxLength(), 0);

// Aiming Player of EventPlayer.
define AimingPlayer():
    FirstOf(
        SortedArray(
            FilteredArray(
                PlayersInViewAngle(
                    EventPlayer(),
                    OppositeTeamOf(TeamOf(EventPlayer())),
                    8
                ),
                (
                    IsAlive(ArrayElement()) &&
                    IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)
                )
            ),
            DistanceBetween(EventPlayer(), ArrayElement())
        )
    );

define ButtonGuide(Button button):
    <"[<0>]",InputBindingString(button)>;

// Determine if death by Abyss
// Binding the NearestWalkablePosition to a Condition is too much for the server, so call it as a function
define IsDeadByAbyss() :
    DistanceBetween(EventPlayer(), NearestWalkablePosition(EventPlayer())) > 10;

// Buff scale value determined according to the unbalance of the teamscale value determined according to the unbalance of the team
// You can change the buff amount by changing the scale value.
define ConvertToBalancedValue(define scale, define team)"ConvertToBalancedValue"{
    define activePlayerNum1 = 
        CountOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                HasSpawned(ArrayElement())
            )
        );
    activePlayerNum1 = activePlayerNum1 <= 0 ? 1 : activePlayerNum1;

    define activePlayerNum2 = 
        CountOf(
            FilteredArray(
                AllPlayers(Team.Team2),
                HasSpawned(ArrayElement())
            )
        );
    activePlayerNum2 = activePlayerNum2 <= 0 ? 1 : activePlayerNum2;

    define amount;
    if(team == Team.Team1){
        amount = activePlayerNum2 / activePlayerNum1;
    }
    else if(team == Team.Team2){
        amount = activePlayerNum1 / activePlayerNum2;
    }
    else{
        amount = 1;
    }

    amount -= 1;
    amount *= scale;
    amount += 1;
    return amount;
}

// Conspicuous explosion that repeatedly plays effects
void PlayContinuousBlast(Color color, define position, define size, define count){
    while(0 < count){
        // play blast
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.BadExplosion,
            color, position, size * 2.0);
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.RingExplosion,
            color, position, size * 3.0);
        WaitContinuousBlastCycle();
        count--;
    }
}

void PlayRandomVoiceLine(define player)"PlayRandomVoiceLine"{
    define voiceLineNo = RandomInteger(0, 3);
    switch(voiceLineNo){
        case 0:
        Communicate(player, Communication.VoiceLineUp);
        break;
        case 1:
        Communicate(player, Communication.VoiceLineDown);
        break;
        case 2:
        Communicate(player, Communication.VoiceLineLeft);
        break;
        case 3:
        Communicate(player, Communication.VoiceLineRight);
        break;
        default:
    }
}

void PlayRandomEmote(define player)"PlayRandomEmote"{
    define voiceLineNo = RandomInteger(0, 3);
    switch(voiceLineNo){
        case 0:
        Communicate(player, Communication.EmoteUp);
        break;
        case 1:
        Communicate(player, Communication.EmoteDown);
        break;
        case 2:
        Communicate(player, Communication.EmoteLeft);
        break;
        case 3:
        Communicate(player, Communication.EmoteRight);
        break;
        default:
    }
}

define autoAimingPosition: EyePosition(autoAimingTarget) + (Up() * 0.175);
playervar define autoAimingTarget;
playervar define autoAimTryCount;
void StartAutoAiming()"StartAutoAiming"{
    autoAimTryCount = 0;
    while(
        !IsInViewAngle(
            EventPlayer(), autoAimingPosition, 10) &&
        autoAimTryCount < 50
    ){
        // StopFacing(EventPlayer());
        // Wait(0.01, WaitBehavior.IgnoreCondition);

        // StartFacing(
        //     EventPlayer(),
        //     FacingDirectionOf(),
        //     MaxValue(),
        //     Relative.ToWorld, FacingRev.DirectionAndTurnRate
        // );   
        // Wait(0.01, WaitBehavior.IgnoreCondition);

        StartFacing(
            EventPlayer(),
            DirectionTowards(
                EyePosition(),
                autoAimingPosition
            ),
            MaxValue(),
            Relative.ToWorld, FacingRev.DirectionAndTurnRate
        );   
        Wait(0.01, WaitBehavior.IgnoreCondition);

        autoAimTryCount ++;
    }



}

void ApplyBlastImpulse(define targets, define blastCenter, define blastRange)"ApplyBlastImpulse"{
    // apply Impulse
    for(gLoopIndex = 0; gLoopIndex < CountOf(targets); gLoopIndex++){
        ApplyImpulse(targets[gLoopIndex],
            VectorTowards(blastCenter, targets[gLoopIndex] + (Up() * 2)),
            blastRange * 4,
            Relative.ToWorld, ContraryMotion.Cancel);
    }
    WaitEntityImpulse();
}

playervar define intaractDoublePressed;

rule: "Player/intaractDoublePressed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !intaractDoublePressed &&
    IsButtonHeld(EventPlayer(), Button.Interact)
){
    WaitUntil(!IsButtonHeld(EventPlayer(), Button.Interact), 0.3);
    AbortIf(IsButtonHeld(EventPlayer(), Button.Interact));
    WaitUntil(IsButtonHeld(EventPlayer(), Button.Interact), 0.3);
    AbortIf(!IsButtonHeld(EventPlayer(), Button.Interact));
    intaractDoublePressed = true;
}

rule: "Player/releaseDoublePressed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    intaractDoublePressed
){
    WaitConditionConfirmed();
    intaractDoublePressed = false;
}