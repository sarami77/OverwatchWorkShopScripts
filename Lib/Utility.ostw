// A script as common utility functions

// Maximum value in game script
// Use in unlimited changing status, unlimited dealt heal or damage, etc
define MaxValue(): 10000;

// Maximum distance when aiming
// If the value is extremely larger than 1000, the aiming position will shift, so 1000 is recommended.
define MaxLength(): 1000;

// Default value of parcentage
define DefaultPercentage(): 100;

// An offset in the Y direction because the point is buried in the surface
define PositionOffset(): Vector(0, 0.5, 0);

// Random position within a specified vector
define RandomPosition(define x, define y, define z): Vector(
        RandomReal(-x, x),
        RandomReal(-y, y), 
        RandomReal(-z, z)
    );

// Wait for the large message to be erased for the player to read
define WaitBigMessageHide(): Wait(4, WaitBehavior.AbortWhenFalse);

// Wait time before switching the game to the next phase
define WaitNextPhase(): Wait(6, WaitBehavior.AbortWhenFalse);

// Waiting time to confirm the button long press operation
define WaitLongPressConfirm(): Wait(0.4, WaitBehavior.AbortWhenFalse);

// Waiting time to confirm the cancel operation
define WaitCancelPressConfirm(): Wait(2.0, WaitBehavior.AbortWhenFalse);

// Timer for drawing objects such as text HUD
// If many HUDs are created at once, they will be dropped.
define WaitRedraw(): Wait(0.1, WaitBehavior.AbortWhenFalse);

// The fixed wait time from when the bound conditions are met until the action is executed.
// If the condition changes frequently, the server load will be high, so wait for the action to be executed.
define WaitConditionConfirmed(): Wait(0.2, WaitBehavior.AbortWhenFalse);

// Wait time to show PlayEffect generated to entity
// If teleport an entity immediately after PlayEffect, use PlayEffect because it will not be visible.
define WaitPlayEffect(): Wait(0.7, WaitBehavior.IgnoreCondition);

// Wait timer for apply impulses of entity
// To ensure that the dead body immediately after ApplyImpulse can obtain thrust
define WaitEntityImpulse(): Wait(0.1, WaitBehavior.IgnoreCondition);

// Wait timer for applying continuous impulses in a cycle
// Used when expelling an entity from a prohibited area, etc
define WaitApplyImpulseCycle(): Wait(0.2, WaitBehavior.AbortWhenFalse);

// Wait timer for playing continuous blast in a cycle
// Used for flashy productions such as big explosions
define WaitContinuousBlastCycle(): Wait(0.1, WaitBehavior.IgnoreCondition);

// Wait timer for processing that needs updating in a short loop cycle
// Used for processing that should have a particularly precise processing interval such as repeat give heal, repeat apply impulse
define WaitUpdateShortCycle(): Wait(0.2, WaitBehavior.AbortWhenFalse);

// Wait timer for processing that needs updating in a medium loop cycle
// Used for processing related to general enemy gameplay such as player regeneration
define WaitUpdateMediumCycle(): Wait(1, WaitBehavior.AbortWhenFalse);

// Wait timer for processing that needs updating in a long loop cycle
// Used for processing related to events that do not occur frequently such as player entry and exit
define WaitUpdateLongCycle(): Wait(10, WaitBehavior.AbortWhenFalse);

// A wait to immediately force the operation associated with the changed state property.
define WaitChangeState(): Wait(0.1, WaitBehavior.IgnoreCondition);

// Aiming position of EventPlayer
define AimingPosition(): RayCastHitPosition(
                            EyePosition(EventPlayer()),
                            EyePosition(EventPlayer()) +
                                (FacingDirectionOf(EventPlayer()) * MaxLength()),
                            AllPlayers(Team.Team2), EventPlayer(), false);

// Aiming position of EventPlayer
define AimingPositionWithLimit(define limit): RayCastHitPosition(
                            EyePosition(EventPlayer()),
                            EyePosition(EventPlayer()) +
                                (FacingDirectionOf(EventPlayer()) * limit),
                            AllPlayers(Team.Team2), EventPlayer(), false);

// Aiming position of EventPlayer. but sight line collision ignore player entity
define AimingPositionIgnorePlayer(): RayCastHitPosition(
                            EyePosition(EventPlayer()),
                            EyePosition(EventPlayer()) + (
                                FacingDirectionOf(EventPlayer()) * MaxLength()),
                            null, EventPlayer(), false);

// Determine if death by Abyss
// Binding the NearestWalkablePosition to a Condition is too much for the server, so call it as a function
define IsDeadByAbyss() :
    DistanceBetween(EventPlayer(), NearestWalkablePosition(EventPlayer())) > 10;

// Buff scale value determined according to the unbalance of the teamscale value determined according to the unbalance of the team
// You can change the buff amount by changing the scale value.
define ConvertToBalancedValue(define scale)"Subroutine/ConvertToBalancedValue"{
    define enemyNum = NumberOfPlayers(Team.Team2); 
    define activePlayerNum = 
        CountOf(
            FilteredArray(
                AllPlayers(Team.Team1),
                HasSpawned(ArrayElement()) &&
                !IsInSpawnRoom(ArrayElement())
            )
        );
    activePlayerNum = activePlayerNum <= 0 ? 1 : activePlayerNum;
    define amount = enemyNum / activePlayerNum;
    amount *= scale;
    amount += 1;
    return amount;
}

// Conspicuous explosion that repeatedly plays effects
void PlayContinuousBlast(define position, define size, define count, Color color){
    for(; 0 < count; count--){
        // play blast
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.BadExplosion,
            color, position, size * 1.5);
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.RingExplosion,
            color, position, size * 3);
        WaitContinuousBlastCycle();
    }
}
