
import "Lib/Bot.del";

// TAG FriendBot ----------
// TAG Initialize ----------
define playerTeam: Team.Team1;
define enemyTeam: Team.Team2;

rule: "FriendBot/reloadFriendBotAsset"
Event.OngoingGlobal
if(
    initCompleted
){
    reloadFriendBotAsset();
}

rule: "FriendBot/reloadFriendBotAssetJoin"
Event.OnPlayerJoin
if(
    TeamOf() == playerTeam &&
    initCompleted
){
    reloadFriendBotAsset();
}

rule: "FriendBot/reloadFriendBotAssetLeave"
Event.OnPlayerLeave
if(
    TeamOf() == playerTeam &&
    initCompleted
){
    reloadFriendBotAsset();
}



void reloadFriendBotAsset()"reloadFriendBotAsset"{

    define heroList =
        [
            Hero.Mercy, Hero.Reinhardt,  Hero.Genji
        ];

    define addNum = 4 - NumberOfPlayers(playerTeam);

    heroList = ArraySlice(heroList, 0, addNum);

    // create all bot
    
    for(define loopIndex = 0; loopIndex < CountOf(heroList); loopIndex++){
        CreateBotsByHeroInput(heroList[loopIndex], 1, playerTeam);
    }
}

rule: "FriendBot/Teleport/teleportByEnemyNotFound"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsGameInProgress() &&
    IsDummyBot() &&
    IsAlive()
){
    for(define notHasLineSecond! = 0; notHasLineSecond < 3; notHasLineSecond ++){
        Wait(1, WaitBehavior.AbortWhenFalse);
        define isEnemyNotFound! =
            !IsInLineOfSight(ep,
                ClosestPlayerTo(ep, enemyTeam),
                BarrierLOS.NoBarriersBlock);

        if(!isEnemyNotFound){
            // keeping condition count to up
            LoopIfConditionIsTrue();
        }
    }
    
    Teleport(ep, ClosestPlayerTo(ep, playerTeam));

    LoopIfConditionIsTrue();
}
