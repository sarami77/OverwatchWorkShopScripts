import "Test.setting.json";
import "../Lib/Debug.del";
import "../Lib/Utility.del";
import "../Lib/ServerOverloadMeasures.del";
import "../Lib/Bot.del";
// import "../Lib/Buddy.del";
// import "../Lib/Vote.del";
// import "../Lib/HeroMod.del";

// TestCode -----------------------------------------------
define humanTeam: Team.Team1;
define enemyTeam: Team.Team2;

define cautionColor: Color.Yellow;

define HasObjectDirection(): false;

globalvar define mapCenter!;
globalvar define mapCenterToEdgeDist!;
globalvar define portalPosition;
globalvar define portalSize;
globalvar define portalHealth;
globalvar define portalDestoryCount;
globalvar define isPortalSecuring;
globalvar define prevInside;

disabled rule: "PortalHunt"
Event.OngoingGlobal
{
    Wait(5);
    DisableCompletion();

    // find map center -------------------------------------
    define dir! = 0;
    define mapEdgeList! = [];
    define basePos! = Vector(0,0,0);

    // search map edge form
    while(360 > dir){
        define linePos! = basePos + (DirectionFromAngles(dir, 0) * MaxLength());
        define mapEdge! = NearestWalkablePosition(linePos);
        mapEdgeList[CountOf(mapEdgeList)] = mapEdge;
        dir += 30;
    }

    // calc map center
    mapCenter = Vector(0,0,0);
    for(define index! = 0; index < CountOf(mapEdgeList); index++){
        mapCenter += mapEdgeList[index];
    }
    mapCenter /= CountOf(mapEdgeList);

    // calc map center to edge dist
    mapCenterToEdgeDist = 0;
    for(define index! = 0; index < CountOf(mapEdgeList); index++){
        mapCenterToEdgeDist += DistanceBetween(mapCenter, mapEdgeList[index]);
    }
    mapCenterToEdgeDist /= CountOf(mapEdgeList);

    // make bot asset -------------------------------------
    define assetList = [
        Hero.Sombra,
        Hero.Soldier76,
        Hero.Reaper,
        Hero.Reinhardt,
        Hero.WreckingBall,
        Hero.Mercy,
        Hero.Baptiste,
        Hero.Ana
    ];

    // CreateBotsByHeroList(assetList, enemyTeam);
    // CreateBotsByHeroList(assetList, enemyTeam);
    CreateBotsByHeroList(assetList, humanTeam);
    Wait(1);
    AllPlayers().watchUpdateRate = 2;
    AllPlayers().enableFollowObject = false;
    AllPlayers(enemyTeam).enableRetreat = false;
    AllPlayers().isBotActive = true;
    HostPlayer().isBotActive = false;
    

    CreateHudText(ap(ta),
        <"portal destoryed count : <0>", portalDestoryCount>, null, null, Location.Top, 1, Color.Purple, Color.White, Color.White);
    CreateHudText(portalHealth > 0 ? ap(ta) : null,
        <"portal health : <0>", RoundToInteger(portalHealth, Rounding.Up)>, null, null, Location.Top, 2, Color.Purple, Color.White, Color.White);
    CreateIcon(portalPosition != null ? ap(ta) : null,
        portalPosition + Vector(0,0,0), Icon.Spiral, IconRev.VisibleToPositionAndColor, Color.Purple, true);
    CreateEffect(portalPosition != null ? ap(ta) : null,
        Effect.Sphere, Color.Purple, portalPosition, portalSize, EffectRev.VisibleToPositionRadiusAndColor);

    // game logic -------------------------------------
    while(true){
        // SetMoveSpeed(hp, 1000);

        // not placed portal
        if(
            portalPosition == null
        ){
            // set portal
            // place portal
            portalPosition = NearestWalkablePosition(mapCenter + RandomPosition(mapCenterToEdgeDist, mapCenterToEdgeDist / 4, mapCenterToEdgeDist));
        }
        else{
            define playerPos =
                FirstOf(SortedArray(
                        FilteredArray(
                            AllLivingPlayers(humanTeam),
                            !IsInSpawnRoom(ae)
                        ),
                        DistanceBetween(portalPosition, ae)
                    )
                );
            isPortalSecuring = DistanceBetween(portalPosition, playerPos) <= portalSize;

            if(isPortalSecuring){
                // set portal
                if(portalHealth <= 0){
                    // destory portal
                    PlayContinuousBlast(Color.Yellow, portalPosition, portalSize, 5, 5);
                    Kill(ap(enemyTeam));
                    StopChasingVariable(portalSize);
                    portalPosition = null;
                    portalSize = null;
                    portalDestoryCount ++;
                    Wait(5);
                }
                else{
                    // damage portal
                    portalHealth --;
                    // count down sound
                    PlayEffect(ap(ta), PlayEffect.DebuffImpactSound, null, playerPos, 25);
                }

                // set enemy bot
                if(!prevInside){
                    Teleport(AllLivingPlayers(enemyTeam), NearestWalkablePosition(BlockedPositon(playerPos, DirectionTowards(playerPos, portalPosition), portalSize / 2)));
                }
                else{
                    define idleEnemys = FilteredArray(AllLivingPlayers(enemyTeam), ae.actionState == ActionState.Non);
                    Teleport(idleEnemys, NearestWalkablePosition(BlockedPositon(playerPos, DirectionTowards(playerPos, portalPosition), portalSize / 2)));
                }
                prevInside = true;
            }
            else{

                // set portal
                if(portalHealth <= 0){
                    portalHealth = 10 + (portalDestoryCount * 5);
                }
                else if(portalHealth < 10 + (portalDestoryCount * 10)){
                    // grow portal health
                    portalHealth += (1 + (portalDestoryCount * 0.5));
                }
                if(portalSize < 100){
                    // grow portal size
                    ChaseVariableOverTime(portalSize, portalSize + 0.5, 1, TimeChaseReevaluation.None);
                }

                // set enemy bot
                SetDamageDealt(AllPlayers(enemyTeam), 30 + (portalDestoryCount * 10));
                define idleEnemys = FilteredArray(AllLivingPlayers(enemyTeam), ae.actionState == ActionState.Non);
                Teleport(idleEnemys, NearestWalkablePosition(BlockedPositon(playerPos, DirectionTowards(playerPos, portalPosition), DistanceBetween(playerPos, portalPosition) * 0.3)));
                prevInside = false;
            }

        }

        Wait(1);
    }
}

rule: "BotTest"
Event.OngoingGlobal
{
    // DisableInspectorRecording();
    Wait(5);
    slowControlHandler = SlowControlHandler.ServerOverloadMeasures;
        
    define assetList = [
        // Hero.Sombra
        // Hero.Widowmaker
        // Hero.Reaper, 
        Hero.Reaper,
        // Hero.Mercy,
        Hero.Mercy
        // Hero.Ana
        // Hero.Mei,
        // Hero.Mei
        // Hero.Lucio
        // Hero.Lucio
        // Hero.Ramattra,Hero.Ramattra
        // Hero.Baptiste,
        // Hero.Symmetra
    ];
    
    CreateBotsByHeroList(assetList, enemyTeam);
    CreateBotsByHeroList(assetList, humanTeam);

    SetRespawnMaxTime(ap(ta), 5);
    SetMaxHealth(ap(ta), 100); Wait(0.5); Heal(ap(ta), null, MaxValue());
    // SetStatus(ap(ta), null, Status.Unkillable, MaxValue()); 
    AllPlayers().watchUpdateRate = 1;
    AllPlayers().isBotActive = true;
    HostPlayer().isBotActive = false;

    while(true){
        SetAbilityCooldown(ap(ta), Button.Ability1, 0);
        SetAbilityCooldown(ap(ta), Button.Ability2, 0);
        SetAbilityCooldown(ap(ta), Button.SecondaryFire, 0);
        Damage(FilteredArray(ap(ta), HeroOf(ae) == Hero.Reaper), null, 150);
        Wait(1);
    }
    
}

disabled rule: "AvoidRespawnRoom"
Event.OngoingPlayer
if(
    ep == hp &&
    IsButtonHeld(ep, Button.Interact)
){
    define checkRange = 50;
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Blue, SpawnPoints(TeamOf(ep))[0], checkRange, EffectRev.VisibleToPositionRadiusAndColor);
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red, SpawnPoints(EnemyTeamOf(ep))[0], checkRange, EffectRev.VisibleToPositionRadiusAndColor);

    define roomNo = 0;

    while(true){
        if(checkRange > DistanceBetween(ep, SpawnPoints(EnemyTeamOf(ep))[0])){
            ForceSpawnRoom(EnemyTeamOf(ep), RandomInteger(0, 2));
        }
        if(checkRange > DistanceBetween(ep, SpawnPoints(TeamOf(ep))[0])){
            ForceSpawnRoom(TeamOf(ep), RandomInteger(0, 2));
        }
                
        Wait(1);
    }
}


// TeamFormation -----------------------------------------------
disabled rule: "TeamFormation/restart"
Event.OngoingGlobal
if(
    true
){
    while(true){
        WaitUntil(
            (
                NumberOfLivingPlayers(humanTeam) <= 0 ||
                NumberOfLivingPlayers(enemyTeam)  <= 0
            ),
            MaxValue()
        );
        Wait(3);
        Respawn(ap(Team.All));
        Wait(1);
    }
}

// Round -----------------------------------------------
rule: "Round/shortenAssemblePhase"
Event.OngoingGlobal
if(
    IsAssemblingHeroes()
){
    SetMatchTime(5);
}

rule: "Round/shortenSetupPhase"
Event.OngoingGlobal
if(
    IsInSetup()
){
    SetMatchTime(5);
}

// killCount -----------------------------------------------
globalvar define killCountTeam1;
globalvar define killCountTeam2;

rule: "killCount/countUp"
Event.OnFinalBlow
{
    if(TeamOf() == Team.Team1)
        killCountTeam1 ++;
    else if(TeamOf() == Team.Team2)        
        killCountTeam2 ++;
    
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

// TAG Debug ----------
globalvar define debugHuds!;

define Last():
    CountOf(debugHuds);

define AimingPositonOf(define player):
    RayCastHitPosition(
        EyePosition(player),
        EyePosition(player) +
            (FacingDirectionOf(player) * MaxLength()),
        null,
        null,
        false
    );

rule: "showParam"
Event.OngoingGlobal
{
    debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("count Wait Action By Server Load", countWaitActionByServerLoad, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("Distance to aim pos", DistanceBetween(HostPlayer(), AimingPositonOf(HostPlayer())), Color.Orange);
    debugHuds[Last()] = CreateDebugHud("player team player num", <"<0> / <1>", NumberOfLivingPlayers(humanTeam), NumberOfPlayers(humanTeam)>, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("enemy team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("killCountTeam1", killCountTeam1, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("killCountTeam2", killCountTeam2, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Orange);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount = 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}
