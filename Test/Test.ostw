import "Test.setting.json";
import "../Lib/Debug.del";
import "../Lib/Utility.del";
import "../Lib/ServerOverLoadMeasures.del";
import "../Lib/Bot.del";
// import "../Lib/Vote.del";
// import "../Lib/HeroMod.del";

// Builtin -----------------------------------------------
define humanTeam: Team.Team1;
define enemyTeam: Team.Team2;

rule: "Builtin"
Event.OngoingGlobal
{
    // DisableInspectorRecording();
    Wait(5);
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;
        
    define assetList = [
        // Hero.Sombra
        // Hero.Widowmaker
        Hero.WreckingBall, Hero.WreckingBall, Hero.WreckingBall
        // Hero.Ramattra,Hero.Ramattra
        // Hero.Baptiste,
        // Hero.Symmetra
    ];
    
    // DestroyBots(enemyTeam);
    // DestroyBots(humanTeam);
    // CreateBotsByHeroList(assetList, enemyTeam);
    // CreateBotsByHeroList(assetList, humanTeam);

    SetRespawnMaxTime(ap(ta), 1);
    SetMaxHealth(ap(ta), 100); Wait(0.5); Heal(ap(ta), null, MaxValue());
    SetStatus(ap(ta), null, Status.Unkillable, MaxValue()); 
    AllPlayers().watchUpdateRate = 1;
    AllPlayers().isBotActive = true;
    HostPlayer().isBotActive = false;

    while(true){
        SetAbilityCooldown(ap(ta), Button.SecondaryFire, 0);
        SetAbilityCooldown(ap(ta), Button.Ability1, 0);
        SetAbilityCooldown(ap(ta), Button.Ability2, 0);
        // SetUltimateCharge(ap(ta), 100);
        // Teleport(ap(ta), Vector(0,0,0));
        Wait(1);
    }
    
}

// TestCode -----------------------------------------------
define cautionColor: Color.Yellow;

globalvar define portalPosition;

rule: "AvoidRespawnRoom"
Event.OngoingPlayer
if(
    ep == hp &&
    IsButtonHeld(ep, Button.Interact)
){
}

disabled rule: "AvoidRespawnRoom"
Event.OngoingPlayer
if(
    ep == hp &&
    IsButtonHeld(ep, Button.Interact)
){
    define checkRange = 50;
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Blue, SpawnPoints(TeamOf(ep))[0], checkRange, EffectRev.VisibleToPositionRadiusAndColor);
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Red, SpawnPoints(EnemyTeamOf(ep))[0], checkRange, EffectRev.VisibleToPositionRadiusAndColor);

    define roomNo = 0;

    while(true){
        if(checkRange > DistanceBetween(ep, SpawnPoints(EnemyTeamOf(ep))[0])){
            ForceSpawnRoom(EnemyTeamOf(ep), RandomInteger(0, 2));
        }
        if(checkRange > DistanceBetween(ep, SpawnPoints(TeamOf(ep))[0])){
            ForceSpawnRoom(TeamOf(ep), RandomInteger(0, 2));
        }
                
        Wait(1);
    }
}
disabled rule: "FindMapCenter"
Event.OngoingPlayer
if(
    ep == hp &&
    IsButtonHeld(ep, Button.Interact)
){
    DestroyAllEffects();

    define dir! = 0;
    define mapEdgeList! = [];
    define basePos! = PositionOf(ep);

    while(360 > dir){
        define linePos! = basePos + (DirectionFromAngles(dir, 0) * MaxLength());
        define mapEdge! = NearestWalkablePosition(linePos);
        mapEdgeList[CountOf(mapEdgeList)] = mapEdge;
        dir += 30;
    }

    define mapCenter! = Vector(0,0,0);
    for(define index! = 0; index < CountOf(mapEdgeList); index++){
        mapCenter += mapEdgeList[index];
    }
    mapCenter /= CountOf(mapEdgeList);

    define mapCenterToEdgeDist! = 0;
    for(define index! = 0; index < CountOf(mapEdgeList); index++){
        mapCenterToEdgeDist += DistanceBetween(mapCenter, mapEdgeList[index]);
    }
    mapCenterToEdgeDist /= CountOf(mapEdgeList);
    
    CreateEffect(ep, Effect.LightShaft, Color.White, mapCenter, mapCenterToEdgeDist, EffectRev.PositionAndRadius);

    for(define index! = 0; index < CountOf(mapEdgeList); index++){
        CreateEffect(ep, Effect.LightShaft, Color.Yellow, mapEdgeList[index], 5, EffectRev.None);
    }

    // StartCamera(ep, mapCenter + Vector(0, mapCenterToEdgeDist* 2.0, 0), mapCenter);

    CreateIcon(ep, ep, Icon.ArrowDown, IconRev.Position, Color.Blue, true);

    define count = 0;
    while(count < 100){
        define randomPos = NearestWalkablePosition(mapCenter + RandomPosition(mapCenterToEdgeDist, mapCenterToEdgeDist / 4, mapCenterToEdgeDist));
        CreateEffect(ep, Effect.LightShaft, Color.Red, randomPos, 2.5, EffectRev.None);
        count ++;
    }
}



// TeamFormation -----------------------------------------------
// rule: "TeamFormation/restart"
// Event.OngoingGlobal
// if(
//     initCompleted
// ){
//     while(true){
//         WaitUntil(
//             (
//                 NumberOfLivingPlayers(humanTeam) <= 0 ||
//                 NumberOfLivingPlayers(enemyTeam)  <= 0
//             ),
//             MaxValue()
//         );
//         Wait(3);
//         Respawn(ap(Team.All));
//         Wait(1);
//     }
// }

// Round -----------------------------------------------
rule: "Round/shortenAssemblePhase"
Event.OngoingGlobal
if(
    IsAssemblingHeroes()
){
    SetMatchTime(5);
}

rule: "Round/shortenSetupPhase"
Event.OngoingGlobal
if(
    IsInSetup()
){
    SetMatchTime(5);
}

// killCount -----------------------------------------------
globalvar define killCountTeam1;
globalvar define killCountTeam2;

rule: "killCount/countUp"
Event.OnFinalBlow
{
    if(TeamOf() == Team.Team1)
        killCountTeam1 ++;
    else if(TeamOf() == Team.Team2)        
        killCountTeam2 ++;
    
}

// Debug/Slow -----------------------------------------------
globalvar define slow = DefaultPercentage();

rule: "Debug/Slow/setSlow"
Event.OngoingPlayer
Team.Team1
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump)
){
    // 100 -> 50 -> 25 -> 10
    if(slow == DefaultPercentage())
        slow = 50;
    else if(slow == 50)
        slow = 25;
    else if(slow == 25)
        slow = 10;
    else if(slow == 10)
        slow = DefaultPercentage();
    else
        slow = DefaultPercentage();
    SetSlowMotion(slow);
}

// Debug/TuneVal -----------------------------------------------
define changeTimeInterval: 0.1;
define initialTuneUnit : 0.01;
globalvar define tuneVal = 0.1;
globalvar define consecutiveChangeCount = 0;
globalvar define tuneUnit = initialTuneUnit;

// TAG Debug ----------
globalvar define debugHuds!;

define Last():
    CountOf(debugHuds);

define AimingPositonOf(define player):
    RayCastHitPosition(
        EyePosition(player),
        EyePosition(player) +
            (FacingDirectionOf(player) * MaxLength()),
        null,
        null,
        false
    );

rule: "showParam"
Event.OngoingGlobal
{
    debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < 255 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("game Logic Speed", gameLogicSpeed, gameLogicSpeed >= 100 ? Color.Orange : Color.Red);
    debugHuds[Last()] = CreateDebugHud("count Wait Action By Server Load", countWaitActionByServerLoad, Color.Orange);
    debugHuds[Last()] = CreateDebugHud("Distance to aim pos", DistanceBetween(HostPlayer(), AimingPositonOf(HostPlayer())), Color.Orange);
    debugHuds[Last()] = CreateDebugHud("player team player num", <"<0> / <1>", NumberOfLivingPlayers(humanTeam), NumberOfPlayers(humanTeam)>, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("enemy team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("killCountTeam1", killCountTeam1, Color.Team1);
    debugHuds[Last()] = CreateDebugHud("killCountTeam2", killCountTeam2, Color.Team2);
    debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Orange);
}

rule: "Debug/TuneVal/startIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    tuneVal += tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopIncreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability2)
    )
){
    resetTuneUnit();
}

rule: "Debug/TuneVal/startDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    (
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    tuneVal -= tuneUnit;
    Wait(changeTimeInterval, WaitBehavior.AbortWhenFalse);
    changeTuneUnit();
    LoopIfConditionIsTrue();
}

rule: "Debug/TuneVal/stopDecreaseParam"
Event.OngoingPlayer
if(
    HostPlayer() &&
    !(
        IsButtonHeld(ep, Button.Interact) &&
        IsButtonHeld(ep, Button.Ability1)
    )
){
    resetTuneUnit();
}

void resetTuneUnit(){
    tuneUnit = initialTuneUnit;
    consecutiveChangeCount = 0;
}

void changeTuneUnit(){
    consecutiveChangeCount ++;
    if(consecutiveChangeCount < 10)
        tuneUnit =  initialTuneUnit * 1;
    else if(consecutiveChangeCount < 20 )
        tuneUnit = initialTuneUnit * 10;
    else if(consecutiveChangeCount < 30 )
        tuneUnit = initialTuneUnit * 100;
    else
        tuneUnit = initialTuneUnit * 1000;
}
