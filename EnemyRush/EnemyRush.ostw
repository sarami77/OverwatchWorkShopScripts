import "EnemyRush.setting.json";
import "../Lib/Debug.del";
import "../Lib/Utility.del";
import "../Lib/ServerOverloadMeasures.del";
import "../Lib/Bot.del";
import "../Lib/Buddy.del";
import "../Lib/Vote.del";
import "../Lib/HeroMod.del";
// import "Translate.del";

// rule: "PreCompileTest"
// Event.OngoingGlobal
// {
//     define text = "TEST_"+ TS(TSKey.HERO_MOD_MEDIC_TITLE);
//     define text2 = "TEST_"+ TS(TSKey.HERO_MOD_NOMOD_DETAIL);
// }

// TAG Signature and infomation ----------
disabled rule: "[PVE] ENEMY RUSH ver.12.0 / Share code [V7PEF]. You allowed copy or modify code." -1 {}
disabled rule: "This script was generated by ItsDeltin/Overwatch-Script-To-Workshop. Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop" -1 {}
disabled rule: "This original script was created by sarami77#1868. Check detail with https://github.com/sarami77/OverwatchWorkShopScripts" -1 {}

// TAG Initialize ----------
define humanTeam: Team.Team2;
define enemyTeam: Team.Team1;
define allTeam: Team.All;

globalvar define initCompleted;

rule: "Initialize/initialize"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(5, WaitBehavior.AbortWhenFalse);

    // show version and share code
    CreateHudText(AllPlayers(),
        null, "[PVE] ENEMY RUSH ver.12.0 / Share code [V7PEF]", null,
        Location.Left, -999,
        Color.White, Color.Gray, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);

    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

// TAG Round ----------
rule: "Round/shortenAssemblePhase"
Event.OngoingGlobal
if(
    IsAssemblingHeroes()
){
    SetMatchTime(40);

    // wait player join server
    Wait(10, WaitBehavior.AbortWhenFalse);
    
    if(
        // no human
        HumanPlayerNum(humanTeam) <= 0
            ||
        // host human only
        (
            // 1 human only
            HumanPlayerNum(humanTeam) == 1
                &&
            // human is host player
            hp ==
                FirstOf(
                    FilteredArray(
                        AllPlayers(humanTeam),
                        !IsDummyBot(ae)
                    )
                )
        )
    ){
        // omit assemble phase
        SetMatchTime(0);
    }
}

rule: "Round/shortenSetupPhase"
Event.OngoingGlobal
if(
    IsInSetup()
){
    SetMatchTime(50);

    if(
        // no human
        HumanPlayerNum(humanTeam) <= 0
    ){
        // omit setup phase
        SetMatchTime(0);
    }
}

// globalvar define matchTimeScale! = WorkshopSettingReal("Game Settings", "Match Time Scale", 1.0, 0.01, 100, 1);

// rule: "Round/AddMatchTime1"
// Event.OngoingGlobal
// if(
//     IsGameInProgress()
// ){
//     // default 300s
//     SetMatchTime((MatchTime() - 300) + (300 * matchTimeScale));
// }

// rule: "Round/AddMatchTime2"
// Event.OngoingGlobal
// if(
//     IsObjectiveComplete(0)
// ){
//     // default 180s
//     SetMatchTime((MatchTime() - 180) + (180 * matchTimeScale));
// }

// rule: "Round/AddMatchTime3"
// Event.OngoingGlobal
// if(
//     IsObjectiveComplete(1)
// ){
//     // default 120s
//     SetMatchTime((MatchTime() - 120) + (120 * matchTimeScale));
// }

// TAG TIPS ----------
// globalvar define tipsText!;
// rule: "TIPS/showTIPS"
// Event.OngoingGlobal
// if(
//     initCompleted
// ){
//     CreateInWorldText(AllPlayers(),
//         <"[TIPS]\n\r<0>", tipsText>,
//         SpawnPoints(humanTeam)[0] + Vector(0, 3, 0), 1.0,
//         Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.White, Spectators.VisibleAlways
//     );

//     while(true){
//         tipsText = RandomValueInArray([
//             /// valid until 120 character ___________________________________________________________________________________________|
//             // about spawn
//             "Enemy team often causes spawn rush.\n\rSpawn rate is maximized for a dozen seconds.\n\rBe careful not to get surrounded.",
//             "Enemy can spawn anywhere in player's line of sight.\n\r Watch arround, even if you on high ground or in enclosed areas.",
//             "Don't miss sound of enemies spawning.\n\r Sometimes enemies will surprise you from behind or sides.",
//             "Enemy bots try spawn to positions where can see directly player.\n\rIf player is not seem, will be retry positining.",
//             "Enemy bots spawn in groups from fixed locations,\n\rbut can be forced to change locations by player approaching.",
//             // about enemy
//             "Enemy team use ULTs combo just like human team.\n\rWatch out, combo attacks when hear enemy ULT calls in multiple.",
//             "Enemy team knows player's health.\n\rthey try attack low health player as team.\n\rremenber, this is PVE but not 1vs1.",
//             "Support heroes enemy bots has low fire power, but 2x deal heal.\n\rThe combo with boss-class is a threat.",
//             // about boss
//             "Boss-class enemies try continuously multiple use ULTs after cooldown.\n\rKeep watch even if stoped boss's ULT with stun.",
//             "Boss-class enemies teleport in combat for avoid danger or take map advantage.\n\rWatch trajectory to don't miss.",
//             "Boss-class enemies spawn at checkpoints for short time.\n\rAt final point, boss enemy spawn and must be defeated to win.",
//             // about bots
//             "Friend bots use mods just like human players.\n\r include Attack MODs, support MODs, etc, all mod.",
//             "Friend bots are not as well play as human players,\n\rbut they has buff of reduce damage taken 30%.",
//             "For reduce server load, BOT is bad at finding map abyss.\n\rThey sometime fall to abyss and instantly return.",
//             "Widowmaker Bot's headshot accuracy is already cheat-like,\n\rbut it becomes more perfect when using ULT. I reported!",
//             // about game difficulty
//             "The most popular game difficulty seems to be [EXPERT]...\n\rare you try more higher?",
//             "[HERO MUST DIE] has 3x enemy spawn rate as [NORMAL].\n\rdeal damage is 4x.\n\rcan try this?",
//             "When game difficulty changes, only enemy spawn rate and deal damage will change.\n\rMax health will not change.",
//             "If no one has voted for the game difficulty, [NORMAL] will be confirmed.",
//             "The higher game difficulty, the higher enemy's deal damage will be,\n\rso use tanks cover or wall more important.",
//             // about MOD
//             "The most popular MOD seems to be [TITAN FORM]...\n\rNow, hammer time!",
//             "Combo of extended ULT MODs incluide [SHOT CALL] is powerful,\n\rbut some MODs are not supported for game balance.",
//             "If you use [GUARD DOG] to well,\n\rcan powerfully stop even boss-class enemies.",
//             "[POWERFULL GIFT] is more powerful as more ult charge.\n\rcan fill up the teammate's ULT charge one after another.",
//             "Actually, [GUNSHIP GUNNER]'s NUKE CANON and [GRUDGE FIRE BALL] are the same attack.",
//             "[TITAN FORM] and [GUNSHIP GUNNER] are will get stuck in the map,\n\rif you don't think about where to use it.",
//             // about game system
//             "Equiped [Good Game] system.\n\rMonitor game progress and kill rates of both teams to create close matches as can.",
//             "Equiped [workshop settings].\n\rCan be customized using the GUI, enemy spaw rate, friend bots count, etc.",
//             "Even if no players are present,\n\rCan watch skirmishes of BOTs from the spectator."
//         ]);
//         Wait(20, WaitBehavior.IgnoreCondition);
//     }
// }

// TAG Object ----------
globalvar define prevObjectPosition;
globalvar define objectDirection;

define HasObjectDirection(): objectDirection != null;

rule: "Object/updateObjectDirection"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    Wait(0.1);  // wait object position change to enable
    prevObjectPosition = CurrentObjectPosition();

    while(true){
        define nowObjectPosition! = CurrentObjectPosition();
        if(
            IsTeamOnObject(humanTeam) &&
            nowObjectPosition != prevObjectPosition
        ){
            // update objectDirection
            objectDirection = DirectionTowards(prevObjectPosition, nowObjectPosition);
            // set prev position for next judge
            prevObjectPosition = nowObjectPosition;
        }

        WaitUpdateShortCycle();
    }
}

// TAG FinalStand ----------
globalvar define hasFinalStand! = true;

rule: "FinalStand/FinalStand"
Event.OngoingGlobal
if(
    IsGameInProgress() &&
    IsOverTime() &&
    hasFinalStand
){
    BigMessage(AllPlayers(humanTeam), "Final Stand !");
    SetSlowMotion(10);
    Wait(0.25, WaitBehavior.IgnoreCondition);   // show slow

    // buff humanTeam player
    PlayEffectsToTeam(humanTeam);
    Resurrect(AllDeadPlayers(humanTeam));
    Heal(AllLivingPlayers(humanTeam), null, MaxValue());
    Wait(0.01, WaitBehavior.IgnoreCondition);   // show slow
    SetUltimateCharge(AllLivingPlayers(humanTeam), 100);
    Wait(0.4, WaitBehavior.IgnoreCondition);   // show slow
    
    SetSlowMotion(DefaultPercentage());
    Wait(1, WaitBehavior.IgnoreCondition);
    
    CreateHudText(
        AllPlayers(humanTeam),
        null, null, "No next \"final stand\"", Location.Left, 999, null, null, cautionColor, HudTextRev.Color, Spectators.VisibleNever);
    hasFinalStand = false;
}

// TAG Player/Config ----------
rule: "Player/Config/init"
Event.OngoingPlayer
if(
    TeamOf() == humanTeam &&
    HasSpawned()
){
    // set max respawn time
    define respawnTime! = 10 * WorkshopSettingReal("Player Settings", "Max Respawn Time Scale", 1.0, 0.0, 100, 1);
    define receiveDamage! = 100 * WorkshopSettingReal("Player Settings", "Receive Damage Scale_", 1.0, 0.0, 100, 2);

    if(!IsDummyBot()){
        // human player
        SetRespawnMaxTime(ep, respawnTime);
        SetDamageReceived(ep, receiveDamage);

        // show operation message
        Wait(5, WaitBehavior.IgnoreCondition);
        if(IsInSetup()){
            BigMessage(ep, "You can Choose game difficulty vote and hero mod." + NL + "Check top left of screen!");
            PlayEffect(ep, PlayEffect.BuffImpactSound, ep, null, MaxValue());
            WaitUntil(MatchTime() <= 10, 60);
            
            if(IsInSetup()){
                BigMessage(ep, "Already Choose game difficulty vote and hero mod?" + NL + "Are you ready?");
                PlayEffect(ep, PlayEffect.BuffImpactSound, ep, null, MaxValue());
            }
        }
        else{
            BigMessage(ep, "You can Choose hero mod." + NL + "Check top left of screen!");
            PlayEffect(ep, PlayEffect.BuffImpactSound, ep, null, MaxValue());
        }  
    }
    else{
        // dummy bot
        // respawn time 30% cut
        SetRespawnMaxTime(ep, respawnTime * 0.7);
        // receive damage 30% cut
        SetDamageReceived(ep, receiveDamage * 0.7);
    }
}

// TAG Player/HumanIcon ----------
playervar define humanIcon!;

define isHumanIconActive: 
    IsAlive();

rule: "Player/HumanIcon/show"
Event.OngoingPlayer
if(
    TeamOf() == humanTeam &&
    HasSpawned() &&
    !IsDummyBot() &&
    isHumanIconActive
){
    // show human icon to human players for easy to find other human from human player
    DestroyIcon(humanIcon);
    humanIcon = CreateIcon(AllPlayers(), ep, Icon.Asterisk,
        IconRev.Position, Color.Team2, false);
}

rule: "Player/HumanIcon/hide"
Event.OngoingPlayer
if(
    TeamOf() == humanTeam &&
    HasSpawned() &&
    !IsDummyBot() &&
    !isHumanIconActive
){
    DestroyIcon(humanIcon);
}

// TAG FriendBot/BotActive ----------
define canFriendBotBotActive:
    IsAlive();

rule: "FriendBot/BotActive/activate"
Event.OngoingPlayer
if(
    TeamOf() == humanTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    canFriendBotBotActive
){
    isBotActive = true;
}

rule: "FriendBot/BotActive/deactive"
Event.OngoingPlayer
if(
    TeamOf() == humanTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    !canFriendBotBotActive
){
    isBotActive = false;
}

// TAG FriendBot/Config ----------
rule: "FriendBot/Config/init"
Event.OngoingPlayer
if(
    TeamOf() == humanTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    watchUpdateRate = 1.0;
}

// TAG FriendBot/Asset ----------
globalvar define maxFriendBotBotNum! =
    WorkshopSettingInteger("Friend Bot Settings", "Bot Count (when player slot empty, join instead. will switch to player by join.)", 8, 0, 8, 1);

define pMax: maxFriendBotBotNum;

define friendBotAssetList:
    [
        // fix hero asset
        [   // assetNo 0
            // recommend
            [EnemyType.Non,     Hero.Mercy,      1],
            [EnemyType.Non,     Hero.Genji,      1],
            [EnemyType.Non,     Hero.Reinhardt,  1],
            [EnemyType.Non,     Hero.Ana,        1],
            [EnemyType.Non,     Hero.Hanzo,      1],
            [EnemyType.Non,     Hero.Mauga,      1],
            [EnemyType.Non,     Hero.Zenyatta,   1],
            [EnemyType.Non,     Hero.Soldier76,  1]
        ],
        [   // assetNo 1
            // recommend
            [EnemyType.Non,     Hero.Moira,      1],
            [EnemyType.Non,     Hero.Reaper,     1],
            [EnemyType.Non,     Hero.Ramattra,   1],
            [EnemyType.Non,     Hero.Baptiste,   1],
            [EnemyType.Non,     Hero.Sojourn,    1],
            [EnemyType.Non,     Hero.Mauga,      1],
            [EnemyType.Non,     Hero.Brigitte,   1],
            [EnemyType.Non,     Hero.Genji,      1]
        ],
        [   // assetNo 2
            // recommend
            [EnemyType.Non,     Hero.Illari,     1],
            [EnemyType.Non,     Hero.Sojourn,    1],
            [EnemyType.Non,     Hero.Ramattra,   1],
            [EnemyType.Non,     Hero.Lifeweaver, 1],
            [EnemyType.Non,     Hero.Ashe,       1],
            [EnemyType.Non,     Hero.Mauga,      1],
            [EnemyType.Non,     Hero.Kiriko,     1],
            [EnemyType.Non,     Hero.Cassidy,    1]
        ],
        // 3,4
        [],[],

        // random hero asset
        [
            // assetNo 5
            // random with fix role
            [EnemyType.Non,     RandomSupportHero(),  1],
            [EnemyType.Non,     RandomTankHero(),     1],
            [EnemyType.Non,     RandomDamageHero(),   1],
            [EnemyType.Non,     RandomSupportHero(),  1],
            [EnemyType.Non,     RandomTankHero(),     1],
            [EnemyType.Non,     RandomDamageHero(),   1],
            [EnemyType.Non,     RandomSupportHero(),  1],
            [EnemyType.Non,     RandomDamageHero(),   1]
        ],
        [
            // assetNo 6
            // random with non role
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1],
            [EnemyType.Non,     RandomHero(), 1]
        ],
        [
            // assetNo 7
            // same hero
            [EnemyType.Non,     RandomSupportHero(), 1],
            [EnemyType.Non,     RandomSupportHero(), 1],
            [EnemyType.Non,     favSameHero,    pMax - 2]
        ]
    ];

define FriendBotAssetNoLotteryList: [
    // fix hero asset
    0,
    1,
    2,

    // random hero asset
    5, 5, 5, 5, 5,
    6, 6,
    7, 7
];

globalvar define isLockedCreateBotsByAsset! = false;

void WaitReleaseLockCreateBotsByAsset(){ 
    // can't implement as subroutin for mutex  
    for(define tryCount! = 0; tryCount < 10; tryCount ++){
        if(!isLockedCreateBotsByAsset){
            break;
        }
        Wait(1, WaitBehavior.IgnoreCondition);
    }
}

// TAG FriendBot/Asset/Interval ----------
define PlayerNum():
    CountOf(
        FilteredArray(
            AllPlayers(humanTeam),
            !IsDummyBot(ae)
        )
    );

define FriendBotNum():
    CountOf(
        FilteredArray(
            AllPlayers(humanTeam),
            IsDummyBot(ae)
        )
    );

define needFriendBotNum:
    maxFriendBotBotNum - PlayerNum();

globalvar define friendBotAssetNo!;

globalvar define forceReloadFriendBotAsset! = false;

define AssetChangeInterval(): RandomInteger(120, 180);
globalvar define reloadFriendBotAssetInterval! = -1;

rule: "FriendBot/BotAssetInterval/reloadReloadFriendBotAsset"
Event.OngoingGlobal
if(
    initCompleted
){
    while(true){
        // if force reload, skip change assetNo and set interval
        if(!forceReloadFriendBotAsset){
            // choice asset by random
            friendBotAssetNo = RandomValueInArray(FriendBotAssetNoLotteryList);
            // set default interval
            reloadFriendBotAssetInterval = AssetChangeInterval();
            // reload random hero
            allSameHero = RandomHero();
            favSameHero = RandomValueInArray([
                RandomDamageHero(),
                RandomTankHero()
            ]);
        }

        // get asset
        define asset! = friendBotAssetList[friendBotAssetNo];

        // valid asset
        if(
            0 < CountOf(asset)
        ){
            // save avg ult charge of bots before reload asset
            define ultCharge! = GetAvgUltChgOfDummyBot(humanTeam);
            // reload bots by asset
            WaitReleaseLockCreateBotsByAsset();
            isLockedCreateBotsByAsset = true;
            DestroyBots(humanTeam);
            CreateBotsByAsset(asset, humanTeam, needFriendBotNum);
            isLockedCreateBotsByAsset = false;
            // restore avg ult charge of bots
            SetAvgUltChgOfDummyBot(humanTeam, ultCharge);
            // wait start intarval until game start.
            WaitUntil(IsGameInProgress() || forceReloadFriendBotAsset, MaxValue());
            // release force reload flag
            forceReloadFriendBotAsset = false;

            for(
                ;
                reloadFriendBotAssetInterval > 0;
                reloadFriendBotAssetInterval--
            ){
                Wait(1, WaitBehavior.IgnoreCondition);
                if(
                    // interrupt force reload
                    forceReloadFriendBotAsset ||
                    // create bot error
                    0 >= NumberOfPlayers(humanTeam)
                ){
                    break;
                }
            }
        }
        else{
            errLog(<"FriendBot asset is invalid">);
        }

        // avoid infite loop clash
        Wait(1, WaitBehavior.IgnoreCondition);
    }
}

rule: "FriendBot/tuneAssetMemberNum"
Event.OngoingGlobal
if(
    initCompleted
){
    define prevPlayerNum! = -1;

    // set initial asset no
    friendBotAssetNo = RandomValueInArray(FriendBotAssetNoLotteryList);

    while(true){
        if(
            // create bot not locked
            !isLockedCreateBotsByAsset &&
            (
                // playerNum changed
                prevPlayerNum != PlayerNum() ||
                // not filed by need FriendBot number
                FriendBotNum() != needFriendBotNum ||
                // entity num than over slot num
                PlayerNum() + FriendBotNum() > NumberOfSlots(humanTeam)
            )
        ){
            // save current playerNum
            prevPlayerNum = PlayerNum();
            // force reload asset
            forceReloadFriendBotAsset = true;
        }

        // check Interval
        WaitUpdateLongCycle();
    }
}

// TAG EnemyBot/BotActive ----------
define canEnemyBotActive:
    IsAlive() &&
    !IsInSpawnRoom();

rule: "EnemyBot/BotActive/activate"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    canEnemyBotActive    
){
    define closePlayer! = ClosestPlayerTo(ep, EnemyTeamOf(ep));
    SetFacing(ep, DirectionTowards(EyePosition(), EyePosition(closePlayer)));

    if(
        // has damage
        NormalizedHealth() < 1.0 ||
        // has line of close player
        IsInLineOfSight(
            EyePosition(),
            EyePosition(closePlayer))
    ){
        // start bot
        isBotActive = true;
        Abort();
    }
    Wait(0.5, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/BotActive/deactive"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    !canEnemyBotActive
){
    // stop bot for reduce server load
    isBotActive = false;
}

// TAG EnemyBot/Config ----------
define spawnTimeBase: 10;
define spawnTimeEachLevel:
    confirmGameDifficulty == GameDifficulty.EASY ?      spawnTimeBase * 1.0 :
    confirmGameDifficulty == GameDifficulty.NORMAL ?    spawnTimeBase * 0.9 :  //-0.1
    confirmGameDifficulty == GameDifficulty.HARD ?      spawnTimeBase * 0.8 :  //-0.1
    confirmGameDifficulty == GameDifficulty.EXPERT ?    spawnTimeBase * 0.6 :  //-0.2
    confirmGameDifficulty == GameDifficulty.LEGENDARY ? spawnTimeBase * 0.4 :  //-0.2
    confirmGameDifficulty == GameDifficulty.INSANITY ?  spawnTimeBase * 0.1 :  //-0.3
                                                        spawnTimeBase * 1.0 ;

define damageDealtBase: 50;
define damageDealtEachLevel:
    confirmGameDifficulty == GameDifficulty.EASY ?      damageDealtBase * 1.0  :
    confirmGameDifficulty == GameDifficulty.NORMAL ?    damageDealtBase * 1.2  :    //+0.2
    confirmGameDifficulty == GameDifficulty.HARD ?      damageDealtBase * 1.4  :    //+0.2
    confirmGameDifficulty == GameDifficulty.EXPERT ?    damageDealtBase * 1.8  :    //+0.4
    confirmGameDifficulty == GameDifficulty.LEGENDARY ? damageDealtBase * 2.2  :    //+0.4
    confirmGameDifficulty == GameDifficulty.INSANITY ?  damageDealtBase * 2.8  :    //+0.6
                                                        damageDealtBase ; 

define enemyTeamColor: Color.Team1;

define IsBossClass(in define player):
    player.enemyType == EnemyType.SubBoss ||
    player.enemyType == EnemyType.Boss;

define dealHealScale: IsSupportHero(HeroOf()) ? 2.0 : 1.0;

playervar define damageDealt!;
playervar define spawnTime!;
playervar define chargeUltInterval!;

rule: "EnemyBot/Config/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsDummyBot() &&
    HasSpawned() &&
    enemyType != EnemyType.Non &&
    confirmGameDifficulty != GameDifficulty.NO_VOTE &&
    IsGameInProgress()
){
    // disable builtin respawn for avoid auto teamup
    DisableRespawning();
    // disable retreat cuz enemy bot
    enableRetreat = false;

    define name!;
    define scale!;
    define voiceLine!;
    define maxHealth!;
    define healReceived!;
    define healDealt!;
    define moveSpeed!;
    define jumpSpeed!;
    define gravity!;
    
    // init config by enemy type
    if(enemyType == EnemyType.Minion){
        // fixed config
        name =              "Minion";
        watchUpdateRate =   4;
        chargeUltInterval = 60;

        scale =             0.7;
        voiceLine =         1.5;
        maxHealth =         25;
        healReceived =      25;
        healDealt =         25 * dealHealScale;

        moveSpeed =         100;
        jumpSpeed =         100;
        gravity =           100;
        // scalable config by update function
        spawnTime =         1;
        damageDealt =       50;
    }
    else if(enemyType == EnemyType.Elite){
        // fixed config
        name =              "Elite";
        watchUpdateRate =   2;
        chargeUltInterval = 30;

        scale =             1.0;
        voiceLine =         1.0;
        maxHealth =         100;
        healReceived =      100;
        healDealt =         100 * dealHealScale;

        moveSpeed =         100;
        jumpSpeed =         100;
        gravity =           100;
        // scalable config by update function
        spawnTime =         2.0;
        damageDealt =       100;
    }
    else if(enemyType == EnemyType.SubBoss){
        // fixed config
        name =              "Sub-Boss";
        watchUpdateRate =   1;
        chargeUltInterval = 15;

        scale =             1.5;
        voiceLine =         0.5;
        maxHealth =         600;
        healReceived =      200;
        healDealt =         200 * dealHealScale;

        moveSpeed =         100;
        jumpSpeed =         100;
        gravity =           100;
        // scalable config by update function
        spawnTime =         4.0;
        damageDealt =       200;
    }
    else if(enemyType == EnemyType.Boss){
        // fixed config
        name =              "Boss";
        watchUpdateRate =   1;
        chargeUltInterval = 15;

        scale =             2.5;
        voiceLine =         0.1;
        maxHealth =         1000;
        healReceived =      200;
        healDealt =         200 * dealHealScale;

        moveSpeed =         100;
        jumpSpeed =         100;
        gravity =           100;
        // scalable config by update function
        spawnTime =         4.0;
        damageDealt =       200;
    }

    // set mod
    enemyModType = RandomValueInArray(enemyModList[enemyModNo]);

    // set float text
    if(enemyModType == EnemyModType.Damage){
        name = <"<0> of hi-Damage", name>;
        damageDealt *= 1.5;
        maxHealth   *= 0.5;
    }
    else if(enemyModType == EnemyModType.Health){
        name = <"<0> of hi-Health", name>;
        maxHealth   *= 1.5;
        moveSpeed   *= 0.5;
    }
    else if(enemyModType == EnemyModType.Speed){
        name = <"<0> of hi-Speed", name>;
        moveSpeed   *= 2.0;
        damageDealt *= 0.5;
    }        
    else if(enemyModType == EnemyModType.Jump){
        name = <"<0> of hi-Jump", name>;
        jumpSpeed   *= 3.0;
        damageDealt *= 0.5;
    }
    else if(enemyModType == EnemyModType.Explosion){
        name = <"<0> of Explosion", name>;
        maxHealth   *= 0.5;
    }
    else if(enemyModType == EnemyModType.Flying){
        name = <"<0> of Flying", name>;
        gravity     *= 0.01;
        damageDealt *= 0.5;
    }

    // set param
    StartForcingDummyBotName(ep, name);
    StartScalingPlayer(ep, scale, false);
    StartModifyingHeroVoiceLines(ep, voiceLine, false);
    SetMaxHealth(ep, maxHealth);
    SetHealingReceived(ep, healReceived);
    SetHealingDealt(ep, healDealt);
    SetMoveSpeed(ep, moveSpeed);
    SetJumpVerticalSpeed(ep, jumpSpeed);
    SetGravity(ep, gravity);

    // add health pool
    if(enemyType == EnemyType.Boss){
        // set addtinal health and total 2x health 
        // wait max health change finish
        Wait(0.1, WaitBehavior.IgnoreCondition);
        AddHealthPoolToPlayer(ep, HealthType.Armor, MaxHealth() * 0.5, true, false);
        AddHealthPoolToPlayer(ep, HealthType.Shields, MaxHealth() * 0.5, true, false);
    }

    // set health to max
    Wait(0.1, WaitBehavior.IgnoreCondition);
    while(NormalizedHealth() < 1.0){
        Heal(ep, null, MaxValue());
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }

    while(true){
        // update scalable config
        UpdateEachSpawnInterval();
        UpdateEachDealtDamage();
        WaitUpdateLongCycle();
    }
}

// TAG EnemyBot/Config/SpawnInterval ----------
define showDeadEffectTime: 1.0;
playervar define confirmSpawnTime;

rule: "EnemyBot/Config/SpawnInterval/waitingRespawn"
Event.OnDeath
if(
    TeamOf() == enemyTeam
){
    // wait for show dead effect
    Wait(showDeadEffectTime, WaitBehavior.AbortWhenFalse);
    // if sucide, skip wait timer
    if(Attacker() != ep){
        // wait for respawn by each timer
        Wait(confirmSpawnTime, WaitBehavior.AbortWhenFalse);
    }
    // respawn
    if(IsDead()){
        Respawn();
    }
}

globalvar define spawnTimeScale;

void UpdateEachSpawnInterval()"UpdateEachSpawnInterval"{
    // tune enemy spawen interval for make close match
    define diff! = GameProgressDiff(humanTeam);

    // tune interval by game progress diff
    if(70 <= diff){
        spawnTimeScale = 0;
    }
    else if(40 <= diff && diff < 70){
        spawnTimeScale = 0.25;
    }
    else if(10 <= diff && diff < 40){
        spawnTimeScale = 0.5;
    }
    // team even, default enemy respawn
    else if(-10 <= diff && diff < 10){
        spawnTimeScale = 1.0;
    }
    // enemy team advantage, slow enemy respawn
    else if(-40 <= diff && diff < -10){
        spawnTimeScale = 1.5;
    }
    else if(-70 <= diff && diff < -40){
        spawnTimeScale = 2.0;
    }
    else if(diff < -70){
        spawnTimeScale = 3.0;
    }

    // set spawn time
    confirmSpawnTime = spawnTimeEachLevel;
    // apply enemy type scale
    confirmSpawnTime *= spawnTime;
    // apply setting scale
    confirmSpawnTime *= WorkshopSettingReal("Enemy Bot Settings", "Basic Spawn Intarval Scale", 1.0, 0.0, 100, 3);
    // apply tune scale
    confirmSpawnTime *= spawnTimeScale;
}

// TAG EnemyBot/Config/DealtDamage ----------
playervar define confirmDealtDamage;

void UpdateEachDealtDamage()"UpdateEachDealtDamage"{
    // set deal damage
    confirmDealtDamage = damageDealtEachLevel;
    // apply enemy type scale
    confirmDealtDamage *= (damageDealt / DefaultPercentage());
    // apply setting scale
    confirmDealtDamage *= WorkshopSettingReal("Enemy Bot Settings", "Deal Damage Scale", 1.0, 0.0, 100, 1);
    // apply team balance
    confirmDealtDamage /= ConvertToBalancedValue(1.5, humanTeam);
    SetDamageDealt(ep, confirmDealtDamage);
}

// TAG EnemyBot/Config/ReceivedDamage ----------
globalvar define confirmReceiveDamage;

rule: "EnemyBot/Config/ReceivedDamage/update"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    while(true){
        UpdateGlobalReceivedDamage();
        WaitUpdateLongCycle();
    }
}

void UpdateGlobalReceivedDamage()"UpdateGlobalReceivedDamage"{
    // set receive damage
    confirmReceiveDamage = DefaultPercentage();
    // apply team balance
    confirmReceiveDamage *= ConvertToBalancedValue(1.5, humanTeam);
    // apply workshop setting
    confirmReceiveDamage *= WorkshopSettingReal("Enemy Bot Settings", "Receive Damage Scale", 1.0, 0.0, 100, 2);

    SetDamageReceived(AllPlayers(enemyTeam), confirmReceiveDamage);
}

// TAG EnemyBot/Config/ChargeUltimate ----------
rule: "EnemyBot/ChargeUltimate/charge"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.Non &&
    IsGameInProgress() &&
    !IsUsingUltimate()
){
    SetUltimateCharge(ep, UltimateChargePercent() + (DefaultPercentage() / chargeUltInterval));
    WaitUpdateShortCycle();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/Asset ----------
globalvar define maxCreateEnemyBotNum! = 
    WorkshopSettingInteger("Enemy Bot Settings", "Bot Count (! when too many BOTs, may reduce game performance and stability.)", 8, 0, 16, 0);

define eMax: maxCreateEnemyBotNum;

globalvar define allSameHero!;
globalvar define favSameHero!;

define enemyAssetList:
    [
        // random hero asset
        [   
            // assetNo 0
            // basic
            [EnemyType.SubBoss,     RandomHero(),           1],
            [EnemyType.Elite,       RandomHero(),           eMax / 2 - 1],
            [EnemyType.Minion,      RandomHero(),           eMax / 2]
        ],
        [   
            // assetNo 1
            // sub boss and minion
            [EnemyType.SubBoss,     RandomHero(),           1],
            [EnemyType.Minion,      RandomHero(),           eMax]
        ],
        [   
            // assetNo 2
            // all elite
            [EnemyType.Elite,       RandomHero(),           eMax / 3],
            [EnemyType.Elite,       RandomHero(),           eMax / 3],
            [EnemyType.Elite,       RandomHero(),           eMax / 3]
        ],
        [   
            // assetNo 3
            // all elites same hero
            [EnemyType.Elite,       allSameHero,            eMax]
        ],
        [   
            // assetNo 4
            // half elite
            [EnemyType.Elite,       RandomHero(),           eMax / 2],
            [EnemyType.Minion,      RandomHero(),           eMax / 2]
        ],
        [   
            // assetNo 5
            // all minion
            [EnemyType.Minion,      rva([
                                        RandomDamageHero(),
                                        RandomTankHero()
                                    ]),                     eMax]
        ],
        [   
            // assetNo 6
            // double sub boss
            [EnemyType.SubBoss,     RandomHero(),           1],
            [EnemyType.SubBoss,     RandomHero(),           1],
            [EnemyType.Minion,      RandomHero(),           eMax - 2]
        ],
        [   
            // assetNo 7
            // sub bosses
            [EnemyType.SubBoss,     RandomHero(),           1],
            [EnemyType.SubBoss,     RandomHero(),           1],
            [EnemyType.SubBoss,     RandomHero(),           eMax / 8]
        ],
        [   
            // assetNo 8
            // damage boss with minion
            [EnemyType.Boss,        RandomDamageHero(),     1],
            [EnemyType.Minion,      RandomHero(),           eMax - 1]
        ],
        [
            // assetNo 9
            // fav sameHero
            [EnemyType.SubBoss,     favSameHero,            1],
            [EnemyType.Elite,       favSameHero,            eMax / 2 - 1],
            [EnemyType.Minion,      favSameHero,            eMax / 2]
        ],
        [
            // assetNo 10
            // snipers
            [EnemyType.Boss,        Hero.Widowmaker,        1],
            [EnemyType.SubBoss,     Hero.Widowmaker,        3],
            [EnemyType.Elite,       RandomTankHero(),       eMax - 4]
        ],
        [],[],[],[],

        // progress asset
        [
            // assetNo 15
            // damage boss
            [EnemyType.Boss,        RandomDamageHero(),     1],
            [EnemyType.Elite,       RandomHero(),           eMax / 2 - 1],
            [EnemyType.Minion,      RandomHero(),           eMax / 2]
        ],
        [
            // assetNo 16
            // damage boss with tank elite
            [EnemyType.Boss,        RandomDamageHero(),     1],
            [EnemyType.Elite,       RandomTankHero(),       eMax / 2 - 1],
            [EnemyType.Minion,      RandomHero(),           eMax / 2]
        ],
        [
            // assetNo 17
            // tank boss
            [EnemyType.Boss,        FavoriteTankHero(),     1],
            [EnemyType.Elite,       RandomDamageHero(),     eMax / 2 - 1],
            [EnemyType.Minion,      RandomHero(),           eMax / 2]
        ],
        [
            // assetNo 18
            // double damage boss
            [EnemyType.Boss,        RandomDamageHero(),   1],
            [EnemyType.Boss,        RandomDamageHero(),   1],
            [EnemyType.Minion,      RandomHero(),           eMax - 2]
        ],

        [
            // assetNo 19
            // debug
            [EnemyType.Elite,       Hero.Reinhardt,         eMax]
        ]
    ];

define enemyAssetNoLotteryList: [
    // basic
    0, 0,
    // sub boss and minion 
    1, 1,
    // all elite
    2, 2,
    // all elites same hero 
    3, 3,
    // half elite
    4, 4,
    // all minion
    5, 
    // double sub boss
    6, 6,
    // triple sub boss
    7, 
    // damage boss with minion
    8,
    // fav sameHero
    9,
    // snipers
    10
];


// TAG EnemyBot/Asset/Interval ----------
globalvar define reloadEnemyAssetInterval! = -1;
globalvar define enemyAssetNo! = -1;
globalvar define forceReloadEnemyAsset! = false;

define IsInPreLoadAssetTime():
    (
        (
            IsInSetup() &&
            MatchTime() <= 5
        ) ||
        IsGameInProgress()
    );

rule: "EnemyBot/Asset/Interval/reloadReloadEnemyAsset"
Event.OngoingGlobal
if(
    IsInPreLoadAssetTime()
){
    while(true){
        // if force reload, skip change assetNo and set interval
        if(!forceReloadEnemyAsset){
            // choice asset by random
            enemyAssetNo = RandomValueInArray(enemyAssetNoLotteryList);
            // choice mod by random 
            enemyModNo = RandomValueInArray(enemyModNoLotteryList);
            // set default interval
            reloadEnemyAssetInterval = AssetChangeInterval();
            // reload random hero
            allSameHero = RandomHero();
            favSameHero = RandomValueInArray([
                RandomDamageHero(),
                RandomTankHero()
            ]);
        }

        // get asset
        define asset! = enemyAssetList[enemyAssetNo];

        // valid asset
        if(
            0 < CountOf(asset)
        ){
            // play effect at all enemy
            PlayEffectsToTeam(enemyTeam);
            // reload bots by asset
            WaitReleaseLockCreateBotsByAsset();
            isLockedCreateBotsByAsset = true;
            DestroyBots(enemyTeam);
            CreateBotsByAsset(asset, enemyTeam, maxCreateEnemyBotNum);
            isLockedCreateBotsByAsset = false;
            // release force reload flag
            forceReloadEnemyAsset = false;

            for(
                ;
                // if hasProgressAssetNo, skip interval count and reload asset instanty
                reloadEnemyAssetInterval > 0;
                reloadEnemyAssetInterval--
            ){
                Wait(1, WaitBehavior.IgnoreCondition);
                if(
                    // interrupt force reload
                    forceReloadEnemyAsset ||
                    // create bot error
                    0 >= NumberOfPlayers(enemyTeam)
                ){
                    break;
                }
            }
        }
        else{
            errLog(<"enemy asset is invalid">);
        }
        
        // avoid infite loop clash
        Wait(1, WaitBehavior.IgnoreCondition);
    }
}

rule: "EnemyBot/Asset/Interval/reloadBotAssetIntervalByProgress"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    define progressStage! = 0;

    while(true){
        define progress! = ObjectProgress(humanTeam);
        define progressAssetNo! = -1;
        define progressAssetInterval!;

        if(
            progressStage == 0 && progress >= 10
        ){
            if(!HasObjectDirection()){
                spawnRushInterval = 0;
            }
            progressStage ++;
        }
        else if(
            progressStage == 1 && progress >= 20
        ){
            if(!HasObjectDirection()){
                spawnRushInterval = 0;
            }
            progressStage ++;
        }
        else if(
            progressStage == 2 && progress >= 30
        ){
            progressAssetNo = 15;
            progressAssetInterval = (AssetChangeInterval() - 60);
            progressStage ++;
        }
        else if(
            progressStage == 3 && progress >= 60
        ){
            progressAssetNo = 16;
            progressAssetInterval = (AssetChangeInterval() - 60);
            progressStage ++;
        }
        else if(
            progressStage == 4 && progress >= (FinalWaveProgress())
        ){
            spawnRushInterval = 0;
            progressAssetNo = RandomValueInArray([17, 18]);
            progressAssetInterval = MaxValue();
            progressStage ++;
        }

        // has progress asset
        if(progressAssetNo != -1){
            // set assetNo from progress asset
            // set interval from progress asset interval
            enemyAssetNo = progressAssetNo;
            reloadEnemyAssetInterval = progressAssetInterval;
            // force reload asset
            forceReloadEnemyAsset = true;
        }

        // check Interval
        WaitUpdateMediumCycle();
    }
}

void PlayEffectsToTeam(define team!) "PlayEffectsToTeam"{
    define players! = AllPlayers(team);
    for(define playersIndex! = 0; playersIndex < CountOf(players); playersIndex ++){
        // play blast
        PlayEffect(
            AllPlayers(), PlayEffect.GoodPickupEffect,
            TeamOf(players[playersIndex]) == enemyTeam ?
                enemyTeamColor :
                Color.Yellow,
            players[playersIndex],
            1
        );
    }
    Wait(0.1, WaitBehavior.IgnoreCondition);
}

// TAG EnemyBot/Mod ----------
playervar define enemyModType!;

enum EnemyModType{
    Non,
    Health,
    Damage,
    Speed,
    Jump,
    Flying,
    Explosion
}

globalvar define enemyModNo!;

define enemyModList:
    [
        [
            // modNo 0
            EnemyModType.Non,
            EnemyModType.Non,
            EnemyModType.Non,
            EnemyModType.Non,
            EnemyModType.Non,
            EnemyModType.Non,
            EnemyModType.Health,
            EnemyModType.Damage,
            EnemyModType.Speed,
            EnemyModType.Jump,
            EnemyModType.Flying,
            EnemyModType.Explosion
        ],
        [
            // modNo 1
            EnemyModType.Non,
            EnemyModType.Health,
            EnemyModType.Damage,
            EnemyModType.Speed,
            EnemyModType.Jump,
            EnemyModType.Flying,
            EnemyModType.Explosion
        ],
        [
            // modNo 2
            EnemyModType.Speed
        ],
        [
            // modNo 3
            EnemyModType.Jump
        ],
        [
            // modNo 4
            EnemyModType.Health
        ],
        [
            // modNo 5
            EnemyModType.Explosion
        ]
    ];

define enemyModNoLotteryList: [
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 
    2,
    3,
    4,
    5
];

// TAG EnemyBot/Mod/Explosion ----------
playervar define bombEfct!;

rule: "EnemyBot/Mod/Explosion"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    enemyModType == EnemyModType.Explosion
){
    define scale! = 
        enemyType == EnemyType.Minion ?     1 :
        enemyType == EnemyType.Elite ?      2 :
        enemyType == EnemyType.SubBoss ?    4 :
        enemyType == EnemyType.Boss ?       6 :
        0;
    define bombSize! =      scale * 0.2;
    define blastRange! =    scale * 1.6;
    define blastDamage! =   scale * 100;
    define bombPos! = PositionOf() + Vector(0, 0.2, 0);
    DestroyIcon(bombEfct[0]);
    DestroyEffect(bombEfct[1]);
    DestroyInWorldText(bombEfct[2]);
    bombEfct[0] = CreateIcon(AllPlayers(humanTeam), bombPos, Icon.ExclamationMark, IconRev.VisibleToAndColor, cautionColor, true);
    bombEfct[1] = CreateEffect(ap(ta), Effect.Sphere, cautionColor, bombPos, bombSize, EffectRev.Color);
    // bombEfct[2] = CreateInWorldText(ap(ta), "Danger zone", bombPos, basicInWorldTextSize, Clipping.ClipAgainstSurfaces,
    //     InworldTextRev.VisibleToAndColor, cautionColor, Spectators.VisibleAlways);

    for(define index! = 0; index < 3; index++){
        PlayEffect(ap(ta), PlayEffect.RingExplosion, Color.Yellow, bombPos, blastRange * 2);
        PlayEffect(ap(ta), PlayEffect.DebuffImpactSound, null, bombPos, 75);
        Wait(1, WaitBehavior.IgnoreCondition);
    }

    define targets! = PlayersWithinRadius(bombPos, blastRange, humanTeam, RadiusLOS.SurfacesAndAllBarriers);
    ApplyBlastImpulse(targets, bombPos, blastRange, 4);
    SetStatus(targets, ep, Status.Burning, 3);
    Damage(targets, ep, blastDamage / 2);
    StartDamageOverTime(targets, ep, 3, blastDamage / 2);
    PlayContinuousBlast(Color.Red, bombPos, blastRange, scale, scale);
    DestroyIcon(bombEfct[0]);
    DestroyEffect(bombEfct[1]);
    // DestroyInWorldText(bombEfct[2]);
}

// TAG EnemyBot/CautionColor ----------
define cautionColor: isBlink ? Color.Red : Color.Yellow;

globalvar define isBlink;

rule: "EnemyBot/CautionColor/blinkColor"
Event.OngoingGlobal
if(
    initCompleted
){
    while(true){
        isBlink = !isBlink;
        Wait(0.2, WaitBehavior.AbortWhenFalse);
    }
}

// TAG EnemyBot/ThreatIcon ----------
playervar define threatIcon;

define isThreatIconActive: 
    IsAlive() &&
    !IsInSpawnRoom();

rule: "EnemyBot/ThreatIcon/show"
Event.OngoingPlayer
if(
    enemyTeam == TeamOf() &&
    IsBossClass(ep) &&
    isThreatIconActive
){
    // show threat icon to boss enemys for easy to caution enemy from player
    DestroyIcon(threatIcon);
    threatIcon = CreateIcon(AllPlayers(), ep, Icon.Skull,
        IconRev.Position, enemyTeamColor, false);
}

rule: "EnemyBot/ThreatIcon/hide"
Event.OngoingPlayer
if(
    enemyTeam == TeamOf() &&
    IsBossClass(ep) &&
    !isThreatIconActive
){
    DestroyIcon(threatIcon);
}

// TAG EnemyBot/Teleport ----------
define placableAreaSize: 12;
globalvar define placableAreaExtendSize;
define placableAreaExtendSizeScaleOnPointCapture: 0.6;
define placableAreaExtendSizeScaleOnPayloadEscort: 0.4;
define placableAreaOffset: ActionRange.CanFind;   // bot can find other range

globalvar define teleportBasePosition;
playervar define teleportPosition;
define teleportAreaSize: 5;
define teleportAreaForceUpdateSize: teleportAreaSize * 1;    // same as teleportAreaSize

define CanSnapMapSurface()"CanSnapMapSurface"{
    // walkable position is far
    return 
    !(
        (
            CurrentMap() == Map.Kings_Row ||
            CurrentMap() == Map.Kings_Row_Winter
        )
            &&
        ObjectiveIndex() == 0
            &&
        !IsTeamOnObject(humanTeam)
    );
}

// TAG EnemyBot/Teleport/GetTeleportBasePositionByClosestPlayer
define searchPositionTryCountMax: 10;

define GetTeleportBasePositionByClosestPlayer() globalvar "GetTeleportBasePositionByClosestPlayer"{
    define returnPosition! = null;
    define canSnapMap = CanSnapMapSurface();
    define objectPosition = CurrentObjectOnPosition();
    define closePlayer = ClosestPlayerTo(objectPosition, humanTeam);
    define basePosition = PositionOf(closePlayer);

    if(IsInSpawnRoom(closePlayer)){
        return returnPosition;
    }

    for(define searchPositionTryCount = 0; searchPositionTryCount < searchPositionTryCountMax; searchPositionTryCount++){
        // select candidatePosition at almost middle position of close player and object
        define candidatePosition =
            basePosition
                +
            RandomPosition(
                placableAreaSize,
                placableAreaSize,
                placableAreaSize
            )
                + 
            (
                DirectionTowards(basePosition, objectPosition)
                    *
                DistanceBetween(basePosition, objectPosition) * 0.4
            );
        
        if(
            canSnapMap &&
            !isServerLoadLimit()
        ){
            candidatePosition = NearestWalkablePosition(candidatePosition);
        }
        else{
            candidatePosition = BelowPosition(candidatePosition + Vector(0, placableAreaSize * 2.0, 0));
        }

        if(
            // not too far from basePosition
            DistanceBetween(basePosition, candidatePosition) <= ActionRange.CanFind
        ){
            returnPosition = candidatePosition;
            break;
        }
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }

    return returnPosition;
}

// TAG EnemyBot/Teleport/GetTeleportBasePositionByObject
globalvar define blockedPos;
globalvar define positionObjectAhead;

define GetTeleportBasePositionByObject() globalvar "GetTeleportBasePositionByObject"{
    define returnPosition! = null;
    define canSnapMap = CanSnapMapSurface();
    define basePosition = CurrentObjectOnPosition();

    if(
        // has object direction
        HasObjectDirection()
    ){
        if(
            // player on object
            IsTeamOnObject(humanTeam)
        ){
            // get teleportAreaExtendSize by object position and blockedPos
            define cutoutDistance! = placableAreaOffset - DistanceBetween(basePosition, blockedPos);
            // get teleportAreaExtendSize by cutoutDistance with scale
            placableAreaExtendSize = cutoutDistance * placableAreaExtendSizeScaleOnPayloadEscort;
        }
        else{
            // clear extend size by non cut off distance of object direction
            placableAreaExtendSize = 0;
        }

        // overwrite position by positionObjectAhead
        basePosition = positionObjectAhead;
    }
    else{
        // get teleportAreaExtendSize by fixed value of non object direction
        placableAreaExtendSize = placableAreaSize * placableAreaExtendSizeScaleOnPointCapture;
    }

    for(define searchPositionTryCount = 0; searchPositionTryCount < searchPositionTryCountMax; searchPositionTryCount++){
        // select candidatePosition at object ahead
        define candidatePosition =
            basePosition
                +
            RandomPosition(
                placableAreaSize + placableAreaExtendSize,
                placableAreaSize + placableAreaExtendSize,
                placableAreaSize + placableAreaExtendSize
            );

        if(
            canSnapMap &&
            !isServerLoadLimit()
        ){
            candidatePosition = NearestWalkablePosition(candidatePosition);
        }
        else{
            candidatePosition = BelowPosition(candidatePosition + Vector(0, placableAreaSize * 2.0, 0));
        }

        if(
            // not too far from basePosition
            DistanceBetween(basePosition, candidatePosition) <= ActionRange.CanFind
        ){
            returnPosition = candidatePosition;
            break;
        }
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }
    
    return returnPosition;
}

// TAG EnemyBot/Teleport/GetTeleportPositionByTeleportBasePosition
define GetTeleportPositionByTeleportBasePosition() playervar "GetTeleportPositionByTeleportBasePosition"{
    define returnPosition! = null;
    define canSnapMap = CanSnapMapSurface();
    define basePosition = teleportBasePosition;
    define closePlayer = ClosestPlayerTo(basePosition, humanTeam);

    if(IsInSpawnRoom(closePlayer)){
        return returnPosition;
    }

    for(define searchPositionTryCount = 0; searchPositionTryCount < searchPositionTryCountMax; searchPositionTryCount++){
        // select teleportPosition from teleportBasePosition around
        define candidatePosition = 
            basePosition
                +
            RandomPosition(
                teleportAreaSize,
                teleportAreaSize,
                teleportAreaSize
            );

        if(
            canSnapMap &&
            !isServerLoadLimit()
        ){
            candidatePosition = NearestWalkablePosition(candidatePosition);
        }
        else{
            candidatePosition = BelowPosition(candidatePosition + Vector(0, teleportAreaSize * 2.0, 0));
        }

        if(
            // Has line to closePlayer
            IsInLineOfSight(
                candidatePosition + PositionOffsetY1(),
                EyePosition(closePlayer),
                BarrierLOS.NoBarriersBlock
            )    
        ){
            returnPosition = candidatePosition;
            break;
        }
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }

    return returnPosition;
}

playervar define telBeam!;
define showTeleportBeamTime: 0.5;

void PlayTeleportEffect(define isBefore!, define isBeamFromBody!) playervar "PlayTeleportEffect"{
    // if before teleport
    if(isBefore){
        // show teleport beam to own position
        DestroyEffect(telBeam);

        telBeam = CreateBeamEffect(AllPlayers(),
            BeamType.BadBeam,
            isBeamFromBody ? 
                BodyPosition(ep) :
                teleportPosition + Vector(0, 30, 0),
            teleportPosition,
            enemyTeamColor, EffectRev.VisibleToPositionAndRadius);
        // wait for show teleport shadow of before
        Wait(showTeleportBeamTime / 2, WaitBehavior.IgnoreCondition);

        // play teleport shadow to own position
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyTeamColor, PositionOf(ep), 1);
        // play teleport blast to teleport positon
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, enemyTeamColor, teleportPosition, 2);

        // wait for show teleport shadow of before
        Wait(showTeleportBeamTime / 2, WaitBehavior.IgnoreCondition);
    }
    else{
        // hide teleport beam to teleport positon
        DestroyEffect(telBeam);
        // play teleport shadow to teleport positon
        PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyTeamColor, PositionOf(ep), 1);
        // play teleport sound
        PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, null, PositionOf(ep), 75);
    }
}

void DoTeleport(define isBeamFromBody!, define isTeleportToOnObject!)"DoTeleport"{
    define newPosition! = null;

    // do emergency teleport as threat enemy 
    if(
        isTeleportToOnObject
    ){
        // set teleportPosition by object position
        newPosition = BlockedPositon(CurrentObjectPosition(), objectDirection, 6);
        ApplyImpulse(ep, Down(), 1, Relative.ToWorld, ContraryMotion.Cancel);
    }
    else{
        // set teleportPosition by common position
        newPosition = GetTeleportPositionByTeleportBasePosition();
    }

    if(
        newPosition != null
    ){
        // update teleportPosition by new position
        teleportPosition = newPosition;
        // wait teleport until game start.
        WaitUntil(IsGameInProgress(), MaxValue());

        if(IsInSpawnRoom()){
            define waitTime! = 
                // set delay time proportional to slot number for load distributing
                ((maxCreateEnemyBotNum - 1 - SlotOf()) * 0.2) *
                // scale by alive enemy num
                (NumberOfLivingPlayers() / NumberOfPlayers());
            Wait(waitTime, WaitBehavior.AbortWhenFalse);
        }

        // show pre teleport effect
        PlayTeleportEffect(true, isBeamFromBody);
        // Teleport
        Teleport(ep, teleportPosition);
        // show teleport effect
        PlayTeleportEffect(false, isBeamFromBody);
    }
}

// TAG EnemyBot/Teleport/UpdateCommonTeleportBasePosition ----------
globalvar define needUpdateCommonTeleportBasePosition!;

rule: "EnemyBot/Teleport/UpdateCommonTeleportBasePosition"
Event.OngoingGlobal
if(
    IsInPreLoadAssetTime()
){
    define objectPos! = CurrentObjectOnPosition();

    if(HasObjectDirection()){
        // get blockedPos by extension line collision position
        blockedPos = BlockedPositon(objectPos, objectDirection, placableAreaOffset);
        // get positionObjectAhead by between object position and blockedPos
        positionObjectAhead = ShiftedPosition(
            objectPos,
            DirectionTowards(objectPos, blockedPos),
            DistanceBetween(objectPos, blockedPos) * 0.75
        );
    }

    // if has not update flag of commonTeleportBasePosition
    if(!needUpdateCommonTeleportBasePosition){
        // set update flag
        if(
            // position invalid
            teleportBasePosition == null
        ){
            needUpdateCommonTeleportBasePosition = true;
            // dbgHudTxt(<"UP POS BY POS INV">);
        }
        else if(
            // position too close player
            DistanceBetween(
                teleportBasePosition,
                ClosestPlayerTo(teleportBasePosition, humanTeam)
            ) <= teleportAreaForceUpdateSize        
        ){
            needUpdateCommonTeleportBasePosition = true;
            // dbgHudTxt(<"UP POS BY CRS PLR">);
        }
        else{
            if(
                // player on object
                IsTeamOnObject(humanTeam)
            ){
                define checkPos! = HasObjectDirection() ? positionObjectAhead : objectPos;
                if(
                    // far from checkPos
                    DistanceBetween(
                        teleportBasePosition,
                        checkPos
                    ) > placableAreaSize + placableAreaExtendSize
                ){
                    needUpdateCommonTeleportBasePosition = true;
                    // dbgHudTxt(<"UP POS BY FAR OBJ OR AHD">);
                }
                else if(
                    // not line from checkPos
                    !IsInLineOfSight(
                        teleportBasePosition + PositionOffsetY1(),
                        checkPos + PositionOffsetY1(),
                        BarrierLOS.NoBarriersBlock
                    )
                ){
                    needUpdateCommonTeleportBasePosition = true;
                    // dbgHudTxt(<"UP POS BY NON LINE OBJ OR AHD">);
                }
                else{
                    // dbgHudTxt(<"POS KEP">);
                }
            }
            else{
                if(
                    // not line from closest object player
                    !IsInLineOfSight(
                        teleportBasePosition + PositionOffsetY1(),
                        PositionOf(ClosestPlayerTo(objectPos, humanTeam)) + PositionOffsetY1(),
                        BarrierLOS.NoBarriersBlock
                    )
                ){
                    needUpdateCommonTeleportBasePosition = true;
                    // dbgHudTxt(<"UP POS BY NON LINE PLR">);
                }
                else{
                    // dbgHudTxt(<"POS KEP">);
                }
            }
        } 
    }
    
    // if has update flag of commonTeleportBasePosition
    if(
        needUpdateCommonTeleportBasePosition
    ){
        define newPosition! = null;
        // calc new position
        if(
            // player on object
            IsTeamOnObject(humanTeam)
        ){
            // calc by object
            newPosition = GetTeleportBasePositionByObject();
        }
        else{
            // calc by closest player
            newPosition = GetTeleportBasePositionByClosestPlayer();
        }

        // found position
        if(
            newPosition != null
        ){
            // update commonTeleportBasePosition by new position
            teleportBasePosition = newPosition;
            // release update flag
            needUpdateCommonTeleportBasePosition = false;

            // dbgHudTxt(<"UP POS OK">);
        }
        else{
            // dbgHudTxt(<"UP POS NG">);
        }
    }

    Wait(
        teleportBasePosition == null ?
        1 : 3,
        WaitBehavior.IgnoreCondition);
    WaitUntilServerLoadLimitRelease();
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/Teleport/clearCommonTeleportBasePosition"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep
){
    if(IsTrueProbability(25)){
        // reset position by enemy sucide in invalid position
        needUpdateCommonTeleportBasePosition = true;
    }
}

rule: "EnemyBot/Teleport/teleportByRespawn"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsInPreLoadAssetTime() &&
    IsInSpawnRoom()
){
    DoTeleport(false, false);
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    // WaitUntilServerLoadLimitRelease(watchUpdateRate);
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/Teleport/teleportByIdleForDefendObject ----------
rule: "EnemyBot/Teleport/teleportByIdleForDefendObject"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsGameInProgress() &&
    !IsInSpawnRoom() &&
    IsAlive()
){
    define isFinaleDefence;

    while(true){
        isFinaleDefence = 
            // is boss
            IsBossClass(ep) &&
            // player team close win
            IsCloseWin(humanTeam);

        Wait(
            isFinaleDefence
            ?
                1
            :
                3,
            WaitBehavior.AbortWhenFalse);
        
        if(!isFinaleDefence){
            WaitUntilServerLoadLimitRelease(watchUpdateRate);
        }

        // not finale defence
        if(
            !isFinaleDefence &&
            // player on object
            IsTeamOnObject(humanTeam) &&
            // enemy not on object
            !IsTeamOnObject(enemyTeam) &&
            // has not line to teleportBasePosition
            !IsInLineOfSight(EyePosition(ep), teleportBasePosition + PositionOffsetY1()) &&
            // by health high
            IsTrueProbability(NormalizedHealth() * 100)
        ){
            // do teleport instantly
            break;
        }
        // finale defence
        else if(
            isFinaleDefence &&
            // player on object
            IsTeamOnObject(humanTeam) &&
            // enemy not on object
            !IsTeamOnObject(enemyTeam)
        ){
            // do teleport instantly
            break;
        }
        // not in combat
        else if(
            aimTarget == null ||
            // Has not line to aimTarget
            !IsInLineOfSight(
                EyePosition(ep),
                EyePosition(aimTarget),
                BarrierLOS.NoBarriersBlock
            )
        ){
            // do teleport instantly
            break;
        }
        // else
    }

    // teleport
    if(
        isFinaleDefence
    ){
        DoTeleport(true, true);
    }
    else{
        DoTeleport(false, false);
    }
    
    Wait(1, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/EnemyAbility/SpawnRush ----------
globalvar define spawnRushInterval;
globalvar define spawnRushCount;

rule: "EnemyBot/EnemyAbility/SpawnRush"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // set default interval by object progress
    spawnRushInterval = ObjectProgressScaledInterval(humanTeam, 20, 40) + RandomInteger(0, 5);
    // apply workshop setting
    spawnRushInterval *= WorkshopSettingReal("Enemy Bot Settings", "Spawn-Rush Interval Scale", 1.0, 0.0, 100, 4);
    // round for counting
    spawnRushInterval = RoundToInteger(spawnRushInterval, Rounding.Up);
    for(;spawnRushInterval > 0; spawnRushInterval--){
        Wait(1, WaitBehavior.IgnoreCondition);
    }

    // action
    define spawnRushDuration! = RandomInteger(20, 30);
    spawnRushDuration *= WorkshopSettingReal("Enemy Bot Settings", "Spawn-Rush Duration Scale", 1.0, 0.0, 100, 5);
    define deployInterval! = RandomInteger(1, 3);
    spawnRushCount = RoundToInteger(spawnRushDuration / deployInterval, Rounding.Down);
    for(; spawnRushCount > 0; spawnRushCount--){
        Respawn(
            FilteredArray(
                AllDeadPlayers(enemyTeam),
                (
                    ae.enemyType != EnemyType.Boss
                )
            )
        );
        
        Wait(deployInterval, WaitBehavior.IgnoreCondition);
        // WaitUntilServerLoadLimitRelease();
    }

    Wait(1, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/EnemyAbility/ShotCall ----------
globalvar define shotCallInterval;

rule: "EnemyBot/EnemyAbility/ShotCall"
Event.OngoingGlobal
if(
    IsGameInProgress()
){
    // set default interval by object progress
    shotCallInterval = ObjectProgressScaledInterval(humanTeam, 20, 40) + RandomInteger(0, 5);
    // apply workshop setting
    shotCallInterval *= WorkshopSettingReal("Enemy Bot Settings", "All-Out-Ultmate Interval Scale", 1.0, 0.0, 100, 6);
    // round for counting
    shotCallInterval = RoundToInteger(shotCallInterval, Rounding.Up);
    for(;shotCallInterval > 0; shotCallInterval--){
        Wait(1, WaitBehavior.IgnoreCondition);
    }

    // action
    define activeEnemys! = AllPlayers(enemyTeam);
    define shotCallDelay! = RandomReal(0.2, 1.0);
    for(define scLoopIndex! = 0; scLoopIndex < CountOf(activeEnemys); scLoopIndex ++){
        if(
            IsAlive(activeEnemys[scLoopIndex]) &&
            !IsInSpawnRoom(activeEnemys[scLoopIndex])
        ){
            SetUltimateCharge(activeEnemys[scLoopIndex], DefaultPercentage());
            PressButton(activeEnemys[scLoopIndex], Button.Ultimate);

            Wait(shotCallDelay, WaitBehavior.IgnoreCondition);
            // WaitUntilServerLoadLimitRelease();
        }
    }

    Wait(1, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/EnemyAbility/MoreUltimate ----------
define moreAbilityInterval: RandomReal(0.1, 1);

globalvar define moreUltProb;

rule: "EnemyBot/EnemyAbility/moreUltimate"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsBossClass(ep) &&
    IsAlive() &&
    actionState != ActionState.Non &&
    IsUsingUltimate()
){
    moreUltProb = DefaultPercentage();
    while(
        IsAlive() &&
        IsTrueProbability(moreUltProb)
    ){
        WaitUntil(!IsUsingUltimate(), MaxValue());
        SetUltimateCharge(ep, DefaultPercentage());
        Wait(moreAbilityInterval, WaitBehavior.IgnoreCondition);
        PressButton(ep, Button.Ultimate);
    }
    moreUltProb = 0;

    WaitUntil(!IsUsingUltimate(), MaxValue());
}

globalvar define decreaseProb! =
    WorkshopSettingReal("Enemy Bot Settings", "(Sub boss & Boss) Rapid-Fire-Ultimate Termination Scale", 1.0, 0.0, 100, 8)
        * 10.0;

rule: "EnemyBot/EnemyAbility/decreaseMultiUltimateProb"
Event.OngoingGlobal
if(
    moreUltProb > 0
){
    moreUltProb -= moreUltProb < decreaseProb ? moreUltProb : decreaseProb;
    Wait(1.0, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

// TAG Debug ----------
globalvar define countDetectTriggerServerLoadPerSecond;

rule: "DebugGlobalAction"
Event.OngoingGlobal
Team.All
if(
    IsGameInProgress()
){
    // // teleportBasePosition orb
    // CreateEffect(teleportBasePosition != null ? hp : null, Effect.Orb, Color.Red,
    //         teleportBasePosition + PositionOffsetY1(), 1, EffectRev.VisibleToPositionAndRadius);
    // // positionObjectAhead orb
    // CreateEffect(positionObjectAhead != null ? hp : null, Effect.Orb, Color.White,
    //         positionObjectAhead, 1, EffectRev.VisibleToPositionAndRadius);

    // // teleportAreaSize ring
    // CreateEffect(teleportBasePosition != null ? hp : null, Effect.Ring, Color.Red,
    //         teleportBasePosition, teleportAreaSize, EffectRev.VisibleToPositionAndRadius);
    // // teleportAreaForceUpdateRange ring
    // CreateEffect(teleportBasePosition != null ? hp : null, Effect.Ring, Color.Yellow,
    //         teleportBasePosition, teleportAreaForceUpdateSize, EffectRev.VisibleToPositionAndRadius);

    // // placable teleportPosition area size sphere
    // CreateEffect(hp,
    //         Effect.Sphere, Color.White,
    //         HasObjectDirection() ?
    //                 positionObjectAhead :
    //                 CurrentObjectOnPosition(),
    //         placableAreaSize + placableAreaExtendSize,
    //         EffectRev.VisibleToPositionAndRadius);

    // // object -> positionObjectAhead beam
    // CreateBeamEffect(HasObjectDirection() ? hp : null, BeamType.GoodBeam, 
    //         CurrentObjectOnPosition(),
    //         positionObjectAhead, 
    //         Color.White, EffectRev.VisibleToPositionAndRadius);
    // // positionObjectAhead or object -> commonTeleportBasePosition beam
    // CreateBeamEffect(hp, BeamType.GoodBeam, 
    //         HasObjectDirection() ? positionObjectAhead : CurrentObjectOnPosition(),
    //         teleportBasePosition + PositionOffsetY1(), 
    //         Color.Red, EffectRev.VisibleToPositionAndRadius);
    // // host player or object -> commonTeleportBasePosition beam 
    // CreateBeamEffect(hp, BeamType.GoodBeam, 
    //         HasSpawned(hp) ? EyePosition(hp) : CurrentObjectOnPosition(),
    //         teleportBasePosition + PositionOffsetY1(), 
    //         Color.Blue, EffectRev.VisibleToPositionAndRadius);

    define pastSecond = 1;

    while(true){
        countDetectTriggerServerLoadPerSecond = countWaitActionByServerLoad / pastSecond;
        pastSecond ++;

        // auto use friend bot hero mod
        if(
            IsGameInProgress() &&
            IsTrueProbability(
                GameProgressDiff(humanTeam) *
                -0.05 *
                WorkshopSettingReal("Friend Bot Settings", "Force Mod Rate (when player team in disadvantage, friend bot use powerfull mod)", 1.0, 0.0, 100, 2)
            )
        ){
            forceHeroMod();
        }

        if(
            IsGodMode()
        ){
            // force spawn rush
            if(spawnRushInterval > 0){
                spawnRushInterval = 0;
            }

            // force hero mod to gunship
            hp.heroModType = HeroModType.GUNSHIP_GUNNER;

            // force use gunship a frined
            if(IsTrueEverySeconds(3)){
                define last! = FirstOf(
                    SortedArray(
                        FilteredArray(
                            AllPlayers(humanTeam),
                            (
                                IsDummyBot(ae)
                            )
                        ),
                        -SlotOf(ae)
                    )
                );

                if(
                    last != null &&
                    !last.isTransformed
                ){
                    last.heroModType = HeroModType.GUNSHIP_GUNNER;
                    SetUltimateCharge(last, DefaultPercentage());
                    PressButton(last, Button.Ultimate);
                }
            }
        }

        Wait(1);
    }
}

// rule: "DebugPlayerAction"
// Event.OngoingPlayer
// Team.All
// if(
//     ep == hp &&
//     HasSpawned() &&
//     IsJumping()
// ){
//     define player = RandomValueInArray(AllPlayers(humanTeam));
//     player.heroModType = HeroModType.SHOT_CALL;
//     SetUltimateCharge(player, 100);
//     // Wait(1);
//     // Loop();
// }

rule: "DebugPlayJoinPlayerSound"
Event.OnPlayerJoin
Team.All
if(
    !IsDummyBot()
){
    define positionArray! = [
        PositionOf(hp),
        SpawnPoints(humanTeam)[0],
        CurrentObjectPosition(),
        SpawnPoints(enemyTeam)[0]
    ];

    for(define index! = 0; index < 5; index++){
        for(define index2! = 0; index2 < 5; index2++){
            PlayEffect(HostPlayer(),
                PlayEffect.BuffImpactSound,
                null, positionArray[index2], MaxValue());
        }
        Wait(0.5);
    }
}

globalvar define playerDeathCount! = 0;  // for debug
globalvar define enemyDeathCount! = [0,0,0,0];  // for debug

rule: "Debug/countDeath"
Event.OnDeath
if(
    Attacker() != ep
){
    // death count for debug
    if(TeamOf() == humanTeam){
        playerDeathCount ++;
    }
    else{
        enemyDeathCount[
            enemyType == EnemyType.Minion ?     0 :
            enemyType == EnemyType.Elite ?      1 :
            enemyType == EnemyType.SubBoss ?    2 :
            enemyType == EnemyType.Boss ?       3 :
                                                0
        ] ++;
    }
}

rule: "Debug/initDebugMode"
Event.OngoingGlobal
Team.All
if(
    IsGameInProgress()
){
    if(IsHostPlayerInGame()){
        debugMode = DebugMode.Non;
    }
    else{
        debugMode = DebugMode.ShowParam;
        ShowDebugHud(hp);
    }
}

rule: "Debug/changeDebugMode"
Event.OngoingPlayer
Team.All
if(
    hp == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump) 
){
    // change debug mode
    WaitLongPressConfirm();
    
    if(debugMode >= DebugMode.Last - 1){
        debugMode = DebugMode.Non;
    }
    else{
        debugMode ++;
    }

    // reload hud
    HideDebugHud();
    ShowDebugHud(hp);
}

globalvar define debugHuds;

define Last():
    CountOf(debugHuds);

define FirstEnemyOf(in define enemyType):
    FirstOf(FilteredArray(AllPlayers(enemyTeam), ae.enemyType == enemyType));

define FirstBossClassEnemy():
    FirstOf(FilteredArray(AllPlayers(enemyTeam), IsBossClass(ae)));

// show debug icon and hud
void ShowDebugHud(define player!)"ShowDebugHud"{
    if(
        debugMode == DebugMode.GodMode
    ){
        wm(); debugHuds[Last()] = CreateDebugHud("●God Mode", true, cautionColor);
    }

    if(
        debugMode == DebugMode.Recording
    ){
        EnableInspectorRecording();
        wm(); debugHuds[Last()] = CreateDebugHud("●Log Recording", true, cautionColor);
    }
    else{
        DisableInspectorRecording();
    }

    if(
        debugMode >= DebugMode.Non
    ){
        wm(); debugHuds[Last()] = CreateDebugHud("human player Num", HumanPlayerNum(humanTeam), HumanPlayerNum(humanTeam) <= 1 ? Color.Team2 : Color.Yellow);
    }
    
    if(
        debugMode >= DebugMode.ServerLoad
    ){
        wm(); debugHuds[Last()] = CreateDebugHud("Server Load", ServerLoad(), ServerLoad() < serverLoadLimitMax ? Color.Gray : ServerLoad() < serverLoadMax ? Color.Yellow : Color.Red);
        wm(); debugHuds[Last()] = CreateDebugHud("server Load Limit", serverLoadLimit, serverLoadLimit >= serverLoadLimitMax ? Color.Gray : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("count Wait Action By Server Load", countWaitActionByServerLoad, Color.Gray);
        wm(); debugHuds[Last()] = CreateDebugHud("count Wait Action By Server Load Per Second", countDetectTriggerServerLoadPerSecond, countDetectTriggerServerLoadPerSecond < 10 ? Color.Gray : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("game Speed", gameSpeed, gameSpeed >= gameSpeedMax ? Color.Gray : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("count Game Speed Decrease", countGameSpeedDecrease, countGameSpeedDecrease <= 0 ? Color.Gray : Color.Yellow);
    }

    if(
        debugMode >= DebugMode.ShowParam
    ){  
        // player team
        wm(); debugHuds[Last()] = CreateDebugHud("team player Num", <"<0> / <1>", NumberOfLivingPlayers(humanTeam), NumberOfPlayers(humanTeam)>, NumberOfLivingPlayers(humanTeam) >= NumberOfPlayers(humanTeam) ? Color.Team2 : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("reload Asset Interval", reloadFriendBotAssetInterval, reloadFriendBotAssetInterval > 5 ? Color.Team2 : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("asset Number", friendBotAssetNo, Color.Team2);
        wm(); debugHuds[Last()] = CreateDebugHud("death Count", playerDeathCount, Color.Team2);
        wm(); debugHuds[Last()] = CreateDebugHud("Object Progress", ObjectProgress(humanTeam), Color.Team2);
        wm(); debugHuds[Last()] = CreateDebugHud("Game Progress Diff", GameProgressDiff(humanTeam), Color.Team2);

        // enemy team
        wm(); debugHuds[Last()] = CreateDebugHud("team player num", <"<0> / <1>", NumberOfLivingPlayers(enemyTeam), NumberOfPlayers(enemyTeam)>, NumberOfLivingPlayers(enemyTeam) >= NumberOfPlayers(enemyTeam) ? enemyTeamColor : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("reload Asset Interval", reloadEnemyAssetInterval, reloadEnemyAssetInterval > 5 ? enemyTeamColor : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("Asset Number", enemyAssetNo, enemyTeamColor);
        wm(); debugHuds[Last()] = CreateDebugHud("Mod Number", enemyModNo, enemyTeamColor);
        wm(); debugHuds[Last()] = CreateDebugHud("death Count", <"<0>, <1>, <2>, <3>",
            enemyDeathCount[0], enemyDeathCount[1], enemyDeathCount[2], enemyDeathCount[3]>, enemyTeamColor);
        wm(); debugHuds[Last()] = CreateDebugHud("spawn Time scale", spawnTimeScale, enemyTeamColor);
        wm(); debugHuds[Last()] = CreateDebugHud("spawn Time", <"<0>, <1>, <2>, <3>",
            FirstEnemyOf(EnemyType.Minion).confirmSpawnTime,
            FirstEnemyOf(EnemyType.Elite).confirmSpawnTime,
            FirstEnemyOf(EnemyType.SubBoss).confirmSpawnTime,
            FirstEnemyOf(EnemyType.Boss).confirmSpawnTime>, enemyTeamColor);
        wm(); debugHuds[Last()] = CreateDebugHud("dealt Damage ", <"<0>, <1>, <2>, <3>",
            FirstEnemyOf(EnemyType.Minion).confirmDealtDamage,
            FirstEnemyOf(EnemyType.Elite).confirmDealtDamage,
            FirstEnemyOf(EnemyType.SubBoss).confirmDealtDamage,
            FirstEnemyOf(EnemyType.Boss).confirmDealtDamage>, enemyTeamColor);
        wm(); debugHuds[Last()] = CreateDebugHud("spawn Rush Interval", spawnRushInterval, spawnRushInterval > 5 ? enemyTeamColor : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("spawn Rush Count", spawnRushCount, spawnRushCount <= 0 ? enemyTeamColor : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("shot Call Interval", shotCallInterval, shotCallInterval > 5 ? enemyTeamColor : Color.Yellow);
        wm(); debugHuds[Last()] = CreateDebugHud("more Ult Prob", moreUltProb, moreUltProb <= 0 ? enemyTeamColor : Color.Yellow);     
        // wm(); debugHuds[Last()] = CreateDebugHud("tune Val", tuneVal, Color.Green);
    }
}

// Hide debug icon and hud
void HideDebugHud()"HideDebugHud"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(debugHuds); gLoopIndex ++){
        DestroyHudText(debugHuds[gLoopIndex]);
    }
}

rule: "Debug/resetBotList"
Event.OngoingPlayer
Team.All
if(
    hp == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Crouch)
){
    WaitLongPressConfirm();
    reloadEnemyAssetInterval = 0;
    WaitLongPressConfirm();
    // WaitUntil(reloadEnemyAssetInterval > 0, 10);
    reloadFriendBotAssetInterval = 0;
}

rule: "Debug/triggerRushAndShotCall"
Event.OngoingPlayer
Team.All
Player.All
if(
    hp == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Reload)
){
    WaitLongPressConfirm();
    spawnRushInterval = 0;
    WaitLongPressConfirm();
    shotCallInterval = 0;
}

playervar define tempName!;

rule: "Debug/forceHeroMod"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.PrimaryFire)
){
    // kill players on aim center
    WaitLongPressConfirm();
    forceHeroMod();

    LoopIfConditionIsTrue();
}

void forceHeroMod()"forceHeroMod"{
    define player! = 
        RandomValueInArray(
            FilteredArray(
                AllPlayers(humanTeam),
                (
                    IsDummyBot(ae) &&
                    !ae.isTransformed
                )
            )
        );

    player.heroModType = RandomValueInArray([
        HeroModType.HEALING_SYRINGE,
        HeroModType.SAVIOR,
        HeroModType.POWERFUL_GIFT,
        HeroModType.SUPER_ULT,
        HeroModType.SHOT_CALL,
        HeroModType.ARTILLERY_REQUEST,
        HeroModType.STRAFING_REQUEST,
        HeroModType.GRUDGE_FIRE_BALL,
        HeroModType.GRUDGE_LIGHTNING,
        HeroModType.BEAM_SNIPER,
        HeroModType.TITAN_FORM,
        HeroModType.GUNSHIP_GUNNER,
        HeroModType.GUNSHIP_GUNNER,
        HeroModType.GUNSHIP_GUNNER
    ]);

    if(IsDead(player)){
        Resurrect(player);
    }
    player.grudgePower = 100;
    SetUltimateCharge(player, DefaultPercentage());
    PressButton(player, Button.Ultimate);
}
