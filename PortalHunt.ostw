import "PortalHunt.setting.json";
import "Lib/Debug.del";
import "Lib/Utility.del";
import "Lib/ServerOverLoadMeasures.del";
import "Lib/ElapsedTimer.del";
// import "Lib/DamageText.del";
import "Lib/Regeneration.del";
import "Lib/Revive.del";
import "Lib/Bot.del";
import "Lib/Buddy.del";
import "Lib/PerkChooser.del";

// // TAG duumy define ----------
// globalvar define perkCorePerkDropProbability;
// globalvar define eachPerkDropProbability;

// TAG Signature and infomation ----------
disabled rule: "PORTAL HUNT -HORDE PVE [ver 4.0] Share code [YY1N2]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated by [Overwatch-Script-To-Workshop] tools"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Initialize ----------
define playerTeam: Team.Team1;
define enemyTeam: Team.Team2;

globalvar define initCompleted!;

rule: "Initialize/initialize"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // If run it right after loading the server, some scripts fail, so wait few seconds
    Wait(3, WaitBehavior.AbortWhenFalse);

    // Cancel unnecessary default settings
    DisableScoring();
    DisableCompletion();
    PauseMatchTime();

    // Set team lives property
    initialTeamLives =                      WorkshopSettingInteger("Player Settings", "Initial team lives",                     6, 0, 1000, 0);
    maxTeamLives =                          WorkshopSettingInteger("Player Settings", "Max stock team lives",                   12, 0, 1000, 1);

    // Set imported functions public property for user tuning
    // Regeneration.del
    regenerationEnableTeam = playerTeam;
    regenerationNeedBalanceTeam1 = true;
    regenerationStartWaitSecondTeam1 =      WorkshopSettingReal("Player Settings", "Regeneration Start Wait Second",            3, 0, 100, 2);
    regenerationHealthPerSecondTeam1 =      WorkshopSettingReal("Player Settings", "Regeneration Health Per Second",            25, 0, 1000, 3);

    // Revive.del
    reviveEnableTeam = playerTeam;
    reviveTimeLimit =                       WorkshopSettingReal("Player Settings", "Revive Time Limit",                         10, 0, 100, 4);
    reviveRange =                           WorkshopSettingReal("Player Settings", "Revive Range",                              3, 0, 100, 5);
    reviveCompleteSecond =                  WorkshopSettingReal("Player Settings", "Revive Complete Second",                    5, 0, 100, 6);

    // DamageText.del
    // damageTextEnableTeam = enemyTeam;

    // ElapsedTimer.del
    elapsedTimerEnable = true;
    
    // PerkCore.del
    perkCorePerkDropProbability =           WorkshopSettingReal("Perk Settings", "Perk Crate Drop Rate Scale (When Enemy Dead)",  1.0, 0, 100, -1);

    // Start watch over load
    slowControlHandler = SlowControlHandler.ServerOverLoadMeasures;

    // set game HUD
    // show version and share code
    CreateHudText(AllPlayers(playerTeam),
        null, "PORTAL HUNT -HORDE PVE [ver 4.0] Share code [YY1N2]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // show hero change operation
    CreateHudText(AllPlayers(playerTeam),
        null, <"Hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // show round number
    CreateHudText(AllPlayers(),
        <"<0> <1>", "Round", roundNo>, null, null,
        Location.Top, 2,
        enemyColor, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);

    // show HUD of team Lives
    CreateHudText(AllPlayers(),
        teamLives < maxTeamLives ? 
            <"Team Lives <0>", teamLives> :
            <"Team Lives <0> (Max Stock)", teamLives>,
        null, null,
        Location.Top, 3,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);

    // show HUD of enemy team assembly
    CreateHudText(AllPlayers(),
        null,
        null,
        <"Enemy Team Assembly \"<0>\"", enemyTeamName>,
        Location.Right, -1,
        Color.White, Color.White, Color.Purple,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);

    // reset player position
    Respawn(AllPlayers());

    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

// TAG Game ----------
globalvar define roundNo!;

rule: "Game/initGame"
Event.OngoingGlobal
if(
    initCompleted
){
    // reset team Lives
    teamLives = initialTeamLives;
    // reset round no 
    roundNo = 0;
    // reset elapsed time
    elapsedTime = 0;
    // reset portal
    portalState = PortalState.Init;
}

rule: "Game/startGame"
Event.OngoingGlobal
if(
    initCompleted &&
    portalState == PortalState.Init &&
    NumberOfPlayers(playerTeam) > 0 &&
    IsTrueForAny(
        AllPlayers(playerTeam),
        (
            !IsInSpawnRoom(ae) &&
            IsMoving(ae)
        )
    )
){
    // reset elapsed time
    elapsedTime = 0;
    // reset prevPortalPosition
    prevPortalPosition = PositionOf(FirstOf(AllPlayers(playerTeam)));
    // start portal creation
    portalState = PortalState.Calculating;
}

rule: "Game/stopGame"
Event.OngoingGlobal
if(
    initCompleted &&
    portalState != PortalState.Init &&
    NumberOfPlayers(playerTeam) <= 0
){
    // reset team Lives
    teamLives = initialTeamLives;
    // reset round no
    roundNo = 0;
    // reset elapsed time
    elapsedTime = 0;
    // reset portal
    portalState = PortalState.Init;
}

rule: "Game/SpawnRoom/changeByTimer"
Event.OngoingGlobal
if(
    initCompleted
){
    // Change the spawn room regularly to keep the game fluid
    ForceSpawnRoom(playerTeam, RandomValueInArray([0, 1, 1, 1, 2]));
    ForceSpawnRoom(enemyTeam, RandomValueInArray([0, 1, 1, 1, 2]));
    Wait(300, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

// TAG Buddy ----------
rule: "Buddy/BuddyContorl"
Event.OngoingGlobal
if(
    initCompleted
){
    define buddyList! = 
    WorkshopSettingToggle("Follower AI Settings(Join on behalf of absent player)", "Random Hero", false, -101) ?
        // random list
        [
            RandomSupportHero,
            RandomTankHero,
            RandomDamageHero,
            RandomSupportHero,
            RandomTankHero
        ]
    :
        // fix list
        [
            Hero.Mercy,
            Hero.Reinhardt,
            Hero.Genji,
            Hero.Ana,
            Hero.Orisa
        ];

        // // fix list
        // [
        //     Hero.Reinhardt,
        //     Hero.Reinhardt,
        //     Hero.Reinhardt,
        //     Hero.Reinhardt,
        //     Hero.Reinhardt
        // ];

    // slice buddy list by setting
    buddyList = ArraySlice(buddyList, 0,
        WorkshopSettingInteger("Follower AI Settings(Join on behalf of absent player)", "Follower Max Num", 5, 0, 5, -100)
    );

    define prevPlayerNum! = -1;
    define maxSlotNum! = NumberOfSlots(playerTeam);
    define maxBuddyNum! = CountOf(buddyList);

    while(true){
        define playerNum! =
            CountOf(
                FilteredArray(
                    AllPlayers(playerTeam),
                    !IsDummyBot(ae)));

        define needBuddyNum! = 
            Min(
                maxSlotNum - playerNum,
                maxBuddyNum);

        define buddyNum! = 
            CountOf(
                FilteredArray(
                    AllPlayers(playerTeam),
                    IsDummyBot(ae)));

        if(
            // player number changed
            prevPlayerNum != playerNum ||
            // not filed buddy number
            buddyNum != needBuddyNum
        ){
            // save player num
            prevPlayerNum = playerNum;
            // relaod buddy list
            DestroyBots(playerTeam);
            define emptySlotNum! = maxSlotNum - playerNum;
            define addList! = ArraySlice(buddyList, 0, emptySlotNum);
            for(define buddyAddIndex! = 0; buddyAddIndex < CountOf(addList); buddyAddIndex++){
                CreateBotsByHeroInput(addList[buddyAddIndex], 1, playerTeam);
            }

            addList = FilteredArray(
                AllPlayers(playerTeam),
                IsDummyBot(ae)
            );
            for(define buddyAddIndex! = 0; buddyAddIndex < CountOf(addList); buddyAddIndex++){
                if(ProbabilityTrue(50)){
                    addList[buddyAddIndex].perkType = RandomValueInArray(lotteryPerkList);
                    addList[buddyAddIndex].perkState = PerkState.Ready;
                }
            }
        }
    
        Wait(5, WaitBehavior.IgnoreCondition);
    }
}

rule: "Buddy/Teleport/init"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    CreateInWorldText(
        AllPlayers(), followerText, 
        ep, basicInWorldTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
        Color.SkyBlue, Spectators.DefaultVisibility);

    SetUltimateCharge(ep, 50);

    // teleport to player near object
    Teleport(ep, ClosestPlayerTo(portalPosition, playerTeam));
}

playervar define buddyOriginalHero!;

rule: "Buddy/ActionControl"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    HasSpawned()
){
    Wait(RandomReal(4, 6), WaitBehavior.AbortWhenFalse);

    // Perk
    if(actionState != ActionState.Non){
        define enemyNum! = CountOf(
            PlayersWithinRadius(
                ep, 30, enemyTeam, RadiusLOS.Off)
            );

        // get perk
        if(
            ProbabilityTrue(enemyNum * 0.5) &&
            perkState == PerkState.Non
        ){
            perkType = RandomValueInArray(lotteryPerkList);
            perkState = PerkState.Ready;
        }

        // use perk
        if(
            ProbabilityTrue(enemyNum * 4) &&
            perkState == PerkState.Ready
        ){
            StartHoldingButton(ep, Button.Interact);
            Wait(0.5, WaitBehavior.IgnoreCondition);
            StopHoldingButton(ep, Button.Interact);
        }

        // use perk ability
        if(
            ProbabilityTrue(enemyNum * 6) &&
            perkState == PerkState.Using
        ){
            StartHoldingButton(ep, Button.Melee);
            Wait(RandomReal(0.5, 1.5), WaitBehavior.IgnoreCondition);
            StopHoldingButton(ep, Button.Melee);
        }
    }

    // SetHeroActionRoutine
    if(buddyOriginalHero != HeroOf()){
        SetHeroActionRoutine();
    }
    buddyOriginalHero = HeroOf();

    // revive
    define downPlayer! = RandomValueInArray(
        FilteredArray(
            AllDeadPlayers(playerTeam), 
            (
                ae != ep
            )
        )
    );
    // has down player
    if(downPlayer != null){
        if(
            // has line to down player
            IsInLineOfSight(EyePosition(), downPlayer + PositionOffset()) &&
            (
                // non state
                actionState == ActionState.Non ||
                // near to down player (max range 30m)
                ProbabilityTrue(100 - (DistanceBetween(ep, downPlayer) / 30 * 100))
            )
        ){
            // can revive both status
            while(
                IsAlive(ep) &&
                !IsAlive(downPlayer)
            ){
                define distDownPlayer! = DistanceBetween(ep, downPlayer);  
                // is in revive range
                if(
                    distDownPlayer > reviveRange
                ){
                    // hop to down position
                    ApplyImpulse(ep, 
                        VectorTowards(ep, downPlayer + Vector(0, 1, 0)),
                        distDownPlayer * 3,
                        Relative.ToWorld, ContraryMotion.Cancel);
                }
                // hold position
                SetStatus(ep, null, Status.Rooted, 1);
                Wait(1.0, WaitBehavior.AbortWhenFalse);        
            }
        }
    }

    LoopIfConditionIsTrue();
}

rule: "Buddy/fastRespawnBySucide"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    IsDummyBot() &&
    Attacker() == ep
){
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    Respawn();
}

// TAG Player ----------
// TAG Player/ReturnSpawnRoom
rule: "Player/ReturnSpawnRoom/manualReturn"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(ep, Button.Reload)
){
    AbortIf(!IsOnGround());
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

rule: "Player/ReturnSpawnRoom/setFastSpeed"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    initCompleted &&
    IsAlive() &&
    IsInSpawnRoom()
){
    SetMoveSpeed(ep, 150);
    while(!IsInLineOfSight(ep, ClosestPlayerTo(ep, enemyTeam))){
        Wait(1, WaitBehavior.IgnoreCondition);
    }
    SetMoveSpeed(ep, 100);
}

// TAG Player/TeamLives
globalvar define initialTeamLives!;
globalvar define teamLives!;
globalvar define maxTeamLives!;

rule: "Player/TeamLives/consumeTeamLives"
Event.OngoingGlobal
if(
    0 < reviveTimeoutCount
){
    WaitConditionConfirmed();
    teamLives -= reviveTimeoutCount;
    WaitChangeState();  // wait for show big message by newest value
    if(teamLives > 0){
        BigMessage(AllPlayers(),
            <"<0> team lives remaining.", teamLives>);

        PlayEffect(
            AllPlayers(), PlayEffect.DebuffImpactSound,
            Color.White, portalPosition, MaxLength());
    }
    reviveTimeoutCount = 0;
    LoopIfConditionIsTrue();
}

rule: "Player/TeamLives/finishGame"
Event.OngoingGlobal
if(
    initCompleted &&
    teamLives <= 0
){
    WaitConditionConfirmed();
    // play game end portal effect
    portalState = PortalState.End;
    // set slow handler
    slowControlHandler = SlowControlHandler.GameLogic;

    BigMessage(AllPlayers(), "Team lives ran out.");
    SetSlowMotion(10);
    Wait(1, WaitBehavior.AbortWhenFalse);   // show slow
    SetSlowMotion(100);
    WaitNextPhase();

    BigMessage(AllPlayers(),
        <"We reached <0> round. good game!", roundNo>);
    PlayRandomEmote(AllPlayers(playerTeam));
    WaitNextPhase();

    DeclareTeamVictory(playerTeam);
}

rule: "Player/TeamLives/protectTeamLifeConsumeBySucide"
Event.OnDeath
if(
    TeamOf() == playerTeam &&
    Attacker() == ep
){
    if(
        DistanceBetween(ep, ClosestPlayerTo(ep, enemyTeam)) > 30
    ){
        Respawn();
    }
}

// TAG Player/InsidePortal
playervar define contactPortalState!;
enum ContactPortalStatus{
    MaxOutSide,
    OutSide,
    InSide,    
    HalfInSide
}

playervar define isInSidePortal!;

rule: "Player/InsidePortal/update"
Event.OngoingGlobal
if(
    portalEnable
){
    define players! = AllPlayers(playerTeam);
    // Set flag when player entered to portal
    // This flag is used for functions related to portal
    for(gLoopIndex = 0; gLoopIndex < CountOf(players); gLoopIndex++){
        define player! = players[gLoopIndex];
        if(
            HasSpawned(player) &&
            IsAlive(player) &&
            !IsInSpawnRoom(player)
        ){
            define distToPortal! = DistanceBetween(player, portalPosition);
            if(
                distToPortal < portalSize / 2
            ){
                player.contactPortalState = ContactPortalStatus.HalfInSide;
                player.isInSidePortal = true;
            }
            else if(
                distToPortal < portalSize
            ){
                player.contactPortalState = ContactPortalStatus.InSide;
                player.isInSidePortal = true;
            }
            else if(
                distToPortal < maxPortalSize
            ){
                player.contactPortalState = ContactPortalStatus.OutSide;
                player.isInSidePortal = false;
            }
            else{
                player.contactPortalState = ContactPortalStatus.MaxOutSide;
                player.isInSidePortal = false;
            }
        }
        else{
            player.contactPortalState = ContactPortalStatus.MaxOutSide;
            player.isInSidePortal = false;
        }
    }
    WaitUpdateMediumCycle();
    WaitUntilServerFree();
    LoopIfConditionIsTrue();
}

// TAG Player/ObjectiveDescription
rule: "Player/ObjectiveDescription/update"
Event.OngoingGlobal
if(
    initCompleted
){
    if(
        portalState == PortalState.Set ||
        portalState == PortalState.Growing
    ){
        SetObjectiveDescription(AllPlayers(playerTeam), "Find and attack portal!", HudTextRev.VisibleToSortOrderStringAndColor);
    }
    else if(
        portalState == PortalState.UnderAttack
    ){
        SetObjectiveDescription(AllPlayers(playerTeam), "Attacking portal. Stay inside and Survive!", HudTextRev.VisibleToSortOrderStringAndColor);
    }
    else if(portalState == PortalState.Closed){
        SetObjectiveDescription(AllPlayers(playerTeam), "Portal closed. Nice work!", HudTextRev.VisibleToSortOrderStringAndColor);
    }
    else if(portalState == PortalState.End){
        SetObjectiveDescription(AllPlayers(playerTeam), "Team lives ran out. good game!", HudTextRev.VisibleToSortOrderStringAndColor);
    }
    else if(portalState == PortalState.Calculating){
        SetObjectiveDescription(AllPlayers(playerTeam), "Scanning portal... Stand by.", HudTextRev.VisibleToSortOrderStringAndColor);
    }
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}


// TAG Player/ClosePortal
globalvar define closingCount;
globalvar define closingProgress;
globalvar define closingProgressHudEntity;
globalvar define playerNumInsidePortal;

define enableClosingProgress:
    portalState == PortalState.UnderAttack &&
    teamLives > 0;

define maxClosingCount: 180;

rule: "Player/ClosePortal/startClosing"
Event.OngoingGlobal
if(
    enableClosingProgress
){
    // When a player enters a portal, set progress hud and show message
    WaitConditionConfirmed();
    // kick progress
    closingCount = 10;
    closingCount += portalSize * 1;
    closingCount += roundNo * 10;
    closingCount = RoundToInteger(closingCount, Rounding.Up);
    closingCount = Min(maxClosingCount, closingCount);

    dbgMsg(<"closing count <0>", closingCount>);

    closingProgress = 0;
    ChaseVariableOverTime(closingProgress, DefaultPercentage(), closingCount, TimeChaseReevaluation.DestinationAndDuration);
    // show progress hud
    if(closingProgressHudEntity == null){
        CreateProgressBarHudText(
            AllPlayers(),
            closingProgress,
            <"<0> players attacking portal. Until portal closes...", playerNumInsidePortal >,
            Location.Top, 4,
            Color.White,
            Color.White,
            ProgressBarHudEvaluation.Values,
            Spectators.DefaultVisibility );
        closingProgressHudEntity = LastTextID();
    }
    define closestPlayerPortal! = ClosestPlayerFromPortal();
    // show big message
    BigMessage(
        closestPlayerPortal,
        <"You are attacking portal. Stay inside and Survive!">);
    BigMessage(
        FilteredArray(AllPlayers(playerTeam), (closestPlayerPortal != ae)),
        <"<0> <1> <2>",
            closestPlayerPortal,
            HeroIconString(HeroOf(closestPlayerPortal)),
            "attacking portal. Cover one!">);
    // Wait closingCount
    Wait(closingCount, WaitBehavior.AbortWhenFalse);
    portalState = PortalState.Closing;
}

rule: "Player/ClosePortal/updatePlayerNumInsidePortal"
Event.OngoingGlobal
if(
    enableClosingProgress
){
    playerNumInsidePortal = CountOf(
        FilteredArray(
            AllPlayers(playerTeam),
            ae.isInSidePortal
        )
    );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Player/ClosePortal/cancelClosing //on exit every player"
Event.OngoingGlobal
if(
    !enableClosingProgress
){
    StopChasingVariable(closingProgress);
    // wait hide hud when progress completed
    if(closingProgress == 100){
        Wait(1.5, WaitBehavior.AbortWhenFalse);
    }
    closingProgress = 0;
    DestroyProgressBarHudText(closingProgressHudEntity);
    closingProgressHudEntity = null;
}

rule: "Player/ClosePortal/finishClose //on count down finished"
Event.OngoingGlobal
if(
    (
        portalState == PortalState.Closing ||
        portalState == PortalState.Closed
    ) &&
    teamLives > 0
){
    WaitConditionConfirmed();
    // When the countdown is complete, clear the portal and give team Lives.
    // Later, we will generate a new portal and start the next round.
    WaitPlayEffect();   //wait portal closing effect
    portalState = PortalState.Closed;
    WaitNextPhase();

    // if lower than max
    if(teamLives < maxTeamLives){
        // play got life sound
        PlayEffect(
            AllPlayers(), PlayEffect.BuffImpactSound,
            Color.White, portalPosition, MaxLength()
        );
        // show got life sound message
        BigMessage(AllPlayers(), "We earned extra team lives!");
        // add life
        teamLives += 1;
    }
    WaitNextPhase();

    PlayRandomVoiceLine(AllPlayers(playerTeam));
    roundNo += 1;
    BigMessage(AllPlayers(), <"Round <0>", roundNo>);
    WaitBigMessageHide();
    portalState = PortalState.Calculating;  // start next portal create
}

// TAG Player/FairPlay
rule: "Player/FairPlay/disableStealthWhenInside //sombra's stealth for fair play"
Event.OngoingPlayer
if(
    TeamOf() == playerTeam &&
    isInSidePortal &&
    IsStealth(ep)
){
    // Some abilities are disabled inside the portal to make the game fair
    // Sombra stealth is exactly that
    Wait(5.0, WaitBehavior.AbortWhenFalse); // disable ability check cycle
    SetStatus(ep, null, Status.Stunned, 0.1);
    SmallMessage(ep, "Stealth has been interrupted by the portal!");
    LoopIfConditionIsTrue();
}

// TAG Portal Function ----------
define enemyColor: Color.Purple;

globalvar define portalState;
enum PortalState{
    Changing,
    Init,
    Calculating,
    Checking,
    Set,
    Growing,
    UnderAttack,
    Closing,
    Closed,
    End
}

globalvar define portalPosition;
globalvar define portalSize;
globalvar define portalEntitys;
globalvar define isFirstGrowing;

define portalEnable:
    portalState == PortalState.Checking ||
    portalState == PortalState.Set ||
    portalState == PortalState.Growing ||
    portalState == PortalState.UnderAttack;

rule: "Portal/State/Calculating"
Event.OngoingGlobal
if(
    portalState == PortalState.Calculating
){
    // Hide Portal Entity until portal state changed to Show
    // Init param
    StopChasingVariable(portalSize);
    portalPosition = 0;
    portalSize = 0;
    isFirstGrowing = true;
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
}

define playersAny:
    AllPlayers();

define playersConPtlSts(ContactPortalStatus status):
    FilteredArray(AllPlayers(playerTeam), ae.contactPortalState == status);

define playersNConPtlSts(ContactPortalStatus status):
    FilteredArray(AllPlayers(playerTeam), ae.contactPortalState != status);

globalvar define portalColor;

rule: "Portal/State/Set  // waiting for found by players"
Event.OngoingGlobal
if(
    portalState == PortalState.Set
){
    portalColor = enemyColor;

    DestroyIcon(portalEntitys[0]);
    // show Portal Entity by portal state changed to Show
    // Init param
    closingCount = 0;
    // show icon
    portalEntitys = [];
    portalEntitys[0] = CreateIcon(playersConPtlSts(ContactPortalStatus.MaxOutSide), portalPosition, Icon.Spiral,
        IconRev.VisibleToPositionAndColor, portalColor, true);
    // set effect
    // sphere
    portalEntitys[1] = CreateEffect(playersAny, Effect.Sphere, portalColor,
        portalPosition, portalSize, EffectRev.VisibleToPositionRadiusAndColor);
    // cloud
    portalEntitys[2] = CreateEffect(playersNConPtlSts(ContactPortalStatus.HalfInSide), Effect.Cloud, portalColor,
        portalPosition, portalSize * 1.5, EffectRev.VisibleToPositionRadiusAndColor);
    // aura
    portalEntitys[3] = CreateEffect(playersNConPtlSts(ContactPortalStatus.HalfInSide), Effect.BadAura, portalColor,
        portalPosition, portalSize * 1.25, EffectRev.VisibleToPositionRadiusAndColor);
    // sound
    portalEntitys[4] = CreateEffect(playersAny, Effect.EnergySound, portalColor,
        portalPosition, portalSize * 1.25, EffectRev.VisibleToPositionRadiusAndColor);
    // show message
    BigMessage(playersAny, "New portal detected. Find and attack portal!");
}

rule: "Portal/State/Growing"
Event.OngoingGlobal
if(
    portalState == PortalState.Growing
){
    portalColor = enemyColor;

    // Start growing portal with warning message
    ChaseVariableAtRate(
        portalSize, maxPortalSize, 1 + (roundNo / 10),
        RateChaseReevaluation.DestinationAndRate);  // startGrowing
    // If first growing, show message
    if(isFirstGrowing == true){
        isFirstGrowing = false;
        BigMessage(AllPlayers(), "Portal is growing. Hurry up!");
        WaitBigMessageHide();
        BigMessage(AllPlayers(), "Growed portal spawn more enemies and get hard to close.");
    }
}

rule: "Portal/State/UnderAttack"
Event.OngoingGlobal
if(
    portalState == PortalState.UnderAttack
){
    // Stop growing portal
    Wait(1, WaitBehavior.AbortWhenFalse);
    StopChasingVariable(portalSize);
}

rule: "Portal/changePortalColor"
Event.OngoingGlobal
if(
    portalState == PortalState.UnderAttack
){
    portalColor = Color.White;
    Wait(0.07, WaitBehavior.AbortWhenFalse);
    portalColor = enemyColor;
    Wait(0.1 + 1.9 * (1 - closingProgress / DefaultPercentage()), WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

rule: "Portal/State/Closing"
Event.OngoingGlobal
if(
    portalState == PortalState.Closing
){
    portalColor = Color.White;

    // apply blast impulse
    ApplyBlastImpulse(AllPlayers(enemyTeam), portalPosition, portalSize);
    // play portal closing effect and kill enemrys
    Kill(AllPlayers(enemyTeam), null);
    // play big blast with sound
    PlayContinuousBlast(Color.Yellow, portalPosition,
        portalSize * 1.5, 10, 3);

    // Hide icon
    DestroyIcon(portalEntitys[0]);
}

rule: "Portal/State/Closed"
Event.OngoingGlobal
if(
    portalState == PortalState.Closed
){
    // init param
    portalPosition = 0;
    portalSize = 0;
    StopChasingVariable(portalSize);
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
    Wait(2, WaitBehavior.AbortWhenFalse);

    // show message
    BigMessage(AllPlayers(), "Portal closed. Nice work!");
}

rule: "Portal/State/End"
Event.OngoingGlobal
if(
    portalState == PortalState.End
){
    // apply blast impulse
    ApplyBlastImpulse(AllPlayers(enemyTeam), portalPosition, portalSize);
    // play portal closing effect and kill enemrys
    Kill(AllPlayers(enemyTeam), null);
    // play big blast with sound
    PlayContinuousBlast(Color.Yellow, portalPosition,
        portalSize * 1.5, 10, 3);

    // init param
    portalPosition = 0;
    portalSize = 0;
    StopChasingVariable(portalSize);
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
}

rule: "Portal/Positioner/createPortal"
Event.OngoingGlobal
if(
    teamLives > 0 &&
    portalState == PortalState.Calculating
){
    WaitConditionConfirmed();
    define candidatePosition;
    for(define retryCount = 0; retryCount < 30; retryCount++){
        define basePosition! = Midpoint(SpawnPoints(playerTeam)[0], SpawnPoints(enemyTeam)[0]);
        define distance! = DistanceBetween(SpawnPoints(playerTeam)[0], SpawnPoints(enemyTeam)[0]) / 2;
        // select random positon from map
        candidatePosition = NearestWalkablePosition(
            basePosition +
            RandomPosition(
                distance * 1.2,
                distance * 0.5,
                distance * 1.2
            )
        );

        // convert to walkble position
        candidatePosition = NearestWalkablePosition(candidatePosition);
        // move candidate postion in the direction of player for avoiding map edge
        candidatePosition += DirectionTowards(candidatePosition, basePosition) * RandomReal(1, distance / 4);
        // convert to walkble position
        candidatePosition = NearestWalkablePosition(candidatePosition);

        if(
            // far postion from previous position
            (
                DistanceBetween(prevPortalPosition, candidatePosition) >= 50
            )
        ){
            break;
        }
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        WaitUntilServerFree();
    }
    // confirm as portal position
    portalPosition = candidatePosition + PositionOffset();
    // create portal, next check position
    portalState = PortalState.Checking;
}

globalvar define prevPortalPosition;

rule: "Portal/Positioner/positionChecking"
Event.OngoingGlobal
if(
    teamLives > 0 &&
    portalState == PortalState.Checking
){
    // wait for portal position check
    Wait(3, WaitBehavior.AbortWhenFalse);
    // confirm portal position
    prevPortalPosition = portalPosition;
    // portal create fin
    portalState = PortalState.Set;
}

// TAG Portal/Positioner/InsideRespawnRoom ----------
rule: "Portal/Positioner/InsideRespawnRoom/resetPortal"
Event.OngoingGlobal
if(
    portalEnable &&
    IsTrueForAny(
        SpawnPoints(playerTeam),
        (
            IsInLineOfSight(ae + Up(), portalPosition)
        )
    )
){
    WaitConditionConfirmed();
    dbgMsg("reset Portal By Inside Respawn Room");
    portalState = PortalState.Calculating;
}

// TAG Portal/Positioner/EnvironmentDeathCount ----------
define environmentDeathLimit: NumberOfPlayers(enemyTeam) + 1;
globalvar define environmentDeathCount!;

rule: "Portal/Positioner/EnvironmentDeathCount/resetCount"
Event.OngoingGlobal
if(
    !portalEnable
){
    environmentDeathCount = 0;
}

rule: "Portal/Positioner/EnvironmentDeathCount/countup"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    portalEnable &&
    (
        Attacker() == ep ||         // killed by res room
        IsInSpawnRoom(Attacker())   // killer in res room
    )
){
    // change room for avoid kill in res room
    ForceSpawnRoom(playerTeam, RandomValueInArray([0, 1, 2]));
    // sucide
    if(Attacker() == ep){
        environmentDeathCount += 1;
    }
    // killer in res room
    else if(IsInSpawnRoom(Attacker())){
        environmentDeathCount += 3;
    }
}

rule: "Portal/Positioner/EnvironmentDeathCount/reduceCount"
Event.OngoingGlobal
if(
    portalEnable &&
    0 < environmentDeathCount
){
    Wait(3, WaitBehavior.AbortWhenFalse);
    environmentDeathCount --;
    LoopIfConditionIsTrue();
}

rule: "Portal/Positioner/EnvironmentDeathCount/resetPortal"
Event.OngoingGlobal
if(
    portalEnable &&
    environmentDeathLimit <= environmentDeathCount
){
    WaitConditionConfirmed();
    dbgMsg("reset Portal By Environment Death Count");
    portalState = PortalState.Calculating;
}

// TAG Portal/Positioner/CantContact ----------
define limitTime: 180;
globalvar define notContactTime!;

rule: "Portal/Positioner/NotContactTime/resetTime"
Event.OngoingGlobal
if(
    !portalEnable
){
    WaitConditionConfirmed();
    notContactTime = 0;
}

rule: "Portal/Positioner/NotContactTime/countup"
Event.OngoingGlobal
if(
    portalEnable &&
    notContactTime != -1  &&
    limitTime > notContactTime
){
    WaitUpdateASecond();
    notContactTime ++;
    LoopIfConditionIsTrue();
}

rule: "Portal/Positioner/NotContactTime/detectContact"
Event.OngoingGlobal
if(
    portalState == PortalState.UnderAttack
){
    notContactTime = -1;
}

rule: "Portal/Positioner/NotContactTime/resetPortal"
Event.OngoingGlobal
if(
    portalEnable &&
    limitTime <= notContactTime
){
    WaitConditionConfirmed();
    dbgMsg("reset Portal By No Contact");
    portalState = PortalState.Calculating;
}

// TAG Portal/Growing ----------
define maxPortalSize: 70;

rule: "Portal/Growing/startGrowingByPlayerFound"
Event.OngoingGlobal
if(
    portalState == PortalState.Set
){
    if(
        IsInLineOfSight(portalPosition,
            ClosestPlayerFromPortal(),
            BarrierLOS.NoBarriersBlock)
    ){
        WaitConditionConfirmed();
        // start portal growing by player found
        portalState = PortalState.Growing;
    }
    else{
        WaitUpdateMediumCycle();
        WaitUntilServerFree();
        LoopIfConditionIsTrue();
    }
}

rule: "Portal/Growing/startGrowingByTimeout"
Event.OngoingGlobal
if(
    portalState == PortalState.Set &&
    portalPosition != 0
){
    // Start portal growing by search time limit out
    define time! = DistanceBetween(portalPosition, ClosestPlayerTo(portalPosition, playerTeam)) * 0.7;
    Wait(RoundToInteger(time), WaitBehavior.AbortWhenFalse);  //wait time to start growing
    portalState = PortalState.Growing;
}

rule: "Portal/Growing/suspendGrowingByPlayerEntered"
Event.OngoingGlobal
if(
    (
        portalState == PortalState.Growing || 
        portalState == PortalState.Set
    )
    &&
    IsTrueForAny(
        AllPlayers(playerTeam), ae.isInSidePortal
    )
){
    // Suspend portal growing by player enter to portal
    WaitConditionConfirmed();
    portalState = PortalState.UnderAttack;
}

rule: "Portal/Growing/resumeGrowingByPlayerExited"
Event.OngoingGlobal
if(
    portalState == PortalState.UnderAttack &&
    !IsTrueForAny(
        AllPlayers(playerTeam), ae.isInSidePortal
    )
){
    // Resume portal growing by player exit from portal
    WaitConditionConfirmed();
    portalState = PortalState.Growing;
}

// TAG EnemyBot ----------
define assetList:
    [

        [
            "tank boss",
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  3]
        ],
        [
            "support boss",
            [EnemyType.Boss,        RandomSupportHero,  1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   3]
        ],
        [
            "damage boss",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     3]
        ],
        [
            "damage boss",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Minion,      RandomSupportHero,  3]
        ],
        [
            "boss and minions",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Minion,      RandomDamageHero,   5]
        ],
        [
            "four elites",
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  1],
            [EnemyType.Minion,      RandomSupportHero,  1]
        ],
        [
            "four elites",
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Elite,       RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   1],
            [EnemyType.Minion,      RandomDamageHero,   1]
        ],
        [
            "four elites",
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomDamageHero,   1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Elite,       RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     1],
            [EnemyType.Minion,      RandomTankHero,     1]
        ],        
        [
            "double bosses",
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  4]
        ],
        [
            "double bosses",
            [EnemyType.Boss,        RandomSupportHero,  1],
            [EnemyType.Boss,        RandomTankHero,     1],
            [EnemyType.Minion,      RandomDamageHero,   4]
        ],
        [
            "double bosses",
            [EnemyType.Boss,        RandomDamageHero,   1],
            [EnemyType.Boss,        RandomSupportHero,  1],
            [EnemyType.Minion,      RandomTankHero,     4]
        ],

        [
            "clones",
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Elite,       someHero, 		    2],
            [EnemyType.Minion,      someHero, 		    3]
        ],
        [
            "double boss clones",
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Boss,        someHero, 		    1],
            [EnemyType.Minion,      someHero, 		    4]
        ],
        [
            "four elite clones",
            [EnemyType.Elite,       someHero, 		    4],
            [EnemyType.Minion,      someHero, 		    2]
        ],

        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomTankHero,     1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomDamageHero,   1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],		
        [
            "giant boss",
            [EnemyType.GiantBoss,   RandomSupportHero,  1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],

        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Pharah,        1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Reinhardt,     1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Sigma,         1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],
        [
            "giant boss",
            [EnemyType.GiantBoss,   Hero.Doomfist,      1],
            [EnemyType.Minion,      RandomSupportHero,  5]
        ],

        [
            "close range",
            [EnemyType.Boss,        Hero.Reaper,        1],
            [EnemyType.Elite,       Hero.Roadhog,       2],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Minion,      Hero.Mei,           2]
        ],
        [
            "close range",
            [EnemyType.Boss,        Hero.Mei,           1],
            [EnemyType.Elite,       Hero.Doomfist,      2],
            [EnemyType.Elite,       Hero.Roadhog,       1],
            [EnemyType.Minion,      Hero.Reaper,        2]
        ],
        [
            "close range",
            [EnemyType.Boss,        Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Mei,           2],
            [EnemyType.Elite,       Hero.Reaper,        1],
            [EnemyType.Minion,      Hero.Roadhog,       2]
        ],
        [
            "melees",
            [EnemyType.Boss,        Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Doomfist,      2],
            [EnemyType.Elite,       Hero.Mercy,         1],
            [EnemyType.Minion,      Hero.Brigitte,      2]
        ],
        [
            "melees",
            [EnemyType.Boss,        Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Reinhardt,     1],
            [EnemyType.Elite,       Hero.Brigitte,      2],
            [EnemyType.Minion,      Hero.Mercy,         2]
        ],
        [
            "flankers",
            [EnemyType.Boss,        Hero.Soldier76,     1],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Genji,         1],
            [EnemyType.Minion,      Hero.Tracer,        3]
        ],
        [
            "flankers",
            [EnemyType.Boss,        Hero.Genji,         1],
            [EnemyType.Elite,       Hero.Doomfist,      1],
            [EnemyType.Elite,       Hero.Tracer,        1],
            [EnemyType.Minion,      Hero.Soldier76,     3]
        ],
        [
            "long range",
            [EnemyType.Boss,        Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Bastion, 		1],
            [EnemyType.Elite,       Hero.Ana, 	        2],
            [EnemyType.Minion,      Hero.Soldier76, 	2]
        ],
        [
            "long range",
            [EnemyType.Boss,        Hero.Bastion, 		1],
            [EnemyType.Elite,       Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Soldier76, 	2],
            [EnemyType.Minion,      Hero.Ana, 	        2]
        ],
        [
            "air forces",
            [EnemyType.Elite,       Hero.Echo, 			2],
            [EnemyType.Elite,       Hero.Pharah, 		2],
            [EnemyType.Minion,      Hero.Mercy, 		2]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Pharah, 		1],
            [EnemyType.Elite,       Hero.Mercy, 		3],
            [EnemyType.Minion,      Hero.Mercy, 		2]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Echo, 		    1],
            [EnemyType.Elite,       Hero.Mercy, 		3],
            [EnemyType.Minion,      Hero.Mercy, 		2]
        ],
        [
            "sky queen",
            [EnemyType.Boss,        Hero.Mercy, 		1],
            [EnemyType.Elite,       Hero.Pharah, 		3],
            [EnemyType.Minion,      Hero.Echo, 		    2]
        ],
        [
            "snipers",
            [EnemyType.Boss,        Hero.Hanzo,			1],
            [EnemyType.Boss,        Hero.Widowmaker,	1],
            [EnemyType.Elite,       Hero.Ashe, 			2],
            [EnemyType.Minion,      Hero.Ana, 			2]
        ],
        [
            "snipers",
            [EnemyType.Boss,        Hero.Widowmaker,	1],
            [EnemyType.Boss,        Hero.Ana,	        1],
            [EnemyType.Elite,       Hero.Hanzo, 		2],
            [EnemyType.Minion,      Hero.Ashe, 	        2]
        ],
        [
            "snipers",
            [EnemyType.Boss,        Hero.Ashe,			1],
            [EnemyType.Boss,        Hero.Hanzo,	        1],
            [EnemyType.Elite,       Hero.Ana, 		    2],
            [EnemyType.Minion,      Hero.Widowmaker, 	2]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Orisa, 		1],
            [EnemyType.Elite,       Hero.Bastion, 		2],
            [EnemyType.Elite,       Hero.Echo,          2],
            [EnemyType.Minion,      Hero.Zenyatta,      1]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Bastion, 		1],
            [EnemyType.Elite,       Hero.Zenyatta, 		2],
            [EnemyType.Elite,       Hero.Orisa,         2],
            [EnemyType.Minion,      Hero.Echo,          1]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Echo, 		    1],
            [EnemyType.Elite,       Hero.Zenyatta, 		2],
            [EnemyType.Elite,       Hero.Bastion,       2],
            [EnemyType.Minion,      Hero.Orisa,         1]
        ],
        [
            "machines",
            [EnemyType.Boss,        Hero.Zenyatta, 		1],
            [EnemyType.Elite,       Hero.Bastion, 		2],
            [EnemyType.Elite,       Hero.Orisa,         2],
            [EnemyType.Minion,      Hero.Echo,          1]
        ],
        [
            "steel waves",
            [EnemyType.Boss,        Hero.Reinhardt, 	1],
            [EnemyType.Minion,      Hero.Reinhardt, 	5]
        ],
        [
            "armor armys",
            [EnemyType.Boss,        Hero.Reinhardt, 	1],
            [EnemyType.Minion,      Hero.Brigitte,   	5]
        ],
        [
            "turrets",
            [EnemyType.Boss,        Hero.Torbjorn, 		1],
            [EnemyType.Elite,       Hero.Symmetra, 		2],
            [EnemyType.Minion,      Hero.Symmetra, 		3]
        ],
        [
            "turrets",
            [EnemyType.Boss,        Hero.Symmetra, 		1],
            [EnemyType.Elite,       Hero.Torbjorn, 		2],
            [EnemyType.Minion,      Hero.Torbjorn, 		3]
        ],
        [
            "gunmans",
            [EnemyType.Elite,       Hero.Cassidy, 		6]
        ]

    ];

globalvar define someHero!;

rule: "EnemyBot/reloadBotAsset"
Event.OngoingGlobal
if(
    portalEnable
){
    // change bot asset by random
    if(
        0 >= NumberOfPlayers(enemyTeam) ||
        ProbabilityTrue(70)
    ){
        someHero = RandomHero;
        // create all bot
        CreateBotsByAssetList(assetList, enemyTeam);   
    }
}

// TAG EnemyBot/EnemyType ----------
playervar define eachDealtDamageScale!;
playervar define eachMaxSpawnInterval!;
playervar define eachMinSpawnInterval!;
playervar define eachChargeUltInterval!;
playervar define eachEffectTextSize!;
playervar define eachNameText!;
playervar define eachNameColor!;

rule: "EnemyBot/EnemyType/setEnemyType"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None
){
    if(enemyType == EnemyType.Minion){
        StartScalingPlayer(ep, 0.75, false);
        StartModifyingHeroVoiceLines(ep, 1.5, false);

        SetMaxHealth(ep, 50);

        SetHealingDealt(ep, 50);
        SetHealingReceived(ep, 75);
        
        eachDealtDamageScale = 0.5;
        eachChargeUltInterval = 60;
        eachMaxSpawnInterval = 3;
        eachMinSpawnInterval = 0;

        eachNameText = "Minion";
        eachNameColor = Color.White;
        eachEffectTextSize = basicInWorldTextSize;

        eachPerkDropProbability = eachMaxSpawnInterval;
    }
    else if(enemyType == EnemyType.Elite){
        StartScalingPlayer(ep, 1.0, false);
        StartModifyingHeroVoiceLines(ep, 1.0, false);

        SetMaxHealth(ep, 200);

        SetHealingDealt(ep, 100);
        SetHealingReceived(ep, 150);

        eachDealtDamageScale = 1.0;
        eachChargeUltInterval = 20;
        eachMaxSpawnInterval = 10;
        eachMinSpawnInterval = 3;

        eachNameText = "Elite";
        eachNameColor = Color.Yellow;
        eachEffectTextSize = basicInWorldTextSize + 1;

        eachPerkDropProbability = eachMaxSpawnInterval;
    }
    else if(enemyType == EnemyType.Boss){
        StartScalingPlayer(ep, 1.5, false);
        StartModifyingHeroVoiceLines(ep, 0.5, false);

        SetMaxHealth(ep, 1000);

        SetHealingDealt(ep, 200);
        SetHealingReceived(ep, 300);

        eachDealtDamageScale = 2.0;
        eachChargeUltInterval = 10;
        eachMaxSpawnInterval = 30;
        eachMinSpawnInterval = 10;

        eachNameText = "Boss";
        eachNameColor = Color.Red;
        eachEffectTextSize = basicInWorldTextSize + 2;

        eachPerkDropProbability = eachMaxSpawnInterval;
    }
    else if(enemyType == EnemyType.GiantBoss){
        StartScalingPlayer(ep, 2.5, false);
        StartModifyingHeroVoiceLines(ep, 0.1, false);

        SetMaxHealth(ep, 1000);

        SetHealingDealt(ep, 200);
        SetHealingReceived(ep, 300);

        eachDealtDamageScale = 3.0;
        eachChargeUltInterval = 5;
        eachMaxSpawnInterval = 27;
        eachMinSpawnInterval = 9;

        eachNameText = "Big Boss";
        eachNameColor = Color.Purple;
        eachEffectTextSize = basicInWorldTextSize + 3;

        eachPerkDropProbability = eachMaxSpawnInterval;

        // set addtinal health
        Wait(0.1, WaitBehavior.AbortWhenFalse);
        define health! = MaxHealth(ep) * 1;
        AddHealthPoolToPlayer(ep, HealthType.Armor, health, true, false);
        AddHealthPoolToPlayer(ep, HealthType.Shields, health, true, false);
    }

    UpdateEachDealtDamage();
    UpdateEachSpawnInterval();

    // heal to max health
    while(Health() < MaxHealth()){
        Heal(ep, null, MaxValue());
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }
}

// TAG EnemyBot/Effect ----------
playervar define botAppearanceEntitys!;

rule: "EnemyBot/Effect/showBotAppearance"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    IsAlive()
){
    botAppearanceEntitys = [];
    // show evil aura
    botAppearanceEntitys[0] = 
        CreateEffect(AllPlayers(), Effect.Cloud, enemyColor,
            ep, eachEffectTextSize, EffectRev.VisibleToPositionAndRadius);
    // show name text
    botAppearanceEntitys[1] = 
        CreateInWorldText(
            AllPlayers(), eachNameText, 
            ep, eachEffectTextSize, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            eachNameColor, Spectators.DefaultVisibility);
}

rule: "EnemyBot/Effect/hideBotAppearanceAndReek"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    enemyType != EnemyType.None &&
    !IsAlive()
){
    // hide evil aura
    DestroyEffect(botAppearanceEntitys[0]);
    // hide name text
    DestroyInWorldText(botAppearanceEntitys[1]);
    // play dead effect
    PlayContinuousBlast(Color.Red, PositionOf(),
        eachEffectTextSize * 1.5, eachEffectTextSize, 0);
}

// TAG EnemyBot/Teleport ----------
define teleportAreaSize: 30;
define teleportTooCloseDist: 4;
define ClosestPlayerToTelPos: ClosestPlayerTo(teleportPosition, playerTeam);
define ClosestPlayerToComTelPos: ClosestPlayerTo(commonTeleportPosition, playerTeam);
define ClosestPlayerToMe: ClosestPlayerTo(ep, playerTeam);

Player ClosestPlayerFromPortal()"ClosestPlayerFromPortal"{
    return FirstOf(
        SortedArray(
            FilteredArray(
                AllPlayers(playerTeam),
                (
                    HasSpawned(ae) &&
                    IsAlive(ae) &&
                    !IsInSpawnRoom(ae)
                )
            ),
            DistanceBetween(ae, portalPosition)
        )
    );
}

Player RandomPlayerInPortal()"RandomPlayerInPortal"{
    return RandomValueInArray(
        FilteredArray(
            AllPlayers(playerTeam),
            (
                HasSpawned(ae) &&
                IsAlive(ae) &&
                ae.isInSidePortal
            )
        )
    );
}

playervar define teleportPosition!;
globalvar define commonTeleportPosition!;

Boolean SetTeleportPositionToPlayerFront()"SetTeleportPositionToPlayerFront"{
    // set teleportToTarget at closest player from portal
    define teleportToTarget! = ClosestPlayerFromPortal();
    if(teleportToTarget == null){
        teleportPosition = portalPosition;
        return true;
    }
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        // select teleportPosition from middle of portal and teleportToTarget
        teleportPosition =
            NearestWalkablePosition(
                PositionOf(teleportToTarget)
                    + 
                (
                    DirectionTowards(teleportToTarget, portalPosition)
                        *
                    DistanceBetween(teleportToTarget, portalPosition) * 0.5
                )
                    +
                RandomPosition(teleportAreaSize, teleportAreaSize, teleportAreaSize)
            );

        define telPosNearTarget! = ClosestPlayerToTelPos;
        if(
            // Not too close to telPosNearTarget
            DistanceBetween(    
                telPosNearTarget, teleportPosition)
            >= teleportTooCloseDist
                &&
            // Has line to target
            IsInLineOfSight(
                telPosNearTarget + PositionOffset(),
                teleportPosition + PositionOffset(),
                BarrierLOS.NoBarriersBlock)
                &&
            // Has ground of teleport position
            IsBlockedBetween(
                teleportPosition,
                ShiftedPosition(teleportPosition, Down(), 6))
        ){
            break;
        }
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        WaitUntilServerFree();
    }
    return true;
}

Boolean SetTeleportPositionToPlayerAround()"SetTeleportPositionToPlayerAround"{
    // set teleportToTarget at closest player from portal
    define teleportToTarget! = ClosestPlayerFromPortal();
    if(teleportToTarget == null){
        teleportPosition = portalPosition;
        return true;
    }

    define telPosNearTarget! = ClosestPlayerToTelPos;
    define distFromWP! = NearestWalkablePosition(telPosNearTarget);

    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        // target on walkable position
        if(DistanceBetween(PositionOf(telPosNearTarget), distFromWP) <= 1){
            // select position and adjust NearestWalkablePosition;
            teleportPosition = 
                NearestWalkablePosition(
                    PositionOf(teleportToTarget) +
                    RandomPosition(
                        teleportAreaSize,
                        teleportAreaSize,
                        teleportAreaSize
                    )
                );
        }
        else{
            // select position and not adjust NearestWalkablePosition;
            teleportPosition =
                BlockedPositon(
                    teleportToTarget,
                    DirectionFromAngles(
                        RandomReal(0, 360),
                        RandomReal(30, -30),
                    ),
                    teleportAreaSize
                );
            // slide teleportPosition to targer for avoid map surface edge
            teleportPosition += DirectionTowards(teleportPosition, teleportToTarget);
        }
        // select random and adjust 
        if(
            // Not too close to telPosNearTarget
            DistanceBetween(    
                telPosNearTarget, teleportPosition)
            >= teleportTooCloseDist
                &&
            // Has line to target
            IsInLineOfSight(
                telPosNearTarget + PositionOffset(),
                teleportPosition + PositionOffset(),
                BarrierLOS.NoBarriersBlock)
                &&
            // Has ground of teleport position
            IsBlockedBetween(
                teleportPosition,
                ShiftedPosition(teleportPosition, Down(), 6))
        ){
            break;
        }
        Wait(0.5, WaitBehavior.AbortWhenFalse);
        WaitUntilServerFree();
    }
    return true;
}

Boolean SetTeleportPositionToCommonPosition()"SetTeleportPositionToCommonPosition"{
    // set telPosNearTarget at closest player from commonTeleportPosition
    define telPosNearTarget! = ClosestPlayerToComTelPos;
    if(telPosNearTarget == null){
        teleportPosition = portalPosition;
        return true;
    }
    if(
        // invalid commonTeleportPosition
        commonTeleportPosition ==  0 ||
        // has not line to target from common teleport position
        !IsInLineOfSight(commonTeleportPosition, telPosNearTarget) ||
        // target too close common teleport position
        DistanceBetween(commonTeleportPosition, telPosNearTarget) < teleportTooCloseDist ||
        // force update common teleport position Probability
        ProbabilityTrue(5)
    ){
        // new select common position
        // set teleport position to player around
        if(SetTeleportPositionToPlayerAround()){
            // save teleport position as common position
            commonTeleportPosition = teleportPosition;
        }
        else{
            // set teleport position from common position
            teleportPosition = commonTeleportPosition;
        }
    }
    else{
        // set teleport position from common position
        teleportPosition = commonTeleportPosition;
    }
    return true;
}

void PlayTeleportEffect(define isBefore!)"PlayTeleportEffect"{
    // if before teleport
    if(isBefore){
        if(portalEnable){
            // play teleport shadow of own
            PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyColor, ep, 1);
            // play teleport shadow of dest
            PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, enemyColor, teleportPosition, 1);
        }
        // wait for show teleport shadow of before
        Wait(0.4, WaitBehavior.IgnoreCondition);
    }
    else{
        if(portalEnable){
            // play teleport blast
            PlayEffect(AllPlayers(), PlayEffect.BadExplosion, enemyColor, ep, eachEffectTextSize);
        }
    }
}

void TeleportWithEffect()"TeleportWithEffect"{
    Wait(SlotOf(ep) * 0.1, WaitBehavior.AbortWhenFalse);
    // show pre teleport effect
    PlayTeleportEffect(true);
    // Teleport
    Teleport(ep, teleportPosition);
    // show teleport effect
    PlayTeleportEffect(false);
}

rule: "EnemyBot/Teleport/teleportByPortalDisabled"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    HasSpawned() &&
    !portalEnable
){
    // Teleport Bot to spawn room when portal disable
    // wait show dead effect when portal closing
    Wait(showDeadEffectTime, WaitBehavior.AbortWhenFalse);

    // reset teleport position
    teleportPosition = InvalidPosition();
    // set root
    SetStatus(ep, null, Status.Rooted, MaxValue());
    // show pre teleport effect
    PlayTeleportEffect(true);
    // Teleport to spawn room
    Respawn(AllPlayers(enemyTeam));
    // show teleport effect
    PlayTeleportEffect(false);
}

rule: "EnemyBot/Teleport/teleportByPortalEnabled"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    HasSpawned() &&
    portalEnable
){
    AbortIf(DistanceBetween(ep, ClosestPlayerFromPortal()) <= 5);
    // clear root
    ClearStatus(ep, Status.Rooted);
    // set teleport position
    if(SetTeleportPositionToPlayerFront()){
        // teleport
        TeleportWithEffect();
    }
}

rule: "EnemyBot/Teleport/teleportByPlayerEntered"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsAlive() &&
    portalEnable &&
    portalState == PortalState.UnderAttack
){
    AbortIf(DistanceBetween(ep, ClosestPlayerFromPortal()) <= 5);
    // set teleport position to player around
    if(SetTeleportPositionToPlayerAround()){
        // teleport
        TeleportWithEffect();
    }
}

rule: "EnemyBot/Teleport/teleportByRespawn"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsAlive() &&
    portalEnable &&
    IsInSpawnRoom()
){
    HybridTeleport();
}

define hasLine:
    IsInLineOfSight(ep,
            ClosestPlayerToMe,
            BarrierLOS.NoBarriersBlock);

rule: "EnemyBot/Teleport/teleportByPlayerNotFound"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    IsAlive() &&
    portalEnable &&
    !IsInSpawnRoom()
){
    for(define notHasLineSecond! = 0; notHasLineSecond < 3; notHasLineSecond ++){
        Wait(1, WaitBehavior.AbortWhenFalse);
        if(
            actionState != ActionState.Non
        ){
            // reset count up
            LoopIfConditionIsTrue();
        }
    }
    HybridTeleport();
    LoopIfConditionIsTrue();
}

void HybridTeleport(){
    if(
        // during portal attacks
        portalState == PortalState.UnderAttack ||
        // force active teleport Probprobability
        ProbabilityTrue(40 / NumberOfPlayers(enemyTeam))
    ){
        if(
            // teleport to common position Probprobability
            ProbabilityTrue(90)
        ){
            // set teleport position to common position
            if(SetTeleportPositionToCommonPosition()){
                // teleport
                TeleportWithEffect();
            }
        }
        else{
            // set teleport position to player around
            if(SetTeleportPositionToPlayerAround()){
                // teleport
                TeleportWithEffect();
            }
        }
    }
    else{
        // set teleport position to player front
        if(SetTeleportPositionToPlayerFront()){
            // teleport
            TeleportWithEffect();
        }
    }
}

rule: "EnemyBot/Teleport/clearCommonTeleportPosition"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep &&
    portalEnable
){
    commonTeleportPosition = 0;
}

// TAG EnemyBot/EnemyAbility
rule: "EnemyBot/EnemyAbility/shotCall"
Event.OngoingGlobal
if(
    portalState == PortalState.UnderAttack
){
    Wait(RandomReal(1, 60), WaitBehavior.AbortWhenFalse);

    dbgMsg("shotCall start");
    define scList! = AllLivingPlayers(enemyTeam);
    define scDelay! = RandomReal(0.1, 2);
    for(define scLoopIndex! = 0; scLoopIndex < CountOf(scList); scLoopIndex ++){
        SetUltimateCharge(scList[scLoopIndex], 100);
        PressButton(scList[scLoopIndex], Button.Ultimate);
        Wait(scDelay, WaitBehavior.AbortWhenFalse);
    }
    dbgMsg("shotCall end");

    LoopIfConditionIsTrue();
}

rule: "EnemyBot/EnemyAbility/rush"
Event.OngoingGlobal
if(
    portalState == PortalState.UnderAttack
){
    Wait(RandomReal(1, 60), WaitBehavior.AbortWhenFalse);

    dbgMsg("rush start");
    for(define rushCount = RandomInteger(5, 20); rushCount > 0; rushCount--){
        Respawn(AllDeadPlayers(enemyTeam));
        Wait(1, WaitBehavior.AbortWhenFalse);
    }
    dbgMsg("rush end");

    LoopIfConditionIsTrue();
}

rule: "EnemyBot/EnemyAbility/combatTeleport"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    enemyType == EnemyType.GiantBoss &&
    IsAlive() &&
    portalEnable &&
    actionState == ActionState.Attack
){
    define teleportWaitSecond! = NormalizedHealth() * 10;
    Wait(RandomReal(teleportWaitSecond, teleportWaitSecond + 3), WaitBehavior.AbortWhenFalse);
    // set teleport position to player around
    if(SetTeleportPositionToPlayerAround()){
        define telBeam!;
        // teleport with beam effect
        DestroyEffect(telBeam);
        telBeam = CreateBeamEffect(AllPlayers(),
            BeamType.BadBeam, Midpoint(EyePosition(), PositionOf()), teleportPosition,
            Color.Purple, EffectRev.VisibleToPositionAndRadius);
        TeleportWithEffect();
        DestroyEffect(telBeam);
    }
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/chargeUltimate ----------
rule: "EnemyBot/chargeUltimate"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    HasSpawned() &&
    enemyType != EnemyType.None &&
    !IsUsingUltimate()
){
    SetUltimateCharge(ep, UltimateChargePercent() + (100 / eachChargeUltInterval));
    WaitUpdateASecond();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/SpawnInterval ----------
define showDeadEffectTime: 1.5;
playervar define confirmSpawnInterval!;

void UpdateEachSpawnInterval()"UpdateEachSpawnInterval"{
    confirmSpawnInterval = (eachMaxSpawnInterval - eachMinSpawnInterval);
    confirmSpawnInterval *= (1 - (portalSize / maxPortalSize));
    confirmSpawnInterval -= roundNo / 5;
    confirmSpawnInterval = Max(confirmSpawnInterval, 0);
    confirmSpawnInterval += eachMinSpawnInterval;
    SetRespawnMaxTime(ep, confirmSpawnInterval + showDeadEffectTime); 
}

rule: "EnemyBot/SpawnInterval/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    portalEnable &&
    enemyType != EnemyType.None
){
    UpdateEachSpawnInterval();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

rule: "EnemyBot/SpawnInterval/fastRespawnBySucide"
Event.OnDeath
if(
    TeamOf() == enemyTeam &&
    Attacker() == ep &&
    portalEnable
){
    Wait(showDeadEffectTime, WaitBehavior.AbortWhenFalse);
    Respawn();
}

// TAG EnemyBot/ReceivedDamage ----------
globalvar define confirmReceiveDamage!;

void UpdateEachReceivedDamage()"UpdateEachReceivedDamage"{
    // set base damage
    confirmReceiveDamage = 100;
    // apply team balance
    confirmReceiveDamage *= ConvertToBalancedValue(0.75, playerTeam);
    SetDamageReceived(AllPlayers(enemyTeam), confirmReceiveDamage);
}

rule: "EnemyBot/ReceivedDamage/update"
Event.OngoingGlobal
if(
    initCompleted
){
    UpdateEachReceivedDamage();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

// TAG EnemyBot/DealtDamage ----------
playervar define confirmDealtDamage!;
globalvar define threatLevel!;

void UpdateEachDealtDamage()"UpdateEachDealtDamage"{
    // set base damage
    confirmDealtDamage = WorkshopSettingReal("Enemy Bot Settings", "Base Deal Damage", 5.0, 0, 1000, -9);
    // add team health balance
    confirmDealtDamage += GetTeamNormalizedHealth() * 
        WorkshopSettingReal("Enemy Bot Settings", "Increase Deal Damage By Player Team Total Health", 15.0, 0, 1000, -8);
    // add round progress
    confirmDealtDamage += roundNo * WorkshopSettingReal("Enemy Bot Settings", "Increase Deal Damage Per Round", 1.5, 0, 1000, -7);
    // add team lives balance
    confirmDealtDamage += teamLives * WorkshopSettingReal("Enemy Bot Settings", "Increase Deal Damage Per Team lives", 1.5, 0, 1000, -6);
    // apply team balance
    confirmDealtDamage /= ConvertToBalancedValue(0.75, playerTeam);
    // set threat Level
    threatLevel = confirmDealtDamage;
    // apply enemy type scale
    confirmDealtDamage *= eachDealtDamageScale;
    SetDamageDealt(ep, confirmDealtDamage);
}

rule: "EnemyBot/DealtDamage/update"
Event.OngoingPlayer
if(
    TeamOf() == enemyTeam &&
    portalEnable &&
    enemyType != EnemyType.None
){
    UpdateEachDealtDamage();
    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

// TAG Debug ----------
rule: "Debug/defaultDebugMode"
Event.OngoingGlobal
if(
    initCompleted
){
    debugMode = DebugMode.SlowLevelOnly;
    DisableInspectorRecording();
    ShowDebugHud(HostPlayer());
}

rule: "Debug/changeDebugMode"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Jump) 
){
    // change debug mode
    WaitLongPressConfirm();
    if(debugMode == DebugMode.Non){
        debugMode = DebugMode.SlowLevelOnly;
    }
    else if(debugMode == DebugMode.SlowLevelOnly){
        debugMode = DebugMode.ShowParam;
    }
    else if(debugMode == DebugMode.ShowParam){
        debugMode = DebugMode.WithRecord;
    }
    else if(debugMode == DebugMode.WithRecord){
        debugMode = DebugMode.Non;
    }

    if(debugMode == DebugMode.Non){
        DisableInspectorRecording();
        HideDebugHud();
    }
    else if(debugMode == DebugMode.SlowLevelOnly){
        DisableInspectorRecording();
        HideDebugHud();
        ShowDebugHud(HostPlayer());
    }
    else if(debugMode == DebugMode.ShowParam){
        DisableInspectorRecording();
        HideDebugHud();
        ShowDebugHud(HostPlayer());
    }
    else if(debugMode == DebugMode.WithRecord){
        EnableInspectorRecording();
        HideDebugHud();
        ShowDebugHud(HostPlayer());
    }
}

define End(): CountOf(debugHudEntitys);
define botOfEnemyType(define enemyType): FirstOf(FilteredArray(AllPlayers(enemyTeam), ae.enemyType == enemyType));
globalvar define debugHudEntitys!;

// show debug icon and hud
void ShowDebugHud(define player!)"ShowDebugHud"{
    if(
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        if(
            debugMode == DebugMode.WithRecord
        ){
            CreateHudText(player,
                null,
                null,
                "● is Recording",
                Location.Left, -1,
                Color.White, Color.White, Color.Red,
                HudTextRev.VisibleToAndString, Spectators.VisibleNever);
            debugHudEntitys[End()] = LastTextID();
        }
    
    /*
        CreateHudText(player,
            null,
            <"<0> <1>", "Regeneration Rate", regenRateTeam1>,
            null,
            Location.Left, -1,
            Color.White, Color.Blue, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "portal State", portalState>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "portal Size", portalSize>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "portal Position", portalPosition>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "distance to protal", DistanceBetween(ep, portalPosition)>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Giant Boss Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.GiantBoss).confirmDealtDamage,
                botOfEnemyType(EnemyType.GiantBoss).confirmSpawnInterval,
                botOfEnemyType(EnemyType.GiantBoss).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Boss Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.Boss).confirmDealtDamage,
                botOfEnemyType(EnemyType.Boss).confirmSpawnInterval,
                botOfEnemyType(EnemyType.Boss).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Elite Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.Elite).confirmDealtDamage,
                botOfEnemyType(EnemyType.Elite).confirmSpawnInterval,
                botOfEnemyType(EnemyType.Elite).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> RcvDmg <1> DltDmg <2> SpwItv <3> ChgUlt <4>", "Minion Status",
                confirmReceiveDamage,
                botOfEnemyType(EnemyType.Minion).confirmDealtDamage,
                botOfEnemyType(EnemyType.Minion).confirmSpawnInterval,
                botOfEnemyType(EnemyType.Minion).eachChargeUltInterval
            >,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "threat Level", threatLevel>,
            null,
            Location.Left, -1,
            Color.White, Color.Red, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>/<2>", "environment Death Count", environmentDeathCount, environmentDeathLimit>,
            null,
            Location.Left, -1,
            Color.White, Color.White, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>/<2>", "no Contact Time", notContactTime, limitTime>,
            null,
            Location.Left, -1,
            Color.White, Color.White, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
        */
    }

        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load", ServerLoad()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

    if(
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load Average", ServerLoadAverage()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(player,
            null,
            <"<0> <1>", "Server Load Peak", ServerLoadPeak()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
    }

        CreateHudText(player,
            null,
            <"<0> <1>", "game Logic Speed", gameLogicSpeed>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
}

// Hide debug icon and hud
void HideDebugHud()"HideDebugHud"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(debugHudEntitys); gLoopIndex ++){
        DestroyHudText(debugHudEntitys[gLoopIndex]);
    }
}

rule: "Debug/increaseTeamLives"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ability2)
){
    // Increase TeamLives
    WaitLongPressConfirm();
    teamLives += 1;
    LoopIfConditionIsTrue();
}

rule: "Debug/increaseRoundNo"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Ability1)
){
    // Increase RoundNo
    WaitLongPressConfirm();
    roundNo += 1;
    LoopIfConditionIsTrue();
}

rule: "Debug/resetPortal // reset portal position by random"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    !IsButtonHeld(ep, Button.Reload) &&
    IsButtonHeld(ep, Button.Crouch)
){
    // Recalculate portal
    WaitLongPressConfirm();
    portalState = PortalState.Changing;
    WaitChangeState();  // Wait for the changed status to be processed first
    portalState = PortalState.Calculating;
}

globalvar define debugAimingPosition!;

rule: "Debug/setPortalPositionOnAimCenter // reset portal position by aim center"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Reload) &&
    !IsButtonHeld(ep, Button.Crouch)
){
    // Set portal position to aim center
    WaitLongPressConfirm();
    portalState = PortalState.Changing;
    debugAimingPosition = AimingPosition();
    WaitChangeState();  // Wait for the changed status to be processed first
    portalState = PortalState.Calculating;
    WaitUntil(portalState != PortalState.Calculating, 5);
    portalPosition = debugAimingPosition;
}

rule: "Debug/setPortalMaxSize // reset portal position by aim center"
Event.OngoingPlayer
Team.All
if(
    HostPlayer() == ep &&
    IsButtonHeld(ep, Button.Interact) &&
    IsButtonHeld(ep, Button.Reload) &&
    IsButtonHeld(ep, Button.Crouch)
){
    // Set portal position to aim center
    WaitLongPressConfirm();
    portalSize = maxPortalSize;
}

// rule: "Debug/debugAction"
// Event.OngoingPlayer
// Team.All
// if(
//     HostPlayer() == ep &&
//     IsButtonHeld(ep, Button.Interact) &&
//     IsButtonHeld(ep, Button.PrimaryFire) &&
//     IsButtonHeld(ep, Button.SecondaryFire) &&
//     IsButtonHeld(ep, Button.Ability1) &&
//     IsButtonHeld(ep, Button.Ability2)
// ){
//     define dPlayer = PlayerClosestToReticle(ep, TeamOf());

//     while(true){
//         define teas = AllPlayers(playerTeam);
//         for(gLoopIndex = 0; gLoopIndex < CountOf(teas); gLoopIndex++){
//             if(
//                 teas[gLoopIndex] != ep &&
//                 teas[gLoopIndex] != dPlayer
//             ){
//                 Teleport(teas[gLoopIndex], Vector(0, 1000, 0));
//             }
//         }

//         SetStatus(dPlayer, null, Status.Invincible, MaxValue());
//         SetStatus(ep, null, Status.Unkillable, MaxValue());

//         Damage(ep, null, MaxValue());

//         dPlayer.perkState = PerkState.Using;
//         dPlayer.perkType = PerkType.MedicSyringe;
//         if(!IsInLineOfSight(dPlayer, ep)){
//             Teleport(dPlayer, ep);
//         }
        
//         Wait(5);
//     }
// }

define comTelPosBeamColor:
    Color.White;
    // IsInLineOfSight(commonTeleportPosition, ClosestPlayerToTelPos) &&
    // DistanceBetween(ClosestPlayerToTelPos, teleportPosition) >= teleportAreaSize / 2 
    // ? Color.White : Color.Yellow;

// rule: "Debug/showCommonTeleportPosition"
// Event.OngoingPlayer
// Team.All
// if(
//     HostPlayer() == ep &&
//     initCompleted
// ){
//     CreateBeamEffect(isInDebugMode ? HostPlayer() :,
//         BeamType.BadBeam, ClosestPlayerTo(commonTeleportPosition, playerTeam), commonTeleportPosition,
//         comTelPosBeamColor, EffectRev.PositionRadiusAndColor);
//     CreateEffect(HostPlayer(),
//         Effect.Sphere, comTelPosBeamColor, commonTeleportPosition,
//         teleportAreaSize, EffectRev.PositionRadiusAndColor);
//     CreateEffect(HostPlayer(),
//         Effect.Sphere, comTelPosBeamColor, commonTeleportPosition,
//         teleportTooCloseDist, EffectRev.PositionRadiusAndColor);
// }
