// [Detail]
// [Portal Hunt -HORDE PVE]
// -The evil portal has been opened…
// -Defeat enemie horde that spawn from portal and close it!
// -When you enter portal, count until closing starts. Survive to 0.
// -Over time, portal begin to grow. Grown portal spawn more enemie and get tough.
// -Survive using PERK dropped by the enemy. PERK has convenient buffs, new weapon, powerful custom heroes.
// -[Grappling beam] [Cruise missile] [Legendary ninja] and more than 25 types!
// -Unlimited rounds. How many rounds can your team survive?
// [Share Code]
// YY1N2
// [ToDo]
// add optimaze hit scan by close range of Beam Sniaper
// add hand over Perk Function
// add Perk Disarmament
// add Perk Drone Guard Dog
// add Perk Assassination

import "Lib/ElapsedTimer.ostw";
import "Lib/DamageText.ostw";
import "Lib/Regeneration.ostw";
import "Lib/Revive.ostw";
import "Lib/Perk.ostw";

// TAG Signature and infomation ----------
disabled rule: "PORTAL HUNT -HORDE PVE [ver 2.6] Share code [YY1N2]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated from source code by [Overwatch-Script-To-Workshop]"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG Game Function ----------
globalvar define initCompleted;
globalvar define gameInProgress;

rule: "Game/initGameSetting //wait 3 _seconds because some scripts fail immediately after loading the _server"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    //DisableInspectorRecording();

    // Set game not in progress
    gameInProgress = false;

    // Set imported function property
    Regeneration_enableTeam = Team.All;
    Regeneration_needBalanceTeam1 = true;
    Regeneration_regenerationRateTeam1 = 25;
    Regeneration_waitRegenTimeTeam1 = 1.0;
    Regeneration_needBalanceTeam2 = false;
    Regeneration_regenerationRateTeam2 = MaxValue();
    Regeneration_waitRegenTimeTeam2 = 10.0;

    Revive_enableTeam = Team.Team1;
    Revive_timeLimit = 10;

    DamageText_enableTeam = Team.Team2;

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(3, WaitBehavior.AbortWhenFalse);

    // Cancel unnecessary default settings
    PauseMatchTime();
    DisableScoring();
    // DisableGameModeHud(AllPlayers());
    DisableGameModeInworldUI(AllPlayers());
    DisableCompletion();

    // Calculate the approximate center position of the map from the spawn room position.
    // Therefore, change the spawn room and then spawn the entity.
    ForceSpawnRoom(Team.Team1, 2);
    Respawn(AllPlayers(Team.All));

    // WARNING
    // If you set setMatchTime right after the game starts, the server becomes unstable and ReturnToLobby and Restart stop working.
    // StartElapsedTimer should be true after a delay of about 3 seconds.
    startElapsedTimer = true;

    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

rule: "Game/startGame // by start game of first respawn room exit "
Event.OngoingGlobal
if(
    !gameInProgress &&
    initCompleted &&
    createRange != 0
){
    WaitConditionConfirmed();
    elapsedTime = 0;
    // If player exit spawn room, portal recreate.
    portalState = PortalState.Calculating;
    gameInProgress = true;
}

rule: "Game/resetGame // by no player"
Event.OngoingGlobal
if(
    0 >= NumberOfPlayers(Team.Team1)
){
    elapsedTime = 0;
    roundNo = 0;
    teamLifes = initalTeamLifes;
    Heal(AllPlayers(Team.Team2), null, MaxValue());
    gameInProgress = false;
}

rule: "Game/ShareCode/showGameCode"
Event.OngoingGlobal
{
    // show ver and share code
    CreateHudText(AllPlayers(Team.Team1),
        null, "PORTAL HUNT -HORDE PVE [ver 2.6] Share code [YY1N2]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Game/RoundNo/showObjectMessageHUD //with update message by state"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    initCompleted
){
    SetObjectiveDescription(EventPlayer(), "Find portal and attack it.", ObjectiveRev.VisibleToSortOrderAndString);
}

globalvar define roundNo;

rule: "Game/RoundNo/showRoundHUD"
Event.OngoingGlobal
if(
    initCompleted
){
    // show HUD of round number
    CreateHudText(AllPlayers(Team.All),
        <"<0> <1>", "Round", roundNo>, null, null,
        Location.Top, 2,
        Color.Purple, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
}
rule: "Game/SpawnRoom/changeByTimer //to make the game fluid"
Event.OngoingGlobal
if(
    initCompleted &&
    centerPosition != 0
){
    // Change the spawn room regularly to keep the game fluid
    Wait(300, WaitBehavior.AbortWhenFalse); // change spawn room
    ForceSpawnRoom(Team.Team2, RandomInteger(0, 2));
    ForceSpawnRoom(Team.Team1, RandomInteger(0, 2));
    LoopIfConditionIsTrue();
}

// TAG Player Function ----------
playervar define isInsidePortal;

rule: "Player/InsidePortal/update"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    HasSpawned()
){
    // Set flag when player entered to portal
    // This flag is used for functions related to portal
    if(
        portalEnable &&
        IsAlive() &&
        !IsInSpawnRoom() &&
        DistanceBetween(EventPlayer(), portalPosition) <= portalSize
    ){
        isInsidePortal = true;
    }
    else{
        isInsidePortal = false;
    }
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Player/ReturnSpawn/showOperationHUD"
Event.OngoingGlobal
{
    // show HUD of hero change operation
    CreateHudText(AllPlayers(Team.Team1),
        null, <"Long hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/returnSpawn"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(EventPlayer(), Button.Reload)
){
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

define initalTeamLifes: 6;
globalvar define teamLifes;

rule: "Player/TeamLifes/initalCount"
Event.OngoingGlobal
{
    // Set initial team lifes number
    teamLifes = initalTeamLifes;
}

rule: "Player/TeamLifes/showTeamLifesHUD"
Event.OngoingGlobal
{
    // show HUD of team lifes number
    CreateHudText(AllPlayers(Team.All),
        <"<0> <1>", "Team lifes", teamLifes>, null, null,
        Location.Top, 1,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
}

rule: "Player/TeamLifes/consumeTeamLifes"
Event.OnDeath
Team.Team1
Player.All
if(
    IsDead()
){
    // Remaining lifes reduced by spawn of downed player
    Wait(10, WaitBehavior.AbortWhenFalse);  // wait player spawn
    teamLifes -= 1;
    WaitChangeState();  // wait for show big message by newest value
    if(teamLifes > 0){
        if(teamLifes > 0){
            BigMessage(AllPlayers(Team.All),
                <"<0> <1> <2>", "Our remaining team lifes is", teamLifes, "...">);
        }
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.DebuffImpactSound,
            Color.White, AllPlayers(Team.All), MaxLength());
    }
}

rule: "Player/TeamLifes/finishGame //by team lifes out"
Event.OngoingGlobal
if(
    teamLifes <= 0
){
    // When the team lifes out, the game ends
    portalState = PortalState.Idle;
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(Team.All), MaxLength());
    BigMessage(AllPlayers(Team.All), "Our team lifes is out...");
    SetSlowMotion(10);
    Wait(1, WaitBehavior.AbortWhenFalse);   // show slow
    SetSlowMotion(100);
    WaitNextPhase();

    BigMessage(AllPlayers(Team.All),
        <"<0> <1> <2>", "We have reached", roundNo, "round... good game!">);
    PlayRandomEmote(AllPlayers(Team.Team1));
    WaitNextPhase();

    DeclareTeamVictory(Team.Team1);
}

globalvar define closingCount;
globalvar define closingProgress;
globalvar define closestPlayerToPortal;
globalvar define progressHudEntity;
globalvar define playerNumInsidePortal;

define enableClosingProgress:
    portalState == PortalState.Suspended &&
    teamLifes > 0;

rule: "Player/ClosePortal/startClosing //on enter any player"
Event.OngoingGlobal
if(
    enableClosingProgress
){
    // When a player enters a portal, set progress hud and show message
    WaitConditionConfirmed();
    // kick progress
    closingCount = RoundToInteger(portalSize, Rounding.Nearest);  // TAG portal closing count
    closingCount += roundNo * 2;
    closingProgress = 0;
    ChaseVariableOverTime(closingProgress, 100, closingCount, TimeChaseReevaluation.DestinationAndDuration);
    // show progress hud
    if(progressHudEntity == null){
        CreateProgressBarHudText(AllPlayers(),
            closingProgress,
            <"<0> player stays in portal. Until portal closes...", playerNumInsidePortal >, Location.Top, MaxValue(),
            Color.White, Color.White,
            ProgressBarEvaluation.VisibleToValuesAndColor,
            Spectators.DefaultVisibility );
        progressHudEntity = LastTextID();
    }
    // get closest surviver to portal center
    closestPlayerToPortal = 
        FirstOf(
            SortedArray(
                FilteredArray(
                    AllPlayers(Team.Team1), IsAlive(ArrayElement())
                ),
                DistanceBetween(portalPosition, ArrayElement())
            )
        );
    // show big message
    BigMessage(
        closestPlayerToPortal,
        <"<0> <1> <2>", 
            closestPlayerToPortal,
            HeroIconString(HeroOf(closestPlayerToPortal)),
            "Closing portal... Stay inside and Survive!">);
    BigMessage(
        FilteredArray(AllPlayers(Team.Team1), (closestPlayerToPortal != ArrayElement())),
        <"<0> <1> <2>",    
            closestPlayerToPortal,
            HeroIconString(HeroOf(closestPlayerToPortal)),
            "Closing portal... Cover one!">);
    // Wait closingCount
    Wait(closingCount, WaitBehavior.AbortWhenFalse);
    portalState = PortalState.Closing;
}

rule: "Player/ClosePortal/updatePlayerNumInsidePortal"
Event.OngoingGlobal
if(
    enableClosingProgress
){
    playerNumInsidePortal = CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            ArrayElement().isInsidePortal
        )
    );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Player/ClosePortal/cancelClosing //on exit every player"
Event.OngoingGlobal
if(
    !enableClosingProgress
){
    StopChasingVariable(closingProgress);
    // wait hide hud when progress completed
    if(closingProgress == 100){
        Wait(1.5, WaitBehavior.AbortWhenFalse);
    }
    DestroyProgressBarHudText(progressHudEntity);
    progressHudEntity = null;
}

rule: "Player/ClosePortal/finishClose //on count down finished"
Event.OngoingGlobal
if(
    (
        portalState == PortalState.Closing ||
        portalState == PortalState.Closed
    ) &&
    teamLifes > 0
){
    // When the countdown is complete, clear the portal and give team lifes.
    // Later, we will generate a new portal and start the next round.
    WaitPlayEffect();   //wait portal closing effect
    portalState = PortalState.Closed;
    WaitNextPhase();

    BigMessage(AllPlayers(Team.All), "We got new team lifes!");
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.BuffImpactSound,
        Color.White, AllPlayers(Team.All), MaxLength()
    );
    teamLifes += 1;
    WaitNextPhase();

    PlayRandomVoiceLine(AllPlayers(Team.Team1));
    roundNo += 1;
    portalState = PortalState.Calculating;  // start next portal create
}

playervar define inPortalEffectEntitys;

rule: "Player/ClosePortal/showInsidePortalEffect //heavy fog and energy sound in the portal"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    isInsidePortal
){
    // When a player enters the portal, show purple smoke in the player view
    // To make it easier for players to understand that they are inside the portal and to create an atmosphere
    inPortalEffectEntitys = [];
    CreateEffect(EventPlayer(), Effect.EnergySound, Color.White,
        EventPlayer(), 30, EffectRev.VisibleToPositionAndRadius);
    inPortalEffectEntitys[0] = LastCreatedEntity();

    CreateEffect(EventPlayer(), Effect.Cloud, Color.Purple,
        EventPlayer(), 5, EffectRev.VisibleToPositionAndRadius);
    inPortalEffectEntitys[1] = LastCreatedEntity();

    CreateEffect(EventPlayer(), Effect.Cloud, Color.Purple,
        EventPlayer(), 10, EffectRev.VisibleToPositionAndRadius);
    inPortalEffectEntitys[2] = LastCreatedEntity();
}

rule: "Player/ClosePortal/hideInsidePortalEffect"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !isInsidePortal
){
    // When a player exits the portal, hide purple smoke in the player view
    DestroyEffect(inPortalEffectEntitys[0]);
    DestroyEffect(inPortalEffectEntitys[1]);
    DestroyEffect(inPortalEffectEntitys[2]);
}

rule: "Player/FairPlay/disableStealthWhenInside //sombra's stealth for fair play"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    isInsidePortal &&
    HeroOf() == Hero.Sombra &&
    IsUsingAbility1()
){
    // Some abilities are disabled inside the portal to make the game fair
    // Sombra stealth is exactly that
    Wait(5.0, WaitBehavior.AbortWhenFalse); // disable ability check cycle
    SetStatus(EventPlayer(), null, Status.Stunned, 0.1);
    SmallMessage(EventPlayer(), "Stealth disabled by magnetic storm of portal.");
    LoopIfConditionIsTrue();
}

rule: "Player/FairPlay/disableGrappleClawWhenInside // wreckingBball's grapple claw for fair play"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    isInsidePortal &&
    HeroOf() == Hero.WreckingBall &&
    IsFiringSecondary()
){
    // Some abilities are disabled inside the portal to make the game fair
    // WreckingBall Grapple is exactly that
    Wait(5.0, WaitBehavior.AbortWhenFalse); // disable ability check cycle
    SetStatus(EventPlayer(), null, Status.Stunned, 0.1);
    SmallMessage(EventPlayer(), "Grapple claw disabled by magnetic storm of portal.");
    LoopIfConditionIsTrue();
}

disabled rule: "Player/Communicate/playVoiceOnPortalSet"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    portalState == PortalState.Set
){
    WaitConditionConfirmed();
    if(RandomInteger(0, 1) == 0){
        Wait(RandomInteger(0, 2), WaitBehavior.IgnoreCondition);
        Communicate(EventPlayer(), Communication.Go);
    }
}

disabled rule: "Player/Communicate/playVoiceOnPortalGrowing"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    portalState == PortalState.Growing
){
    WaitConditionConfirmed();
    if(RandomInteger(0, 1) == 0){
        Wait(RandomInteger(0, 2), WaitBehavior.IgnoreCondition);
        Communicate(EventPlayer(), Communication.Attacking);
    }
}

disabled rule: "Player/Communicate/playVoiceOnPortalSuspended"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    portalState == PortalState.Suspended
){
    WaitConditionConfirmed();
    if(RandomInteger(0, 1) == 0){
        Wait(RandomInteger(0, 5), WaitBehavior.IgnoreCondition);
        if(isInsidePortal){
            if(NormalizedHealth() >= 0.5){
                Communicate(EventPlayer(), Communication.GroupUp);
            }
            else{
                Communicate(EventPlayer(), Communication.NeedHelp);
            }
        }
        else{
            Communicate(EventPlayer(), Communication.PushForward);
        }
    }
}

rule: "Player/Communicate/playVoiceOnPortalClosed"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    portalState == PortalState.Closed
){
    WaitConditionConfirmed();
    if(RandomInteger(0, 0) == 0){
        Wait(RandomInteger(0, 5), WaitBehavior.IgnoreCondition);
        PlayRandomVoiceLine(EventPlayer());
    }
}

// TAG Enemy Function ----------
playervar define enemyType;
enum EnemyType{
    NotSet,
    Minion,
    Elite,
    Boss
}

rule: "Enemy/Effect/setEnemyType"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    HasSpawned(EventPlayer())
){
    // Set enemy type by slot number
    switch(SlotOf(EventPlayer())){
        case 0:
            enemyType = EnemyType.Boss;
            break;
        case 1:
        case 2:
            enemyType = EnemyType.Elite;
            break;
        case 3:
        case 4:
        case 5:
            enemyType = EnemyType.Minion;
            break;
        default:
            break;
    }
}

rule: "Enemy/Effect/setEnemyParameter"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    enemyType != EnemyType.NotSet
){
    if(enemyType == EnemyType.Minion){ 
        // * 0.5
        maxSpawnInterval = 3;       // TAG maxSpawnInterval
        StartScalingPlayer(EventPlayer(), 1.0, false);
        StartModifyingHeroVoiceLines(EventPlayer(), 0.8, false);
        SetMaxHealth(EventPlayer(),         50);
    }
    else if(enemyType == EnemyType.Elite){
        // * 2.0
        maxSpawnInterval = 10;
        StartScalingPlayer(EventPlayer(), 1.3, false);
        StartModifyingHeroVoiceLines(EventPlayer(), 0.6, false);
        SetMaxHealth(EventPlayer(),         200);
    }
    else if(enemyType == EnemyType.Boss){
        // * 10.0
        maxSpawnInterval = 15;
        StartScalingPlayer(EventPlayer(), 1.6, false);
        StartModifyingHeroVoiceLines(EventPlayer(), 0.4, false);
        SetMaxHealth(EventPlayer(),         800);
    }
}

playervar define enemyAppearanceEntitys;

rule: "Enemy/Effect/showEnemyAppearance"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    enemyType != EnemyType.NotSet &&
    IsAlive()
){
    enemyAppearanceEntitys = [];
    if(enemyType == EnemyType.Minion){
        CreateEffect(AllPlayers(Team.All), Effect.Cloud, Color.Purple,
            EventPlayer(), 1.0, EffectRev.VisibleToPositionAndRadius);
        enemyAppearanceEntitys[0] = LastCreatedEntity();
        CreateInWorldText(
            AllPlayers(Team.All), "Minion", 
            EventPlayer(), 0.8, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.White, Spectators.DefaultVisibility);
        enemyAppearanceEntitys[1] = LastTextID();
    }
    else if(enemyType == EnemyType.Elite){
        CreateEffect(AllPlayers(Team.All), Effect.Cloud, Color.Purple,
            EventPlayer(), 2.0, EffectRev.VisibleToPositionAndRadius);
        enemyAppearanceEntitys[0] = LastCreatedEntity();
        CreateInWorldText(
            AllPlayers(Team.All), "Elite", 
            EventPlayer(), 1.4, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.Yellow, Spectators.DefaultVisibility);
        enemyAppearanceEntitys[1] = LastTextID();
    }
    else if(enemyType == EnemyType.Boss){
        CreateEffect(AllPlayers(Team.All), Effect.Cloud, Color.Purple,
            EventPlayer(), 4.0, EffectRev.VisibleToPositionAndRadius);
        enemyAppearanceEntitys[0] = LastCreatedEntity();
        CreateInWorldText(
            AllPlayers(Team.All), "Boss", 
            EventPlayer(), 2.0, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.Red, Spectators.DefaultVisibility);
        enemyAppearanceEntitys[1] = LastTextID();
    }
}

rule: "Enemy/Effect/hideEnemyAppearance"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    !IsAlive()
){
    DestroyEffect(enemyAppearanceEntitys[0]);
    DestroyInWorldText(enemyAppearanceEntitys[1]);
}

rule: "Enemy/Effect/playDeadEffect"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    IsDead()
){
    // Play blast effect when enemy dead
    // It's easier to understand if you killed an enemy, and you'll feel better
    if(enemyType == EnemyType.Minion){
        PlayContinuousBlast(PositionOf(), 2, 1, Color.Red);
    }
    else if(enemyType == EnemyType.Elite){
        PlayContinuousBlast(PositionOf(), 3, 2, Color.Red);
    }
    else if(enemyType == EnemyType.Boss){
        PlayContinuousBlast(PositionOf(), 5, 3, Color.Red);
    }
}

rule: "Enemy/RandomJump/jump"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    IsAlive()
){
    if(
        DistanceBetween(EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team1)) <= 10 &&
        !HasStatus(EventPlayer(), Status.Asleep) &&
        !HasStatus(EventPlayer(), Status.KnockedDown) &&
        !HasStatus(EventPlayer(), Status.Stunned) &&
        !HasStatus(EventPlayer(), Status.Frozen)
    ){
        ApplyImpulse(EventPlayer(),
            Vector(
                RandomReal(-1, 1),
                RandomReal( 1, 1),
                RandomReal(-1, 1)
            ),
            6, Relative.ToPlayer, ContraryMotion.Cancel);
    }
    Wait(RandomInteger(1, 4), WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

playervar define teleportBeamEntity;
playervar define teleportPosition;

void PlayTeleportBeam()"Subroutine/PlayTeleportBeam"{
    DestroyEffect(teleportBeamEntity);
    // show beam
    CreateBeamEffect(AllPlayers(Team.All), BeamType.BadBeam,
        EventPlayer(), teleportPosition,
        Color.Purple, EffectRev.VisibleToPositionAndRadius);
    teleportBeamEntity = LastCreatedEntity();
    // show beam effect
    WaitPlayEffect();
    // hide beam
    DestroyEffect(teleportBeamEntity);
}

define minSpawnAreaSize: 5;
define spawnAreaSizeRate: 1;
define spawnAreaSize:
    (portalSize * spawnAreaSizeRate) <= minSpawnAreaSize ?
    minSpawnAreaSize :
    (portalSize * spawnAreaSizeRate);

void SetTeleportPositionToBlindSpot()"Subroutine/SetTeleportPositionToBlindSpot"{
    // set teleport position by blind spot from player
    // find place that will be a blind spot up to 10 times
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        teleportPosition = NearestWalkablePosition(
            portalPosition + RandomPosition(
            spawnAreaSize,
            spawnAreaSize,
            spawnAreaSize
        ));
        if(
            DistanceBetween(    // Within the portal
                portalPosition, teleportPosition)
                <= (portalSize * spawnAreaSizeRate)
                    &&
            !IsInLineOfSight(   // Blind spot from the player 
                ClosestPlayerTo(EventPlayer(), Team.Team1),
                teleportPosition + Up(),
                BarrierLOS.NoBarriersBlock)
        ){
            break;
        }
    }
}

void SetTeleportPositionToCamper()"Subroutine/SetTeleportPositionToCamper"{
    // set teleport position by blind spot from player
    // find place that will be a blind spot up to 10 times
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        teleportPosition = ClosestPlayerTo(
            portalPosition, Team.Team1) +
            RandomPosition(1.5, 0, 1.5);
        if(
            IsInLineOfSight(    // Not buried in the wall
                ClosestPlayerTo(EventPlayer(), Team.Team1),
                teleportPosition + Up(),
                BarrierLOS.NoBarriersBlock)
                    &&
            !IsInViewAngle(    // Out of the player's field of view
                ClosestPlayerTo(EventPlayer(), Team.Team1),
                teleportPosition + Up(),
                90)
        ){
            break;
        }
    }
}

rule: "Enemy/Teleport/teleportToSpawnRoomByPortalDisabled"
Event.OngoingGlobal
if(
    initCompleted &&
    !portalEnable
){
    // Teleport Enemy to spawn room when portal disable
    Wait(1, WaitBehavior.AbortWhenFalse);   // wait show dead effect
    // Teleport to spawn room
    Respawn(AllPlayers(Team.Team2));
}

rule: "Enemy/Teleport/teleportToPortalByPortalEnabled"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    initCompleted &&
    portalEnable
){
    // Teleport Enemy to portal when spawn

    // set teleport position to blind spot from player
    SetTeleportPositionToBlindSpot();
    // Teleport
    Teleport(EventPlayer(), teleportPosition);
}

rule: "Enemy/Teleport/teleportToPortalBySpawn"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalEnable &&
    IsInSpawnRoom()
){
    // Teleport Enemy to portal when spawn

    // set teleport position to blind spot from player
    SetTeleportPositionToBlindSpot();
    // Teleport
    Teleport(EventPlayer(), teleportPosition);
}

rule: "Enemy/Teleport/teleportToPortalByPlayerEntered"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalState == PortalState.Suspended &&
    IsAlive(EventPlayer())
){
    WaitConditionConfirmed();
    if(
        DistanceBetween(EventPlayer(), portalPosition) > portalSize &&
        DistanceBetween(EventPlayer(), ClosestPlayerTo(portalPosition, Team.Team1)) >= 15
    ){
        // Teleport Enemy to portal when player enter to portal
        // To protect the portal with the enemy

        // set teleport position tp blind spot from player
        SetTeleportPositionToBlindSpot();
        // show teleport beam
        PlayTeleportBeam();
        // Teleport
        Teleport(EventPlayer(), teleportPosition);
    }
}

globalvar define camperDetectSecond;

rule: "Enemy/Teleport/teleportToPortalByCamperDetected"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalState == PortalState.Suspended &&
    IsAlive()
){
    if(
        !IsInLineOfSight(EventPlayer(),
            ClosestPlayerTo(portalPosition, Team.Team1),
            BarrierLOS.NoBarriersBlock)
    ){
        camperDetectSecond += 1;

    }
    else{
        camperDetectSecond = 0;
    }

    if(
        10 - (roundNo / 5) <= camperDetectSecond
    ){
        camperDetectSecond = 0;
        // TAG player not found timer
        // Teleport an enemy to camping player
        // set teleport position to camper
        SetTeleportPositionToCamper();
        // show teleport beam
        PlayTeleportBeam();
        // Teleport
        Teleport(EventPlayer(), teleportPosition);
    }
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Enemy/Standby/enable"
Event.OngoingGlobal
if(
    !portalEnable
){
    // Lock enemies when portal is disable so they can't leave the spawn room
    WaitConditionConfirmed();
    SetStatus(AllPlayers(Team.Team2), null, Status.Rooted, MaxValue());
}

rule: "Enemy/Standby/disable"
Event.OngoingGlobal
if(
    portalEnable
){
    // Release lock enemies when portal is enable
    WaitConditionConfirmed();
    ClearStatus(AllPlayers(Team.Team2), Status.Rooted);
}

globalvar define enemyReceivedDamageRate;

rule: "Enemy/ReceivedDamage/updateByBalance //for game balance, increase by missing players count"
Event.OngoingGlobal
{
    WaitUpdateLongCycle();
    // If don't enough players, adjust enemy received damage rate to make the game fair
    // Multiply damage rate
    enemyReceivedDamageRate = 100;
    // Apply balance multiplier
    enemyReceivedDamageRate *= ConvertToBalancedValue(0.8, Team.Team1);     // TAG enemy received damage scale
    SetDamageReceived(AllPlayers(Team.Team2), enemyReceivedDamageRate);
    LoopIfConditionIsTrue();
}

globalvar define enemyDealtDamageRate;

rule: "Enemy/DealtDamage/updateByBalance //for game progress, increase by round no, decrease by missing players count"
Event.OngoingGlobal
{
    WaitUpdateLongCycle();
    // If don't enough players, adjust enemy dealt damage rate to make the game fair
    // And the round progresses, the enemy deal damage increases and becomes more difficult
    // Add damage rate according to the round progress

    enemyDealtDamageRate = 20;  // basic enemy dealt damage
    enemyDealtDamageRate += roundNo * 1.5;  // TAG increase enemy dealt damage
    // Apply balance multiplier
    enemyDealtDamageRate /= ConvertToBalancedValue(0.6, Team.Team1);     // TAG enemy dealt damage scale
    SetDamageDealt(AllPlayers(Team.Team2), enemyDealtDamageRate);

    LoopIfConditionIsTrue();
}

define maxHiddenSpeed: 500;
globalvar define _EnemySpeedScale;
globalvar define enemyHiddenSpeedRate;
playervar define isHiddenSpeed;

rule: "Enemy/HiddenSpeed/updateByPortalSize //for round harder, increase by growing portal size"
Event.OngoingGlobal
if(
    portalState == PortalState.Growing
){
    WaitUpdateMediumCycle();
    // Increase enemy hidden speed depending on portal size
    // Portals that have grown significantly over time will send quickly more enemies.
    _EnemySpeedScale = portalSize;
    _EnemySpeedScale /= maxPortalSize;
    enemyHiddenSpeedRate = maxHiddenSpeed;
    enemyHiddenSpeedRate *= _EnemySpeedScale;
    enemyHiddenSpeedRate += 100;
    LoopIf(portalSize < maxPortalSize);
}

rule: "Enemy/HiddenSpeed/enableByGetOutOfSight //when not visible from players, quickly approach the player and hunt down"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalEnable &&
    IsAlive()
){
    // Hidden Speed is active when the player can't see the enemy
    if(
        !IsInLineOfSight(EventPlayer(),
            ClosestPlayerTo(EventPlayer(), Team.Team1),
            BarrierLOS.NoBarriersBlock)
    ){
        // Players are surrounded by many enemies, making the game more chaotic and fluid
        SetMoveSpeed(EventPlayer(), enemyHiddenSpeedRate);
        // The portal may growing and changing in size, so repeat speed changes
    }
    else{
        SetMoveSpeed(EventPlayer(), DefaultPercentage());
    }
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Enemy/HiddenSpeed/disableByGetInSight //when visible from players, fight at basic speed"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalEnable &&
    IsAlive() &&
    IsInLineOfSight(EventPlayer(),
        ClosestPlayerTo(EventPlayer(), Team.Team1),
        BarrierLOS.NoBarriersBlock
    )
){
    // Hidden Speed is deactive when the player can see the enemy
    // Enemies move at normal speed, making it easier for players to attack enemies
    Wait(0.1, WaitBehavior.AbortWhenFalse); // wait disable hidden speed
    SetMoveSpeed(EventPlayer(), 100);
}

playervar define maxSpawnInterval;
globalvar define _EnemySpawnScale;
playervar define enemySpawnInterval;

rule: "Enemy/SpawnInterval/updateByPortalSizeAndRoundNo //portal get bigger, interval get shorter and game getter harder"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalState == PortalState.Growing
){
    WaitUpdateMediumCycle();
    // Shortens enemy spawn interval depending on portal size
    // Portals that have grown significantly over time will spawn more enemies.
    _EnemySpawnScale = maxPortalSize;
    _EnemySpawnScale -= portalSize;
    _EnemySpawnScale /= maxPortalSize;

    enemySpawnInterval = maxSpawnInterval;
    enemySpawnInterval *= _EnemySpawnScale;// TAG enemy spawn interval

    enemySpawnInterval -= (roundNo / 6);
    if(0 > enemySpawnInterval){
        enemySpawnInterval = 0;
    }
    
    // set +1 enemySpawnInterval for show dead effect
    SetRespawnMaxTime(EventPlayer(), enemySpawnInterval + 1);
    LoopIf(portalSize < maxPortalSize);
}

rule: "Enemy/SpawnInterval/resetByPortalReset"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalState == PortalState.Set
){
    // Shortens enemy spawn interval depending on portal size
    enemySpawnInterval = maxSpawnInterval;
    SetRespawnMaxTime(EventPlayer(), enemySpawnInterval);
}

rule: "Enemy/SpawnInterval/respawnBySucide"
Event.OnDeath
Team.Team2
Player.All
if(
    Attacker() == EventPlayer()
){
    Wait(1, WaitBehavior.AbortWhenFalse);
    Respawn();
}

// TAG Portal Function ----------
globalvar define portalState;
enum PortalState{
    Idle,
    Calculating,
    Checking,
    Set,
    Growing,
    Suspended,
    Closing,
    Closed
}

globalvar define portalPosition;
globalvar define portalSize;
globalvar define portalEntitys;
globalvar define isFirstGrowing;

define portalEnable:
    portalState == PortalState.Checking ||
    portalState == PortalState.Set ||
    portalState == PortalState.Growing ||
    portalState == PortalState.Suspended;

rule: "Portal/State/Calculating //invisible, init param"
Event.OngoingGlobal
if(
    portalState == PortalState.Calculating
){
    // Hide Portal Entity until portal state changed to Show
    // Init param
    portalPosition = 0;
    portalSize = 0;
    StopChasingVariable(portalSize);
    enemyHiddenSpeedRate = 100;
    isFirstGrowing = true;
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
}

rule: "Portal/State/Set  // waiting for found by players"
Event.OngoingGlobal
if(
    portalState == PortalState.Set
){
    DestroyIcon(portalEntitys[0]);
    // show Portal Entity by portal state changed to Show
    // Init param
    closingCount = 0;
    // show icon
    portalEntitys = [];
    CreateIcon(AllPlayers(Team.All), portalPosition, Icon.Spiral,
        IconRev.VisibleToAndPosition, Color.Purple, true);
    portalEntitys[0] = LastCreatedEntity();
    // set effect
    // sphere
    CreateEffect(AllPlayers(Team.All), Effect.Sphere, Color.Purple,
        portalPosition, portalSize, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[1] = LastCreatedEntity();
    // cloud
    CreateEffect(AllPlayers(Team.All), Effect.Cloud, Color.Purple,
        portalPosition, portalSize * 1.5, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[2] = LastCreatedEntity();
    // aura
    // Since visibility will be poor, display only in the center of the field of view
    CreateEffect(
        FilteredArray(
            AllPlayers(Team.All),
            DistanceBetween(ArrayElement(), portalPosition) > portalSize / 2), Effect.BadAura, Color.Purple,
        portalPosition, portalSize * 1.25, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[3] = LastCreatedEntity();
    // sound
    CreateEffect(AllPlayers(Team.All), Effect.EnergySound, Color.Purple,
        portalPosition, portalSize / 2, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[4] = LastCreatedEntity();

    // show message
    BigMessage(AllPlayers(Team.All), "Detected more portal... find and attack it!");
    // Hide icon to let the player search the portal
    Wait(6, WaitBehavior.AbortWhenFalse);
    DestroyIcon(portalEntitys[0]);
}

rule: "Portal/State/Growing //start growing when found by players"
Event.OngoingGlobal
if(
    portalState == PortalState.Growing
){
    // Start growing portal with warning message
    UpdateEveryFrame(portalSize);
    ChaseVariableAtRate(
        portalSize, maxPortalSize, 1 + (roundNo / 5),   //TAG portal grow speed
        RateChaseReevaluation.DestinationAndRate);
    // If first growing, show message
    if(isFirstGrowing == true){
        isFirstGrowing = false;
        BigMessage(AllPlayers(Team.All), "Portal is growing... hurry up!");
        WaitBigMessageHide();
        BigMessage(AllPlayers(Team.All), "Growed portals spawn more enemys and get tough...");
    }
    // Hide icon to let the player search the portal
    Wait(1, WaitBehavior.AbortWhenFalse);
    DestroyIcon(portalEntitys[0]);
}

rule: "Portal/State/Suspended //when player entered, stop growing and count down start"
Event.OngoingGlobal
if(
    portalState == PortalState.Suspended
){
    // Hide icon to let the player search the portal
    DestroyIcon(portalEntitys[0]);
    // Stop growing portal
    StopChasingVariable(portalSize);
}

rule: "Portal/State/Closing //play closing effect"
Event.OngoingGlobal
if(
    portalState == PortalState.Closing
){
    // play portal closing effect and kill enemrys
    Kill(AllPlayers(Team.Team2), null);
    // play blast sound
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.RingExplosionSound,
        Color.White, AllPlayers(Team.All), MaxLength());
    // contraction portal
    UpdateEveryFrame(portalSize);
    ChaseVariableOverTime(portalSize, 0,
        0.65, TimeChaseReevaluation.DestinationAndDuration);
    // play blast effect
    PlayContinuousBlast(portalPosition, portalSize * 1.5,
        10, Color.Yellow);
}

rule: "Portal/State/Closed //waiting state after closing. another script displays the round end message and adds teamlifes"
Event.OngoingGlobal
if(
    portalState == PortalState.Closed
){
    // show message
    BigMessage(AllPlayers(Team.All), "Portal closed... good job!");
    // init param
    portalPosition = 0;
    portalSize = 0;
    StopChasingVariable(portalSize);
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
}

globalvar define spawnPosition1;
globalvar define spawnPosition2;
globalvar define centerPosition;
globalvar define createRange;
globalvar define candidatePosition;

rule: "Portal/Positioner/setSpawnPosition1 //a starting point for understanding the approximate center of the map"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    initCompleted &&
    spawnPosition1 == 0 &&
    !IsInSpawnRoom()
){
    WaitConditionConfirmed();
    // Set Team1's spawn points as spawnPosition1
    spawnPosition1 = PositionOf();
}

rule: "Portal/Positioner/setSpawnPosition2 //a starting point for understanding the approximate center of the map"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    initCompleted &&
    spawnPosition2 == 0 &&
    !IsInSpawnRoom()
){
    WaitConditionConfirmed();
    // Set Team2's spawn points as spawnPosition2
    spawnPosition2 = PositionOf();
}

rule: "Portal/Positioner/setCenterPosition //approximate center of the map. _set between two spawn position"
Event.OngoingGlobal
if(
    spawnPosition1 != 0 &&
    spawnPosition2 != 0
){
    // Set midway between two spawn points as centerPosition
    centerPosition = (spawnPosition1 + spawnPosition2) / 2;
}

rule: "Portal/Positioner/createRange //distance range from the center of the map that create portal"
Event.OngoingGlobal
if(
    centerPosition != 0
){
    // Set the range to generate portal based on the central position
    // Use a factor times the distance between two spawn points to cover the map
    createRange = DistanceBetween(spawnPosition1, spawnPosition2) * 1.0;   // TAG create range
}

globalvar define prevPortalPosition;

rule: "Portal/Positioner/createPortalInRange //repeat random positioning until close to map surface"
Event.OngoingGlobal
if(
    createRange != 0 &&
    portalState == PortalState.Calculating
){
    // Create portal in createRange
    // Get candidate position by random position within the create range from the center of the map
    // reduce coordinateY for will not select a different location than the player's location in control map
    // Repeat random position determination until within 15 meters of the map's walkable surface
    for(gLoopIndex = 0; gLoopIndex < 50; gLoopIndex++){
        candidatePosition = centerPosition + 
            RandomPosition(createRange, createRange / 4, createRange);
        if(
            DistanceBetween(    // Near the surface
                candidatePosition, NearestWalkablePosition(candidatePosition))
                <= 15
                    &&
            DistanceBetween(    // Somewhat far distance from prev position
                candidatePosition, prevPortalPosition)
                >= 100
                    &&
            DistanceBetween(    // Somewhat near distance from prev position
                candidatePosition, prevPortalPosition)
                <= 150
                    &&
            !IsInLineOfSight(   // Blind spot from the player 
                candidatePosition + PositionOffset(),
                ClosestPlayerTo(candidatePosition, Team.Team1),
                BarrierLOS.NoBarriersBlock)
        ){
            break;
        }
    }
    // change to walkable position
    portalPosition = NearestWalkablePosition(candidatePosition) + PositionOffset();
    // create portal, next check position
    portalState = PortalState.Checking;
}

define portalPositionCheckTime : 2.5;

rule: "Portal/Positioner/positionChecking"
Event.OngoingGlobal
if(
    portalState == PortalState.Checking
){
    // Waiting for Positioner/DetectXXX judgment described later
    Wait(portalPositionCheckTime, WaitBehavior.AbortWhenFalse);
    // save prev position
    prevPortalPosition = portalPosition;
    // confirm portal position
    portalState = PortalState.Set;
}

rule: "Portal/Positioner/resetCheckingParam"
Event.OngoingGlobal
if(
    !portalEnable
){
    contactHappened = false;
    sucideCount = 0;
    notContactTime = 0;
    stoppedCount = 0;
}

globalvar define sucideCount;

rule: "Portal/Positioner/DetectInvalidArea/countSuicide"
Event.OnDeath 
Team.Team2
Player.All
if(
    Attacker() == EventPlayer() &&
    portalState != PortalState.Suspended &&
    portalState != PortalState.Closing &&   // Excludes kills when the portal is closed
    sucideCount < (NumberOfPlayers(Team.Team2) / 2)
){
    // Count the number of enemy suicides caused by invalid areas
    // Player team spawn areas and instability at cliffs, etc.
    sucideCount ++;
}

rule: "Portal/Positioner/DetectInvalidArea/reduceCount"
Event.OngoingGlobal
if(
    sucideCount > 0
){
    // Reduce coutn for avoid over detection
    Wait(1, WaitBehavior.AbortWhenFalse);   // wait reduce sucide count
    sucideCount --;
    LoopIfConditionIsTrue();
}

rule: "Portal/Positioner/DetectInvalidArea/resetPortal"
Event.OngoingGlobal
if(
    sucideCount >= (NumberOfPlayers(Team.Team2) / 2)
){
    // If the suicide count reaches 0,
    //  it is determined that the portal position is incorrect and the portal is recreate
    dbgMsg("reset Portal by Detect Invalid Area");
    portalState = PortalState.Calculating;
}

globalvar define stoppedCount;

rule: "Portal/Positioner/DetectClosedArea/countStopped"
Event.OngoingGlobal
if(
    portalState == PortalState.Checking
){
    // Count the number of not moving enemy caused by closed areas
    // non activated respawn room, etc.
    stoppedCount =
        CountOf(
            FilteredArray(
                AllPlayers(Team.Team2),
                (
                    IsAlive(ArrayElement()) &&
                    !IsMoving(ArrayElement())
                )
            )
        );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Portal/Positioner/DetectClosedArea/resetPortal"
Event.OngoingGlobal
if(
    portalState == PortalState.Checking &&
    stoppedCount >= (NumberOfPlayers(Team.Team2) / 2)
){
    // If the portal position is in the cloased area,
    //  it is determined that the portal position is incorrect and the portal is recreate
    Wait(portalPositionCheckTime - 0.1, WaitBehavior.AbortWhenFalse);
    dbgMsg("reset Portal by Detect Closed Area");
    portalState = PortalState.Calculating;
}

rule: "Portal/Positioner/DetectSpawnArea/resetPortal"
Event.OngoingGlobal
if(
    portalState == PortalState.Checking &&
    IsInSpawnRoom(ClosestPlayerTo(portalPosition, Team.Team2))
){
    // If the portal position is in the enemy spawn area,
    //  it is determined that the portal position is incorrect and the portal is recreate
    Wait(portalPositionCheckTime - 0.1, WaitBehavior.AbortWhenFalse);   // wait teleport to portal
    dbgMsg("reset Portal by Detect Spawn Area");
    portalState = PortalState.Calculating;
}

define notContactTimeLimit: (portalStableTime - 1);
globalvar define notContactTime;
globalvar define contactHappened;

rule: "Portal/Positioner/DetectRemoteArea/countTime"
Event.OngoingGlobal
if(
    portalEnable &&
    !contactHappened
){
    // start count
    Wait(1, WaitBehavior.AbortWhenFalse);
    notContactTime ++;
    LoopIfConditionIsTrue();
}

rule: "Portal/Positioner/DetectRemoteArea/stopTimer"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalEnable &&
    IsInLineOfSight(EventPlayer(),
        ClosestPlayerTo(EventPlayer(), Team.Team1),
        BarrierLOS.NoBarriersBlock
    )
){
    // If the player and enemy have been met, stop count
    WaitConditionConfirmed();
    contactHappened = true;
}

rule: "Portal/Positioner/DetectRemoteArea/resetPortal"
Event.OngoingGlobal
if(
    notContactTime >= notContactTimeLimit
){
    // If the player and enemy haven't been met for some time,
    //  it is determined that the portal position is incorrect and the portal is recreate
    dbgMsg("reset Portal by Detect Remote Area");
    portalState = PortalState.Calculating;
}

define maxPortalSize: 70;
define portalStableTime: 40;

rule: "Portal/Growing/startGrowingByPlayerFound"
Event.OngoingGlobal
if(
    portalState == PortalState.Set
){
    if(
        IsInLineOfSight(portalPosition,
            ClosestPlayerTo(portalPosition, Team.Team1),
            BarrierLOS.NoBarriersBlock)
    ){
        WaitConditionConfirmed();
        // Strat portal growing by player found
        portalState = PortalState.Growing;
    }
    else{
        WaitUpdateMediumCycle();
        LoopIfConditionIsTrue();
    }
}

rule: "Portal/Growing/startGrowingByTimeout"
Event.OngoingGlobal
if(portalState == PortalState.Set){
    // Start portal growing by search time limit out
    Wait(portalStableTime, WaitBehavior.AbortWhenFalse);  //wait time to start growing
    portalState = PortalState.Growing;
}

rule: "Portal/Growing/suspendGrowingByPlayerEntered"
Event.OngoingGlobal
if(
    portalState == PortalState.Growing &&
    IsTrueForAny(
        AllPlayers(Team.Team1), ArrayElement().isInsidePortal
    )
){
    // Suspend portal growing by player enter to portal
    WaitConditionConfirmed();
    portalState = PortalState.Suspended;
}

rule: "Portal/Growing/resumeGrowingByPlayerExited"
Event.OngoingGlobal
if(
    portalState == PortalState.Suspended &&
    !IsTrueForAny(
        AllPlayers(Team.Team1), ArrayElement().isInsidePortal
    )
){
    // Resume portal growing by player exit from portal
    WaitConditionConfirmed();
    portalState = PortalState.Growing;
}

// TAG Debug ----------
// debugmode
globalvar define debugMode;
globalvar define isRecording;

enum DebugMode{
    Non,
    SHOW_PARAM,
    WITH_RECORD
}

rule: "Debug/changeDebugMode"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Jump) 
){
    // change debug mode
    WaitLongPressConfirm();
    if(debugMode == DebugMode.Non){
        debugMode = DebugMode.SHOW_PARAM;
        ShowDebugHud();
    }
    else if(debugMode == DebugMode.SHOW_PARAM){
        debugMode = DebugMode.WITH_RECORD;
        EnableInspectorRecording();
        isRecording = true;
        HideDebugHud();
        ShowDebugHud();
    }
    else if(debugMode == DebugMode.WITH_RECORD){
        debugMode = DebugMode.Non;
        DisableInspectorRecording();
        isRecording = false;
        HideDebugHud();
    }
}

define Last: CountOf(debugHudEntitys);
globalvar define debugHudEntitys;

// show debug icon and hud
void ShowDebugHud()"Subroutine/ShowDebugHud"{

    if(isRecording){
        CreateHudText(HostPlayer(),
            null,
            null,
            "● is Recording",
            Location.Left, -1,
            Color.White, Color.White, Color.Red,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[Last] = LastTextID();
    }

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "player Regeneration Rate", Regeneration_regenerationRateTeam1>,
        null,
        Location.Left, -1,
        Color.White, Color.Blue, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "enemy Spawn Interval (boss)", PlayersInSlot(0, Team.Team2).enemySpawnInterval>,
        null,
        Location.Left, -1,
        Color.White, Color.Red, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "enemy Spawn Interval (elite)", PlayersInSlot(1, Team.Team2).enemySpawnInterval>,
        null,
        Location.Left, -1,
        Color.White, Color.Red, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "enemy Spawn Interval (minion)", PlayersInSlot(3, Team.Team2).enemySpawnInterval>,
        null,
        Location.Left, -1,
        Color.White, Color.Red, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "enemy Hidden Speed Rate", enemyHiddenSpeedRate>,
        null,
        Location.Left, -1,
        Color.White, Color.Red, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "enemy Dealt Damage Rate", enemyDealtDamageRate>,
        null,
        Location.Left, -1,
        Color.White, Color.Red, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "enemy Received Damage Rate", enemyReceivedDamageRate>,
        null,
        Location.Left, -1,
        Color.White, Color.Red, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "portal State", portalState>,
        null,
        Location.Left, -1,
        Color.White, Color.Purple, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "portal Size", portalSize>,
        null,
        Location.Left, -1,
        Color.White, Color.Purple, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "portal Position", portalPosition>,
        null,
        Location.Left, -1,
        Color.White, Color.Purple, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "distance to protal", DistanceBetween(EventPlayer(), portalPosition)>,
        null,
        Location.Left, -1,
        Color.White, Color.Purple, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "sucide Count", sucideCount>,
        null,
        Location.Left, -1,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "not Contact Time", notContactTime>,
        null,
        Location.Left, -1,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "stopped Count", stoppedCount>,
        null,
        Location.Left, -1,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "contact Happened", contactHappened>,
        null,
        Location.Left, -1,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "perk Effect Status", perkEffectStatus>,
        null,
        Location.Left, -1,
        Color.White, Color.Turquoise, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "perk Targets", perkTargets>,
        null,
        Location.Left, -1,
        Color.White, Color.Turquoise, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "perk Position", perkPosition>,
        null,
        Location.Left, -1,
        Color.White, Color.Turquoise, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load", ServerLoad()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load Average", ServerLoadAverage()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "Server Load Peak", ServerLoadPeak()>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "over load Second", overloadSecond>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[Last] = LastTextID();
}

// Hide debug icon and hud
void HideDebugHud()"Subroutine/HideDebugHud"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(debugHudEntitys); gLoopIndex ++){
        DestroyHudText(debugHudEntitys[gLoopIndex]);
    }
}

rule: "Debug/increaseTeamLifes"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    // Increase TeamLifes
    WaitLongPressConfirm();
    teamLifes += 1;
    LoopIfConditionIsTrue();
}

rule: "Debug/increaseRoundNo"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    // Increase RoundNo
    WaitLongPressConfirm();
    roundNo += 1;
    LoopIfConditionIsTrue();
}

rule: "Debug/resetPortal // reset portal position by random"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    !IsButtonHeld(EventPlayer(), Button.Reload) &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    // Recalculate portal
    WaitLongPressConfirm();
    portalState = PortalState.Idle;
    Wait(0.5, WaitBehavior.IgnoreCondition);  // Wait for the changed status to be processed first
    portalState = PortalState.Calculating;
}

globalvar define debugAimingPosition;

rule: "Debug/setPortalPositionOnAimCenter // reset portal position by aim center"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Reload) &&
    !IsButtonHeld(EventPlayer(), Button.Crouch)
){
    // Set portal position to aim center
    WaitLongPressConfirm();
    portalState = PortalState.Idle;
    debugAimingPosition = AimingPosition();
    Wait(0.5, WaitBehavior.IgnoreCondition);  // Wait for the changed status to be processed first
    portalState = PortalState.Calculating;
    while(portalState == PortalState.Calculating){Wait(0.1, WaitBehavior.IgnoreCondition);}
    portalPosition = debugAimingPosition;
    Respawn(AllPlayers(Team.Team2));
}

rule: "Debug/setPortalMaxSize"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Reload) &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    // Set portal position to aim center
    WaitLongPressConfirm();
    portalSize = maxPortalSize;
    enemyHiddenSpeedRate = maxHiddenSpeed;
    SetMoveSpeed(AllPlayers(Team.Team2), enemyHiddenSpeedRate);
    AllPlayers(Team.Team2).enemySpawnInterval = 0;
    SetRespawnMaxTime(AllPlayers(Team.Team2), 1);
}
