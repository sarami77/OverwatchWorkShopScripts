// [Detail]
// [Portal Hunt -HORDE PVE]
// -The evil portal has been opened…
// -Defeat enemie horde that spawn from portal and close it!
// -When you enter portal, count until closing starts. Survive to 0.
// -Over time, portal begin to grow. Grown portal spawn more enemie and get tough.
// -Survive using PERK dropped by the enemy. PERK has convenient buffs, new weapon, powerful custom heroes.
// -[Grappling beam] [Cruise missile] [Legendary ninja] and more than 25 types!
// -Unlimited rounds. How many rounds can your team survive?
// [Share Code]
// YY1N2
// [ToDo]
// add optimaze hit scan by close range of Beam Sniaper
// add Perk Disarmament
// add Perk Drone Guard Dog
// add Perk Assassination

import "Lib/ElapsedTimer.ostw";
import "Lib/DamageText.ostw";
import "Lib/Regeneration.ostw";
import "Lib/Revive.ostw";
import "Lib/Perk.ostw";
// import "Lib/Bot.ostw";
import "Lib/Debug.ostw";
// import "Lib/InvisibleImmortalForDebug.ostw";

// TAG Signature and infomation ----------
disabled rule: "PORTAL HUNT -HORDE PVE [ver 3.0] Share code [YY1N2]"-1{}
disabled rule: "You allowed copy or modify code."-1{}
disabled rule: "This script was generated from source code by [Overwatch-Script-To-Workshop]"-1{}
disabled rule: "Check detail with https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"-1{}
disabled rule: "Original source code was created by [sarami77#1868]"-1{}
disabled rule: "Check detail with https://github.com/sarami77/OverwatchWorkShopScripts"-1{}

// TAG System ----------
define enableOverLoadMeasures: true;
define overloadDuringLimit: 5;
globalvar define overloadDuring;

rule: "System/ServerOverLoadMeasures"
Event.OngoingGlobal
if(
    enableOverLoadMeasures &&
    teamLifes > 0
){
    // If the server is overloaded,
    //  apply slow motion every second to reduce the load to
    //  avoid shutting down due to server overload.
   
    // Because the value of ServerLoad () changes frequently
    //  Do not bind it to a "condition" and monitor it by polling every second.
    if(255 <= ServerLoadAverage()){
        if(overloadDuringLimit > overloadDuring){
            overloadDuring ++;
        }
    }
    else{
        if(0 < overloadDuring){
            overloadDuring --;
        }
    }

    if(overloadDuring == 0){
        SetSlowMotion(100);
    }
    else if(overloadDuring == 1){
        SetSlowMotion(90);
    }
    else if(overloadDuring == 2){
        SetSlowMotion(80);
    }
    else if(overloadDuring == 3){
        SetSlowMotion(70);
    }
    else if(overloadDuring == 4){
        SetSlowMotion(60);
    }
    else if(overloadDuring == 5){
        SetSlowMotion(25);
    }

    Wait(1, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}

// TAG Game Function ----------
globalvar define initCompleted;

rule: "Game/initGameSetting //wait 3 _seconds because some scripts fail immediately after loading the _server"
Event.OngoingGlobal
{
    // Stop records to reduce server load
    DisableInspectorRecording();

    // for perfomance debug
//    CreateHudText(HostPlayer(),
//        null,
//        <"<0> <1>", "over load during", overloadDuring>,
//        null,
//        Location.Left, -1,
//        Color.White, Color.Orange, Color.White,
//        HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    // Set imported function property
    Regeneration_enableTeam = Team.Team1;
    Regeneration_needBalanceTeam1 = true;
    Regeneration_waitRegenTimeTeam1 = WorkshopSettingReal("Player Settings", "Wait Second Until Start Regeneration", 1, 0, 100, 1);
    Regeneration_regenerationRateTeam1 = WorkshopSettingReal("Player Settings", "Regeneration Rate In Per Seconds", 25, 0, 1000, 2);

    Revive_enableTeam = Team.Team1;
    Revive_timeLimit = WorkshopSettingReal("Player Settings", "Revive Time Limit", 10, 0, 100, 3);
    
    DamageText_enableTeam = Team.Team2;

    // If run it right after loading the server, some scripts fail, so wait 3 seconds
    Wait(3, WaitBehavior.AbortWhenFalse);

    // Cancel unnecessary default settings
    PauseMatchTime();
    DisableScoring();
    DisableGameModeInworldUI(AllPlayers());
    DisableCompletion();

    // Calculate the approximate center position of the map from the spawn room position.
    // Therefore, change the spawn room and then spawn the entity.
    ForceSpawnRoom(Team.Team1, 2);
    Respawn(AllPlayers(Team.All));

    // WARNING
    // If you set setMatchTime right after the game starts, the server becomes unstable and ReturnToLobby and Restart stop working.
    // StartElapsedTimer should be true after a delay of about 3 seconds.
    startElapsedTimer = true;
    
    // Notify completion of init game setting and start game main logic
    initCompleted = true;
}

rule: "Game/startGame"
Event.OngoingGlobal
if(
    initCompleted &&
    NumberOfPlayers(Team.Team1) > 0
){
    WaitConditionConfirmed();
    teamLifes = initialTeamLifes;
    elapsedTime = 0;
    roundNo = 0;
    portalState = PortalState.Calculating;
}

rule: "Game/stopGame"
Event.OngoingGlobal
if(
    initCompleted &&
    NumberOfPlayers(Team.Team1) <= 0
){
    WaitConditionConfirmed();
    portalState = PortalState.Idle;
}

rule: "Game/ShareCode/showGameCode"
Event.OngoingGlobal
{
    // show ver and share code
    CreateHudText(AllPlayers(Team.Team1),
        null, "PORTAL HUNT -HORDE PVE [ver 3.0] Share code [YY1N2]", null,
        Location.Left, -3,
        Color.White, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Game/RoundNo/showObjectMessageHUD //with update message by state"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    initCompleted
){
    SetObjectiveDescription(EventPlayer(), "Find portal and attack it.", HudTextRev.String);
}

define enemyColor: Color.Purple;
globalvar define roundNo;

rule: "Game/RoundNo/showRoundHUD"
Event.OngoingGlobal
if(
    initCompleted
){
    // show HUD of round number
    CreateHudText(AllPlayers(Team.All),
        <"<0> <1>", "Round", roundNo>, null, null,
        Location.Top, 2,
        enemyColor, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
}

rule: "Game/SpawnRoom/changeByTimer //to make the game fluid"
Event.OngoingGlobal
if(
    initCompleted
){
    // Change the spawn room regularly to keep the game fluid
    Wait(300, WaitBehavior.AbortWhenFalse); // change spawn room
    ForceSpawnRoom(Team.Team2, RandomInteger(0, 2));
    ForceSpawnRoom(Team.Team1, RandomInteger(0, 2));
    LoopIfConditionIsTrue();
}

// TAG Player Function ----------
playervar define isInsidePortal;

rule: "Player/InsidePortal/update"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    HasSpawned()
){
    // Set flag when player entered to portal
    // This flag is used for functions related to portal
    if(
        portalEnable &&
        IsAlive() &&
        !IsInSpawnRoom() &&
        DistanceBetween(EventPlayer(), portalPosition) <= portalSize
    ){
        isInsidePortal = true;
    }
    else{
        isInsidePortal = false;
    }
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Player/ReturnSpawn/showOperationHUD"
Event.OngoingGlobal
{
    // show HUD of hero change operation
    CreateHudText(AllPlayers(Team.Team1),
        null, <"Long hold reload button <0> to change hero", ButtonGuide(Button.Reload)>, null,
        Location.Left, -2,
        Color.Yellow, Color.Yellow, Color.Yellow,
        HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

rule: "Player/ReturnSpawn/returnSpawn"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    !IsInSpawnRoom() &&
    IsButtonHeld(EventPlayer(), Button.Reload)
){
    // Return to spawn room with long hold on reload button
    WaitCancelPressConfirm();
    Respawn();
}

globalvar define initialTeamLifes;
globalvar define teamLifes;

rule: "Player/TeamLifes/initalCount"
Event.OngoingGlobal
{
    // Set initial team lifes
    initialTeamLifes = WorkshopSettingInteger("Player Settings", "Initial Team Lifes", 6, 0, 100, 0);
    teamLifes = initialTeamLifes;
}

rule: "Player/TeamLifes/showTeamLifesHUD"
Event.OngoingGlobal
{
    // show HUD of team lifes
    CreateHudText(AllPlayers(Team.All),
        <"<0> <1>", "Team lifes", teamLifes>, null, null,
        Location.Top, 1,
        Color.Team1, Color.White, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
}

rule: "Player/TeamLifes/consumeTeamLifes"
Event.OngoingGlobal
if(
    0 < reviveTimeoutCount
){
    WaitConditionConfirmed();
    teamLifes -= reviveTimeoutCount;
    WaitChangeState();  // wait for show big message by newest value
    if(teamLifes > 0){
        if(teamLifes > 0){
            BigMessage(AllPlayers(Team.All),
                <"<0> <1> <2>", "Our remaining team lifes is", teamLifes, "...">);
        }
        PlayEffect(
            AllPlayers(Team.All), PlayEffect.DebuffImpactSound,
            Color.White, portalPosition, MaxLength());
    }
    reviveTimeoutCount = 0;
}

rule: "Player/TeamLifes/finishGame //by team lifes out"
Event.OngoingGlobal
if(
    teamLifes <= 0
){
    // When the team lifes out, the game ends
    portalState = PortalState.End;
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.RingExplosionSound,
        Color.White, portalPosition, MaxLength());
    BigMessage(AllPlayers(Team.All), "Our team lifes is out...");
    SetSlowMotion(10);
    Wait(1, WaitBehavior.AbortWhenFalse);   // show slow
    SetSlowMotion(100);
    WaitNextPhase();

    BigMessage(AllPlayers(Team.All),
        <"We have reached <0> round... good game!", roundNo>);
    PlayRandomEmote(AllPlayers(Team.Team1));
    WaitNextPhase();

    DeclareTeamVictory(Team.Team1);
}

rule: "Player/TeamLifes/protectTeamLifesFromSucide"
Event.OnDeath
Team.Team1
Player.All
if(
    Attacker() == EventPlayer() &&
    DistanceBetween(EventPlayer(),
        ClosestPlayerTo(EventPlayer(), Team.Team2)) > 15
){
    Wait(1, WaitBehavior.AbortWhenFalse);
    Respawn();
}

globalvar define closingCount;
globalvar define closingProgress;
globalvar define closestPlayerToPortal;
globalvar define closingProgressHudEntity;
globalvar define playerNumInsidePortal;

define enableClosingProgress:
    portalState == PortalState.Suspended &&
    teamLifes > 0;

rule: "Player/ClosePortal/startClosing //on enter any player"
Event.OngoingGlobal
if(
    enableClosingProgress
){
    // When a player enters a portal, set progress hud and show message
    WaitConditionConfirmed();
    // kick progress
    closingCount = RoundToInteger(portalSize, Rounding.Nearest);
    closingCount += roundNo * 2;
    closingProgress = 0;
    ChaseVariableOverTime(closingProgress, DefaultPercentage(), closingCount, TimeChaseReevaluation.DestinationAndDuration);
    // show progress hud
    if(closingProgressHudEntity == null){
        CreateProgressBarHudText(
            AllPlayers(),
            closingProgress,
            <"<0> player has surviving in portal. Until portal closes...", playerNumInsidePortal >,
            Location.Top, 3,
            Color.White,
            Color.White,
            ProgressBarEvaluation.VisibleToValuesAndColor,
            Spectators.DefaultVisibility );
        closingProgressHudEntity = LastTextID();
    }
    // get closest surviver to portal center
    closestPlayerToPortal = 
        FirstOf(
            SortedArray(
                FilteredArray(
                    AllPlayers(Team.Team1), IsAlive(ArrayElement())
                ),
                DistanceBetween(portalPosition, ArrayElement())
            )
        );
    // show big message
    BigMessage(
        closestPlayerToPortal,
        <"You are closing portal... Stay inside and Survive!">);
    BigMessage(
        FilteredArray(AllPlayers(Team.Team1), (closestPlayerToPortal != ArrayElement())),
        <"<0> <1> <2>",
            closestPlayerToPortal,
            HeroIconString(HeroOf(closestPlayerToPortal)),
            "closing portal... Cover one!">);
    // Wait closingCount
    Wait(closingCount, WaitBehavior.AbortWhenFalse);
    portalState = PortalState.Closing;
}

rule: "Player/ClosePortal/updatePlayerNumInsidePortal"
Event.OngoingGlobal
if(
    enableClosingProgress
){
    playerNumInsidePortal = CountOf(
        FilteredArray(
            AllPlayers(Team.Team1),
            ArrayElement().isInsidePortal
        )
    );
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

rule: "Player/ClosePortal/cancelClosing //on exit every player"
Event.OngoingGlobal
if(
    !enableClosingProgress
){
    StopChasingVariable(closingProgress);
    // wait hide hud when progress completed
    if(closingProgress == 100){
        Wait(1.5, WaitBehavior.AbortWhenFalse);
    }
    DestroyProgressBarHudText(closingProgressHudEntity);
    closingProgressHudEntity = null;
}

rule: "Player/ClosePortal/finishClose //on count down finished"
Event.OngoingGlobal
if(
    (
        portalState == PortalState.Closing ||
        portalState == PortalState.Closed
    ) &&
    teamLifes > 0
){
    // When the countdown is complete, clear the portal and give team lifes.
    // Later, we will generate a new portal and start the next round.
    WaitPlayEffect();   //wait portal closing effect
    portalState = PortalState.Closed;
    WaitNextPhase();

    BigMessage(AllPlayers(Team.All), "We got new team lifes!");
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.BuffImpactSound,
        Color.White, portalPosition, MaxLength()
    );
    teamLifes += 1;
    WaitNextPhase();

    PlayRandomVoiceLine(AllPlayers(Team.Team1));
    roundNo += 1;
    portalState = PortalState.Calculating;  // start next portal create
}

playervar define inPortalEffectEntitys;

disabled rule: "Player/ClosePortal/hideInsidePortalEffect"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    !isInsidePortal
){
    // When a player exits the portal, hide smoke in the player view
    DestroyEffect(inPortalEffectEntitys[0]);
    DestroyEffect(inPortalEffectEntitys[1]);
}

rule: "Player/FairPlay/disableStealthWhenInside //sombra's stealth for fair play"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    isInsidePortal &&
    HeroOf() == Hero.Sombra &&
    IsUsingAbility1()
){
    // Some abilities are disabled inside the portal to make the game fair
    // Sombra stealth is exactly that
    Wait(5.0, WaitBehavior.AbortWhenFalse); // disable ability check cycle
    SetStatus(EventPlayer(), null, Status.Stunned, 0.1);
    SmallMessage(EventPlayer(), "Stealth disabled by magnetic storm of portal.");
    LoopIfConditionIsTrue();
}

rule: "Player/FairPlay/disableGrappleClawWhenInside // wreckingBball's grapple claw for fair play"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    isInsidePortal &&
    HeroOf() == Hero.WreckingBall &&
    IsFiringSecondary()
){
    // Some abilities are disabled inside the portal to make the game fair
    // WreckingBall Grapple is exactly that
    Wait(5.0, WaitBehavior.AbortWhenFalse); // disable ability check cycle
    SetStatus(EventPlayer(), null, Status.Stunned, 0.1);
    SmallMessage(EventPlayer(), "Grapple claw disabled by magnetic storm of portal.");
    LoopIfConditionIsTrue();
}

disabled rule: "Player/Communicate/playVoiceOnPortalSet"
Event.OngoingPlayer
Team.Team1
Player.All
if(
    IsAlive() &&
    portalState == PortalState.Set
){
    WaitConditionConfirmed();
    if(RandomInteger(0, 1) == 0){
        Wait(RandomInteger(0, 2), WaitBehavior.IgnoreCondition);
        Communicate(EventPlayer(), Communication.Go);
    }
}




// TAG Portal Function ----------
globalvar define portalState;
enum PortalState{
    Idle,
    Calculating,
    Checking,
    Set,
    Growing,
    Suspended,
    Closing,
    Closed,
    End
}

globalvar define portalPosition;
globalvar define portalSize;
globalvar define portalEntitys;
globalvar define isFirstGrowing;

define portalEnable:
    portalState == PortalState.Checking ||
    portalState == PortalState.Set ||
    portalState == PortalState.Growing ||
    portalState == PortalState.Suspended;

rule: "Portal/State/Calculating //invisible, init param"
Event.OngoingGlobal
if(
    portalState == PortalState.Calculating
){
    // Hide Portal Entity until portal state changed to Show
    // Init param
    StopChasingVariable(portalSize);
    portalPosition = 0;
    portalSize = 0;
    isFirstGrowing = true;
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
    // destroy all bot
    //DestroyAllBot();
}

rule: "Portal/State/Set  // waiting for found by players"
Event.OngoingGlobal
if(
    portalState == PortalState.Set
){
    DestroyIcon(portalEntitys[0]);
    // show Portal Entity by portal state changed to Show
    // Init param
    closingCount = 0;
    // show icon
    portalEntitys = [];
    CreateIcon(AllPlayers(Team.All), portalPosition, Icon.Spiral,
        IconRev.VisibleToAndPosition, enemyColor, true);
    portalEntitys[0] = LastCreatedEntity();
    // set effect
    // sphere
    CreateEffect(AllPlayers(Team.All), Effect.Sphere, enemyColor,
        portalPosition, portalSize, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[1] = LastCreatedEntity();
    // cloud
    CreateEffect(AllPlayers(Team.All), Effect.Cloud, enemyColor,
        portalPosition, portalSize * 1.5, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[2] = LastCreatedEntity();
    // aura
    // Since visibility will be poor, display only in the center of the field of view
    CreateEffect(
        FilteredArray(
            AllPlayers(Team.All),
            DistanceBetween(ArrayElement(), portalPosition) > portalSize / 2), Effect.BadAura, enemyColor,
        portalPosition, portalSize * 1.25, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[3] = LastCreatedEntity();
    // sound
    CreateEffect(AllPlayers(Team.All), Effect.EnergySound, enemyColor,
        portalPosition, portalSize / 2, EffectRev.VisibleToPositionAndRadius);
    portalEntitys[4] = LastCreatedEntity();
    // show message
    BigMessage(AllPlayers(Team.All), "Detected more portal... find and attack it!");
    // create all bot
    //CreateAllBotByAsset();
    // Hide icon to let the player search the portal
    Wait(6, WaitBehavior.AbortWhenFalse);
    DestroyIcon(portalEntitys[0]);
}

rule: "Portal/State/Growing"
Event.OngoingGlobal
if(
    portalState == PortalState.Growing
){
    // Start growing portal with warning message
    ChaseVariableAtRate(
        portalSize, maxPortalSize, 1 + (roundNo / 8),
        RateChaseReevaluation.DestinationAndRate);
    // If first growing, show message
    if(isFirstGrowing == true){
        isFirstGrowing = false;
        BigMessage(AllPlayers(Team.All), "Portal is growing... hurry up!");
        WaitBigMessageHide();
        BigMessage(AllPlayers(Team.All), "Growed portals spawn more enemys and get tough...");
    }
    // Hide icon to let the player search the portal
    Wait(1, WaitBehavior.AbortWhenFalse);
    DestroyIcon(portalEntitys[0]);
}

rule: "Portal/State/Suspended"
Event.OngoingGlobal
if(
    portalState == PortalState.Suspended
){
    // Hide icon to let the player search the portal
    DestroyIcon(portalEntitys[0]);
    // Stop growing portal
    StopChasingVariable(portalSize);
}

rule: "Portal/State/Closing"
Event.OngoingGlobal
if(
    portalState == PortalState.Closing
){
    // apply blast impulse
    ApplyBlastImpulse(AllPlayers(Team.Team2), portalPosition, portalSize);
    // play portal closing effect and kill enemrys
    Kill(AllPlayers(Team.Team2), null);
    // play blast sound
    PlayEffect(
        AllPlayers(Team.All), PlayEffect.RingExplosionSound,
        Color.White, portalPosition, MaxLength());
    // play blast effect
    PlayContinuousBlast(
        Color.Yellow,
        portalPosition,
        portalSize * 1.5,
        10);
}

rule: "Portal/State/Closed"
Event.OngoingGlobal
if(
    portalState == PortalState.Closed
){
    // show message
    BigMessage(AllPlayers(Team.All), "Portal closed... good job!");
    // init param
    portalPosition = 0;
    portalSize = 0;
    StopChasingVariable(portalSize);
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
    // destroy all bot
    Wait(3, WaitBehavior.IgnoreCondition);
    //DestroyAllBot();
}

rule: "Portal/State/End"
Event.OngoingGlobal
if(
    portalState == PortalState.End
){
    // play blast effect
    PlayContinuousBlast(
        Color.Yellow,
        portalPosition,
        portalSize * 1.5,
        10);
    // init param
    portalPosition = 0;
    portalSize = 0;
    StopChasingVariable(portalSize);
    // Hide portal icon and effect
    DestroyIcon(portalEntitys[0]);
    DestroyEffect(portalEntitys[1]);
    DestroyEffect(portalEntitys[2]);
    DestroyEffect(portalEntitys[3]);
    DestroyEffect(portalEntitys[4]);
}

rule: "Portal/Positioner/createPortal"
Event.OngoingGlobal
if(
    teamLifes > 0 &&
    portalState == PortalState.Calculating
){
    WaitConditionConfirmed();
    define candidatePosition;
    for(gLoopIndex = 0; gLoopIndex < 10; gLoopIndex++){
        // select random player as base positoon
        define basePlayer =
            RandomValueInArray(
                FilteredArray(
                    AllLivingPlayers(Team.Team1),
                    HasSpawned(ArrayElement())
                )
            );
        // select random positon from player around
        define randomPositon = 
            basePlayer +
            // add random direction
            DirectionFromAngles(
                RandomReal(0, 360),
                RandomReal(90, -90)
            ) * 
            // add random distance
            RandomReal(50, 200);
        // get candidate postion of portal 
        candidatePosition = NearestWalkablePosition(randomPositon);
        // move candidate postion in the direction of player for avoiding map edge
        candidatePosition += DirectionTowards(candidatePosition, basePlayer) * RandomReal(5, 25);
        // convert to walkble position
        candidatePosition = NearestWalkablePosition(candidatePosition);
        if(
            // close candidate postion than random positon
            (
                DistanceBetween(basePlayer, randomPositon) >= 
                DistanceBetween(basePlayer, candidatePosition) + 10
            )
                &&
            // far postion from previous position
            (
                DistanceBetween(prevPortalPosition, candidatePosition) >= 50
            )
                &&
            // far postion from player
            (
                DistanceBetween(
                    ClosestPlayerTo(candidatePosition, Team.Team1),
                    candidatePosition
                ) >= 50
            )
        ){
            break;
        }
        Wait(0.01, WaitBehavior.AbortWhenFalse);
    }
    // confirm as portal position
    portalPosition = candidatePosition;
    // create portal, next check position
    portalState = PortalState.Checking;
    // fail safe
    Wait(6, WaitBehavior.AbortWhenFalse);
	dbgMsg("failsafe triggered of createPortal");
    LoopIfConditionIsTrue();
}

define positionCheckTime: 2.0;
globalvar define prevPortalPosition;

rule: "Portal/Positioner/positionChecking"
Event.OngoingGlobal
if(
    teamLifes > 0 &&
    portalState == PortalState.Checking
){
    // Waiting for Positioner/DetectXXX judgment described later
    Wait(positionCheckTime, WaitBehavior.AbortWhenFalse);
    // confirm portal position
    prevPortalPosition = portalPosition;
    portalState = PortalState.Set;
    // fail safe
    Wait(6, WaitBehavior.AbortWhenFalse);
    dbgMsg("failsafe triggered of positionChecking");
    LoopIfConditionIsTrue();
}

// TAG Portal/InvalidDetect/EnvironmentDamageCount ----------
define limitCount: 10;
globalvar define environmentDamageCount = 0;

rule: "Portal/InvalidDetect/EnvironmentDamage/resetCount"
Event.OngoingGlobal
if(
    !portalEnable &&
    environmentDamageCount > 0
){
    environmentDamageCount = 0;
}

rule: "Portal/InvalidDetect/EnvironmentDamage/countupByDamage"
Event.OnDamageTaken
Team.Team2
if(
    portalEnable &&
    ep == Attacker()
){
    environmentDamageCount += 1;
}

rule: "Portal/InvalidDetect/EnvironmentDamage/countupByDamage"
Event.OnDeath
Team.Team2
if(
    portalEnable &&
    ep == Attacker()
){
    environmentDamageCount += 5;
}

rule: "Portal/InvalidDetect/EnvironmentDamage/reduceCount"
Event.OngoingGlobal
if(
    portalEnable &&
    0 < environmentDamageCount
){
    WaitUpdateMediumCycle();
    environmentDamageCount --;
    LoopIfConditionIsTrue();
}

rule: "Portal/InvalidDetect/EnvironmentDamage/resetPortal"
Event.OngoingGlobal
if(
    portalEnable &&
    limitCount <= environmentDamageCount
){
    dbgMsg("reset Portal By Environment Damage Count");
    portalState = PortalState.Calculating;
}

// TAG Portal/InvalidDetect/NoContact ----------
define limitTime: 30;
globalvar define noContact;

rule: "Portal/InvalidDetect/NoContact/resetNoContact"
Event.OngoingGlobal
if(
    !portalEnable &&
    !noContact
){
    noContact = true;
}

rule: "Portal/InvalidDetect/NoContact/detectContact"
Event.OngoingGlobal
if(
    portalEnable &&
    noContact &&
    IsTrueForAny(
        AllPlayers(Team.Team1),
        IsInLineOfSight(
            ArrayElement(),
            ClosestPlayerTo(ArrayElement(), Team.Team2)))
){
    Wait(1, WaitBehavior.AbortWhenFalse);
    noContact = false;
}

rule: "Portal/InvalidDetect/NoContact/resetPortal"
Event.OngoingGlobal
if(
    portalEnable &&
    noContact
){
    Wait(limitTime, WaitBehavior.AbortWhenFalse);
    dbgMsg("reset Portal By No Countact");
    portalState = PortalState.Calculating;
}

// TAG Portal/Growing ----------
define maxPortalSize: 70;
define portalStableTime: 40;

rule: "Portal/Growing/startGrowingByPlayerFound"
Event.OngoingGlobal
if(
    portalState == PortalState.Set
){
    if(
        IsInLineOfSight(portalPosition,
            ClosestPlayerTo(portalPosition, Team.Team1),
            BarrierLOS.NoBarriersBlock)
    ){
        WaitConditionConfirmed();
        // Strat portal growing by player found
        portalState = PortalState.Growing;
    }
    else{
        WaitUpdateMediumCycle();
        LoopIfConditionIsTrue();
    }
}

rule: "Portal/Growing/startGrowingByTimeout"
Event.OngoingGlobal
if(portalState == PortalState.Set){
    // Start portal growing by search time limit out
    Wait(portalStableTime, WaitBehavior.AbortWhenFalse);  //wait time to start growing
    portalState = PortalState.Growing;
}

rule: "Portal/Growing/suspendGrowingByPlayerEntered"
Event.OngoingGlobal
if(
    portalState == PortalState.Growing &&
    IsTrueForAny(
        AllPlayers(Team.Team1), ArrayElement().isInsidePortal
    )
){
    // Suspend portal growing by player enter to portal
    WaitConditionConfirmed();
    portalState = PortalState.Suspended;
}

rule: "Portal/Growing/resumeGrowingByPlayerExited"
Event.OngoingGlobal
if(
    portalState == PortalState.Suspended &&
    !IsTrueForAny(
        AllPlayers(Team.Team1), ArrayElement().isInsidePortal
    )
){
    // Resume portal growing by player exit from portal
    WaitConditionConfirmed();
    portalState = PortalState.Growing;
}

// TAG Bot/EnemyType ----------
playervar define enemyType;
enum EnemyType{
    None,
    Minion,
    Elite,
    Boss
}

playervar define eachDealtDamageScale;
playervar define eachMaxSpawnInterval;
playervar define eachChargeUltInterval;

rule: "Bot/EnemyType/setEnemyType"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    HasSpawned()
){
    define slotNo = SlotOf();
    if(slotNo == 0){
        enemyType = EnemyType.Boss;
    }
    else if(slotNo == 1 || slotNo == 2){
        enemyType = EnemyType.Elite;
    }
    else{
        enemyType = EnemyType.Minion;
    }
}

rule: "Bot/EnemyType/setEnemyTypeStatus"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    enemyType != EnemyType.None
){
    WaitConditionConfirmed();
    if(enemyType == EnemyType.Minion){ 
        SetMaxHealth(EventPlayer(), 100 * 0.5);
        SetMoveSpeed(EventPlayer(), 100 * 1.10);
        SetGravity(EventPlayer(), 100 * 0.75);
        StartScalingPlayer(EventPlayer(), 0.8, false);
        StartModifyingHeroVoiceLines(EventPlayer(), 1.25, false);
        eachDealtDamageScale = 0.5;
        eachMaxSpawnInterval = 4;
        eachChargeUltInterval = 60;
    }
    else if(enemyType == EnemyType.Elite){
        SetMaxHealth(EventPlayer(), 100 * 2);
        SetMoveSpeed(EventPlayer(), 100 * 1);
        SetGravity(EventPlayer(), 100 * 1);
        StartScalingPlayer(EventPlayer(), 1.0, false);
        StartModifyingHeroVoiceLines(EventPlayer(), 1.0, false);
        eachDealtDamageScale = 1.0;
        eachMaxSpawnInterval = 8;
        eachChargeUltInterval = 15;
    }
    else if(enemyType == EnemyType.Boss){
        SetMaxHealth(EventPlayer(), 100 * 15);
        SetMoveSpeed(EventPlayer(), 100 * 0.75);
        SetGravity(EventPlayer(), 100 * 3);
        StartScalingPlayer(EventPlayer(), 1.5, false);
        StartModifyingHeroVoiceLines(EventPlayer(), 0.75, false);
        eachDealtDamageScale = 1.5;
        eachMaxSpawnInterval = 30;
        eachChargeUltInterval = 10;
    }    

    SetRespawnMaxTime(EventPlayer(), eachMaxSpawnInterval);
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    Heal(EventPlayer(), null, MaxValue());
}

// TAG Bot/Effect ----------
playervar define BotAppearanceEntitys;

rule: "Bot/Effect/showBotAppearance"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    enemyType != EnemyType.None &&
    IsAlive()
){
    BotAppearanceEntitys = [];
    if(enemyType == EnemyType.Minion){
        CreateEffect(AllPlayers(Team.All), Effect.Cloud, enemyColor,
            EventPlayer(), 1.0, EffectRev.VisibleToPositionAndRadius);
        BotAppearanceEntitys[0] = LastCreatedEntity();
        CreateInWorldText(
            AllPlayers(Team.All), "Minion", 
            EventPlayer(), 0.8, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.White, Spectators.DefaultVisibility);
        BotAppearanceEntitys[1] = LastTextID();
    }
    else if(enemyType == EnemyType.Elite){
        CreateEffect(AllPlayers(Team.All), Effect.Cloud, enemyColor,
            EventPlayer(), 2.0, EffectRev.VisibleToPositionAndRadius);
        BotAppearanceEntitys[0] = LastCreatedEntity();
        CreateInWorldText(
            AllPlayers(Team.All), "Elite", 
            EventPlayer(), 1.4, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.Yellow, Spectators.DefaultVisibility);
        BotAppearanceEntitys[1] = LastTextID();
    }
    else if(enemyType == EnemyType.Boss){
        CreateEffect(AllPlayers(Team.All), Effect.Cloud, enemyColor,
            EventPlayer(), 4.0, EffectRev.VisibleToPositionAndRadius);
        BotAppearanceEntitys[0] = LastCreatedEntity();
        CreateInWorldText(
            AllPlayers(Team.All), "Boss", 
            EventPlayer(), 2.0, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString,
            Color.Red, Spectators.DefaultVisibility);
        BotAppearanceEntitys[1] = LastTextID();
    }
}

rule: "Bot/Effect/hideBotAppearance"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    enemyType != EnemyType.None &&
    !IsAlive()
){
    DestroyEffect(BotAppearanceEntitys[0]);
    DestroyInWorldText(BotAppearanceEntitys[1]);
}

rule: "Bot/Effect/playDeadEffect"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    enemyType != EnemyType.None &&
    IsDead()
){
    // Play blast effect when Bot dead
    // It's easier to understand if you killed an Bot, and you'll feel better
    if(enemyType == EnemyType.Minion){
        PlayContinuousBlast(Color.Red, PositionOf(), 2, 1);
    }
    else if(enemyType == EnemyType.Elite){
        PlayContinuousBlast(Color.Red, PositionOf(), 3, 2);
    }
    else if(enemyType == EnemyType.Boss){
        PlayContinuousBlast(Color.Red, PositionOf(), 5, 3);
    }
}

// TAG Bot/SpawnInterval ----------
define deadEffectTime: 1.5;
playervar define confirmSpawnInterval;

rule: "Bot/SpawnInterval/update"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalState == PortalState.Growing
){
    // Shortens Bot spawn interval depending on portal size
    // Portals that have grown significantly over time will spawn more enemies.
    define spawnIntervalScale = (portalSize / maxPortalSize) * eachMaxSpawnInterval;
    confirmSpawnInterval = eachMaxSpawnInterval - spawnIntervalScale;

    confirmSpawnInterval -= (roundNo / 10);
    if(0 > confirmSpawnInterval){
        confirmSpawnInterval = 0;
    }
    
    // set +1 interval for show dead effect
    SetRespawnMaxTime(EventPlayer(), confirmSpawnInterval + deadEffectTime);

    WaitUpdateMediumCycle();
    LoopIf(portalSize < maxPortalSize);
}

// TAG Bot/Teleport ----------
playervar define teleportPosition;
define teleportAreaSiez: 10;
define teleportPositionClosestPlayer: ClosestPlayerTo(teleportPosition, Team.Team1);
define portalPositionClosestPlayer: ClosestPlayerTo(portalPosition, Team.Team1);

void SetTeleportPositionToPlayerFront()"SetTeleportPositionToPlayerFront"{
    // set teleport position by blind spot from player
    // find place that will be a blind spot up to 10 times
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        teleportPosition =
            NearestWalkablePosition(
                PositionOf(portalPositionClosestPlayer)
                    + 
                (
                    DirectionTowards(
                        portalPositionClosestPlayer,
                        portalPosition
                    )
                        *
                    (DistanceBetween(portalPosition, portalPositionClosestPlayer) * 0.5)
                )
                    +
                RandomPosition(teleportAreaSiez, teleportAreaSiez, teleportAreaSiez)
            );

        if(
            // Not too close to player
            DistanceBetween(
                teleportPositionClosestPlayer, teleportPosition)
            > 5
                &&
            // has not line
            !IsInLineOfSight(ep, teleportPositionClosestPlayer)
        ){
            break;
        }
    }
}

void SetTeleportPositionToCamper()"SetTeleportPositionToCamper"{
    // set teleport position by blind spot from player
    // find place that will be a blind spot up to 10 times
    for(pLoopIndex = 0; pLoopIndex < 10; pLoopIndex++){
        teleportPosition = 
            PositionOf(portalPositionClosestPlayer)
                +
            RandomPosition(3, 0, 3);
                
        if(
            DistanceBetween(    // Not too close to player
                teleportPositionClosestPlayer, teleportPosition)
            > 1
                &&
            IsInLineOfSight(    // Has line
                teleportPositionClosestPlayer, teleportPosition, BarrierLOS.NoBarriersBlock)
        ){
            break;
        }
    }
}

void PlayTeleportEffect()"PlayTeleportEffect"{
    if(enemyType == EnemyType.Minion){
        PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, enemyColor, EventPlayer(), 2);
    }
    else if(enemyType == EnemyType.Elite){
        PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, enemyColor, EventPlayer(), 3);
    }
    else if(enemyType == EnemyType.Boss){
        PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, enemyColor, EventPlayer(), 5);
    }
    // Play blast effect when Bot teleport
    
    // show effect at root position
    WaitPlayEffect();
}

rule: "Bot/Teleport/teleportToSpawnRoomByPortalDisabled"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    HasSpawned() &&
    IsAlive() &&
    !portalEnable
){
    // Teleport Bot to spawn room when portal disable
    // wait show dead effect when portal closing
    Wait(deadEffectTime, WaitBehavior.AbortWhenFalse);   
    // Teleport to spawn room
    Respawn(AllPlayers(Team.Team2));
    // set root
    SetStatus(ep, null, Status.Rooted, MaxValue());
}

rule: "Bot/Teleport/teleportToPortalByPortalEnabled"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    HasSpawned() &&
    IsAlive() &&
    portalEnable
){
    // Teleport Bot to portal when spawn
    // clear root
    ClearStatus(ep, Status.Rooted);
    // set teleport position
    SetTeleportPositionToPlayerFront();
    // show pre teleport effect
    PlayTeleportEffect();
    // Teleport
    Teleport(EventPlayer(), teleportPosition);
    // show teleport effect
    PlayTeleportEffect();
}

rule: "Bot/Teleport/teleportToPortalBySpawn"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalEnable &&
    IsInSpawnRoom()
){
    // Teleport Bot to player front

    // set teleport position
    SetTeleportPositionToPlayerFront();
    // Teleport
    Teleport(EventPlayer(), teleportPosition);
    // show teleport effect
    PlayTeleportEffect();
}

rule: "Bot/Teleport/teleportToPortalByPlayerEntered"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    portalState == PortalState.Suspended &&
    IsAlive(EventPlayer())
){
    WaitConditionConfirmed();
    // not half health
    if(0.5 < NormalizedHealth()){
        // set teleport position
        SetTeleportPositionToPlayerFront();
        // show pre teleport effect
        PlayTeleportEffect();
        // Teleport
        Teleport(EventPlayer(), teleportPosition);
        // show teleport effect
        PlayTeleportEffect();
    }
}

rule: "Bot/Teleport/teleportToPortalByPlayerNotFound"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    IsAlive() &&
    !IsInLineOfSight(EventPlayer(),
            ClosestPlayerTo(portalPosition, Team.Team1),
            BarrierLOS.NoBarriersBlock)
){
    // Teleport an Bot to camping player
    Wait(10 - (roundNo / 10), WaitBehavior.AbortWhenFalse);
    // not half health
    if(0.5 < NormalizedHealth()){
        // set teleport position
        if(portalState == PortalState.Suspended)
            SetTeleportPositionToCamper();
        else
            SetTeleportPositionToPlayerFront();
        // show pre teleport effect
        PlayTeleportEffect();
        // Teleport
        Teleport(EventPlayer(), teleportPosition);
        // show pre teleport effect
        PlayTeleportEffect();
    }
    LoopIfConditionIsTrue();
}

// TAG Bot/Ability ----------
disabled rule: "Bot/Ability/chargeAbility"
Event.OngoingPlayer
if(
    HasSpawned()
){
    Wait(1, WaitBehavior.AbortWhenFalse);

    SetAbilityCooldown(ep, Button.Jump, 0);
    SetAbilityCooldown(ep, Button.Crouch, 0);
    SetAbilityCooldown(ep, Button.Ability1, 0);
    SetAbilityCooldown(ep, Button.Ability2, 0);
    SetAbilityCooldown(ep, Button.PrimaryFire, 0);
    SetAbilityCooldown(ep, Button.SecondaryFire, 0);
    SetUltimateCharge (ep, 100);
    LoopIfConditionIsTrue();
}

// TAG Bot/Ultimate ----------
rule: "Bot/Ultimate/chargeUlt"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    HasSpawned() &&
    enemyType != EnemyType.None &&
    !IsUsingUltimate()
){
    SetUltimateCharge(EventPlayer(), UltimateChargePercent() + (100 / eachChargeUltInterval));
    WaitUpdateMediumCycle();
    LoopIfConditionIsTrue();
}

// TAG Bot/ReceivedDamage ----------
globalvar define confirmReceiveDamage;

rule: "Bot/ReceivedDamage/updateByBalance //for game balance, increase by missing players count"
Event.OngoingGlobal
{
    // If don't enough players, adjust Bot received damage rate to make the game fair
    // Multiply damage rate
    confirmReceiveDamage = 100;
    // Apply balance multiplier
    confirmReceiveDamage *= ConvertToBalancedValue(0.7, Team.Team1);
    SetDamageReceived(AllPlayers(Team.Team2), confirmReceiveDamage);

    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}

// TAG Bot/DealtDamage ----------
playervar define confirmDealDamage;

rule: "Bot/DealtDamage/update"
Event.OngoingPlayer
Team.Team2
Player.All
if(
    HasSpawned()
){
    // If don't enough players, adjust Bot dealt damage rate to make the game fair
    // And the round progresses, the Bot deal damage increases and becomes more difficult
    // Add damage rate according to the round progress
    confirmDealDamage = WorkshopSettingReal("Bot Settings", "Initial Deal Damage", 25, 0, 1000, 1);
    confirmDealDamage += roundNo * WorkshopSettingReal("Bot Settings", "Increase Deal Damage Per Round Progress", 1.5, 0, 1000, 2);
    confirmDealDamage *= eachDealtDamageScale;
    // Apply balance multiplier
    confirmDealDamage /= ConvertToBalancedValue(0.7, Team.Team1);
    SetDamageDealt(EventPlayer(), confirmDealDamage);

    WaitUpdateLongCycle();
    LoopIfConditionIsTrue();
}



rule: "Bot/SpawnInterval/respawnBySucide"
Event.OnDeath
Team.Team2
Player.All
if(
    Attacker() == EventPlayer()
){
    Wait(1, WaitBehavior.AbortWhenFalse);
    Respawn();
}

// TAG Debug ----------
globalvar define debugMode;

enum DebugMode{
    Non,
    OverloadOnly,
    ShowParam,
    WithRecord
}

rule: "Debug/changeDebugMode"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Jump) 
){
    // change debug mode
    WaitLongPressConfirm();
    if(debugMode == DebugMode.Non){
        debugMode = DebugMode.OverloadOnly;
    }
    else if(debugMode == DebugMode.OverloadOnly){
        debugMode = DebugMode.ShowParam;
    }
    else if(debugMode == DebugMode.ShowParam){
        debugMode = DebugMode.WithRecord;
    }
    else if(debugMode == DebugMode.WithRecord){
        debugMode = DebugMode.Non;
    }

    if(debugMode == DebugMode.Non){
        DisableInspectorRecording();
        HideDebugHud();
    }
    else if(debugMode == DebugMode.OverloadOnly){
        DisableInspectorRecording();
        HideDebugHud();
        ShowDebugHud();
    }
    else if(debugMode == DebugMode.ShowParam){
        DisableInspectorRecording();
        HideDebugHud();
        ShowDebugHud();
    }
    else if(debugMode == DebugMode.WithRecord){
        EnableInspectorRecording();
        HideDebugHud();
        ShowDebugHud();
    }
}

define End(): CountOf(debugHudEntitys);
globalvar define debugHudEntitys;

// show debug icon and hud
void ShowDebugHud()"ShowDebugHud"{

    if(
        debugMode == DebugMode.ShowParam ||
        debugMode == DebugMode.WithRecord
    ){
        if(
            debugMode == DebugMode.WithRecord
        ){
            CreateHudText(HostPlayer(),
                null,
                null,
                "● is Recording",
                Location.Left, -1,
                Color.White, Color.White, Color.Red,
                HudTextRev.VisibleToAndString, Spectators.VisibleNever);
            debugHudEntitys[End()] = LastTextID();
        }

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "revive Timeout Count", reviveTimeoutCount>,
            null,
            Location.Left, -1,
            Color.White, Color.Blue, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "portal State", portalState>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "portal Size", portalSize>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "portal Position", portalPosition>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "distance to protal", DistanceBetween(EventPlayer(), portalPosition)>,
            null,
            Location.Left, -1,
            Color.White, enemyColor, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "environment Damage Count", environmentDamageCount>,
            null,
            Location.Left, -1,
            Color.White, Color.White, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "no Contact", noContact>,
            null,
            Location.Left, -1,
            Color.White, Color.White, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "Server Load", ServerLoad()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "Server Load Average", ServerLoadAverage()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();

        CreateHudText(HostPlayer(),
            null,
            <"<0> <1>", "Server Load Peak", ServerLoadPeak()>,
            null,
            Location.Left, -1,
            Color.White, Color.Orange, Color.White,
            HudTextRev.VisibleToAndString, Spectators.VisibleNever);
        debugHudEntitys[End()] = LastTextID();
    }

    CreateHudText(HostPlayer(),
        null,
        <"<0> <1>", "over load during", overloadDuring>,
        null,
        Location.Left, -1,
        Color.White, Color.Orange, Color.White,
        HudTextRev.VisibleToAndString, Spectators.VisibleNever);
    debugHudEntitys[End()] = LastTextID();
}

// Hide debug icon and hud
void HideDebugHud()"HideDebugHud"{
    for(gLoopIndex = 0; gLoopIndex < CountOf(debugHudEntitys); gLoopIndex ++){
        DestroyHudText(debugHudEntitys[gLoopIndex]);
    }
}

rule: "Debug/increaseTeamLifes"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability2)
){
    // Increase TeamLifes
    WaitLongPressConfirm();
    teamLifes += 1;
    LoopIfConditionIsTrue();
}

rule: "Debug/increaseRoundNo"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Ability1)
){
    // Increase RoundNo
    WaitLongPressConfirm();
    roundNo += 1;
    LoopIfConditionIsTrue();
}

rule: "Debug/resetPortal // reset portal position by random"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    !IsButtonHeld(EventPlayer(), Button.Reload) &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    // Recalculate portal
    WaitLongPressConfirm();
    portalState = PortalState.Idle;
    WaitChangeState();  // Wait for the changed status to be processed first
    portalState = PortalState.Calculating;
}

globalvar define debugAimingPosition;

rule: "Debug/setPortalPositionOnAimCenter // reset portal position by aim center"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Reload) &&
    !IsButtonHeld(EventPlayer(), Button.Crouch)
){
    // Set portal position to aim center
    WaitLongPressConfirm();
    portalState = PortalState.Idle;
    debugAimingPosition = AimingPosition();
    WaitChangeState();  // Wait for the changed status to be processed first
    portalState = PortalState.Calculating;
    WaitUntil(portalState != PortalState.Calculating, 5);
    portalPosition = debugAimingPosition;
}

rule: "Debug/setPortalMaxSize // reset portal position by aim center"
Event.OngoingPlayer
Team.All
Player.All
if(
    HostPlayer() == EventPlayer() &&
    IsButtonHeld(EventPlayer(), Button.Interact) &&
    IsButtonHeld(EventPlayer(), Button.Reload) &&
    IsButtonHeld(EventPlayer(), Button.Crouch)
){
    // Set portal position to aim center
    WaitLongPressConfirm();
    portalSize = maxPortalSize;
}